<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software Design | Mark Daggett's Blog]]></title>
  <link href="http://heavysixer.github.com/blog/categories/software-design/atom.xml" rel="self"/>
  <link href="http://heavysixer.github.com/"/>
  <updated>2013-12-02T07:29:38-06:00</updated>
  <id>http://heavysixer.github.com/</id>
  <author>
    <name><![CDATA[Mark Daggett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Minimally Viable Party]]></title>
    <link href="http://heavysixer.github.com/blog/2012/03/25/the-minimally-viable-party/"/>
    <updated>2012-03-25T15:50:00-05:00</updated>
    <id>http://heavysixer.github.com/blog/2012/03/25/the-minimally-viable-party</id>
    <content type="html"><![CDATA[<p>Garry and I are planning our next big project together. In the spirit of agile development and with the reality of limited funds we are ruthlessly scoping our efforts around a minimal feature set. We want to develop just enough of the product to see if we have a hit. Typically, this process is described as developing the minimum viable product (MVP).</p>

<p>The MVP approach targets the hardcore vocal minority that understand your offering, and are likely to give you helpful insights on how to improve it. With this in mind we began to list our potential features and aggressively cut anything that wasn?t essential.</p>

<p>We tried a variety of approaches to identify our MVP. Which included:</p>

<ul>
<li>Sorting features in order of complexity, and identifying those with serial dependencies</li>
<li>Selecting only those features that touch the revenue line (a topic for another post)</li>
<li>Determining those features which could give us a competitive advantage over other similar products.</li>
</ul>


<p>These thought experiments were helpful, but the focus felt very myopic, and more about cutting than pruning; like shaping a bonsai tree blindfolded. However, while mowing the lawn (where I do much of my good thinking), I came up with a new approach: ?The Minimum Viable Party?.</p>

<p>A party seemed like a perfect metaphor for these reasons:</p>

<ul>
<li>The goal of product at this stage, is to meet people, show them a good time and give them a complete experience they can give feedback on.</li>
<li>Parties are events with a specific beginnings and ends. Being the host narrows your responsibilities to just throwing a great party. If you find yourself needing to first build the venue, or starting a catering company at the same time then <em>you are doing it wrong</em>.</li>
<li>Parties are fun, (even Goth Emo parties); they are about doing something you love, with others looking for the same thing.</li>
<li>A complete party is more than just good food. There are many aspects that can be considered including venue, theme, duration, etc.</li>
<li>If it all goes horribly wrong you can recover. You just clean up the mess, pull the lawn chairs off the roof, get a tow company to dredge your car from the neighbors pool and go on with your life.</li>
<li>By breaking a party into smaller components you can map them onto the MVP. Now, I am not for a minute claiming that there is an absolute one-to-one mapping between party to product. However, the metaphor did allow me to consider the attributes of my product in a more objective and holistic way. For example, a decision on whether to spend money on party invitations could be construed as a marketing spend on promoting our product.</li>
</ul>


<h2>Planning a Minimal Viable Party</h2>

<p>Here are the rules for the Minimal Viable Party thought experiment:</p>

<ul>
<li>You are planning a party for people you do not know.</li>
<li>You have one week to plan and execute your party.</li>
<li>Without specifying a specific amount you should assume that funds are very limited, which should force you to make decisions on how and where to spend your money.</li>
<li>The party is not a catered meaning that much if not all the work should be done personally.</li>
</ul>


<p>These rules lead me to a series of questions to consider which i?ve detailed below:</p>

<p><strong>Q.</strong> How many guests should I invite?</p>

<p><strong>A.</strong> You should invite the number of guests you can host comfortably. Everyone wants to feel special at the party, meaning you should know your limits before the inviting others.</p>

<p><strong>Insight:</strong> Many people focus on the hockey stick style growth from the outset, that is a result of a good product not the goal itself. At this stage the goal is to get to know the users, and the only way to do that is to ensure there is enough of you to go around.</p>

<p><strong>Q.</strong> How do I entertain people I have never met?</p>

<p><strong>A.</strong> Plan a party around the type of guest you?d want to see again. If you are a geek at heart then have your party on the holodeck and don?t mind the haters.</p>

<p><strong>Insight:</strong> You can?t please everyone but it?s important that you understand who you?d like as customers and friends. Ensure that your product gives them a memorable and enjoyable experience.</p>

<p><strong>Q.</strong> What kind of food should I cook?</p>

<p><strong>A.</strong> Be honest about your own cooking skills, anything you don?t do well you should either eliminate or buy (even if this means you have to buy all the food).</p>

<p><strong>Insight:</strong> No one wants to eat bad food, a strangers will not give you an ?A? for effort when eating your half-cooked hamburgers. The same is true for a poorly executed product. I continually have to fight the urge to be an <em>everything expert</em>. While striving to learn new things is a positive, not knowing (or ignoring) your weaknesses limits you from being effective under a deadline.</p>

<p><strong>Q.</strong> How many courses should I prepare?</p>

<p><strong>A.</strong> What would your ideal guest expect? Not everyone expets (or even wants) a five course meal that takes hours to eat. What they will want is for it to feel complete, and that differs from person to person.</p>

<p><strong>Insight:</strong> The expression ?soup to nuts? is often used when describing a project completed from beginning to end. It alludes to a complete meal that included appetizers (soup), nuts (dessert) and everything in between. If you view your features through the lens of completeness it should help you determine if a feature is needed now or can wait.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transactions In Rails]]></title>
    <link href="http://heavysixer.github.com/blog/2011/12/01/transactions-in-rails/"/>
    <updated>2011-12-01T11:39:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2011/12/01/transactions-in-rails</id>
    <content type="html"><![CDATA[<p>Recently I was tasked to write tests for the transactions of an existing application. This gave me the opportunity to learn more about the codebase, while also improving the test coverage. Generally, most of the transaction code looked fine. However, there were some instances where transactions were used incorrectly or inefficiently. I assumed this is just because of a misunderstanding of how transactions work within Rails, and so I thought i?d take some time and give an overview of the common errors I found and some best practices for using transactions in Rails.</p>

<p>Let me also state at the beginning that most of these examples are not my own, they come directly from the Rails source, which give example usages of applying transactions RTFM FTW.</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html">http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html</a></p>

<h3>Reasons for transactions</h3>

<p>We use transactions as a protective wrapper around SQL statements to ensure changes to the database only occur when all actions succeed together. Transaction help the developer enforce data integrity within the application. The canonical example of transactions is the banking method where funds are withdrawn from one account and deposited into the next. If either of these steps fail, then the entire process should be reset. This example can be described in code this way:</p>

<p><code>ruby
ActiveRecord::Base.transaction do
  david.withdrawal(100)
  mary.deposit(100)
end
</code></p>

<p>In Rails transactions are available as class and instance methods for all ActiveRecord models. This means either of these approaches are equally valid:</p>

<p>``` ruby
Client.transaction do
  @client.users.create!
  @user.clients(true).first.destroy!
  Product.first.destroy!
end</p>

<p>@client.transaction do
  @client.users.create!
  @user.clients(true).first.destroy!
  Product.first.destroy!
end
```</p>

<p>You may also notice that there are several different model classes referenced in these transactions. It is perfectly fine to mix model types inside a single transaction block. This is because the transaction is bound to the database connection not the model instance.
As a rule, transactions are only needed when changes to multiple records must succeed as a single unit. Additionally, Rails already wraps the #save and #destroy methods in a transaction, therefore a transaction is never needed when updating a single record.</p>

<h3>Transaction Rollback Triggers</h3>

<p>Transactions reset the state of records through a process called a rollback. In Rails, rollbacks are only triggered by an exception. This is a crucial point to understand; I saw several transaction blocks that would never rollback because the containing code could not throw an exception. Here I have slightly modified our banking example from before:</p>

<p><code>ruby
ActiveRecord::Base.transaction do
  david.update_attribute(:amount, david.amount -100)
  mary.update_attribute(:amount, 100)
end
</code></p>

<p>In Rails <em>#update_attribute</em> is designed not to throw an exception when an update fails. It returns false, and for this reason you should ensure that the methods used throw an exception upon failure. A better way to write the previous example would be:</p>

<p><code>ruby
ActiveRecord::Base.transaction do
  david.update_attributes!(:amount =&gt; -100)
  mary.update_attributes!(:amount =&gt; 100)
end
</code></p>

<p>Note: The bang modifier (!) is a rails convention for a method which will throw an exception upon failure.</p>

<p>I also saw examples in the code where records were found inside of transactions using magic finders <em>#find_by</em><some attribute><em>. By design magic finders will return nil when no record is returned. This is in contrast to the normal </em>#find_ method which throws an <strong>ActiveRecord::RecordNotFound</strong> exception. Consider this example:</p>

<p>``` ruby
ActiveRecord::Base.transaction do
  david = User.find_by_name("david")
  if(david.id != john.id)</p>

<pre><code>john.update_attributes!(:amount =&gt; -100) 
mary.update_attributes!(:amount =&gt; 100)
</code></pre>

<p>  end
end
```</p>

<p>Do you see the logic error? The nil object will have an id attribute and it will mask the fact that the desired record was not returned. While this doesn?t cause an error in the transaction it will still lead to a loss of data integrity, because the application is updating where it shouldn?t. Remember a transaction defines a block of code which must succeed as an atomic unit. This means we should raise an exception when a logical dependency like this is not met. Here is how the code should be written:</p>

<p>``` ruby
ActiveRecord::Base.transaction do
  david = User.find_by_name("david")
  raise ActiveRecord::RecordNotFound if david.nil?
  if(david.id != john.id)</p>

<pre><code>john.update_attributes!(:amount =&gt; -100) 
mary.update_attributes!(:amount =&gt; 100)
</code></pre>

<p>  end
end
```</p>

<p>When the exception occurs it will be raised outside of the transaction block after the rollback has completed. Your application code must be ready to catch this exception as it bubbles up through the application stack.</p>

<p>It is also possible to invalidate a transaction without raising an exception that will propagate upwards by using <strong>ActiveRecord::Rollback</strong>. This special exception allows you to invalidate a transaction and reset the database records without needing to rescue elsewhere in your code.</p>

<h3>When To Use Nested Transactions</h3>

<p>One of the common mistakes I saw in the codebase is the misuse or overuse of nested transactions. When you nest a transaction inside another transaction this has the effect of making the child transaction a part of the parent. This can have surprising results, take this example from the Rails API documentation:</p>

<p>``` ruby
User.transaction do
  User.create(:username => 'Kotori')
  User.transaction do</p>

<pre><code>User.create(:username =&gt; 'Nemu')
raise ActiveRecord::Rollback
</code></pre>

<p>  end
end
```</p>

<p>As mentioned previously <strong>ActiveRecord::Rollback</strong> does not propagate outside of the containing transaction block and so the parent transaction does not receive the exception nested inside the child. Since the contents of the child transaction are lumped into the parent transaction both records are created! I find it easier to think of nested transactions like the child who dumps its contents into the parent container, leaving the child transaction empty.</p>

<p>To ensure a rollback is received by the parent transaction you must add the <em>:requires_new => true</em>. option to the child transaction. Again using the example from Rails source you would trigger a parent?s Rollback like this:</p>

<p>``` ruby
User.transaction do
  User.create(:username => 'Kotori')
  User.transaction(:requires_new => true) do</p>

<pre><code>User.create(:username =&gt; 'Nemu')
raise ActiveRecord::Rollback
</code></pre>

<p>  end
end
```</p>

<p>A transaction only acts upon the current database connection. If your application writes to multiple databases at once you will need to wrap the method inside a nested transaction. For example:</p>

<p>``` ruby
Client.transaction do
  Product.transaction do</p>

<pre><code>product.buy(@quantity)
client.update_attributes!(:sales_count =&gt; @sales_count + 1)
</code></pre>

<p>  end
end
```</p>

<h3>Callback around Transactions</h3>

<p>As mentioned previously <em>#save</em> and <em>#destroy</em> are wrapped inside a transaction. This means that callbacks like <em>#after_save</em> is still part of the active transaction which might still be rolled back! Therefore if you want code to execute that is guaranteed to execute outside of the transaction use one of the transaction specific callbacks like <em>#after_commit</em> or <em>#after_rollback</em>.</p>

<h3>Transaction Gotchas</h3>

<p>Do not catch an <strong>ActiveRecord::RecordInvalid</strong> exception inside a transaction because the this exception invalidates the transaction on some databases like Postgres. Once the transaction has been invalidated you must restart it from the beginning for it to work correctly.</p>

<p>When testing rollbacks or transaction related callbacks that happen after rollback you will want to turn off transactional_fixtures which are on by default in most test frameworks.</p>

<h3>Common Anti-patterns To Avoid</h3>

<ol>
<li>Using a transaction when only a single record is updated</li>
<li>Needlessly nesting transactions</li>
<li>Transactions that contain code, which won?t cause a rollback</li>
<li>Use of transactions in a controller</li>
</ol>

]]></content>
  </entry>
  
</feed>
