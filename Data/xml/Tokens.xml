<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
 <Token>
  <TokenIdentifier>
   <Name>glib_major_version</Name>
   <Type>data</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Version-Information.html</Path>
  <Anchor>glib-major-version</Anchor>
  <NodeRef refid="10"/>
  <Abstract type="html">The major version number of the GLib library. 
(e.g. in GLib version 1.2.5 this is 1.)</Abstract>
  <Declaration type="html">&lt;pre&gt;extern const guint glib_major_version;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>glib_minor_version</Name>
   <Type>data</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Version-Information.html</Path>
  <Anchor>glib-minor-version</Anchor>
  <NodeRef refid="10"/>
  <Abstract type="html">The minor version number of the GLib library.
(e.g. in GLib version 1.2.5 this is 2.)</Abstract>
  <Declaration type="html">&lt;pre&gt;extern const guint glib_minor_version;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>glib_micro_version</Name>
   <Type>data</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Version-Information.html</Path>
  <Anchor>glib-micro-version</Anchor>
  <NodeRef refid="10"/>
  <Abstract type="html">The micro version number of the GLib library.
(e.g. in GLib version 1.2.5 this is 5.)</Abstract>
  <Declaration type="html">&lt;pre&gt;extern const guint glib_micro_version;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>glib_binary_age</Name>
   <Type>data</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Version-Information.html</Path>
  <Anchor>glib-binary-age</Anchor>
  <NodeRef refid="10"/>
  <Abstract type="html">This is the binary age passed to &lt;span class=&quot;application&quot;&gt;libtool&lt;/span&gt;. If 
&lt;span class=&quot;application&quot;&gt;libtool&lt;/span&gt; means nothing to you, don't worry 
about it. ;-)</Abstract>
  <Declaration type="html">&lt;pre&gt;extern const guint glib_binary_age;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>glib_interface_age</Name>
   <Type>data</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Version-Information.html</Path>
  <Anchor>glib-interface-age</Anchor>
  <NodeRef refid="10"/>
  <Abstract type="html">This is the interface age passed to &lt;span class=&quot;application&quot;&gt;libtool&lt;/span&gt;. If 
&lt;span class=&quot;application&quot;&gt;libtool&lt;/span&gt; means nothing to you, don't worry 
about it. ;-)</Abstract>
  <Declaration type="html">&lt;pre&gt;extern const guint glib_interface_age;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>glib_check_version</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Version-Information.html</Path>
  <Anchor>glib-check-version</Anchor>
  <NodeRef refid="10"/>
  <Abstract type="html">Checks that the GLib library in use is compatible with the
given version. Generally you would pass in the constants
&lt;span class=&quot;type&quot;&gt;GLIB_MAJOR_VERSION&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;GLIB_MINOR_VERSION&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;GLIB_MICRO_VERSION&lt;/span&gt;
as the three arguments to this function; that produces
a check that the library in use is compatible with
the version of GLib the application or module was compiled
against.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* glib_check_version (
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; required_major,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; required_minor,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; required_micro);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GLIB_CHECK_VERSION</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Version-Information.html</Path>
  <Anchor>GLIB-CHECK-VERSION:CAPS</Anchor>
  <NodeRef refid="10"/>
  <Abstract type="html">Checks the version of the GLib library.
Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the version of the GLib header files is the same 
as or newer than the passed-in version.
</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GLIB_CHECK_VERSION(major,minor,micro)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gboolean</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>gboolean</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">A standard &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; type.
Variables of this type should only contain the value &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef gint gboolean;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gpointer</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>gpointer</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">An untyped pointer.
&lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gpointer&quot; title=&quot;gpointer&quot;&gt;&lt;span class=&quot;type&quot;&gt;gpointer&lt;/span&gt;&lt;/a&gt; looks better and is easier to use than &lt;span class=&quot;type&quot;&gt;void*&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef void* gpointer;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gconstpointer</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>gconstpointer</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">An untyped pointer to constant data.
The data pointed to should not be changed.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef const void *gconstpointer;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gchar</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>gchar</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">Corresponds to the standard C &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; type.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef char gchar;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>guchar</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>guchar</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">Corresponds to the standard C &lt;span class=&quot;type&quot;&gt;unsigned char&lt;/span&gt; type.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef unsigned char guchar;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gint</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>gint</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">Corresponds to the standard C &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; type.
Values of this type can range from &lt;span class=&quot;type&quot;&gt;G_MININT&lt;/span&gt; to &lt;span class=&quot;type&quot;&gt;G_MAXINT&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef int gint;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>guint</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>guint</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">Corresponds to the standard C &lt;span class=&quot;type&quot;&gt;unsigned int&lt;/span&gt; type.
Values of this type can range from 0 to &lt;span class=&quot;type&quot;&gt;G_MAXUINT&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef unsigned int guint;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gshort</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>gshort</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">Corresponds to the standard C &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; type.
Values of this type can range from &lt;span class=&quot;type&quot;&gt;G_MINSHORT&lt;/span&gt; to &lt;span class=&quot;type&quot;&gt;G_MAXSHORT&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef short gshort;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gushort</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>gushort</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">Corresponds to the standard C &lt;span class=&quot;type&quot;&gt;unsigned short&lt;/span&gt; type.
Values of this type can range from 0 to &lt;span class=&quot;type&quot;&gt;G_MAXUSHORT&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef unsigned short gushort;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>glong</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>glong</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">Corresponds to the standard C &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; type.
Values of this type can range from &lt;span class=&quot;type&quot;&gt;G_MINLONG&lt;/span&gt; to &lt;span class=&quot;type&quot;&gt;G_MAXLONG&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef long glong;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gulong</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>gulong</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">Corresponds to the standard C &lt;span class=&quot;type&quot;&gt;unsigned long&lt;/span&gt; type.
Values of this type can range from 0 to &lt;span class=&quot;type&quot;&gt;G_MAXULONG&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef unsigned long gulong;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>guint64</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>guint64</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">An unsigned integer guaranteed to be 64 bits on all platforms.
Values of this type can range from 0 to 18,446,744,073,709,551,615.</Abstract>
  <Declaration type="html">&lt;pre&gt;GLIB_VAR guint64 (
    );&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gfloat</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>gfloat</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">Corresponds to the standard C &lt;span class=&quot;type&quot;&gt;float&lt;/span&gt; type.
Values of this type can range from -&lt;span class=&quot;type&quot;&gt;G_MAXFLOAT&lt;/span&gt; to &lt;span class=&quot;type&quot;&gt;G_MAXFLOAT&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef float gfloat;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gdouble</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Basic-Types.html</Path>
  <Anchor>gdouble</Anchor>
  <NodeRef refid="11"/>
  <Abstract type="html">Corresponds to the standard C &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; type.
Values of this type can range from -&lt;span class=&quot;type&quot;&gt;G_MAXDOUBLE&lt;/span&gt; to &lt;span class=&quot;type&quot;&gt;G_MAXDOUBLE&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef double gdouble;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MININT8</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MININT8:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The minimum value which can be held in a &lt;span class=&quot;type&quot;&gt;gint8&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MININT8 ((gint8) 0x80)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MAXINT8</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MAXINT8:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The maximum value which can be held in a &lt;span class=&quot;type&quot;&gt;gint8&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MAXINT8 ((gint8) 0x7f)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MAXUINT8</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MAXUINT8:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The maximum value which can be held in a &lt;span class=&quot;type&quot;&gt;guint8&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MAXUINT8 ((guint8) 0xff)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MININT16</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MININT16:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The minimum value which can be held in a &lt;span class=&quot;type&quot;&gt;gint16&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MININT16 ((gint16) 0x8000)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MAXINT16</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MAXINT16:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The maximum value which can be held in a &lt;span class=&quot;type&quot;&gt;gint16&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MAXINT16 ((gint16) 0x7fff)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MAXUINT16</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MAXUINT16:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The maximum value which can be held in a &lt;span class=&quot;type&quot;&gt;guint16&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MAXUINT16 ((guint16) 0xffff)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MININT32</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MININT32:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The minimum value which can be held in a &lt;span class=&quot;type&quot;&gt;gint32&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MININT32 ((gint32) 0x80000000)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MAXINT32</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MAXINT32:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The maximum value which can be held in a &lt;span class=&quot;type&quot;&gt;gint32&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MAXINT32 ((gint32) 0x7fffffff)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MAXUINT32</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MAXUINT32:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The maximum value which can be held in a &lt;span class=&quot;type&quot;&gt;guint32&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MAXUINT32 ((guint32) 0xffffffff)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MININT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MININT64:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The minimum value which can be held in a &lt;span class=&quot;type&quot;&gt;gint64&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MININT64 ((gint64) G_GINT64_CONSTANT(0x8000000000000000))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MAXINT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MAXINT64:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The maximum value which can be held in a &lt;span class=&quot;type&quot;&gt;gint64&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MAXINT64 G_GINT64_CONSTANT(0x7fffffffffffffff)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MAXUINT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Limits-of-Basic-Types.html</Path>
  <Anchor>G-MAXUINT64:CAPS</Anchor>
  <NodeRef refid="12"/>
  <Abstract type="html">The maximum value which can be held in a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#guint64&quot; title=&quot;guint64 ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;guint64&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MAXUINT64 G_GINT64_CONSTANT(0xffffffffffffffffU)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OS_WIN32</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-OS-WIN32:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">This macro is defined only on Windows. So you can bracket
Windows-specific code in &quot;#ifdef G_OS_WIN32&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OS_WIN32&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OS_BEOS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-OS-BEOS:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">This macro is defined only on BeOS. So you can bracket
BeOS-specific code in &quot;#ifdef G_OS_BEOS&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OS_BEOS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OS_UNIX</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-OS-UNIX:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">This macro is defined only on UNIX. So you can bracket
UNIX-specific code in &quot;#ifdef G_OS_UNIX&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OS_UNIX&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DIR_SEPARATOR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-DIR-SEPARATOR:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">The directory separator character.
This is '/' on UNIX machines and '\' under Windows.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DIR_SEPARATOR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DIR_SEPARATOR_S</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-DIR-SEPARATOR-S:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">The directory separator as a string.
This is &quot;/&quot; on UNIX machines and &quot;\&quot; under Windows.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DIR_SEPARATOR_S&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_DIR_SEPARATOR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-IS-DIR-SEPARATOR:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Checks whether a character is a directory 
separator. It returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; for '/' on UNIX
machines and for '\' or '/' under Windows.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_DIR_SEPARATOR(c)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SEARCHPATH_SEPARATOR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-SEARCHPATH-SEPARATOR:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">The search path separator character.
This is ':' on UNIX machines and ';' under Windows.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_SEARCHPATH_SEPARATOR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SEARCHPATH_SEPARATOR_S</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-SEARCHPATH-SEPARATOR-S:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">The search path separator as a string.
This is &quot;:&quot; on UNIX machines and &quot;;&quot; under Windows.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_SEARCHPATH_SEPARATOR_S&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>TRUE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>TRUE:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Defines the &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; value for the &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gboolean&quot; title=&quot;gboolean&quot;&gt;&lt;span class=&quot;type&quot;&gt;gboolean&lt;/span&gt;&lt;/a&gt; type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define TRUE (!FALSE)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>FALSE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>FALSE:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Defines the &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; value for the &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gboolean&quot; title=&quot;gboolean&quot;&gt;&lt;span class=&quot;type&quot;&gt;gboolean&lt;/span&gt;&lt;/a&gt; type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define FALSE (0)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>NULL</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>NULL:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Defines the standard &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; pointer.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define NULL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>MIN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>MIN:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Calculates the minimum of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define MIN(a, b) (((a) &amp;lt;
    (b)) ? (a) : (b))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>MAX</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>MAX:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Calculates the maximum of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define MAX(a, b) (((a) &amp;gt;
    (b)) ? (a) : (b))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>ABS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>ABS:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Calculates the absolute value of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt;.
The absolute value is simply the number with any negative sign taken away.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define ABS(a) (((a) &amp;lt;
    0) ? -(a) : (a))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>CLAMP</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>CLAMP:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Ensures that &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/em&gt; is between the limits set by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;low&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;high&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;low&lt;/code&gt;&lt;/em&gt; is
greater than &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;high&lt;/code&gt;&lt;/em&gt; the result is undefined.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define CLAMP(x, low, high) (((x) &amp;gt;
    (high)) ? (high) : (((x) &amp;lt;
    (low)) ? (low) : (x)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STRUCT_MEMBER</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-STRUCT-MEMBER:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Returns a member of a structure at a given offset, using the given type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STRUCT_MEMBER(member_type, struct_p, struct_offset)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STRUCT_MEMBER_P</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-STRUCT-MEMBER-P:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Returns an untyped pointer to a given offset of a struct.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STRUCT_MEMBER_P(struct_p, struct_offset)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STRUCT_OFFSET</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-STRUCT-OFFSET:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Returns the offset, in bytes, of a member of a struct.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STRUCT_OFFSET(struct_type, member)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MEM_ALIGN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-MEM-ALIGN:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">Indicates the number of bytes to which memory will be aligned on the
current platform.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MEM_ALIGN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CONST_RETURN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Standard-Macros.html</Path>
  <Anchor>G-CONST-RETURN:CAPS</Anchor>
  <NodeRef refid="13"/>
  <Abstract type="html">If &lt;code class=&quot;literal&quot;&gt;G_DISABLE_CONST_RETURNS&lt;/code&gt; is defined, this macro expands to nothing.
By default, the macro expands to &lt;code class=&quot;literal&quot;&gt;const&lt;/code&gt;. The macro 
should be used in place of &lt;code class=&quot;literal&quot;&gt;const&lt;/code&gt; for functions that 
return a value that should not be modified. The purpose of this macro is 
to allow us to turn on &lt;code class=&quot;literal&quot;&gt;const&lt;/code&gt; for returned constant 
strings by default, while allowing programmers who find that annoying to 
turn it off. This macro should only be used for return values and for
&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;out&lt;/em&gt;&lt;/span&gt; parameters, it doesn't make sense for 
&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;in&lt;/em&gt;&lt;/span&gt; parameters. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CONST_RETURN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSIZE_TO_POINTER</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Type-Conversion-Macros.html</Path>
  <Anchor>GSIZE-TO-POINTER:CAPS</Anchor>
  <NodeRef refid="14"/>
  <Abstract type="html">Stuffs a &lt;span class=&quot;type&quot;&gt;gsize&lt;/span&gt; into a pointer type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GSIZE_TO_POINTER(s) ((gpointer) (gsize) (s))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GPOINTER_TO_SIZE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Type-Conversion-Macros.html</Path>
  <Anchor>GPOINTER-TO-SIZE:CAPS</Anchor>
  <NodeRef refid="14"/>
  <Abstract type="html">Extracts a &lt;span class=&quot;type&quot;&gt;gsize&lt;/span&gt; from a pointer. The &lt;span class=&quot;type&quot;&gt;gsize&lt;/span&gt; must have
been stored in the pointer with &lt;a class=&quot;link&quot; href=&quot;glib-Type-Conversion-Macros.html#GSIZE-TO-POINTER:CAPS&quot; title=&quot;GSIZE_TO_POINTER()&quot;&gt;&lt;code class=&quot;function&quot;&gt;GSIZE_TO_POINTER()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GPOINTER_TO_SIZE(p) ((gsize) (p))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LITTLE_ENDIAN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>G-LITTLE-ENDIAN:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Specifies one of the possible types of byte order.
See &lt;span class=&quot;type&quot;&gt;G_BYTE_ORDER&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LITTLE_ENDIAN 1234&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BIG_ENDIAN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>G-BIG-ENDIAN:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Specifies one of the possible types of byte order.
See &lt;span class=&quot;type&quot;&gt;G_BYTE_ORDER&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_BIG_ENDIAN 4321&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PDP_ENDIAN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>G-PDP-ENDIAN:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Specifies one of the possible types of byte order (currently unused).
See &lt;span class=&quot;type&quot;&gt;G_BYTE_ORDER&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PDP_ENDIAN 3412  &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_htonl</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>g-htonl</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a 32-bit integer value from host to network byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_htonl(val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_htons</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>g-htons</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a 16-bit integer value from host to network byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_htons(val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ntohl</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>g-ntohl</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a 32-bit integer value from network to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_ntohl(val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ntohs</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>g-ntohs</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a 16-bit integer value from network to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_ntohs(val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GINT_FROM_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GINT-FROM-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gint&quot; title=&quot;gint&quot;&gt;&lt;span class=&quot;type&quot;&gt;gint&lt;/span&gt;&lt;/a&gt; value from big-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GINT_FROM_BE(val) (GINT_TO_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GINT_FROM_LE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GINT-FROM-LE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gint&quot; title=&quot;gint&quot;&gt;&lt;span class=&quot;type&quot;&gt;gint&lt;/span&gt;&lt;/a&gt; value from little-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GINT_FROM_LE(val) (GINT_TO_LE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT_FROM_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT-FROM-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#guint&quot; title=&quot;guint&quot;&gt;&lt;span class=&quot;type&quot;&gt;guint&lt;/span&gt;&lt;/a&gt; value from big-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT_FROM_BE(val) (GUINT_TO_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT_FROM_LE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT-FROM-LE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#guint&quot; title=&quot;guint&quot;&gt;&lt;span class=&quot;type&quot;&gt;guint&lt;/span&gt;&lt;/a&gt; value from little-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT_FROM_LE(val) (GUINT_TO_LE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GLONG_FROM_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GLONG-FROM-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#glong&quot; title=&quot;glong&quot;&gt;&lt;span class=&quot;type&quot;&gt;glong&lt;/span&gt;&lt;/a&gt; value from big-endian to the host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GLONG_FROM_BE(val) (GLONG_TO_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GLONG_FROM_LE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GLONG-FROM-LE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#glong&quot; title=&quot;glong&quot;&gt;&lt;span class=&quot;type&quot;&gt;glong&lt;/span&gt;&lt;/a&gt; value from little-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GLONG_FROM_LE(val) (GLONG_TO_LE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GULONG_FROM_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GULONG-FROM-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gulong&quot; title=&quot;gulong&quot;&gt;&lt;span class=&quot;type&quot;&gt;gulong&lt;/span&gt;&lt;/a&gt; value from big-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GULONG_FROM_BE(val) (GULONG_TO_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GULONG_FROM_LE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GULONG-FROM-LE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gulong&quot; title=&quot;gulong&quot;&gt;&lt;span class=&quot;type&quot;&gt;gulong&lt;/span&gt;&lt;/a&gt; value from little-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GULONG_FROM_LE(val) (GULONG_TO_LE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GINT16_FROM_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GINT16-FROM-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;gint16&lt;/span&gt; value from big-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GINT16_FROM_BE(val) (GINT16_TO_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GINT16_FROM_LE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GINT16-FROM-LE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;gint16&lt;/span&gt; value from little-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GINT16_FROM_LE(val) (GINT16_TO_LE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT16_FROM_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT16-FROM-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;guint16&lt;/span&gt; value from big-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT16_FROM_BE(val) (GUINT16_TO_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT16_FROM_LE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT16-FROM-LE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;guint16&lt;/span&gt; value from little-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT16_FROM_LE(val) (GUINT16_TO_LE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GINT32_FROM_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GINT32-FROM-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;gint32&lt;/span&gt; value from big-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GINT32_FROM_BE(val) (GINT32_TO_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GINT32_FROM_LE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GINT32-FROM-LE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;gint32&lt;/span&gt; value from little-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GINT32_FROM_LE(val) (GINT32_TO_LE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT32_FROM_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT32-FROM-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;guint32&lt;/span&gt; value from big-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT32_FROM_BE(val) (GUINT32_TO_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT32_FROM_LE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT32-FROM-LE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;guint32&lt;/span&gt; value from little-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT32_FROM_LE(val) (GUINT32_TO_LE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GINT64_FROM_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GINT64-FROM-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;gint64&lt;/span&gt; value from big-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GINT64_FROM_BE(val) (GINT64_TO_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GINT64_FROM_LE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GINT64-FROM-LE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;gint64&lt;/span&gt; value from little-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GINT64_FROM_LE(val) (GINT64_TO_LE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT64_FROM_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT64-FROM-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#guint64&quot; title=&quot;guint64 ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;guint64&lt;/span&gt;&lt;/a&gt; value from big-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT64_FROM_BE(val) (GUINT64_TO_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT64_FROM_LE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT64-FROM-LE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#guint64&quot; title=&quot;guint64 ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;guint64&lt;/span&gt;&lt;/a&gt; value from little-endian to host byte order.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT64_FROM_LE(val) (GUINT64_TO_LE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT16_SWAP_BE_PDP</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT16-SWAP-BE-PDP:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;guint16&lt;/span&gt; value between big-endian and pdp-endian byte order.
The conversion is symmetric so it can be used both ways.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT16_SWAP_BE_PDP(val) (GUINT16_SWAP_LE_BE (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT16_SWAP_LE_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT16-SWAP-LE-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;guint16&lt;/span&gt; value between little-endian and big-endian byte order.
The conversion is symmetric so it can be used both ways.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT16_SWAP_LE_BE(val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT16_SWAP_LE_PDP</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT16-SWAP-LE-PDP:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;guint16&lt;/span&gt; value between little-endian and pdp-endian byte order.
The conversion is symmetric so it can be used both ways.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT16_SWAP_LE_PDP(val) ((guint16) (val))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT32_SWAP_BE_PDP</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT32-SWAP-BE-PDP:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;guint32&lt;/span&gt; value between big-endian and pdp-endian byte order.
The conversion is symmetric so it can be used both ways.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT32_SWAP_BE_PDP(val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT32_SWAP_LE_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT32-SWAP-LE-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;guint32&lt;/span&gt; value between little-endian and big-endian byte order.
The conversion is symmetric so it can be used both ways.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT32_SWAP_LE_BE(val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT32_SWAP_LE_PDP</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT32-SWAP-LE-PDP:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;span class=&quot;type&quot;&gt;guint32&lt;/span&gt; value between little-endian and pdp-endian byte order.
The conversion is symmetric so it can be used both ways.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT32_SWAP_LE_PDP(val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUINT64_SWAP_LE_BE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Order-Macros.html</Path>
  <Anchor>GUINT64-SWAP-LE-BE:CAPS</Anchor>
  <NodeRef refid="15"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#guint64&quot; title=&quot;guint64 ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;guint64&lt;/span&gt;&lt;/a&gt; value between little-endian and big-endian byte order.
The conversion is symmetric so it can be used both ways.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define GUINT64_SWAP_LE_BE(val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IEEE754_FLOAT_BIAS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>G-IEEE754-FLOAT-BIAS:CAPS</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">See &lt;a class=&quot;ulink&quot; href=&quot;http://cch.loria.fr/documentation/IEEE754/numerical_comp_guide/ncg_math.doc.html&quot; target=&quot;_top&quot;&gt;http://cch.loria.fr/documentation/IEEE754/numerical_comp_guide/ncg_math.doc.html&lt;/a&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IEEE754_FLOAT_BIAS (127)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IEEE754_DOUBLE_BIAS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>G-IEEE754-DOUBLE-BIAS:CAPS</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">See &lt;a class=&quot;ulink&quot; href=&quot;http://cch.loria.fr/documentation/IEEE754/numerical_comp_guide/ncg_math.doc.html&quot; target=&quot;_top&quot;&gt;http://cch.loria.fr/documentation/IEEE754/numerical_comp_guide/ncg_math.doc.html&lt;/a&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IEEE754_DOUBLE_BIAS (1023)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GFloatIEEE754</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>GFloatIEEE754</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Numerical-Definitions.html#GFloatIEEE754&quot; title=&quot;union GFloatIEEE754&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFloatIEEE754&lt;/span&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Numerical-Definitions.html#GDoubleIEEE754&quot; title=&quot;union GDoubleIEEE754&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDoubleIEEE754&lt;/span&gt;&lt;/a&gt; unions are used to access the
	sign, mantissa and exponent of IEEE floats and doubles. These
	unions are defined as appropriate for a given platform. 
 IEEE floats and doubles are supported (used for
	storage) by at least Intel, PPC and Sparc, for reference: 
&lt;a class=&quot;ulink&quot; href=&quot;http://cch.loria.fr/documentation/IEEE754/numerical_comp_guide/ncg_math.doc.html&quot; target=&quot;_top&quot;&gt;http://cch.loria.fr/documentation/IEEE754/numerical_comp_guide/ncg_math.doc.html&lt;/a&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;union GFloatIEEE754 {
    gfloat v_float;
    struct {
    guint mantissa : 23;
    guint biased_exponent : 8;
    guint sign : 1;
} mpn;
};
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDoubleIEEE754</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>GDoubleIEEE754</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Numerical-Definitions.html#GFloatIEEE754&quot; title=&quot;union GFloatIEEE754&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFloatIEEE754&lt;/span&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Numerical-Definitions.html#GDoubleIEEE754&quot; title=&quot;union GDoubleIEEE754&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDoubleIEEE754&lt;/span&gt;&lt;/a&gt; unions are used to access the
	sign, mantissa and exponent of IEEE floats and doubles. These
	unions are defined as appropriate for a given platform. 
 IEEE floats and doubles are supported (used for
	storage) by at least Intel, PPC and Sparc, for reference: 
&lt;a class=&quot;ulink&quot; href=&quot;http://cch.loria.fr/documentation/IEEE754/numerical_comp_guide/ncg_math.doc.html&quot; target=&quot;_top&quot;&gt;http://cch.loria.fr/documentation/IEEE754/numerical_comp_guide/ncg_math.doc.html&lt;/a&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;union GDoubleIEEE754 {
    gdouble v_double;
    struct {
    guint mantissa_low : 32;
    guint mantissa_high : 20;
    guint biased_exponent : 11;
    guint sign : 1;
} mpn;
};
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_E</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>G-E:CAPS</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">The base of natural logarithms.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_E 2.7182818284590452353602874713526624977572470937000&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LN2</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>G-LN2:CAPS</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">The natural logarithm of 2.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LN2 0.69314718055994530941723212145817656807550013436026&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LN10</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>G-LN10:CAPS</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">The natural logarithm of 10.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LN10 2.3025850929940456840179914546843642076011014886288&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PI</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>G-PI:CAPS</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">The value of pi (ratio of circle's circumference to its diameter).</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PI 3.1415926535897932384626433832795028841971693993751&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PI_2</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>G-PI-2:CAPS</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">Pi divided by 2.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PI_2 1.5707963267948966192313216916397514420985846996876&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PI_4</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>G-PI-4:CAPS</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">Pi divided by 4.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PI_4 0.78539816339744830961566084581987572104929234984378&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SQRT2</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>G-SQRT2:CAPS</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">The square root of two.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_SQRT2 1.4142135623730950488016887242096980785696718753769&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_2_BASE_10</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Numerical-Definitions.html</Path>
  <Anchor>G-LOG-2-BASE-10:CAPS</Anchor>
  <NodeRef refid="16"/>
  <Abstract type="html">Used for fooling around with float formats, see 
&lt;a class=&quot;ulink&quot; href=&quot;http://cch.loria.fr/documentation/IEEE754/numerical_comp_guide/ncg_math.doc.html&quot; target=&quot;_top&quot;&gt;http://cch.loria.fr/documentation/IEEE754/numerical_comp_guide/ncg_math.doc.html&lt;/a&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LOG_2_BASE_10 (0.30102999566398119521)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_INLINE_FUNC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-INLINE-FUNC:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">This macro is used to export function prototypes so they can be linked
with an external version when no inlining is performed. The file which
implements the functions should define &lt;code class=&quot;literal&quot;&gt;G_IMPLEMENTS_INLINES&lt;/code&gt;
before including the headers which contain &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Macros.html#G-INLINE-FUNC:CAPS&quot; title=&quot;G_INLINE_FUNC&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_INLINE_FUNC&lt;/code&gt;&lt;/a&gt; declarations.
Since inlining is very compiler-dependent using these macros correctly
is very difficult. Their use is strongly discouraged.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_INLINE_FUNC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STMT_START</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-STMT-START:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Used within multi-statement macros so that they can be used in places where
only one statement is expected by the compiler.</Abstract>
  <Declaration type="html">&lt;pre&gt;# define G_STMT_START do&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STMT_END</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-STMT-END:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Used within multi-statement macros so that they can be used in places where
only one statement is expected by the compiler.</Abstract>
  <Declaration type="html">&lt;pre&gt;# define G_STMT_END while (0)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BEGIN_DECLS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-BEGIN-DECLS:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Used (along with &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Macros.html#G-END-DECLS:CAPS&quot; title=&quot;G_END_DECLS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_END_DECLS&lt;/span&gt;&lt;/a&gt;) to bracket header files. If the
compiler in use is a C++ compiler, adds &lt;code class=&quot;literal&quot;&gt;extern &quot;C&quot;&lt;/code&gt; 
around the header.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_BEGIN_DECLS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_END_DECLS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-END-DECLS:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Used (along with &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Macros.html#G-BEGIN-DECLS:CAPS&quot; title=&quot;G_BEGIN_DECLS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_BEGIN_DECLS&lt;/span&gt;&lt;/a&gt;) to bracket header files. If the
compiler in use is a C++ compiler, adds &lt;code class=&quot;literal&quot;&gt;extern &quot;C&quot;&lt;/code&gt; 
around the header.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_END_DECLS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_N_ELEMENTS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-N-ELEMENTS:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Determines the number of elements in an array. The array must be
declared so the compiler knows its size at compile-time; this 
macro will not work on an array allocated on the heap, only static
arrays or arrays on the stack.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_N_ELEMENTS(arr) (sizeof (arr) / sizeof ((arr)[0]))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VA_COPY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-VA-COPY:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Portable way to copy &lt;span class=&quot;type&quot;&gt;va_list&lt;/span&gt; variables.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VA_COPY(ap1,ap2)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STRINGIFY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-STRINGIFY:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Accepts a macro or a string and converts it into a string.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STRINGIFY(macro_or_string) G_STRINGIFY_ARG (macro_or_string)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_EXTENSION</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-EXTENSION:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to &lt;code class=&quot;literal&quot;&gt;__extension__&lt;/code&gt; when &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt; is 
used as the compiler.
This simply tells &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt; not to warn about the following non-standard code
when compiling with the &lt;code class=&quot;option&quot;&gt;-pedantic&lt;/code&gt; option.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_EXTENSION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_CONST</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-CONST:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;const&lt;/code&gt; function attribute if the compiler is 
&lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;. Declaring a function as const enables better optimization of calls 
to the function. A const function doesn't examine any values except its parameters, and has no 
effects except its return value. See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_CONST&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_PURE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-PURE:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;pure&lt;/code&gt; function attribute if the compiler is 
&lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;. Declaring a function as pure enables better optimization of 
calls to the function. A pure function has no effects except its return value and the 
return value depends only on the parameters and/or global variables.
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_PURE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_MALLOC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-MALLOC:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;malloc&lt;/code&gt; function attribute if the 
compiler is &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;. Declaring a function as malloc enables 
better optimization of the function. A function can have the malloc attribute 
if it returns a pointer which is guaranteed to not alias with any other pointer
when the function returns (in practice, this means newly allocated memory).  
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_MALLOC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_ALLOC_SIZE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-ALLOC-SIZE:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;alloc_size&lt;/code&gt; function attribute if the 
compiler is a new enough &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;. This attribute tells the
compiler that the function returns a pointer to memory of a size that is
specified by the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/em&gt;th function parameter.
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_ALLOC_SIZE(x)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_ALLOC_SIZE2</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-ALLOC-SIZE2:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;alloc_size&lt;/code&gt; function attribute if the 
compiler is a new enough &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;. This attribute tells the
compiler that the function returns a pointer to memory of a size that is
specified by the product of two function parameters.
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_ALLOC_SIZE2(x,y)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_DEPRECATED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-DEPRECATED:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;deprecated&lt;/code&gt; attribute if the compiler 
is &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;.
It can be used to mark typedefs, variables and functions as deprecated. 
When called with the &lt;code class=&quot;option&quot;&gt;-Wdeprecated&lt;/code&gt; option, the compiler will 
generate warnings when deprecated interfaces are used.
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_DEPRECATED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_NORETURN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-NORETURN:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;noreturn&lt;/code&gt; function attribute if the 
compiler is &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;. It is used for declaring functions which never return.
It enables optimization of the function, and avoids possible compiler
warnings. See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_NORETURN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_UNUSED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-UNUSED:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;unused&lt;/code&gt; function attribute if the compiler is 
&lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;. It is used for declaring functions which may never be used.
It avoids possible compiler warnings. See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_UNUSED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_PRINTF</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-PRINTF:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;format&lt;/code&gt; function attribute if the compiler is 
&lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;. This is used for declaring functions which take a variable number of
arguments, with the same syntax as &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;printf()&lt;/code&gt;&lt;/code&gt;.
It allows the compiler to type-check the arguments passed to the function.
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_PRINTF( format_idx, arg_idx )&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_SCANF</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-SCANF:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;format&lt;/code&gt; function attribute if the compiler is &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;.
This is used for declaring functions which take a variable number of
arguments, with the same syntax as &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;scanf()&lt;/code&gt;&lt;/code&gt;.
It allows the compiler to type-check the arguments passed to the function.
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_SCANF( format_idx, arg_idx )&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_FORMAT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-FORMAT:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;format_arg&lt;/code&gt; function attribute if the compiler is &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;.
This function attribute specifies that a function takes a format
string for a &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;printf()&lt;/code&gt;&lt;/code&gt;, &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;scanf()&lt;/code&gt;&lt;/code&gt;, 
&lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;strftime()&lt;/code&gt;&lt;/code&gt; or &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;strfmon()&lt;/code&gt;&lt;/code&gt; style
function and modifies it, so that the result can be passed to a 
&lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;printf()&lt;/code&gt;&lt;/code&gt;, &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;scanf()&lt;/code&gt;&lt;/code&gt;, 
&lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;strftime()&lt;/code&gt;&lt;/code&gt; or &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;strfmon()&lt;/code&gt;&lt;/code&gt; style 
function (with the remaining arguments to the format function the same as 
they would have been for the unmodified string). 
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_FORMAT( arg_idx )&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_NULL_TERMINATED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-NULL-TERMINATED:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;sentinel&lt;/code&gt; function attribute if the 
compiler is &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;, or &quot;&quot; if it isn't. This function attribute
only applies to variadic functions and instructs the compiler to check that 
the argument list is terminated with an explicit &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_NULL_TERMINATED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_WARN_UNUSED_RESULT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-WARN-UNUSED-RESULT:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;warn_unused_result&lt;/code&gt; function attribute 
if the compiler is &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;, or &quot;&quot; if it isn't. This function 
attribute makes the compiler emit a warning if the result of a function call
is ignored. See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_WARN_UNUSED_RESULT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_FUNCTION</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-FUNCTION:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to &quot;&quot; on all modern compilers, and to &lt;code class=&quot;literal&quot;&gt;__FUNCTION__&lt;/code&gt;
on &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt; version 2.x. Don't use it.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_FUNCTION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.16</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;G_GNUC_FUNCTION&lt;/code&gt; is deprecated and should not be used in newly-written code. 2.16</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_PRETTY_FUNCTION</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-PRETTY-FUNCTION:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to &quot;&quot; on all modern compilers, and to 
&lt;code class=&quot;literal&quot;&gt;__PRETTY_FUNCTION__&lt;/code&gt; on &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt; version 2.x. 
Don't use it.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_PRETTY_FUNCTION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.16</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;G_GNUC_PRETTY_FUNCTION&lt;/code&gt; is deprecated and should not be used in newly-written code. 2.16</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_NO_INSTRUMENT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-NO-INSTRUMENT:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;no_instrument_function&lt;/code&gt; function 
attribute if the compiler is &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;. Functions with this 
attribute will not be 
instrumented for profiling, when the compiler is called with the
&lt;code class=&quot;option&quot;&gt;-finstrument-functions&lt;/code&gt; option.
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_NO_INSTRUMENT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_GNUC_MAY_ALIAS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-GNUC-MAY-ALIAS:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to the GNU C &lt;code class=&quot;literal&quot;&gt;may_alias&lt;/code&gt; type attribute 
if the compiler is &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gcc&lt;/strong&gt;&lt;/span&gt;. Types with this attribute 
will not be subjected to type-based alias analysis, but are assumed
to alias with any other type, just like char.
See the GNU C documentation for details. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_GNUC_MAY_ALIAS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LIKELY</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-LIKELY:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Hints the compiler that the expression is likely to evaluate to a true
value. The compiler may use this information for optimizations.</Abstract>
  <Declaration type="html">&lt;pre&gt;if G_LIKELY (
    );&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNLIKELY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-UNLIKELY:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Hints the compiler that the expression is unlikely to evaluate to a true
value. The compiler may use this information for optimizations.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_UNLIKELY(expr)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STRLOC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-STRLOC:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to a string identifying the current code position. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STRLOC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STRFUNC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Macros.html</Path>
  <Anchor>G-STRFUNC:CAPS</Anchor>
  <NodeRef refid="17"/>
  <Abstract type="html">Expands to a string identifying the current function. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STRFUNC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atomic_int_get</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Atomic-Operations.html</Path>
  <Anchor>g-atomic-int-get</Anchor>
  <NodeRef refid="18"/>
  <Abstract type="html">Reads the value of the integer pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt;. Also acts as
a memory barrier.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_atomic_int_get (
    volatile &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; *atomic);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atomic_int_set</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Atomic-Operations.html</Path>
  <Anchor>g-atomic-int-set</Anchor>
  <NodeRef refid="18"/>
  <Abstract type="html">Sets the value of the integer pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt;. 
Also acts as a memory barrier.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_atomic_int_set (
    volatile &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *atomic,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; newval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atomic_int_add</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Atomic-Operations.html</Path>
  <Anchor>g-atomic-int-add</Anchor>
  <NodeRef refid="18"/>
  <Abstract type="html">Atomically adds &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt; to the integer pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt;.
Also acts as a memory barrier.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_atomic_int_add (
    volatile &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *atomic,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; val);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atomic_int_exchange_and_add</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Atomic-Operations.html</Path>
  <Anchor>g-atomic-int-exchange-and-add</Anchor>
  <NodeRef refid="18"/>
  <Abstract type="html">Atomically adds &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt; to the integer pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt;. It returns
the value of *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt; just before the addition took place.
Also acts as a memory barrier.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_atomic_int_exchange_and_add (
    volatile &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *atomic,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; val);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atomic_int_compare_and_exchange</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Atomic-Operations.html</Path>
  <Anchor>g-atomic-int-compare-and-exchange</Anchor>
  <NodeRef refid="18"/>
  <Abstract type="html">Compares &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;oldval&lt;/code&gt;&lt;/em&gt; with the integer pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt; and
if they are equal, atomically exchanges *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt; with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;newval&lt;/code&gt;&lt;/em&gt;.
Also acts as a memory barrier.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_atomic_int_compare_and_exchange (
    volatile &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *atomic,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; oldval,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; newval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atomic_pointer_get</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Atomic-Operations.html</Path>
  <Anchor>g-atomic-pointer-get</Anchor>
  <NodeRef refid="18"/>
  <Abstract type="html">Reads the value of the pointer pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt;. Also acts as
a memory barrier.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_atomic_pointer_get (
    volatile &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; *atomic);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atomic_pointer_set</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Atomic-Operations.html</Path>
  <Anchor>g-atomic-pointer-set</Anchor>
  <NodeRef refid="18"/>
  <Abstract type="html">Sets the value of the pointer pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt;. 
Also acts as a memory barrier.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_atomic_pointer_set (
    volatile &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; *atomic,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; newval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atomic_pointer_compare_and_exchange</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Atomic-Operations.html</Path>
  <Anchor>g-atomic-pointer-compare-and-exchange</Anchor>
  <NodeRef refid="18"/>
  <Abstract type="html">Compares &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;oldval&lt;/code&gt;&lt;/em&gt; with the pointer pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt; and
if they are equal, atomically exchanges *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt; with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;newval&lt;/code&gt;&lt;/em&gt;. 
Also acts as a memory barrier.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_atomic_pointer_compare_and_exchange (
    volatile &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; *atomic,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; oldval,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; newval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atomic_int_inc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Atomic-Operations.html</Path>
  <Anchor>g-atomic-int-inc</Anchor>
  <NodeRef refid="18"/>
  <Abstract type="html">Atomically increments the integer pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt; by 1.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_atomic_int_inc (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; *atomic);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atomic_int_dec_and_test</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Atomic-Operations.html</Path>
  <Anchor>g-atomic-int-dec-and-test</Anchor>
  <NodeRef refid="18"/>
  <Abstract type="html">Atomically decrements the integer pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/em&gt; by 1.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_atomic_int_dec_and_test (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; *atomic);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMainLoop</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>GMainLoop</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GMainLoop&lt;/span&gt; struct is an opaque data type 
representing the main event loop of a GLib or GTK+ application.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GMainLoop GMainLoop;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_loop_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-loop-new</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; title=&quot;GMainLoop&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainLoop&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; href=&quot;GMainLoop&quot; title=&quot;link&quot;&gt;GMainLoop&lt;/a&gt;* g_main_loop_new (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; is_running);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_loop_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-loop-ref</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Increases the reference count on a &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; title=&quot;GMainLoop&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainLoop&lt;/span&gt;&lt;/a&gt; object by one.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; href=&quot;GMainLoop&quot; title=&quot;link&quot;&gt;GMainLoop&lt;/a&gt;* g_main_loop_ref (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; href=&quot;GMainLoop&quot; title=&gt;GMainLoop&lt;/a&gt; *loop);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_loop_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-loop-unref</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Decreases the reference count on a &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; title=&quot;GMainLoop&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainLoop&lt;/span&gt;&lt;/a&gt; object by one. If
the result is zero, free the loop and free all associated memory.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_main_loop_unref (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; href=&quot;GMainLoop&quot; title=&gt;GMainLoop&lt;/a&gt; *loop);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_loop_run</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-loop-run</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Runs a main loop until &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-loop-quit&quot; title=&quot;g_main_loop_quit ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_loop_quit()&lt;/code&gt;&lt;/a&gt; is called on the loop.
If this is called for the thread of the loop's &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; title=&quot;GMainContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainContext&lt;/span&gt;&lt;/a&gt;,
it will process events from the loop, otherwise it will
simply wait.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_main_loop_run (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; href=&quot;GMainLoop&quot; title=&gt;GMainLoop&lt;/a&gt; *loop);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_loop_quit</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-loop-quit</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Stops a &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; title=&quot;GMainLoop&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainLoop&lt;/span&gt;&lt;/a&gt; from running. Any calls to &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-loop-run&quot; title=&quot;g_main_loop_run ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_loop_run()&lt;/code&gt;&lt;/a&gt;
for the loop will return. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_main_loop_quit (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; href=&quot;GMainLoop&quot; title=&gt;GMainLoop&lt;/a&gt; *loop);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_loop_is_running</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-loop-is-running</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks to see if the main loop is currently being run via &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-loop-run&quot; title=&quot;g_main_loop_run ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_loop_run()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_main_loop_is_running (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; href=&quot;GMainLoop&quot; title=&gt;GMainLoop&lt;/a&gt; *loop);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_loop_get_context</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-loop-get-context</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; title=&quot;GMainContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainContext&lt;/span&gt;&lt;/a&gt; of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt;* g_main_loop_get_context (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; href=&quot;GMainLoop&quot; title=&gt;GMainLoop&lt;/a&gt; *loop);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_new</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-new</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; title=&quot;GMainLoop&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainLoop&lt;/span&gt;&lt;/a&gt; for the default main loop. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_main_new(is_running)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_main_new&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-loop-new&quot; title=&quot;g_main_loop_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_loop_new()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_destroy</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-destroy</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Frees the memory allocated for the &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; title=&quot;GMainLoop&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainLoop&lt;/span&gt;&lt;/a&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_main_destroy(loop)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_main_destroy&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-loop-unref&quot; title=&quot;g_main_loop_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_loop_unref()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_run</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-run</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Runs a main loop until it stops running. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_main_run(loop)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_main_run&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-loop-run&quot; title=&quot;g_main_loop_run ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_loop_run()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_quit</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-quit</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Stops the &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; title=&quot;GMainLoop&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainLoop&lt;/span&gt;&lt;/a&gt;. If &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-run&quot; title=&quot;g_main_run()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_run()&lt;/code&gt;&lt;/a&gt; was called to run the &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainLoop&quot; title=&quot;GMainLoop&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainLoop&lt;/span&gt;&lt;/a&gt;,
it will now return. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_main_quit(loop)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_main_quit&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-loop-quit&quot; title=&quot;g_main_loop_quit ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_loop_quit()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_is_running</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-is-running</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if the main loop is running. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_main_is_running(loop)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_main_is_running&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. USe &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-loop-is-running&quot; title=&quot;g_main_loop_is_running ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_loop_is_running()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PRIORITY_HIGH</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>G-PRIORITY-HIGH:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Use this for high priority event sources.
It is not used within GLib or GTK+.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PRIORITY_HIGH -100&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PRIORITY_DEFAULT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>G-PRIORITY-DEFAULT:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Use this for default priority event sources.
In GLib this priority is used when adding timeout functions with
&lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-timeout-add&quot; title=&quot;g_timeout_add ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timeout_add()&lt;/code&gt;&lt;/a&gt;.
In GDK this priority is used for events from the X server.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PRIORITY_DEFAULT 0&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PRIORITY_HIGH_IDLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>G-PRIORITY-HIGH-IDLE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Use this for high priority idle functions.
GTK+ uses &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#G-PRIORITY-HIGH-IDLE:CAPS&quot; title=&quot;G_PRIORITY_HIGH_IDLE&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_PRIORITY_HIGH_IDLE&lt;/span&gt;&lt;/a&gt; + 10 for resizing operations, and
&lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#G-PRIORITY-HIGH-IDLE:CAPS&quot; title=&quot;G_PRIORITY_HIGH_IDLE&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_PRIORITY_HIGH_IDLE&lt;/span&gt;&lt;/a&gt; + 20 for redrawing operations. (This is done to
ensure that any pending resizes are processed before any pending redraws,
so that widgets are not redrawn twice unnecessarily.)</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PRIORITY_HIGH_IDLE 100&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PRIORITY_DEFAULT_IDLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>G-PRIORITY-DEFAULT-IDLE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Use this for default priority idle functions.
In GLib this priority is used when adding idle functions with &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-idle-add&quot; title=&quot;g_idle_add ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_idle_add()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PRIORITY_DEFAULT_IDLE 200&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PRIORITY_LOW</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>G-PRIORITY-LOW:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Use this for very low priority background tasks.
It is not used within GLib or GTK+.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PRIORITY_LOW 300&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMainContext</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>GMainContext</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GMainContext&lt;/span&gt; struct is an opaque data type 
representing a set of sources to be handled in a main loop. </Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GMainContext GMainContext;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-new</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; title=&quot;GMainContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainContext&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt;* g_main_context_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-ref</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Increases the reference count on a &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; title=&quot;GMainContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainContext&lt;/span&gt;&lt;/a&gt; object by one.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt;* g_main_context_ref (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-unref</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Decreases the reference count on a &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; title=&quot;GMainContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainContext&lt;/span&gt;&lt;/a&gt; object by one. If
the result is zero, free the context and free all associated memory.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_main_context_unref (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_default</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-default</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the default main context. This is the main context used
for main loop functions when a main loop is not explicitly
specified.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt;* g_main_context_default (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_iteration</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-iteration</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Runs a single iteration for the given main loop. This involves
checking to see if any event sources are ready to be processed,
then if no events sources are ready and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;may_block&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;, waiting
for a source to become ready, then dispatching the highest priority
events sources that are ready. Otherwise, if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;may_block&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; 
sources are not waited to become ready, only those highest priority 
events sources will be dispatched (if any), that are ready at this 
given moment without further waiting.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_main_context_iteration (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; may_block);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_iteration</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-iteration</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Runs a single iteration for the default &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; title=&quot;GMainContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainContext&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_main_iteration(may_block)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_main_iteration&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-iteration&quot; title=&quot;g_main_context_iteration ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_iteration()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_pending</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-pending</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if any sources have pending events for the given context.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_main_context_pending (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_pending</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-pending</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if any events are pending for the default &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; title=&quot;GMainContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainContext&lt;/span&gt;&lt;/a&gt;
(i.e. ready to be processed).  </Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_main_pending()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_main_pending&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-pending&quot; title=&quot;g_main_context_pending ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_pending()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_find_source_by_id</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-find-source-by-id</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Finds a &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GSource&quot; title=&quot;GSource&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSource&lt;/span&gt;&lt;/a&gt; given a pair of context and ID.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt;* g_main_context_find_source_by_id (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; source_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_find_source_by_user_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-find-source-by-user-data</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Finds a source with the given user data for the callback.  If
multiple sources exist with the same user data, the first
one found will be returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt;* g_main_context_find_source_by_user_data (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_find_source_by_funcs_user_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-find-source-by-funcs-user-data</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Finds a source with the given source functions and user data.  If
multiple sources exist with the same source function and user data,
the first one found will be returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt;* g_main_context_find_source_by_funcs_user_data (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFuncs&quot; href=&quot;GSourceFuncs&quot; title=&quot;link&quot;&gt;GSourceFuncs&lt;/a&gt; *funcs,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_wakeup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-wakeup</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/em&gt; is currently waiting in a &lt;code class=&quot;function&quot;&gt;poll()&lt;/code&gt;, interrupt
the &lt;code class=&quot;function&quot;&gt;poll()&lt;/code&gt;, and continue the iteration process.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_main_context_wakeup (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_acquire</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-acquire</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Tries to become the owner of the specified context.
If some other thread is the owner of the context,
returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; immediately. Ownership is properly
recursive: the owner can require ownership again
and will release ownership when &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-release&quot; title=&quot;g_main_context_release ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_release()&lt;/code&gt;&lt;/a&gt;
is called as many times as &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-acquire&quot; title=&quot;g_main_context_acquire ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_acquire()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_main_context_acquire (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_release</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-release</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Releases ownership of a context previously acquired by this thread
with &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-acquire&quot; title=&quot;g_main_context_acquire ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_acquire()&lt;/code&gt;&lt;/a&gt;. If the context was acquired multiple
times, the ownership will be released only when &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-release&quot; title=&quot;g_main_context_release ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_release()&lt;/code&gt;&lt;/a&gt;
is called as many times as it was acquired.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_main_context_release (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_is_owner</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-is-owner</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Determines whether this thread holds the (recursive)
ownership of this &lt;span class=&quot;type&quot;&gt;GMaincontext&lt;/span&gt;. This is useful to
know before waiting on another thread that may be
blocking to get ownership of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_main_context_is_owner (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_wait</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-wait</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Tries to become the owner of the specified context,
as with &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-acquire&quot; title=&quot;g_main_context_acquire ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_acquire()&lt;/code&gt;&lt;/a&gt;. But if another thread
is the owner, atomically drop &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; and wait on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cond&lt;/code&gt;&lt;/em&gt; until 
that owner releases ownership or until &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cond&lt;/code&gt;&lt;/em&gt; is signaled, then
try again (once) to become the owner.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_main_context_wait (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Threads.html#GCond&quot; href=&quot;GCond&quot; title=&quot;link&quot;&gt;GCond&lt;/a&gt; *cond,
    &lt;a class=&quot;glib-Threads.html#GMutex&quot; href=&quot;GMutex&quot; title=&gt;GMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_prepare</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-prepare</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Prepares to poll sources within a main loop. The resulting information
for polling is determined by calling &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-query&quot; title=&quot;g_main_context_query ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_query()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_main_context_prepare (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; *priority);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_query</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-query</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Determines information necessary to poll this main loop.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_main_context_query (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; max_priority,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *timeout_,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GPollFD&quot; href=&quot;GPollFD&quot; title=&quot;link&quot;&gt;GPollFD&lt;/a&gt; *fds,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; n_fds);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_check</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-check</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Passes the results of polling back to the main loop.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_main_context_check (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; max_priority,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GPollFD&quot; href=&quot;GPollFD&quot; title=&quot;link&quot;&gt;GPollFD&lt;/a&gt; *fds,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; n_fds);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_dispatch</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-dispatch</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Dispatches all pending sources.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_main_context_dispatch (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_set_poll_func</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-set-poll-func</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets the function to use to handle polling of file descriptors. It
will be used instead of the &lt;code class=&quot;function&quot;&gt;poll()&lt;/code&gt; system call 
(or GLib's replacement function, which is used where 
&lt;code class=&quot;function&quot;&gt;poll()&lt;/code&gt; isn't available).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_main_context_set_poll_func (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GPollFunc&quot; href=&quot;GPollFunc ()&quot; title=&gt;GPollFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_get_poll_func</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-get-poll-func</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Gets the poll function set by &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-set-poll-func&quot; title=&quot;g_main_context_set_poll_func ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_set_poll_func()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GPollFunc&quot; href=&quot;GPollFunc ()&quot; title=&quot;link&quot;&gt;GPollFunc&lt;/a&gt; g_main_context_get_poll_func (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GPollFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>GPollFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Specifies the type of function passed to &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-set-poll-func&quot; title=&quot;g_main_context_set_poll_func ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_set_poll_func()&lt;/code&gt;&lt;/a&gt;.
The semantics of the function should match those of the
&lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;poll()&lt;/code&gt;&lt;/code&gt; system call.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; (
    *GPollFunc) (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GPollFD&quot; href=&quot;GPollFD&quot; title=&quot;link&quot;&gt;GPollFD&lt;/a&gt; *ufds,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; nfsd,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; timeout_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_add_poll</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-add-poll</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Adds a file descriptor to the set of file descriptors polled for
this context. This will very seldomly be used directly. Instead
a typical event source will use &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-source-add-poll&quot; title=&quot;g_source_add_poll ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_source_add_poll()&lt;/code&gt;&lt;/a&gt; instead.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_main_context_add_poll (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GPollFD&quot; href=&quot;GPollFD&quot; title=&quot;link&quot;&gt;GPollFD&lt;/a&gt; *fd,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; priority);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_context_remove_poll</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-context-remove-poll</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Removes file descriptor from the set of file descriptors to be
polled for a particular context.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_main_context_remove_poll (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GPollFD&quot; href=&quot;GPollFD&quot; title=&gt;GPollFD&lt;/a&gt; *fd);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_depth</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-depth</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the depth of the stack of calls to
&lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-dispatch&quot; title=&quot;g_main_context_dispatch ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_dispatch()&lt;/code&gt;&lt;/a&gt; on any &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; title=&quot;GMainContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainContext&lt;/span&gt;&lt;/a&gt; in the current thread.
 That is, when called from the toplevel, it gives 0. When
called from within a callback from &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-iteration&quot; title=&quot;g_main_context_iteration ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_iteration()&lt;/code&gt;&lt;/a&gt;
(or &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-loop-run&quot; title=&quot;g_main_loop_run ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_loop_run()&lt;/code&gt;&lt;/a&gt;, etc.) it returns 1. When called from within 
a callback to a recursive call to &lt;code class=&quot;function&quot;&gt;g_main_context_iterate()&lt;/code&gt;,
it returns 2. And so forth.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; g_main_depth (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_current_source</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-current-source</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the currently firing source for this thread.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt;* g_main_current_source (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_main_set_poll_func</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-main-set-poll-func</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets the function to use for the handle polling of file descriptors
for the default main context. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_main_set_poll_func(func)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_main_set_poll_func&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-set-poll-func&quot; title=&quot;g_main_context_set_poll_func ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_set_poll_func()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timeout_source_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-timeout-source-new</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Creates a new timeout source.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt;* g_timeout_source_new (
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; interval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timeout_source_new_seconds</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-timeout-source-new-seconds</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Creates a new timeout source.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt;* g_timeout_source_new_seconds (
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; interval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timeout_add</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-timeout-add</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets a function to be called at regular intervals, with the default
priority, &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#G-PRIORITY-DEFAULT:CAPS&quot; title=&quot;G_PRIORITY_DEFAULT&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_PRIORITY_DEFAULT&lt;/span&gt;&lt;/a&gt;.  The function is called repeatedly
until it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;, at which point the timeout is automatically
destroyed and the function will not be called again.  The first call
to the function will be at the end of the first &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interval&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_timeout_add (
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; interval,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFunc&quot; href=&quot;GSourceFunc ()&quot; title=&quot;link&quot;&gt;GSourceFunc&lt;/a&gt; function,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timeout_add_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-timeout-add-full</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets a function to be called at regular intervals, with the given
priority.  The function is called repeatedly until it returns
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;, at which point the timeout is automatically destroyed and
the function will not be called again.  The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/em&gt; function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interval&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_timeout_add_full (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; priority,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; interval,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFunc&quot; href=&quot;GSourceFunc ()&quot; title=&quot;link&quot;&gt;GSourceFunc&lt;/a&gt; function,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; notify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timeout_add_seconds</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-timeout-add-seconds</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets a function to be called at regular intervals with the default
priority, &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#G-PRIORITY-DEFAULT:CAPS&quot; title=&quot;G_PRIORITY_DEFAULT&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_PRIORITY_DEFAULT&lt;/span&gt;&lt;/a&gt;. The function is called repeatedly until
it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;, at which point the timeout is automatically destroyed
and the function will not be called again.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_timeout_add_seconds (
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; interval,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFunc&quot; href=&quot;GSourceFunc ()&quot; title=&quot;link&quot;&gt;GSourceFunc&lt;/a&gt; function,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timeout_add_seconds_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-timeout-add-seconds-full</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets a function to be called at regular intervals, with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/em&gt;.
The function is called repeatedly until it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;, at which
point the timeout is automatically destroyed and the function will
not be called again.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_timeout_add_seconds_full (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; priority,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; interval,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFunc&quot; href=&quot;GSourceFunc ()&quot; title=&quot;link&quot;&gt;GSourceFunc&lt;/a&gt; function,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; notify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_idle_source_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-idle-source-new</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Creates a new idle source.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt;* g_idle_source_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_idle_add</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-idle-add</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Adds a function to be called whenever there are no higher priority
events pending to the default main loop. The function is given the
default idle priority, &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#G-PRIORITY-DEFAULT-IDLE:CAPS&quot; title=&quot;G_PRIORITY_DEFAULT_IDLE&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_PRIORITY_DEFAULT_IDLE&lt;/span&gt;&lt;/a&gt;.  If the function
returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; it is automatically removed from the list of event
sources and will not be called again.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_idle_add (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFunc&quot; href=&quot;GSourceFunc ()&quot; title=&quot;link&quot;&gt;GSourceFunc&lt;/a&gt; function,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_idle_add_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-idle-add-full</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Adds a function to be called whenever there are no higher priority
events pending.  If the function returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; it is automatically
removed from the list of event sources and will not be called again.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_idle_add_full (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; priority,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFunc&quot; href=&quot;GSourceFunc ()&quot; title=&quot;link&quot;&gt;GSourceFunc&lt;/a&gt; function,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; notify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_idle_remove_by_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-idle-remove-by-data</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Removes the idle function with the given data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_idle_remove_by_data (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GChildWatchFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>GChildWatchFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The type of functions to be called when a child exists.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GChildWatchFunc) (
    GPid pid,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; status,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_child_watch_source_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-child-watch-source-new</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Creates a new child_watch source.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt;* g_child_watch_source_new (
    GPid pid);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_child_watch_add</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-child-watch-add</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets a function to be called when the child indicated by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pid&lt;/code&gt;&lt;/em&gt; 
exits, at a default priority, &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#G-PRIORITY-DEFAULT:CAPS&quot; title=&quot;G_PRIORITY_DEFAULT&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_PRIORITY_DEFAULT&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_child_watch_add (
    GPid pid,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GChildWatchFunc&quot; href=&quot;GChildWatchFunc ()&quot; title=&quot;link&quot;&gt;GChildWatchFunc&lt;/a&gt; function,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_child_watch_add_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-child-watch-add-full</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets a function to be called when the child indicated by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pid&lt;/code&gt;&lt;/em&gt; 
exits, at the priority &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_child_watch_add_full (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; priority,
    GPid pid,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GChildWatchFunc&quot; href=&quot;GChildWatchFunc ()&quot; title=&quot;link&quot;&gt;GChildWatchFunc&lt;/a&gt; function,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; notify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GPollFD</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>GPollFD</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">
</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    #if defined (G_OS_WIN32) &amp;amp;
    &amp;amp;
    GLIB_SIZEOF_VOID_P == 8 gint64 fd;
    #else gint fd;
    #endif gushort events;
    gushort revents;
} GPollFD;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSource</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>GSource</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GSource&lt;/span&gt; struct is an opaque data type representing
an event source.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GSource;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSourceDummyMarshal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>GSourceDummyMarshal</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">This is just a placeholder for &lt;a
href=&quot;/usr/share/gtk-doc/html/gobject/gobject-Closures.html#GClosureMarshal&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GClosureMarshal&lt;/span&gt;&lt;/a&gt;, which cannot be used here
for dependency reasons.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GSourceDummyMarshal) (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSourceFuncs</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>GSourceFuncs</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GSourceFuncs&quot; title=&quot;GSourceFuncs&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSourceFuncs&lt;/span&gt;&lt;/a&gt; struct contains a table of functions used to handle
event sources in a generic manner.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gboolean (*prepare) (GSource *source, gint *timeout_);
    gboolean (*check) (GSource *source);
    gboolean (*dispatch) (GSource *source, GSourceFunc callback, gpointer user_data);
    void (*finalize) (GSource *source);
    GSourceFunc closure_callback;
    GSourceDummyMarshal closure_marshal;
} GSourceFuncs;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSourceCallbackFuncs</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>GSourceCallbackFuncs</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GSourceCallbackFuncs&lt;/span&gt; struct contains
functions for managing callback objects. </Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    void (*ref) (gpointer cb_data);
    void (*unref) (gpointer cb_data);
    void (*get) (gpointer cb_data, GSource *source, GSourceFunc *func, gpointer *data);
} GSourceCallbackFuncs;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-new</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GSource&quot; title=&quot;GSource&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSource&lt;/span&gt;&lt;/a&gt; structure. The size is specified to
allow creating structures derived from &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GSource&quot; title=&quot;GSource&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSource&lt;/span&gt;&lt;/a&gt; that contain
additional data. The size passed in must be at least
&lt;code class=&quot;literal&quot;&gt;sizeof (GSource)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt;* g_source_new (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFuncs&quot; href=&quot;GSourceFuncs&quot; title=&quot;link&quot;&gt;GSourceFuncs&lt;/a&gt; *source_funcs,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; struct_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-ref</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Increases the reference count on a source by one.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt;* g_source_ref (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt; *source);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-unref</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Decreases the reference count of a source by one. If the
resulting reference count is zero the source and associated
memory will be destroyed.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_unref (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt; *source);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_set_funcs</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-set-funcs</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets the source functions (can be used to override 
default implementations) of an unattached source.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_set_funcs (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt; *source,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFuncs&quot; href=&quot;GSourceFuncs&quot; title=&gt;GSourceFuncs&lt;/a&gt; *funcs);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_attach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-attach</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Adds a &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GSource&quot; title=&quot;GSource&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSource&lt;/span&gt;&lt;/a&gt; to a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/em&gt; so that it will be executed within
that context.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_source_attach (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt; *source,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&gt;GMainContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-destroy</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Removes a source from its &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; title=&quot;GMainContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainContext&lt;/span&gt;&lt;/a&gt;, if any, and mark it as
destroyed.  The source cannot be subsequently added to another
context.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_destroy (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt; *source);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_is_destroyed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-is-destroyed</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/em&gt; has been destroyed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_source_is_destroyed (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt; *source);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_set_priority</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-set-priority</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets the priority of a source. While the main loop is being
run, a source will be dispatched if it is ready to be dispatched and no sources 
at a higher (numerically smaller) priority are ready to be dispatched.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_set_priority (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt; *source,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; priority);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_get_priority</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-get-priority</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Gets the priority of a source.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_source_get_priority (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt; *source);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_set_can_recurse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-set-can-recurse</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets whether a source can be called recursively. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;can_recurse&lt;/code&gt;&lt;/em&gt; is
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;, then while the source is being dispatched then this source
will be processed normally. Otherwise, all processing of this
source is blocked until the dispatch function returns.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_set_can_recurse (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt; *source,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; can_recurse);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_get_can_recurse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-get-can-recurse</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks whether a source is allowed to be called recursively.
see &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-source-set-can-recurse&quot; title=&quot;g_source_set_can_recurse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_source_set_can_recurse()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_source_get_can_recurse (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt; *source);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_get_id</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-get-id</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the numeric ID for a particular source. The ID of a source
is a positive integer which is unique within a particular main loop 
context. The reverse
mapping from ID to source is done by &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-main-context-find-source-by-id&quot; title=&quot;g_main_context_find_source_by_id ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_main_context_find_source_by_id()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_source_get_id (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt; *source);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_get_context</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-get-context</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Gets the &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; title=&quot;GMainContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMainContext&lt;/span&gt;&lt;/a&gt; with which the source is associated.
Calling this function on a destroyed source is an error.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GMainContext&quot; href=&quot;GMainContext&quot; title=&quot;link&quot;&gt;GMainContext&lt;/a&gt;* g_source_get_context (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&gt;GSource&lt;/a&gt; *source);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_set_callback</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-set-callback</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets the callback function for a source. The callback for a source is
called from the source's dispatch function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_set_callback (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt; *source,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFunc&quot; href=&quot;GSourceFunc ()&quot; title=&quot;link&quot;&gt;GSourceFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; notify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSourceFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>GSourceFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Specifies the type of function passed to &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-timeout-add&quot; title=&quot;g_timeout_add ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timeout_add()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-timeout-add-full&quot; title=&quot;g_timeout_add_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timeout_add_full()&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-idle-add&quot; title=&quot;g_idle_add ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_idle_add()&lt;/code&gt;&lt;/a&gt;, and &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-idle-add-full&quot; title=&quot;g_idle_add_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_idle_add_full()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GSourceFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_set_callback_indirect</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-set-callback-indirect</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Sets the callback function storing the data as a refcounted callback
&quot;object&quot;. This is used internally. Note that calling 
&lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-source-set-callback-indirect&quot; title=&quot;g_source_set_callback_indirect ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_source_set_callback_indirect()&lt;/code&gt;&lt;/a&gt; assumes
an initial reference count on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;callback_data&lt;/code&gt;&lt;/em&gt;, and thus
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;callback_funcs-&amp;gt;unref&lt;/code&gt;&lt;/em&gt; will eventually be called once more
than &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;callback_funcs-&amp;gt;ref&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_set_callback_indirect (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt; *source,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; callback_data,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceCallbackFuncs&quot; href=&quot;GSourceCallbackFuncs&quot; title=&gt;GSourceCallbackFuncs&lt;/a&gt; *callback_funcs);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_add_poll</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-add-poll</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Adds a file descriptor to the set of file descriptors polled for
this source. This is usually combined with &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-source-new&quot; title=&quot;g_source_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_source_new()&lt;/code&gt;&lt;/a&gt; to add an
event source. The event source's check function will typically test
the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;revents&lt;/code&gt;&lt;/em&gt; field in the &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GPollFD&quot; title=&quot;GPollFD&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPollFD&lt;/span&gt;&lt;/a&gt; struct and return &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if events need
to be processed.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_add_poll (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt; *source,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GPollFD&quot; href=&quot;GPollFD&quot; title=&gt;GPollFD&lt;/a&gt; *fd);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_remove_poll</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-remove-poll</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Removes a file descriptor from the set of file descriptors polled for
this source.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_remove_poll (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt; *source,
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GPollFD&quot; href=&quot;GPollFD&quot; title=&gt;GPollFD&lt;/a&gt; *fd);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_get_current_time</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-get-current-time</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Gets the &quot;current time&quot; to be used when checking 
this source. The advantage of calling this function over
calling &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-get-current-time&quot; title=&quot;g_get_current_time ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_current_time()&lt;/code&gt;&lt;/a&gt; directly is that when 
checking multiple sources, GLib can cache a single value
instead of having to repeatedly get the system time.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_get_current_time (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt; *source,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; href=&quot;GTimeVal&quot; title=&gt;GTimeVal&lt;/a&gt; *timeval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-remove</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Removes the source with the given id from the default main context. 
The id of
a &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GSource&quot; title=&quot;GSource&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSource&lt;/span&gt;&lt;/a&gt; is given by &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-source-get-id&quot; title=&quot;g_source_get_id ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_source_get_id()&lt;/code&gt;&lt;/a&gt;, or will be returned by the
functions &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-source-attach&quot; title=&quot;g_source_attach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_source_attach()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-idle-add&quot; title=&quot;g_idle_add ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_idle_add()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-idle-add-full&quot; title=&quot;g_idle_add_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_idle_add_full()&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-timeout-add&quot; title=&quot;g_timeout_add ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timeout_add()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-timeout-add-full&quot; title=&quot;g_timeout_add_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timeout_add_full()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-child-watch-add&quot; title=&quot;g_child_watch_add ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_child_watch_add()&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-child-watch-add-full&quot; title=&quot;g_child_watch_add_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_child_watch_add_full()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-add-watch&quot; title=&quot;g_io_add_watch ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_add_watch()&lt;/code&gt;&lt;/a&gt;, and &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-add-watch-full&quot; title=&quot;g_io_add_watch_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_add_watch_full()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_source_remove (
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; tag);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_remove_by_funcs_user_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-remove-by-funcs-user-data</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Removes a source from the default main loop context given the
source functions and user data. If multiple sources exist with the
same source functions and user data, only one will be destroyed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_source_remove_by_funcs_user_data (
    &lt;a class=&quot;glib-The-Main-Event-Loop.html#GSourceFuncs&quot; href=&quot;GSourceFuncs&quot; title=&quot;link&quot;&gt;GSourceFuncs&lt;/a&gt; *funcs,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_remove_by_user_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-The-Main-Event-Loop.html</Path>
  <Anchor>g-source-remove-by-user-data</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Removes a source from the default main loop context given the user
data for the callback. If multiple sources exist with the same user
data, only one will be destroyed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_source_remove_by_user_data (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_THREADS_IMPL_POSIX</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-THREADS-IMPL-POSIX:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">This macro is defined if POSIX style threads are used.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_THREADS_IMPL_POSIX&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_THREADS_IMPL_NONE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-THREADS-IMPL-NONE:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">This macro is defined if no thread implementation is used. You can,
however, provide one to &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-init&quot; title=&quot;g_thread_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_init()&lt;/code&gt;&lt;/a&gt; to make GLib multi-thread safe.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_THREADS_IMPL_NONE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_THREAD_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-THREAD-ERROR:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The error domain of the GLib thread subsystem.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_THREAD_ERROR g_thread_error_quark ()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_THREAD_ERROR_AGAIN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GThreadError</Anchor>
  <NodeRef refid="345"/>
  <Declaration type="html">&lt;pre&gt;G_THREAD_ERROR_AGAIN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GThreadError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GThreadError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GThreadError</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Possible errors of thread related functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_THREAD_ERROR_AGAIN  
} GThreadError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GThreadFunctions</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GThreadFunctions</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">This function table is used by &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-init&quot; title=&quot;g_thread_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_init()&lt;/code&gt;&lt;/a&gt; to initialize the
thread system. The functions in the table are directly used by their
g_* prepended counterparts (described in this document).  For example,
if you call &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-mutex-new&quot; title=&quot;g_mutex_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mutex_new()&lt;/code&gt;&lt;/a&gt; then &lt;code class=&quot;function&quot;&gt;mutex_new()&lt;/code&gt; from the table provided to
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-init&quot; title=&quot;g_thread_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_init()&lt;/code&gt;&lt;/a&gt; will be called.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GMutex* (*mutex_new) (void);
    void (*mutex_lock) (GMutex *mutex);
    gboolean (*mutex_trylock) (GMutex *mutex);
    void (*mutex_unlock) (GMutex *mutex);
    void (*mutex_free) (GMutex *mutex);
    GCond* (*cond_new) (void);
    void (*cond_signal) (GCond *cond);
    void (*cond_broadcast) (GCond *cond);
    void (*cond_wait) (GCond *cond, GMutex *mutex);
    gboolean (*cond_timed_wait) (GCond *cond, GMutex *mutex, GTimeVal *end_time);
    void (*cond_free) (GCond *cond);
    GPrivate* (*private_new) (GDestroyNotify destructor);
    gpointer (*private_get) (GPrivate *private_key);
    void (*private_set) (GPrivate *private_key, gpointer data);
    void (*thread_create) (GThreadFunc func, gpointer data, gulong stack_size, gboolean joinable, gboolean bound, GThreadPriority priority, gpointer thread, GError **error);
    void (*thread_yield) (void);
    void (*thread_join) (gpointer thread);
    void (*thread_exit) (void);
    void (*thread_set_priority)(gpointer thread, GThreadPriority priority);
    void (*thread_self) (gpointer thread);
    gboolean (*thread_equal) (gpointer thread1, gpointer thread2);
} GThreadFunctions;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-thread-init</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">If you use GLib from more than one thread, you must initialize
the thread system by calling &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-init&quot; title=&quot;g_thread_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_init()&lt;/code&gt;&lt;/a&gt;. Most of the time you 
will only have to call &lt;code class=&quot;literal&quot;&gt;g_thread_init (NULL)&lt;/code&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_init (
    &lt;a class=&quot;glib-Threads.html#GThreadFunctions&quot; href=&quot;GThreadFunctions&quot; title=&gt;GThreadFunctions&lt;/a&gt; *vtable);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_supported</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-thread-supported</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">This function returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the thread system is initialized, and
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; if it is not.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; g_thread_supported (
    );&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GThreadFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GThreadFunc</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Specifies the type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; functions passed to
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-create&quot; title=&quot;g_thread_create ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_create()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-create-full&quot; title=&quot;g_thread_create_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_create_full()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; (
    *GThreadFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_THREAD_PRIORITY_LOW</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GThreadPriority</Anchor>
  <NodeRef refid="350"/>
  <Declaration type="html">&lt;pre&gt;G_THREAD_PRIORITY_LOW&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GThreadPriority</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_THREAD_PRIORITY_NORMAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GThreadPriority</Anchor>
  <NodeRef refid="350"/>
  <Declaration type="html">&lt;pre&gt;G_THREAD_PRIORITY_NORMAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GThreadPriority</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_THREAD_PRIORITY_HIGH</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GThreadPriority</Anchor>
  <NodeRef refid="350"/>
  <Declaration type="html">&lt;pre&gt;G_THREAD_PRIORITY_HIGH&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GThreadPriority</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_THREAD_PRIORITY_URGENT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GThreadPriority</Anchor>
  <NodeRef refid="350"/>
  <Declaration type="html">&lt;pre&gt;G_THREAD_PRIORITY_URGENT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GThreadPriority</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GThreadPriority</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GThreadPriority</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Specifies the priority of a thread. </Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_THREAD_PRIORITY_LOW,
    G_THREAD_PRIORITY_NORMAL,
    G_THREAD_PRIORITY_HIGH,
    G_THREAD_PRIORITY_URGENT 
} GThreadPriority;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GThread</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GThread</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GThread&quot; title=&quot;GThread&quot;&gt;&lt;span class=&quot;type&quot;&gt;GThread&lt;/span&gt;&lt;/a&gt; struct represents a running thread. It has three public
read-only members, but the underlying struct is bigger, so you must
not copy this struct.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GThread;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_create</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-thread-create</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">This function creates a new thread with the default priority.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Threads.html#GThread&quot; href=&quot;GThread&quot; title=&quot;link&quot;&gt;GThread&lt;/a&gt;* g_thread_create (
    &lt;a class=&quot;glib-Threads.html#GThreadFunc&quot; href=&quot;GThreadFunc ()&quot; title=&quot;link&quot;&gt;GThreadFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; joinable,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_create_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-thread-create-full</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">This function creates a new thread with the priority &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/em&gt;. If the
underlying thread implementation supports it, the thread gets a stack
size of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;stack_size&lt;/code&gt;&lt;/em&gt; or the default value for the current platform, if
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;stack_size&lt;/code&gt;&lt;/em&gt; is 0.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Threads.html#GThread&quot; href=&quot;GThread&quot; title=&quot;link&quot;&gt;GThread&lt;/a&gt;* g_thread_create_full (
    &lt;a class=&quot;glib-Threads.html#GThreadFunc&quot; href=&quot;GThreadFunc ()&quot; title=&quot;link&quot;&gt;GThreadFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&quot;link&quot;&gt;gulong&lt;/a&gt; stack_size,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; joinable,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; bound,
    &lt;a class=&quot;glib-Threads.html#GThreadPriority&quot; href=&quot;enum GThreadPriority&quot; title=&quot;link&quot;&gt;GThreadPriority&lt;/a&gt; priority,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_self</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-thread-self</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">This functions returns the &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GThread&quot; title=&quot;GThread&quot;&gt;&lt;span class=&quot;type&quot;&gt;GThread&lt;/span&gt;&lt;/a&gt; corresponding to the calling thread.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Threads.html#GThread&quot; href=&quot;GThread&quot; title=&gt;GThread&lt;/a&gt;* g_thread_self (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_join</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-thread-join</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Waits until &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/em&gt; finishes, i.e. the function &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt;, as given
to &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-create&quot; title=&quot;g_thread_create ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_create()&lt;/code&gt;&lt;/a&gt;, returns or &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-exit&quot; title=&quot;g_thread_exit ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_exit()&lt;/code&gt;&lt;/a&gt; is called by
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/em&gt;. All resources of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/em&gt; including the &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GThread&quot; title=&quot;GThread&quot;&gt;&lt;span class=&quot;type&quot;&gt;GThread&lt;/span&gt;&lt;/a&gt; struct are
released. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/em&gt; must have been created with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;joinable&lt;/code&gt;&lt;/em&gt;=&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; in
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-create&quot; title=&quot;g_thread_create ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_create()&lt;/code&gt;&lt;/a&gt;. The value returned by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; or given to
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-exit&quot; title=&quot;g_thread_exit ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_exit()&lt;/code&gt;&lt;/a&gt; by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/em&gt; is returned by this function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_thread_join (
    &lt;a class=&quot;glib-Threads.html#GThread&quot; href=&quot;GThread&quot; title=&gt;GThread&lt;/a&gt; *thread);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_set_priority</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-thread-set-priority</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Changes the priority of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_set_priority (
    &lt;a class=&quot;glib-Threads.html#GThread&quot; href=&quot;GThread&quot; title=&quot;link&quot;&gt;GThread&lt;/a&gt; *thread,
    &lt;a class=&quot;glib-Threads.html#GThreadPriority&quot; href=&quot;enum GThreadPriority&quot; title=&gt;GThreadPriority&lt;/a&gt; priority);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_yield</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-thread-yield</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Gives way to other threads waiting to be scheduled. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_yield (
    );&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_exit</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-thread-exit</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Exits the current thread. If another thread is waiting for that thread
using &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-join&quot; title=&quot;g_thread_join ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_join()&lt;/code&gt;&lt;/a&gt; and the current thread is joinable, the waiting
thread will be woken up and get &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;retval&lt;/code&gt;&lt;/em&gt; as the return value of
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-join&quot; title=&quot;g_thread_join ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_join()&lt;/code&gt;&lt;/a&gt;. If the current thread is not joinable, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;retval&lt;/code&gt;&lt;/em&gt; is
ignored. Calling</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_exit (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; retval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-thread-foreach</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Call &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;thread_func&lt;/code&gt;&lt;/em&gt; on all existing &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GThread&quot; title=&quot;GThread&quot;&gt;&lt;span class=&quot;type&quot;&gt;GThread&lt;/span&gt;&lt;/a&gt; structures. Note that
threads may decide to exit while &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;thread_func&lt;/code&gt;&lt;/em&gt; is running, so
without intimate knowledge about the lifetime of foreign threads,
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;thread_func&lt;/code&gt;&lt;/em&gt; shouldn't access the GThread* pointer passed in as
first argument. However, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;thread_func&lt;/code&gt;&lt;/em&gt; will not be called for threads
which are known to have exited already.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_foreach (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GFunc&quot; href=&quot;GFunc ()&quot; title=&quot;link&quot;&gt;GFunc&lt;/a&gt; thread_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMutex</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GMutex</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GMutex&quot; title=&quot;GMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMutex&lt;/span&gt;&lt;/a&gt; struct is an opaque data structure to represent a mutex
(mutual exclusion). It can be used to protect data against shared
access. Take for example the following function:
</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GMutex GMutex;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mutex_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-mutex-new</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GMutex&quot; title=&quot;GMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMutex&lt;/span&gt;&lt;/a&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Threads.html#GMutex&quot; href=&quot;GMutex&quot; title=&gt;GMutex&lt;/a&gt;* g_mutex_new (
    );&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mutex_lock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-mutex-lock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Locks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is already locked by another thread, the
current thread will block until &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is unlocked by the other
thread.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mutex_lock (
    &lt;a class=&quot;glib-Threads.html#GMutex&quot; href=&quot;GMutex&quot; title=&gt;GMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mutex_trylock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-mutex-trylock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Tries to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is already locked by another
thread, it immediately returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;. Otherwise it locks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;
and returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_mutex_trylock (
    &lt;a class=&quot;glib-Threads.html#GMutex&quot; href=&quot;GMutex&quot; title=&gt;GMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mutex_unlock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-mutex-unlock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Unlocks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;. If another thread is blocked in a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-mutex-lock&quot; title=&quot;g_mutex_lock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mutex_lock()&lt;/code&gt;&lt;/a&gt; call
for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;, it will be woken and can lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; itself.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mutex_unlock (
    &lt;a class=&quot;glib-Threads.html#GMutex&quot; href=&quot;GMutex&quot; title=&gt;GMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mutex_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-mutex-free</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Destroys &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mutex_free (
    &lt;a class=&quot;glib-Threads.html#GMutex&quot; href=&quot;GMutex&quot; title=&gt;GMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GStaticMutex</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GStaticMutex</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticMutex&quot; title=&quot;GStaticMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticMutex&lt;/span&gt;&lt;/a&gt; works like a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GMutex&quot; title=&quot;GMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMutex&lt;/span&gt;&lt;/a&gt;, but it has one significant
advantage. It doesn't need to be created at run-time like a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GMutex&quot; title=&quot;GMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMutex&lt;/span&gt;&lt;/a&gt;,
but can be defined at compile-time. Here is a shorter, easier and
safer version of our &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;give_me_next_number()&lt;/code&gt;&lt;/code&gt; example:</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GStaticMutex GStaticMutex;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STATIC_MUTEX_INIT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-STATIC-MUTEX-INIT:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticMutex&quot; title=&quot;GStaticMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticMutex&lt;/span&gt;&lt;/a&gt; must be initialized with this macro, before it can be
used. This macro can used be to initialize a variable, but it cannot
be assigned to a variable. In that case you have to use
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-mutex-init&quot; title=&quot;g_static_mutex_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_mutex_init()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STATIC_MUTEX_INIT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_mutex_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-mutex-init</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Initializes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;. Alternatively you can initialize it with
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-STATIC-MUTEX-INIT:CAPS&quot; title=&quot;G_STATIC_MUTEX_INIT&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_STATIC_MUTEX_INIT&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_mutex_init (
    &lt;a class=&quot;glib-Threads.html#GStaticMutex&quot; href=&quot;GStaticMutex&quot; title=&gt;GStaticMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_mutex_lock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-mutex-lock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Works like &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-mutex-lock&quot; title=&quot;g_mutex_lock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mutex_lock()&lt;/code&gt;&lt;/a&gt;, but for a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticMutex&quot; title=&quot;GStaticMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticMutex&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_mutex_lock (
    &lt;a class=&quot;glib-Threads.html#GStaticMutex&quot; href=&quot;GStaticMutex&quot; title=&gt;GStaticMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_mutex_trylock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-mutex-trylock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Works like &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-mutex-trylock&quot; title=&quot;g_mutex_trylock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mutex_trylock()&lt;/code&gt;&lt;/a&gt;, but for a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticMutex&quot; title=&quot;GStaticMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticMutex&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_static_mutex_trylock (
    &lt;a class=&quot;glib-Threads.html#GStaticMutex&quot; href=&quot;GStaticMutex&quot; title=&gt;GStaticMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_mutex_unlock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-mutex-unlock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Works like &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-mutex-unlock&quot; title=&quot;g_mutex_unlock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mutex_unlock()&lt;/code&gt;&lt;/a&gt;, but for a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticMutex&quot; title=&quot;GStaticMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticMutex&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_mutex_unlock (
    &lt;a class=&quot;glib-Threads.html#GStaticMutex&quot; href=&quot;GStaticMutex&quot; title=&gt;GStaticMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_mutex_get_mutex</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-mutex-get-mutex</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">For some operations (like &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-cond-wait&quot; title=&quot;g_cond_wait ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cond_wait()&lt;/code&gt;&lt;/a&gt;) you must have a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GMutex&quot; title=&quot;GMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMutex&lt;/span&gt;&lt;/a&gt;
instead of a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticMutex&quot; title=&quot;GStaticMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticMutex&lt;/span&gt;&lt;/a&gt;. This function will return the
corresponding &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GMutex&quot; title=&quot;GMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMutex&lt;/span&gt;&lt;/a&gt; for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Threads.html#GMutex&quot; href=&quot;GMutex&quot; title=&quot;link&quot;&gt;GMutex&lt;/a&gt;* g_static_mutex_get_mutex (
    &lt;a class=&quot;glib-Threads.html#GStaticMutex&quot; href=&quot;GStaticMutex&quot; title=&gt;GStaticMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_mutex_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-mutex-free</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Releases all resources allocated to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_mutex_free (
    &lt;a class=&quot;glib-Threads.html#GStaticMutex&quot; href=&quot;GStaticMutex&quot; title=&gt;GStaticMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOCK_DEFINE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-LOCK-DEFINE:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The &lt;code class=&quot;literal&quot;&gt;G_LOCK_&lt;/code&gt;* macros provide a convenient interface to &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticMutex&quot; title=&quot;GStaticMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticMutex&lt;/span&gt;&lt;/a&gt;
with the advantage that they will expand to nothing in programs
compiled against a thread-disabled GLib, saving code and memory
there. &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-LOCK-DEFINE:CAPS&quot; title=&quot;G_LOCK_DEFINE()&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_LOCK_DEFINE&lt;/span&gt;&lt;/a&gt; defines a lock. It can appear anywhere variable
definitions may appear in programs, i.e. in the first block of a
function or outside of functions. The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt; parameter will be mangled
to get the name of the &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticMutex&quot; title=&quot;GStaticMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticMutex&lt;/span&gt;&lt;/a&gt;. This means that you can use
names of existing variables as the parameter - e.g. the name of the
variable you intent to protect with the lock. Look at our
&lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;give_me_next_number()&lt;/code&gt;&lt;/code&gt; example using the &lt;code class=&quot;literal&quot;&gt;G_LOCK_&lt;/code&gt;* macros:</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LOCK_DEFINE(name)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOCK_DEFINE_STATIC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-LOCK-DEFINE-STATIC:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">This works like &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-LOCK-DEFINE:CAPS&quot; title=&quot;G_LOCK_DEFINE()&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_LOCK_DEFINE&lt;/span&gt;&lt;/a&gt;, but it creates a static object.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LOCK_DEFINE_STATIC(name)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOCK_EXTERN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-LOCK-EXTERN:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">This declares a lock, that is defined with &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-LOCK-DEFINE:CAPS&quot; title=&quot;G_LOCK_DEFINE()&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_LOCK_DEFINE&lt;/span&gt;&lt;/a&gt; in another module.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LOCK_EXTERN(name)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOCK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-LOCK:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Works like &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-mutex-lock&quot; title=&quot;g_mutex_lock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mutex_lock()&lt;/code&gt;&lt;/a&gt;, but for a lock defined with &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-LOCK-DEFINE:CAPS&quot; title=&quot;G_LOCK_DEFINE()&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_LOCK_DEFINE&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LOCK(name)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TRYLOCK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-TRYLOCK:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Works like &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-mutex-trylock&quot; title=&quot;g_mutex_trylock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mutex_trylock()&lt;/code&gt;&lt;/a&gt;, but for a lock defined with &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-LOCK-DEFINE:CAPS&quot; title=&quot;G_LOCK_DEFINE()&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_LOCK_DEFINE&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TRYLOCK(name)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNLOCK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-UNLOCK:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Works like &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-mutex-unlock&quot; title=&quot;g_mutex_unlock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mutex_unlock()&lt;/code&gt;&lt;/a&gt;, but for a lock defined with &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-LOCK-DEFINE:CAPS&quot; title=&quot;G_LOCK_DEFINE()&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_LOCK_DEFINE&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_UNLOCK(name)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GStaticRecMutex</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GStaticRecMutex</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticRecMutex&quot; title=&quot;GStaticRecMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticRecMutex&lt;/span&gt;&lt;/a&gt; works like a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticMutex&quot; title=&quot;GStaticMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticMutex&lt;/span&gt;&lt;/a&gt;, but it can be locked
multiple times by one thread. If you enter it n times, you have to
unlock it n times again to let other threads lock it. An exception is
the function &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rec-mutex-unlock-full&quot; title=&quot;g_static_rec_mutex_unlock_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rec_mutex_unlock_full()&lt;/code&gt;&lt;/a&gt;: that allows you to
unlock a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticRecMutex&quot; title=&quot;GStaticRecMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticRecMutex&lt;/span&gt;&lt;/a&gt; completely returning the depth, (i.e. the
number of times this mutex was locked). The depth can later be used to
restore the state of the &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticRecMutex&quot; title=&quot;GStaticRecMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticRecMutex&lt;/span&gt;&lt;/a&gt; by calling
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rec-mutex-lock-full&quot; title=&quot;g_static_rec_mutex_lock_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rec_mutex_lock_full()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GStaticRecMutex;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STATIC_REC_MUTEX_INIT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-STATIC-REC-MUTEX-INIT:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticRecMutex&quot; title=&quot;GStaticRecMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticRecMutex&lt;/span&gt;&lt;/a&gt; must be initialized with this macro before it can
be used. This macro can used be to initialize a variable, but it
cannot be assigned to a variable. In that case you have to use
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rec-mutex-init&quot; title=&quot;g_static_rec_mutex_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rec_mutex_init()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STATIC_REC_MUTEX_INIT {
    G_STATIC_MUTEX_INIT }&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rec_mutex_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rec-mutex-init</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticRecMutex&quot; title=&quot;GStaticRecMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticRecMutex&lt;/span&gt;&lt;/a&gt; must be initialized with this function before it
can be used. Alternatively you can initialize it with
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-STATIC-REC-MUTEX-INIT:CAPS&quot; title=&quot;G_STATIC_REC_MUTEX_INIT&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_STATIC_REC_MUTEX_INIT&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rec_mutex_init (
    &lt;a class=&quot;glib-Threads.html#GStaticRecMutex&quot; href=&quot;GStaticRecMutex&quot; title=&gt;GStaticRecMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rec_mutex_lock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rec-mutex-lock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Locks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is already locked by another thread, the
current thread will block until &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is unlocked by the other
thread. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is already locked by the calling thread, this
functions increases the depth of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; and returns immediately.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rec_mutex_lock (
    &lt;a class=&quot;glib-Threads.html#GStaticRecMutex&quot; href=&quot;GStaticRecMutex&quot; title=&gt;GStaticRecMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rec_mutex_trylock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rec-mutex-trylock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Tries to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is already locked by another thread,
it immediately returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;. Otherwise it locks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; and returns
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is already locked by the calling thread, this
functions increases the depth of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; and immediately returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_static_rec_mutex_trylock (
    &lt;a class=&quot;glib-Threads.html#GStaticRecMutex&quot; href=&quot;GStaticRecMutex&quot; title=&gt;GStaticRecMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rec_mutex_unlock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rec-mutex-unlock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Unlocks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;. Another thread will be allowed to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; only
when it has been unlocked as many times as it had been locked
before. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is completely unlocked and another thread is blocked
in a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rec-mutex-lock&quot; title=&quot;g_static_rec_mutex_lock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rec_mutex_lock()&lt;/code&gt;&lt;/a&gt; call for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;, it will be woken and
can lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; itself.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rec_mutex_unlock (
    &lt;a class=&quot;glib-Threads.html#GStaticRecMutex&quot; href=&quot;GStaticRecMutex&quot; title=&gt;GStaticRecMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rec_mutex_lock_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rec-mutex-lock-full</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Works like calling &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rec-mutex-lock&quot; title=&quot;g_static_rec_mutex_lock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rec_mutex_lock()&lt;/code&gt;&lt;/a&gt; for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;depth&lt;/code&gt;&lt;/em&gt; times.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rec_mutex_lock_full (
    &lt;a class=&quot;glib-Threads.html#GStaticRecMutex&quot; href=&quot;GStaticRecMutex&quot; title=&quot;link&quot;&gt;GStaticRecMutex&lt;/a&gt; *mutex,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; depth);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rec_mutex_unlock_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rec-mutex-unlock-full</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Completely unlocks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;. If another thread is blocked in a
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rec-mutex-lock&quot; title=&quot;g_static_rec_mutex_lock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rec_mutex_lock()&lt;/code&gt;&lt;/a&gt; call for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt;, it will be woken and can
lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; itself. This function returns the number of times that
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; has been locked by the current thread. To restore the state
before the call to &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rec-mutex-unlock-full&quot; title=&quot;g_static_rec_mutex_unlock_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rec_mutex_unlock_full()&lt;/code&gt;&lt;/a&gt; you can call
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rec-mutex-lock-full&quot; title=&quot;g_static_rec_mutex_lock_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rec_mutex_lock_full()&lt;/code&gt;&lt;/a&gt; with the depth returned by this
function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_static_rec_mutex_unlock_full (
    &lt;a class=&quot;glib-Threads.html#GStaticRecMutex&quot; href=&quot;GStaticRecMutex&quot; title=&gt;GStaticRecMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rec_mutex_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rec-mutex-free</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Releases all resources allocated to a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticRecMutex&quot; title=&quot;GStaticRecMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticRecMutex&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rec_mutex_free (
    &lt;a class=&quot;glib-Threads.html#GStaticRecMutex&quot; href=&quot;GStaticRecMutex&quot; title=&gt;GStaticRecMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GStaticRWLock</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GStaticRWLock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticRWLock&quot; title=&quot;GStaticRWLock&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticRWLock&lt;/span&gt;&lt;/a&gt; struct represents a read-write lock. A read-write
lock can be used for protecting data that some portions of code only
read from, while others also write. In such situations it is
desirable that several readers can read at once, whereas of course
only one writer may write at a time. Take a look at the following
example:
</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GStaticRWLock;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STATIC_RW_LOCK_INIT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-STATIC-RW-LOCK-INIT:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticRWLock&quot; title=&quot;GStaticRWLock&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticRWLock&lt;/span&gt;&lt;/a&gt; must be initialized with this macro before it can
be used. This macro can used be to initialize a variable, but it
cannot be assigned to a variable. In that case you have to use
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rw-lock-init&quot; title=&quot;g_static_rw_lock_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rw_lock_init()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STATIC_RW_LOCK_INIT {
    G_STATIC_MUTEX_INIT, NULL, NULL, 0, FALSE, 0, 0 }&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rw_lock_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rw-lock-init</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticRWLock&quot; title=&quot;GStaticRWLock&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticRWLock&lt;/span&gt;&lt;/a&gt; must be initialized with this function before it can
be used. Alternatively you can initialize it with
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-STATIC-RW-LOCK-INIT:CAPS&quot; title=&quot;G_STATIC_RW_LOCK_INIT&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_STATIC_RW_LOCK_INIT&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rw_lock_init (
    &lt;a class=&quot;glib-Threads.html#GStaticRWLock&quot; href=&quot;GStaticRWLock&quot; title=&gt;GStaticRWLock&lt;/a&gt; *lock);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rw_lock_reader_lock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rw-lock-reader-lock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Locks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for reading. There may be unlimited concurrent locks for
reading of a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticRWLock&quot; title=&quot;GStaticRWLock&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticRWLock&lt;/span&gt;&lt;/a&gt; at the same time.  If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; is already
locked for writing by another thread or if another thread is already
waiting to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing, this function will block until
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; is unlocked by the other writing thread and no other writing
threads want to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt;. This lock has to be unlocked by
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rw-lock-reader-unlock&quot; title=&quot;g_static_rw_lock_reader_unlock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rw_lock_reader_unlock()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rw_lock_reader_lock (
    &lt;a class=&quot;glib-Threads.html#GStaticRWLock&quot; href=&quot;GStaticRWLock&quot; title=&gt;GStaticRWLock&lt;/a&gt; *lock);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rw_lock_reader_trylock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rw-lock-reader-trylock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Tries to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for reading. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; is already locked for
writing by another thread or if another thread is already waiting to
lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing, immediately returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;. Otherwise locks
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for reading and returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;. This lock has to be unlocked by
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rw-lock-reader-unlock&quot; title=&quot;g_static_rw_lock_reader_unlock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rw_lock_reader_unlock()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_static_rw_lock_reader_trylock (
    &lt;a class=&quot;glib-Threads.html#GStaticRWLock&quot; href=&quot;GStaticRWLock&quot; title=&gt;GStaticRWLock&lt;/a&gt; *lock);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rw_lock_reader_unlock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rw-lock-reader-unlock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Unlocks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt;. If a thread waits to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing and all
locks for reading have been unlocked, the waiting thread is woken up
and can lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rw_lock_reader_unlock (
    &lt;a class=&quot;glib-Threads.html#GStaticRWLock&quot; href=&quot;GStaticRWLock&quot; title=&gt;GStaticRWLock&lt;/a&gt; *lock);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rw_lock_writer_lock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rw-lock-writer-lock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Locks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; is already locked for writing or
reading by other threads, this function will block until &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; is
completely unlocked and then lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing. While this
functions waits to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt;, no other thread can lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for
reading. When &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; is locked for writing, no other thread can lock
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; (neither for reading nor writing). This lock has to be unlocked
by &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rw-lock-writer-unlock&quot; title=&quot;g_static_rw_lock_writer_unlock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rw_lock_writer_unlock()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rw_lock_writer_lock (
    &lt;a class=&quot;glib-Threads.html#GStaticRWLock&quot; href=&quot;GStaticRWLock&quot; title=&gt;GStaticRWLock&lt;/a&gt; *lock);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rw_lock_writer_trylock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rw-lock-writer-trylock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Tries to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; is already locked (for
either reading or writing) by another thread, it immediately returns
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;. Otherwise it locks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing and returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;. This
lock has to be unlocked by &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-static-rw-lock-writer-unlock&quot; title=&quot;g_static_rw_lock_writer_unlock ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_static_rw_lock_writer_unlock()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_static_rw_lock_writer_trylock (
    &lt;a class=&quot;glib-Threads.html#GStaticRWLock&quot; href=&quot;GStaticRWLock&quot; title=&gt;GStaticRWLock&lt;/a&gt; *lock);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rw_lock_writer_unlock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rw-lock-writer-unlock</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Unlocks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt;. If a thread is waiting to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing and
all locks for reading have been unlocked, the waiting thread is woken
up and can lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing. If no thread is waiting to lock
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for writing, and some thread or threads are waiting to lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt;
for reading, the waiting threads are woken up and can lock &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt; for
reading.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rw_lock_writer_unlock (
    &lt;a class=&quot;glib-Threads.html#GStaticRWLock&quot; href=&quot;GStaticRWLock&quot; title=&gt;GStaticRWLock&lt;/a&gt; *lock);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_rw_lock_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-rw-lock-free</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Releases all resources allocated to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/em&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_rw_lock_free (
    &lt;a class=&quot;glib-Threads.html#GStaticRWLock&quot; href=&quot;GStaticRWLock&quot; title=&gt;GStaticRWLock&lt;/a&gt; *lock);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCond</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GCond</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GCond&quot; title=&quot;GCond&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCond&lt;/span&gt;&lt;/a&gt; struct is an opaque data structure that represents a
condition. Threads can block on a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GCond&quot; title=&quot;GCond&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCond&lt;/span&gt;&lt;/a&gt; if they find a certain
condition to be false. If other threads change the state of this
condition they signal the &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GCond&quot; title=&quot;GCond&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCond&lt;/span&gt;&lt;/a&gt;, and that causes the waiting threads
to be woken up.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GCond GCond;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cond_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-cond-new</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GCond&quot; title=&quot;GCond&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCond&lt;/span&gt;&lt;/a&gt;. This function will abort, if &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-thread-init&quot; title=&quot;g_thread_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_init()&lt;/code&gt;&lt;/a&gt;
has not been called yet.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Threads.html#GCond&quot; href=&quot;GCond&quot; title=&gt;GCond&lt;/a&gt;* g_cond_new (
    );&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cond_signal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-cond-signal</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">If threads are waiting for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cond&lt;/code&gt;&lt;/em&gt;, exactly one of them is woken up. It
is good practice to hold the same lock as the waiting thread while
calling this function, though not required.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cond_signal (
    &lt;a class=&quot;glib-Threads.html#GCond&quot; href=&quot;GCond&quot; title=&gt;GCond&lt;/a&gt; *cond);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cond_broadcast</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-cond-broadcast</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">If threads are waiting for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cond&lt;/code&gt;&lt;/em&gt;, all of them are woken up. It is good
practice to lock the same mutex as the waiting threads, while calling
this function, though not required.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cond_broadcast (
    &lt;a class=&quot;glib-Threads.html#GCond&quot; href=&quot;GCond&quot; title=&gt;GCond&lt;/a&gt; *cond);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cond_wait</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-cond-wait</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Waits until this thread is woken up on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cond&lt;/code&gt;&lt;/em&gt;. The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is unlocked
before falling asleep and locked again before resuming.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cond_wait (
    &lt;a class=&quot;glib-Threads.html#GCond&quot; href=&quot;GCond&quot; title=&quot;link&quot;&gt;GCond&lt;/a&gt; *cond,
    &lt;a class=&quot;glib-Threads.html#GMutex&quot; href=&quot;GMutex&quot; title=&gt;GMutex&lt;/a&gt; *mutex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cond_timed_wait</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-cond-timed-wait</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Waits until this thread is woken up on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cond&lt;/code&gt;&lt;/em&gt;, but not longer than
until the time specified by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;abs_time&lt;/code&gt;&lt;/em&gt;. The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/em&gt; is
unlocked before falling asleep and locked again before resuming.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_cond_timed_wait (
    &lt;a class=&quot;glib-Threads.html#GCond&quot; href=&quot;GCond&quot; title=&quot;link&quot;&gt;GCond&lt;/a&gt; *cond,
    &lt;a class=&quot;glib-Threads.html#GMutex&quot; href=&quot;GMutex&quot; title=&quot;link&quot;&gt;GMutex&lt;/a&gt; *mutex,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; href=&quot;GTimeVal&quot; title=&gt;GTimeVal&lt;/a&gt; *abs_time);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cond_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-cond-free</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Destroys the &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GCond&quot; title=&quot;GCond&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCond&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cond_free (
    &lt;a class=&quot;glib-Threads.html#GCond&quot; href=&quot;GCond&quot; title=&gt;GCond&lt;/a&gt; *cond);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GPrivate</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GPrivate</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GPrivate&quot; title=&quot;GPrivate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPrivate&lt;/span&gt;&lt;/a&gt; struct is an opaque data structure to represent a thread
private data key. Threads can thereby obtain and set a pointer which
is private to the current thread. 
Take our &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;give_me_next_number()&lt;/code&gt;&lt;/code&gt; example from above.  
Suppose we don't want &lt;code class=&quot;literal&quot;&gt;current_number&lt;/code&gt; to be shared
between the threads, but instead to be private to each thread. This can be
done as follows:
</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GPrivate GPrivate;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_private_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-private-new</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GPrivate&quot; title=&quot;GPrivate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPrivate&lt;/span&gt;&lt;/a&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;destructor&lt;/code&gt;&lt;/em&gt; is non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, it is a pointer
to a destructor function. Whenever a thread ends and the corresponding
pointer keyed to this instance of &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GPrivate&quot; title=&quot;GPrivate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPrivate&lt;/span&gt;&lt;/a&gt; is non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, the
destructor is called with this pointer as the argument.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Threads.html#GPrivate&quot; href=&quot;GPrivate&quot; title=&quot;link&quot;&gt;GPrivate&lt;/a&gt;* g_private_new (
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; destructor);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_private_get</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-private-get</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Returns the pointer keyed to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;private_key&lt;/code&gt;&lt;/em&gt; for the current thread.
If &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-private-set&quot; title=&quot;g_private_set ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_private_set()&lt;/code&gt;&lt;/a&gt; hasn't been called for the
current &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;private_key&lt;/code&gt;&lt;/em&gt; and thread yet, this pointer will be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_private_get (
    &lt;a class=&quot;glib-Threads.html#GPrivate&quot; href=&quot;GPrivate&quot; title=&gt;GPrivate&lt;/a&gt; *private_key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_private_set</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-private-set</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Sets the pointer keyed to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;private_key&lt;/code&gt;&lt;/em&gt; for the current thread.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_private_set (
    &lt;a class=&quot;glib-Threads.html#GPrivate&quot; href=&quot;GPrivate&quot; title=&quot;link&quot;&gt;GPrivate&lt;/a&gt; *private_key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GStaticPrivate</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GStaticPrivate</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticPrivate&quot; title=&quot;GStaticPrivate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticPrivate&lt;/span&gt;&lt;/a&gt; works almost like a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GPrivate&quot; title=&quot;GPrivate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPrivate&lt;/span&gt;&lt;/a&gt;, but it has one
significant advantage. It doesn't need to be created at run-time like
a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GPrivate&quot; title=&quot;GPrivate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPrivate&lt;/span&gt;&lt;/a&gt;, but can be defined at compile-time. This is similar to
the difference between &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GMutex&quot; title=&quot;GMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMutex&lt;/span&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticMutex&quot; title=&quot;GStaticMutex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticMutex&lt;/span&gt;&lt;/a&gt;. Now look at our
&lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;give_me_next_number()&lt;/code&gt;&lt;/code&gt; example with &lt;span class=&quot;type&quot;&gt;&quot;&quot;&lt;/span&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GStaticPrivate;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STATIC_PRIVATE_INIT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-STATIC-PRIVATE-INIT:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Every &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticPrivate&quot; title=&quot;GStaticPrivate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticPrivate&lt;/span&gt;&lt;/a&gt; must be initialized with this macro, before it can
be used.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STATIC_PRIVATE_INIT &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_private_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-private-init</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Initializes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;private_key&lt;/code&gt;&lt;/em&gt;. Alternatively you can initialize it with
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-STATIC-PRIVATE-INIT:CAPS&quot; title=&quot;G_STATIC_PRIVATE_INIT&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_STATIC_PRIVATE_INIT&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_private_init (
    &lt;a class=&quot;glib-Threads.html#GStaticPrivate&quot; href=&quot;GStaticPrivate&quot; title=&gt;GStaticPrivate&lt;/a&gt; *private_key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_private_get</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-private-get</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Works like &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-private-get&quot; title=&quot;g_private_get ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_private_get()&lt;/code&gt;&lt;/a&gt; only for a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GStaticPrivate&quot; title=&quot;GStaticPrivate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStaticPrivate&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_static_private_get (
    &lt;a class=&quot;glib-Threads.html#GStaticPrivate&quot; href=&quot;GStaticPrivate&quot; title=&gt;GStaticPrivate&lt;/a&gt; *private_key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_private_set</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-private-set</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Sets the pointer keyed to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;private_key&lt;/code&gt;&lt;/em&gt; for the current thread and the
function &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/em&gt; to be called with that pointer (&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; or non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;),
whenever the pointer is set again or whenever the current thread ends.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_private_set (
    &lt;a class=&quot;glib-Threads.html#GStaticPrivate&quot; href=&quot;GStaticPrivate&quot; title=&quot;link&quot;&gt;GStaticPrivate&lt;/a&gt; *private_key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; notify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_static_private_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-static-private-free</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Releases all resources allocated to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;private_key&lt;/code&gt;&lt;/em&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_static_private_free (
    &lt;a class=&quot;glib-Threads.html#GStaticPrivate&quot; href=&quot;GStaticPrivate&quot; title=&gt;GStaticPrivate&lt;/a&gt; *private_key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOnce</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GOnce</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">A &lt;span class=&quot;structname&quot;&gt;GOnce&lt;/span&gt; struct controls a one-time initialization 
function. Any one-time initialization function must have its own unique 
&lt;span class=&quot;structname&quot;&gt;GOnce&lt;/span&gt; struct.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    volatile GOnceStatus status;
    volatile gpointer retval;
} GOnce;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ONCE_STATUS_NOTCALLED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GOnceStatus</Anchor>
  <NodeRef refid="417"/>
  <Declaration type="html">&lt;pre&gt;G_ONCE_STATUS_NOTCALLED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GOnceStatus">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOnceStatus</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ONCE_STATUS_PROGRESS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GOnceStatus</Anchor>
  <NodeRef refid="417"/>
  <Declaration type="html">&lt;pre&gt;G_ONCE_STATUS_PROGRESS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GOnceStatus">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOnceStatus</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ONCE_STATUS_READY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GOnceStatus</Anchor>
  <NodeRef refid="417"/>
  <Declaration type="html">&lt;pre&gt;G_ONCE_STATUS_READY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GOnceStatus">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOnceStatus</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOnceStatus</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>GOnceStatus</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The possible statuses of a one-time initialization function controlled by a &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GOnce&quot; title=&quot;GOnce&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOnce&lt;/span&gt;&lt;/a&gt; struct.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_ONCE_STATUS_NOTCALLED,
    G_ONCE_STATUS_PROGRESS,
    G_ONCE_STATUS_READY 
} GOnceStatus;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ONCE_INIT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>G-ONCE-INIT:CAPS</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GOnce&quot; title=&quot;GOnce&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOnce&lt;/span&gt;&lt;/a&gt; must be initialized with this macro before it can be used. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_ONCE_INIT {
    G_ONCE_STATUS_NOTCALLED, NULL }&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_once</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-once</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The first call to this routine by a process with a given &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GOnce&quot; title=&quot;GOnce&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOnce&lt;/span&gt;&lt;/a&gt; struct calls 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; with the given argument. Thereafter, subsequent calls to &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-once&quot; title=&quot;g_once()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_once()&lt;/code&gt;&lt;/a&gt;  with 
the same &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#GOnce&quot; title=&quot;GOnce&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOnce&lt;/span&gt;&lt;/a&gt; struct do not call &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; again, but return the stored result 
of the first call. On return from &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-once&quot; title=&quot;g_once()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_once()&lt;/code&gt;&lt;/a&gt;, the status of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;once&lt;/code&gt;&lt;/em&gt; will be 
&lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#G-ONCE-STATUS-READY:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_ONCE_STATUS_READY&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_once(once, func, arg)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_once_init_enter</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-once-init-enter</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Function to be called when starting a critical initialization section.
The argument &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_location&lt;/code&gt;&lt;/em&gt; must point to a static 0-initialized variable
that will be set to a value other than 0 at the end of the initialization 
section.
In combination with &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-once-init-leave&quot; title=&quot;g_once_init_leave ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_once_init_leave()&lt;/code&gt;&lt;/a&gt; and the unique address &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_location&lt;/code&gt;&lt;/em&gt;,
it can be ensured that an initialization section will be executed only once
during a program's life time, and that concurrent threads are blocked until
initialization completed. To be used in constructs like this:</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; g_once_init_enter (
    volatile gsize *value_location);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_once_init_leave</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Threads.html</Path>
  <Anchor>g-once-init-leave</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Counterpart to &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-once-init-enter&quot; title=&quot;g_once_init_enter ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_once_init_enter()&lt;/code&gt;&lt;/a&gt;. Expects a location of a static 
0-initialized initialization variable, and an initialization value other 
than 0. Sets the variable to the initialization value, and releases 
concurrent threads blocking in &lt;a class=&quot;link&quot; href=&quot;glib-Threads.html#g-once-init-enter&quot; title=&quot;g_once_init_enter ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_once_init_enter()&lt;/code&gt;&lt;/a&gt; on this initialization 
variable.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_once_init_leave (
    volatile gsize *value_location,
    gsize initialization_value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GThreadPool</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>GThreadPool</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Thread-Pools.html#GThreadPool&quot; title=&quot;GThreadPool&quot;&gt;&lt;span class=&quot;type&quot;&gt;GThreadPool&lt;/span&gt;&lt;/a&gt; struct represents a thread pool. It has three public
read-only members, but the underlying struct is bigger, so you must not 
copy this struct.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GFunc func;
    gpointer user_data;
    gboolean exclusive;
} GThreadPool;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-new</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">This function creates a new thread pool.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Thread-Pools.html#GThreadPool&quot; href=&quot;GThreadPool&quot; title=&quot;link&quot;&gt;GThreadPool&lt;/a&gt;* g_thread_pool_new (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GFunc&quot; href=&quot;GFunc ()&quot; title=&quot;link&quot;&gt;GFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; user_data,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; max_threads,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; exclusive,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_push</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-push</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Inserts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; into the list of tasks to be executed by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pool&lt;/code&gt;&lt;/em&gt;. When
the number of currently running threads is lower than the maximal
allowed number of threads, a new thread is started (or reused) with
the properties given to &lt;a class=&quot;link&quot; href=&quot;glib-Thread-Pools.html#g-thread-pool-new&quot; title=&quot;g_thread_pool_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_pool_new()&lt;/code&gt;&lt;/a&gt;. Otherwise &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; stays
in the queue until a thread in this pool finishes its previous task
and processes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_pool_push (
    &lt;a class=&quot;glib-Thread-Pools.html#GThreadPool&quot; href=&quot;GThreadPool&quot; title=&quot;link&quot;&gt;GThreadPool&lt;/a&gt; *pool,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_set_max_threads</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-set-max-threads</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Sets the maximal allowed number of threads for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pool&lt;/code&gt;&lt;/em&gt;. A value of -1
means, that the maximal number of threads is unlimited.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_pool_set_max_threads (
    &lt;a class=&quot;glib-Thread-Pools.html#GThreadPool&quot; href=&quot;GThreadPool&quot; title=&quot;link&quot;&gt;GThreadPool&lt;/a&gt; *pool,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; max_threads,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_get_max_threads</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-get-max-threads</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Returns the maximal number of threads for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pool&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_thread_pool_get_max_threads (
    &lt;a class=&quot;glib-Thread-Pools.html#GThreadPool&quot; href=&quot;GThreadPool&quot; title=&gt;GThreadPool&lt;/a&gt; *pool);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_get_num_threads</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-get-num-threads</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Returns the number of threads currently running in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pool&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_thread_pool_get_num_threads (
    &lt;a class=&quot;glib-Thread-Pools.html#GThreadPool&quot; href=&quot;GThreadPool&quot; title=&gt;GThreadPool&lt;/a&gt; *pool);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_unprocessed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-unprocessed</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Returns the number of tasks still unprocessed in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pool&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_thread_pool_unprocessed (
    &lt;a class=&quot;glib-Thread-Pools.html#GThreadPool&quot; href=&quot;GThreadPool&quot; title=&gt;GThreadPool&lt;/a&gt; *pool);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-free</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Frees all resources allocated for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pool&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_pool_free (
    &lt;a class=&quot;glib-Thread-Pools.html#GThreadPool&quot; href=&quot;GThreadPool&quot; title=&quot;link&quot;&gt;GThreadPool&lt;/a&gt; *pool,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; immediate,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; wait_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_set_max_unused_threads</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-set-max-unused-threads</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Sets the maximal number of unused threads to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;max_threads&lt;/code&gt;&lt;/em&gt;. If
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;max_threads&lt;/code&gt;&lt;/em&gt; is -1, no limit is imposed on the number of unused
threads.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_pool_set_max_unused_threads (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; max_threads);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_get_max_unused_threads</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-get-max-unused-threads</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Returns the maximal allowed number of unused threads.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; g_thread_pool_get_max_unused_threads (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_get_num_unused_threads</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-get-num-unused-threads</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Returns the number of currently unused threads.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; g_thread_pool_get_num_unused_threads (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_stop_unused_threads</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-stop-unused-threads</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Stops all currently unused threads. This does not change the
maximal number of unused threads. This function can be used to
regularly stop all unused threads e.g. from &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#g-timeout-add&quot; title=&quot;g_timeout_add ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timeout_add()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_pool_stop_unused_threads (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_set_sort_function</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-set-sort-function</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Sets the function used to sort the list of tasks. This allows the
tasks to be processed by a priority determined by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt;, and not
just in the order in which they were added to the pool.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_pool_set_sort_function (
    &lt;a class=&quot;glib-Thread-Pools.html#GThreadPool&quot; href=&quot;GThreadPool&quot; title=&quot;link&quot;&gt;GThreadPool&lt;/a&gt; *pool,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_set_max_idle_time</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-set-max-idle-time</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">This function will set the maximum &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interval&lt;/code&gt;&lt;/em&gt; that a thread waiting
in the pool for new tasks can be idle for before being
stopped. This function is similar to calling
&lt;a class=&quot;link&quot; href=&quot;glib-Thread-Pools.html#g-thread-pool-stop-unused-threads&quot; title=&quot;g_thread_pool_stop_unused_threads ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_thread_pool_stop_unused_threads()&lt;/code&gt;&lt;/a&gt; on a regular timeout, except,
this is done on a per thread basis.    </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_thread_pool_set_max_idle_time (
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; interval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_thread_pool_get_max_idle_time</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Thread-Pools.html</Path>
  <Anchor>g-thread-pool-get-max-idle-time</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">This function will return the maximum &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interval&lt;/code&gt;&lt;/em&gt; that a thread will
wait in the thread pool for new tasks before being stopped.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; g_thread_pool_get_max_idle_time (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GAsyncQueue</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>GAsyncQueue</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; title=&quot;GAsyncQueue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GAsyncQueue&lt;/span&gt;&lt;/a&gt; struct is an opaque data structure, which represents
an asynchronous queue. It should only be accessed through the
&lt;code class=&quot;function&quot;&gt;g_async_queue_*&lt;/code&gt; functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GAsyncQueue GAsyncQueue;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-new</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Creates a new asynchronous queue with the initial reference count of 1.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt;* g_async_queue_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_new_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-new-full</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Creates a new asynchronous queue with an initial reference count of 1 and
sets up a destroy notify function that is used to free any remaining
queue items when the queue is destroyed after the final unref.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&quot;link&quot;&gt;GAsyncQueue&lt;/a&gt;* g_async_queue_new_full (
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; item_free_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-ref</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Increases the reference count of the asynchronous &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; by 1. You
do not need to hold the lock to call this function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&quot;link&quot;&gt;GAsyncQueue&lt;/a&gt;* g_async_queue_ref (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-unref</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Decreases the reference count of the asynchronous &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; by 1. If
the reference count went to 0, the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; will be destroyed and the
memory allocated will be freed. So you are not allowed to use the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; afterwards, as it might have disappeared. You do not need to
hold the lock to call this function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_unref (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_push</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-push</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Pushes the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; into the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; must not be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_push (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&quot;link&quot;&gt;GAsyncQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_push_sorted</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-push-sorted</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Inserts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; to determine the new
position. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_push_sorted (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&quot;link&quot;&gt;GAsyncQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_pop</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-pop</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Pops data from the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. This function blocks until data become
available.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_async_queue_pop (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_try_pop</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-try-pop</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Tries to pop data from the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. If no data is available, &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is
returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_async_queue_try_pop (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_timed_pop</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-timed-pop</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Pops data from the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. If no data is received before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end_time&lt;/code&gt;&lt;/em&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_async_queue_timed_pop (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&quot;link&quot;&gt;GAsyncQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; href=&quot;GTimeVal&quot; title=&gt;GTimeVal&lt;/a&gt; *end_time);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_length</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-length</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Returns the length of the queue, negative values mean waiting
threads, positive values mean available entries in the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. Actually this function returns the number of data items in
the queue minus the number of waiting threads. Thus a return value
of 0 could mean 'n' entries in the queue and 'n' thread waiting.
That can happen due to locking of the queue or due to
scheduling.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_async_queue_length (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_sort</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-sort</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Sorts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_sort (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&quot;link&quot;&gt;GAsyncQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_lock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-lock</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Acquires the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;'s lock. After that you can only call the
&lt;code class=&quot;function&quot;&gt;g_async_queue_*&lt;code class=&quot;function&quot;&gt;_unlocked()&lt;/code&gt;&lt;/code&gt; function variants on that
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. Otherwise it will deadlock.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_lock (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_unlock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-unlock</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Releases the queue's lock.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_unlock (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_ref_unlocked</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-ref-unlocked</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Increases the reference count of the asynchronous &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; by 1.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_ref_unlocked (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_async_queue_ref_unlocked&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_unref_and_unlock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-unref-and-unlock</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Decreases the reference count of the asynchronous &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; by 1 and
releases the lock. This function must be called while holding the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;'s lock. If the reference count went to 0, the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; will be
destroyed and the memory allocated will be freed.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_unref_and_unlock (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_async_queue_unref_and_unlock&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_push_unlocked</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-push-unlocked</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Pushes the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; into the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; must not be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;. This
function must be called while holding the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;'s lock.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_push_unlocked (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&quot;link&quot;&gt;GAsyncQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_push_sorted_unlocked</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-push-sorted-unlocked</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Inserts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; to determine the new
position.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_push_sorted_unlocked (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&quot;link&quot;&gt;GAsyncQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_pop_unlocked</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-pop-unlocked</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Pops data from the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. This function blocks until data become
available. This function must be called while holding the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;'s
lock.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_async_queue_pop_unlocked (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_try_pop_unlocked</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-try-pop-unlocked</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Tries to pop data from the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. If no data is available, &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is
returned. This function must be called while holding the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;'s
lock.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_async_queue_try_pop_unlocked (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_timed_pop_unlocked</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-timed-pop-unlocked</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Pops data from the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. If no data is received before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end_time&lt;/code&gt;&lt;/em&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is returned. This function must be called while holding the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;'s lock.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_async_queue_timed_pop_unlocked (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&quot;link&quot;&gt;GAsyncQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; href=&quot;GTimeVal&quot; title=&gt;GTimeVal&lt;/a&gt; *end_time);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_length_unlocked</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-length-unlocked</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Returns the length of the queue, negative values mean waiting
threads, positive values mean available entries in the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. Actually this function returns the number of data items in
the queue minus the number of waiting threads. Thus a return value
of 0 could mean 'n' entries in the queue and 'n' thread waiting.
That can happen due to locking of the queue or due to
scheduling. This function must be called while holding the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;'s
lock.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_async_queue_length_unlocked (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&gt;GAsyncQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_async_queue_sort_unlocked</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Asynchronous-Queues.html</Path>
  <Anchor>g-async-queue-sort-unlocked</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Sorts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_async_queue_sort_unlocked (
    &lt;a class=&quot;glib-Asynchronous-Queues.html#GAsyncQueue&quot; href=&quot;GAsyncQueue&quot; title=&quot;link&quot;&gt;GAsyncQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_new</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-new</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Allocates &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_structs&lt;/code&gt;&lt;/em&gt; elements of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;struct_type&lt;/code&gt;&lt;/em&gt;.
The returned pointer is cast to a pointer to the given type.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_structs&lt;/code&gt;&lt;/em&gt; is 0 it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_new(struct_type, n_structs)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_new0</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-new0</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Allocates &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_structs&lt;/code&gt;&lt;/em&gt; elements of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;struct_type&lt;/code&gt;&lt;/em&gt;, initialized to 0's.
The returned pointer is cast to a pointer to the given type.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_structs&lt;/code&gt;&lt;/em&gt; is 0 it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_new0(struct_type, n_structs)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_renew</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-renew</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Reallocates the memory pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt;, so that it now has space for
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_structs&lt;/code&gt;&lt;/em&gt; elements of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;struct_type&lt;/code&gt;&lt;/em&gt;. It returns the new address of 
the memory, which may have been moved.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_renew(struct_type, mem, n_structs)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_try_new</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-try-new</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Attempts to allocate &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_structs&lt;/code&gt;&lt;/em&gt; elements of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;struct_type&lt;/code&gt;&lt;/em&gt;, and returns 
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; on failure. Contrast with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-new&quot; title=&quot;g_new()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_new()&lt;/code&gt;&lt;/a&gt;, which aborts the program on failure.
The returned pointer is cast to a pointer to the given type. 
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_structs&lt;/code&gt;&lt;/em&gt; is 0 it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_try_new(struct_type, n_structs)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_try_new0</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-try-new0</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Attempts to allocate &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_structs&lt;/code&gt;&lt;/em&gt; elements of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;struct_type&lt;/code&gt;&lt;/em&gt;, initialized 
to 0's, and returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; on failure. Contrast with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-new0&quot; title=&quot;g_new0()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_new0()&lt;/code&gt;&lt;/a&gt;, which aborts 
the program on failure.
The returned pointer is cast to a pointer to the given type.
The function returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; when &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_structs&lt;/code&gt;&lt;/em&gt; is 0.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_try_new0(struct_type, n_structs)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_try_renew</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-try-renew</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Attempts to reallocate the memory pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt;, so that it now has 
space for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_structs&lt;/code&gt;&lt;/em&gt; elements of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;struct_type&lt;/code&gt;&lt;/em&gt;, and returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; on 
failure. Contrast with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-renew&quot; title=&quot;g_renew()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_renew()&lt;/code&gt;&lt;/a&gt;, which aborts the program on failure.
It returns the new address of the memory, which may have been moved.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_try_renew(struct_type, mem, n_structs)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_malloc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-malloc</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Allocates &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_bytes&lt;/code&gt;&lt;/em&gt; bytes of memory.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_bytes&lt;/code&gt;&lt;/em&gt; is 0 it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; g_malloc (
    gsize n_bytes);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_malloc0</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-malloc0</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Allocates &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_bytes&lt;/code&gt;&lt;/em&gt; bytes of memory, initialized to 0's.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_bytes&lt;/code&gt;&lt;/em&gt; is 0 it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; g_malloc0 (
    gsize n_bytes);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_realloc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-realloc</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Reallocates the memory pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt;, so that it now has space for
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_bytes&lt;/code&gt;&lt;/em&gt; bytes of memory. It returns the new address of the memory, which may
have been moved. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt; may be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, in which case it's considered to 
have zero-length. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_bytes&lt;/code&gt;&lt;/em&gt; may be 0, in which case &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; will be returned
and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt; will be freed unless it is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_realloc (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; mem,
    gsize n_bytes);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_try_malloc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-try-malloc</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Attempts to allocate &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_bytes&lt;/code&gt;&lt;/em&gt;, and returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; on failure. 
Contrast with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-malloc&quot; title=&quot;g_malloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_malloc()&lt;/code&gt;&lt;/a&gt;, which aborts the program on failure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; g_try_malloc (
    gsize n_bytes);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_try_malloc0</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-try-malloc0</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Attempts to allocate &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_bytes&lt;/code&gt;&lt;/em&gt;, initialized to 0's, and returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; on 
failure. Contrast with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-malloc0&quot; title=&quot;g_malloc0 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_malloc0()&lt;/code&gt;&lt;/a&gt;, which aborts the program on failure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; g_try_malloc0 (
    gsize n_bytes);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_try_realloc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-try-realloc</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Attempts to realloc &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt; to a new size, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_bytes&lt;/code&gt;&lt;/em&gt;, and returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;
on failure. Contrast with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-realloc&quot; title=&quot;g_realloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_realloc()&lt;/code&gt;&lt;/a&gt;, which aborts the program
on failure. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, behaves the same as &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-try-malloc&quot; title=&quot;g_try_malloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_try_malloc()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_try_realloc (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; mem,
    gsize n_bytes);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-free</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Frees the memory pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; it simply returns.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_free (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; mem);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_gc_friendly</Name>
   <Type>data</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-mem-gc-friendly</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">This variable is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the &lt;code class=&quot;envar&quot;&gt;G_DEBUG&lt;/code&gt; environment variable
includes the key &lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_DEBUG&quot; title=&quot;G_DEBUG&quot;&gt;gc-friendly&lt;/a&gt;.  </Abstract>
  <Declaration type="html">&lt;pre&gt;extern gboolean g_mem_gc_friendly;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_alloca</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-alloca</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Allocates &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/em&gt; bytes on the stack; these bytes will be freed when the current
stack frame is cleaned up. This macro essentially just wraps the &lt;code class=&quot;function&quot;&gt;alloca()&lt;/code&gt; 
function present on most UNIX variants. 
Thus it provides the same advantages and pitfalls as &lt;code class=&quot;function&quot;&gt;alloca()&lt;/code&gt;:</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_alloca(size)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_newa</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-newa</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Wraps &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-alloca&quot; title=&quot;g_alloca()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_alloca()&lt;/code&gt;&lt;/a&gt; in a more typesafe manner.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_newa(struct_type, n_structs)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_memdup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-memdup</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Allocates &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;byte_size&lt;/code&gt;&lt;/em&gt; bytes of memory, and copies &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;byte_size&lt;/code&gt;&lt;/em&gt; bytes into it
from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_memdup (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; mem,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; byte_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMemVTable</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>GMemVTable</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">A set of functions used to perform memory allocation. The same &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#GMemVTable&quot; title=&quot;GMemVTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemVTable&lt;/span&gt;&lt;/a&gt; must
be used for all allocations in the same program; a call to &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-mem-set-vtable&quot; title=&quot;g_mem_set_vtable ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_set_vtable()&lt;/code&gt;&lt;/a&gt;,
if it exists, should be prior to any use of GLib.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gpointer (*malloc) (gsize n_bytes);
    gpointer (*realloc) (gpointer mem, gsize n_bytes);
    void (*free) (gpointer mem);
    gpointer (*calloc) (gsize n_blocks, gsize n_block_bytes);
    gpointer (*try_malloc) (gsize n_bytes);
    gpointer (*try_realloc) (gpointer mem, gsize n_bytes);
} GMemVTable;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_set_vtable</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-mem-set-vtable</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Sets the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#GMemVTable&quot; title=&quot;GMemVTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemVTable&lt;/span&gt;&lt;/a&gt; to use for memory allocation. You can use this to provide
custom memory allocation routines. &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;This function must be called 
before using any other GLib functions.&lt;/em&gt;&lt;/span&gt; The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;vtable&lt;/code&gt;&lt;/em&gt; only needs to 
provide &lt;code class=&quot;function&quot;&gt;malloc()&lt;/code&gt;, &lt;code class=&quot;function&quot;&gt;realloc()&lt;/code&gt;, and &lt;code class=&quot;function&quot;&gt;free()&lt;/code&gt; functions; GLib can provide default 
implementations of the others. The &lt;code class=&quot;function&quot;&gt;malloc()&lt;/code&gt; and &lt;code class=&quot;function&quot;&gt;realloc()&lt;/code&gt; implementations 
should return &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; on failure, GLib will handle error-checking for you. 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;vtable&lt;/code&gt;&lt;/em&gt; is copied, so need not persist after this function has been called.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mem_set_vtable (
    &lt;a class=&quot;glib-Memory-Allocation.html#GMemVTable&quot; href=&quot;GMemVTable&quot; title=&gt;GMemVTable&lt;/a&gt; *vtable);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_is_system_malloc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-mem-is-system-malloc</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Checks whether the allocator used by &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-malloc&quot; title=&quot;g_malloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_malloc()&lt;/code&gt;&lt;/a&gt; is the system's
malloc implementation. If it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; memory allocated with
&lt;code class=&quot;function&quot;&gt;malloc()&lt;/code&gt; can be used interchangeable with memory allocated using &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-malloc&quot; title=&quot;g_malloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_malloc()&lt;/code&gt;&lt;/a&gt;. 
This function is useful for avoiding an extra copy of allocated memory returned
by a non-GLib-based API.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; g_mem_is_system_malloc (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>glib_mem_profiler_table</Name>
   <Type>data</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>glib-mem-profiler-table</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#GMemVTable&quot; title=&quot;GMemVTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemVTable&lt;/span&gt;&lt;/a&gt; containing profiling variants of the memory
allocation functions. Use them together with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-mem-profile&quot; title=&quot;g_mem_profile ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_profile()&lt;/code&gt;&lt;/a&gt;
in order to get information about the memory allocation pattern
of your program.</Abstract>
  <Declaration type="html">&lt;pre&gt;extern GMemVTable *glib_mem_profiler_table;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_profile</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocation.html</Path>
  <Anchor>g-mem-profile</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Outputs a summary of memory usage.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mem_profile (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GIOChannel</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannel</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">A data structure representing an IO Channel. The fields should be considered
private and should only be accessed with the following functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GIOChannel;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_unix_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-unix-new</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; given a file descriptor.
On UNIX systems this works for plain files, pipes, and sockets.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt;* g_io_channel_unix_new (
    int fd);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_unix_get_fd</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-unix-get-fd</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Returns the file descriptor of the &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_io_channel_unix_get_fd (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_win32_new_fd</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-win32-new-fd</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; given a file descriptor on Windows. 
This works for file descriptors from the C runtime.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt;* g_io_channel_win32_new_fd (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; fd);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_win32_new_socket</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-win32-new-socket</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; given a socket on Windows.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt;* g_io_channel_win32_new_socket (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; socket);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_win32_new_messages</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-win32-new-messages</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; given a window handle on Windows.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt;* g_io_channel_win32_new_messages (
    gsize hwnd);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-init</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Initializes a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; struct. This is called by each of the 
above functions when creating a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;, and so is not often 
needed by the application programmer (unless you are creating a 
new type of &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_io_channel_init (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_new_file</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-new-file</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Open a file &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/em&gt; as a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; using mode &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/em&gt;. This
channel will be closed when the last reference to it is dropped,
so there is no need to call &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-close&quot; title=&quot;g_io_channel_close ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_close()&lt;/code&gt;&lt;/a&gt; (though doing
so will not cause problems, as long as no attempt is made to
access the channel after it is closed).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt;* g_io_channel_new_file (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *mode,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_read_chars</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-read-chars</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Replacement for &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-read&quot; title=&quot;g_io_channel_read ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_read()&lt;/code&gt;&lt;/a&gt; with the new API.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_read_chars (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *buf,
    gsize count,
    gsize *bytes_read,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_read_unichar</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-read-unichar</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Reads a Unicode character from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/em&gt;.
This function cannot be called on a channel with &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; encoding.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_read_unichar (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; *thechar,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_read_line</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-read-line</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Reads a line, including the terminating character(s),
from a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; into a newly-allocated string.
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str_return&lt;/code&gt;&lt;/em&gt; will contain allocated memory if the return
is &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#G-IO-STATUS-NORMAL:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_IO_STATUS_NORMAL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_read_line (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **str_return,
    gsize *length,
    gsize *terminator_pos,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_read_line_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-read-line-string</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Reads a line from a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;, using a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt; as a buffer.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_read_line_string (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *buffer,
    gsize *terminator_pos,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_read_to_end</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-read-to-end</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Reads all the remaining data from the file.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_read_to_end (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **str_return,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_write_chars</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-write-chars</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Replacement for &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-write&quot; title=&quot;g_io_channel_write ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_write()&lt;/code&gt;&lt;/a&gt; with the new API.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_write_chars (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *buf,
    gssize count,
    gsize *bytes_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_write_unichar</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-write-unichar</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Writes a Unicode character to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/em&gt;.
This function cannot be called on a channel with &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; encoding.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_write_unichar (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; thechar,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_flush</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-flush</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Flushes the write buffer for the GIOChannel.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_flush (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_seek_position</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-seek-position</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Replacement for &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-seek&quot; title=&quot;g_io_channel_seek ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_seek()&lt;/code&gt;&lt;/a&gt; with the new API.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_seek_position (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    gint64 offset,
    &lt;a class=&quot;glib-IO-Channels.html#GSeekType&quot; href=&quot;enum GSeekType&quot; title=&quot;link&quot;&gt;GSeekType&lt;/a&gt; type,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SEEK_CUR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GSeekType</Anchor>
  <NodeRef refid="499"/>
  <Declaration type="html">&lt;pre&gt;G_SEEK_CUR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSeekType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SEEK_SET</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GSeekType</Anchor>
  <NodeRef refid="499"/>
  <Declaration type="html">&lt;pre&gt;G_SEEK_SET&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSeekType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SEEK_END</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GSeekType</Anchor>
  <NodeRef refid="499"/>
  <Declaration type="html">&lt;pre&gt;G_SEEK_END&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSeekType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSeekType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GSeekType</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">An enumeration specifying the base position for a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-seek-position&quot; title=&quot;g_io_channel_seek_position ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_seek_position()&lt;/code&gt;&lt;/a&gt;
operation.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_SEEK_CUR,
    G_SEEK_SET,
    G_SEEK_END 
} GSeekType;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_shutdown</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-shutdown</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Close an IO channel. Any pending data to be written will be
flushed if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;. The channel will not be freed until the
last reference is dropped using &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-unref&quot; title=&quot;g_io_channel_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_unref()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_shutdown (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; flush,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **err);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_STATUS_ERROR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOStatus</Anchor>
  <NodeRef refid="501"/>
  <Declaration type="html">&lt;pre&gt;G_IO_STATUS_ERROR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOStatus</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_STATUS_NORMAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOStatus</Anchor>
  <NodeRef refid="501"/>
  <Declaration type="html">&lt;pre&gt;G_IO_STATUS_NORMAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOStatus</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_STATUS_EOF</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOStatus</Anchor>
  <NodeRef refid="501"/>
  <Declaration type="html">&lt;pre&gt;G_IO_STATUS_EOF&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOStatus</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_STATUS_AGAIN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOStatus</Anchor>
  <NodeRef refid="501"/>
  <Declaration type="html">&lt;pre&gt;G_IO_STATUS_AGAIN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOStatus</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GIOStatus</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOStatus</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Stati returned by most of the &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOFuncs&quot; title=&quot;GIOFuncs&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOFuncs&lt;/span&gt;&lt;/a&gt; functions. </Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_IO_STATUS_ERROR,
    G_IO_STATUS_NORMAL,
    G_IO_STATUS_EOF,
    G_IO_STATUS_AGAIN 
} GIOStatus;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_CHANNEL_ERROR_FBIG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannelError</Anchor>
  <NodeRef refid="502"/>
  <Declaration type="html">&lt;pre&gt;G_IO_CHANNEL_ERROR_FBIG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOChannelError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_CHANNEL_ERROR_INVAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannelError</Anchor>
  <NodeRef refid="502"/>
  <Declaration type="html">&lt;pre&gt;G_IO_CHANNEL_ERROR_INVAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOChannelError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_CHANNEL_ERROR_IO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannelError</Anchor>
  <NodeRef refid="502"/>
  <Declaration type="html">&lt;pre&gt;G_IO_CHANNEL_ERROR_IO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOChannelError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_CHANNEL_ERROR_ISDIR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannelError</Anchor>
  <NodeRef refid="502"/>
  <Declaration type="html">&lt;pre&gt;G_IO_CHANNEL_ERROR_ISDIR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOChannelError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_CHANNEL_ERROR_NOSPC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannelError</Anchor>
  <NodeRef refid="502"/>
  <Declaration type="html">&lt;pre&gt;G_IO_CHANNEL_ERROR_NOSPC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOChannelError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_CHANNEL_ERROR_NXIO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannelError</Anchor>
  <NodeRef refid="502"/>
  <Declaration type="html">&lt;pre&gt;G_IO_CHANNEL_ERROR_NXIO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOChannelError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_CHANNEL_ERROR_OVERFLOW</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannelError</Anchor>
  <NodeRef refid="502"/>
  <Declaration type="html">&lt;pre&gt;G_IO_CHANNEL_ERROR_OVERFLOW&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOChannelError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_CHANNEL_ERROR_PIPE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannelError</Anchor>
  <NodeRef refid="502"/>
  <Declaration type="html">&lt;pre&gt;G_IO_CHANNEL_ERROR_PIPE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOChannelError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_CHANNEL_ERROR_FAILED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannelError</Anchor>
  <NodeRef refid="502"/>
  <Declaration type="html">&lt;pre&gt;G_IO_CHANNEL_ERROR_FAILED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOChannelError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GIOChannelError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOChannelError</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Error codes returned by &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; operations.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_IO_CHANNEL_ERROR_FBIG,
    G_IO_CHANNEL_ERROR_INVAL,
    G_IO_CHANNEL_ERROR_IO,
    G_IO_CHANNEL_ERROR_ISDIR,
    G_IO_CHANNEL_ERROR_NOSPC,
    G_IO_CHANNEL_ERROR_NXIO,
    G_IO_CHANNEL_ERROR_OVERFLOW,
    G_IO_CHANNEL_ERROR_PIPE,
    G_IO_CHANNEL_ERROR_FAILED 
} GIOChannelError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_CHANNEL_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>G-IO-CHANNEL-ERROR:CAPS</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Error domain for &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; operations. Errors in this domain will
be from the &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannelError&quot; title=&quot;enum GIOChannelError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannelError&lt;/span&gt;&lt;/a&gt; enumeration. See &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; for information on
error domains.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IO_CHANNEL_ERROR g_io_channel_error_quark()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_error_from_errno</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-error-from-errno</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Converts an &lt;code class=&quot;literal&quot;&gt;errno&lt;/code&gt; error number to a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannelError&quot; title=&quot;enum GIOChannelError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannelError&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOChannelError&quot; href=&quot;enum GIOChannelError&quot; title=&quot;link&quot;&gt;GIOChannelError&lt;/a&gt; g_io_channel_error_from_errno (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; en);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-ref</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Increments the reference count of a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt;* g_io_channel_ref (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-unref</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Decrements the reference count of a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_io_channel_unref (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_create_watch</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-create-watch</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Creates a &lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html#GSource&quot; title=&quot;GSource&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSource&lt;/span&gt;&lt;/a&gt; that's dispatched when &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;condition&lt;/code&gt;&lt;/em&gt; is met for the given
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/em&gt;. For example, if condition is &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#G-IO-IN:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_IO_IN&lt;/span&gt;&lt;/a&gt;, the source will be dispatched
when there's data available for reading.  &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-add-watch&quot; title=&quot;g_io_add_watch ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_add_watch()&lt;/code&gt;&lt;/a&gt; is a simpler
interface to this same functionality, for the case where you want to add the
source to the default main loop at the default priority.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-The-Main-Event-Loop.html#GSource&quot; href=&quot;GSource&quot; title=&quot;link&quot;&gt;GSource&lt;/a&gt;* g_io_create_watch (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-IO-Channels.html#GIOCondition&quot; href=&quot;enum GIOCondition&quot; title=&gt;GIOCondition&lt;/a&gt; condition);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_add_watch</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-add-watch</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Adds the &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; into the
&lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html&quot; title=&quot;The Main Event Loop&quot;&gt;main event loop&lt;/a&gt;
with the default priority.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_io_add_watch (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-IO-Channels.html#GIOCondition&quot; href=&quot;enum GIOCondition&quot; title=&quot;link&quot;&gt;GIOCondition&lt;/a&gt; condition,
    &lt;a class=&quot;glib-IO-Channels.html#GIOFunc&quot; href=&quot;GIOFunc ()&quot; title=&quot;link&quot;&gt;GIOFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_add_watch_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-add-watch-full</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Adds the &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; into the
&lt;a class=&quot;link&quot; href=&quot;glib-The-Main-Event-Loop.html&quot; title=&quot;The Main Event Loop&quot;&gt;main event loop&lt;/a&gt;
with the given priority.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_io_add_watch_full (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; priority,
    &lt;a class=&quot;glib-IO-Channels.html#GIOCondition&quot; href=&quot;enum GIOCondition&quot; title=&quot;link&quot;&gt;GIOCondition&lt;/a&gt; condition,
    &lt;a class=&quot;glib-IO-Channels.html#GIOFunc&quot; href=&quot;GIOFunc ()&quot; title=&quot;link&quot;&gt;GIOFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; user_data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; notify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_IN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOCondition</Anchor>
  <NodeRef refid="510"/>
  <Declaration type="html">&lt;pre&gt;G_IO_IN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOCondition</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_OUT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOCondition</Anchor>
  <NodeRef refid="510"/>
  <Declaration type="html">&lt;pre&gt;G_IO_OUT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOCondition</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_PRI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOCondition</Anchor>
  <NodeRef refid="510"/>
  <Declaration type="html">&lt;pre&gt;G_IO_PRI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOCondition</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_ERR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOCondition</Anchor>
  <NodeRef refid="510"/>
  <Declaration type="html">&lt;pre&gt;G_IO_ERR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOCondition</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_HUP</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOCondition</Anchor>
  <NodeRef refid="510"/>
  <Declaration type="html">&lt;pre&gt;G_IO_HUP&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOCondition</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_NVAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOCondition</Anchor>
  <NodeRef refid="510"/>
  <Declaration type="html">&lt;pre&gt;G_IO_NVAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOCondition</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GIOCondition</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOCondition</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">A bitwise combination representing a condition to watch for on 
an event source.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_IO_IN GLIB_SYSDEF_POLLIN,
    G_IO_OUT GLIB_SYSDEF_POLLOUT,
    G_IO_PRI GLIB_SYSDEF_POLLPRI,
    G_IO_ERR GLIB_SYSDEF_POLLERR,
    G_IO_HUP GLIB_SYSDEF_POLLHUP,
    G_IO_NVAL GLIB_SYSDEF_POLLNVAL 
} GIOCondition;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GIOFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFunc</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Specifies the type of function passed to &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-add-watch&quot; title=&quot;g_io_add_watch ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_add_watch()&lt;/code&gt;&lt;/a&gt; or
&lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-add-watch-full&quot; title=&quot;g_io_add_watch_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_add_watch_full()&lt;/code&gt;&lt;/a&gt;, which is called when the requested 
condition on a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; is satisfied.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GIOFunc) (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *source,
    &lt;a class=&quot;glib-IO-Channels.html#GIOCondition&quot; href=&quot;enum GIOCondition&quot; title=&quot;link&quot;&gt;GIOCondition&lt;/a&gt; condition,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GIOFuncs</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFuncs</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">A table of functions used to handle different types of &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; 
in a generic way.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GIOStatus (*io_read) (GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read, GError **err);
    GIOStatus (*io_write) (GIOChannel *channel, const gchar *buf, gsize count, gsize *bytes_written, GError **err);
    GIOStatus (*io_seek) (GIOChannel *channel, gint64 offset, GSeekType type, GError **err);
    GIOStatus (*io_close) (GIOChannel *channel, GError **err);
    GSource* (*io_create_watch) (GIOChannel *channel, GIOCondition condition);
    void (*io_free) (GIOChannel *channel);
    GIOStatus (*io_set_flags) (GIOChannel *channel, GIOFlags flags, GError **err);
    GIOFlags (*io_get_flags) (GIOChannel *channel);
} GIOFuncs;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_get_buffer_size</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-get-buffer-size</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Gets the buffer size.</Abstract>
  <Declaration type="html">&lt;pre&gt;gsize g_io_channel_get_buffer_size (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_set_buffer_size</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-set-buffer-size</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Sets the buffer size.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_io_channel_set_buffer_size (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel,
    gsize size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_get_buffer_condition</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-get-buffer-condition</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">This function returns a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOCondition&quot; title=&quot;enum GIOCondition&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOCondition&lt;/span&gt;&lt;/a&gt; depending on whether there
is data to be read/space to write data in the internal buffers in 
the &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;. Only the flags &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#G-IO-IN:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_IO_IN&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#G-IO-OUT:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_IO_OUT&lt;/code&gt;&lt;/a&gt; may be set.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOCondition&quot; href=&quot;enum GIOCondition&quot; title=&quot;link&quot;&gt;GIOCondition&lt;/a&gt; g_io_channel_get_buffer_condition (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_get_flags</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-get-flags</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Gets the current flags for a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;, including read-only
flags such as &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#G-IO-FLAG-IS-READABLE:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_IO_FLAG_IS_READABLE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOFlags&quot; href=&quot;enum GIOFlags&quot; title=&quot;link&quot;&gt;GIOFlags&lt;/a&gt; g_io_channel_get_flags (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_set_flags</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-set-flags</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Sets the (writeable) flags in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/em&gt; to (&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/em&gt; &amp;amp; &lt;code class=&quot;literal&quot;&gt;G_IO_CHANNEL_SET_MASK&lt;/code&gt;).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_set_flags (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-IO-Channels.html#GIOFlags&quot; href=&quot;enum GIOFlags&quot; title=&quot;link&quot;&gt;GIOFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_FLAG_APPEND</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFlags</Anchor>
  <NodeRef refid="518"/>
  <Declaration type="html">&lt;pre&gt;G_IO_FLAG_APPEND&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_FLAG_NONBLOCK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFlags</Anchor>
  <NodeRef refid="518"/>
  <Declaration type="html">&lt;pre&gt;G_IO_FLAG_NONBLOCK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_FLAG_IS_READABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFlags</Anchor>
  <NodeRef refid="518"/>
  <Declaration type="html">&lt;pre&gt;G_IO_FLAG_IS_READABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_FLAG_IS_WRITEABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFlags</Anchor>
  <NodeRef refid="518"/>
  <Declaration type="html">&lt;pre&gt;G_IO_FLAG_IS_WRITEABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_FLAG_IS_SEEKABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFlags</Anchor>
  <NodeRef refid="518"/>
  <Declaration type="html">&lt;pre&gt;G_IO_FLAG_IS_SEEKABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_FLAG_MASK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFlags</Anchor>
  <NodeRef refid="518"/>
  <Declaration type="html">&lt;pre&gt;G_IO_FLAG_MASK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_FLAG_GET_MASK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFlags</Anchor>
  <NodeRef refid="518"/>
  <Declaration type="html">&lt;pre&gt;G_IO_FLAG_GET_MASK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_FLAG_SET_MASK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFlags</Anchor>
  <NodeRef refid="518"/>
  <Declaration type="html">&lt;pre&gt;G_IO_FLAG_SET_MASK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GIOFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOFlags</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Specifies properties of a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;. Some of the flags can only
be read with &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-get-flags&quot; title=&quot;g_io_channel_get_flags ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_get_flags()&lt;/code&gt;&lt;/a&gt;, but not changed with
&lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-set-flags&quot; title=&quot;g_io_channel_set_flags ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_set_flags()&lt;/code&gt;&lt;/a&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_IO_FLAG_APPEND = 1 &amp;lt;&amp;lt; 0,
    G_IO_FLAG_NONBLOCK = 1 &amp;lt;&amp;lt; 1,
    G_IO_FLAG_IS_READABLE = 1 &amp;lt;&amp;lt; 2,
    G_IO_FLAG_IS_WRITEABLE = 1 &amp;lt;&amp;lt; 3,
    G_IO_FLAG_IS_SEEKABLE = 1 &amp;lt;&amp;lt; 4,
    G_IO_FLAG_MASK = (1 &amp;lt;&amp;lt; 5) - 1,
    G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK,
    G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK 
} GIOFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_get_line_term</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-get-line-term</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">This returns the string that &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; uses to determine
where in the file a line break occurs. A value of &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;
indicates autodetection.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_io_channel_get_line_term (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; *length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_set_line_term</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-set-line-term</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">This sets the string that &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt; uses to determine
where in the file a line break occurs.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_io_channel_set_line_term (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *line_term,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_get_buffered</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-get-buffered</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Returns whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/em&gt; is buffered.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_io_channel_get_buffered (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_set_buffered</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-set-buffered</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">The buffering state can only be set if the channel's encoding
is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;. For any other encoding, the channel must be buffered.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_io_channel_set_buffered (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; buffered);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_get_encoding</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-get-encoding</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Gets the encoding for the input/output of the channel. 
The internal encoding is always UTF-8. The encoding &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; 
makes the channel safe for binary data.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_io_channel_get_encoding (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_set_encoding</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-set-encoding</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Sets the encoding for the input/output of the channel. 
The internal encoding is always UTF-8. The default encoding 
for the external file is UTF-8.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOStatus&quot; href=&quot;enum GIOStatus&quot; title=&quot;link&quot;&gt;GIOStatus&lt;/a&gt; g_io_channel_set_encoding (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *encoding,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_get_close_on_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-get-close-on-unref</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Returns whether the file/socket/whatever associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/em&gt;
will be closed when &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/em&gt; receives its final unref and is
destroyed. The default value of this is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; for channels created
by &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-new-file&quot; title=&quot;g_io_channel_new_file ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_new_file()&lt;/code&gt;&lt;/a&gt;, and &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; for all other channels.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_io_channel_get_close_on_unref (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_set_close_on_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-set-close-on-unref</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Setting this flag to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; for a channel you have already closed
can cause problems.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_io_channel_set_close_on_unref (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; do_close);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_read</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-read</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Reads data from a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOError&quot; href=&quot;enum GIOError&quot; title=&quot;link&quot;&gt;GIOError&lt;/a&gt; g_io_channel_read (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *buf,
    gsize count,
    gsize *bytes_read);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_io_channel_read&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-read-chars&quot; title=&quot;g_io_channel_read_chars ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_read_chars()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_ERROR_NONE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOError</Anchor>
  <NodeRef refid="528"/>
  <Declaration type="html">&lt;pre&gt;G_IO_ERROR_NONE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_ERROR_AGAIN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOError</Anchor>
  <NodeRef refid="528"/>
  <Declaration type="html">&lt;pre&gt;G_IO_ERROR_AGAIN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_ERROR_INVAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOError</Anchor>
  <NodeRef refid="528"/>
  <Declaration type="html">&lt;pre&gt;G_IO_ERROR_INVAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IO_ERROR_UNKNOWN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOError</Anchor>
  <NodeRef refid="528"/>
  <Declaration type="html">&lt;pre&gt;G_IO_ERROR_UNKNOWN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GIOError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GIOError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>GIOError</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">&lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOError&quot; title=&quot;enum GIOError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOError&lt;/span&gt;&lt;/a&gt; is only used by the deprecated functions &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-read&quot; title=&quot;g_io_channel_read ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_read()&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-write&quot; title=&quot;g_io_channel_write ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_write()&lt;/code&gt;&lt;/a&gt;, and &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-seek&quot; title=&quot;g_io_channel_seek ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_seek()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_IO_ERROR_NONE,
    G_IO_ERROR_AGAIN,
    G_IO_ERROR_INVAL,
    G_IO_ERROR_UNKNOWN 
} GIOError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_write</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-write</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Writes data to a &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOError&quot; href=&quot;enum GIOError&quot; title=&quot;link&quot;&gt;GIOError&lt;/a&gt; g_io_channel_write (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *buf,
    gsize count,
    gsize *bytes_written);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_io_channel_write&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-write-chars&quot; title=&quot;g_io_channel_write_chars ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_write_chars()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_seek</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-seek</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Sets the current position in the &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#GIOChannel&quot; title=&quot;GIOChannel&quot;&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;, similar to the standard 
library function &lt;code class=&quot;function&quot;&gt;fseek()&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-IO-Channels.html#GIOError&quot; href=&quot;enum GIOError&quot; title=&quot;link&quot;&gt;GIOError&lt;/a&gt; g_io_channel_seek (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&quot;link&quot;&gt;GIOChannel&lt;/a&gt; *channel,
    gint64 offset,
    &lt;a class=&quot;glib-IO-Channels.html#GSeekType&quot; href=&quot;enum GSeekType&quot; title=&gt;GSeekType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_io_channel_seek&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-seek-position&quot; title=&quot;g_io_channel_seek_position ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_seek_position()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_io_channel_close</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-IO-Channels.html</Path>
  <Anchor>g-io-channel-close</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Close an IO channel. Any pending data to be written will be
flushed, ignoring errors. The channel will not be freed until the
last reference is dropped using &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-unref&quot; title=&quot;g_io_channel_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_unref()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_io_channel_close (
    &lt;a class=&quot;glib-IO-Channels.html#GIOChannel&quot; href=&quot;GIOChannel&quot; title=&gt;GIOChannel&lt;/a&gt; *channel);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_io_channel_close&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-IO-Channels.html#g-io-channel-shutdown&quot; title=&quot;g_io_channel_shutdown ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_io_channel_shutdown()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>GError</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GError&lt;/span&gt; structure contains 
information about an error that has occurred.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GQuark domain;
    gint code;
    gchar *message;
} GError;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_error_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-error-new</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; with the given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;code&lt;/code&gt;&lt;/em&gt;,
and a message formatted with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt;* g_error_new (
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; domain,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; code,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_error_new_literal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-error-new-literal</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt;; unlike &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#g-error-new&quot; title=&quot;g_error_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_error_new()&lt;/code&gt;&lt;/a&gt;, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/em&gt; is not
a &lt;code class=&quot;function&quot;&gt;printf()&lt;/code&gt;-style format string. Use this 
function if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/em&gt; contains text you don't have control over, 
that could include &lt;code class=&quot;function&quot;&gt;printf()&lt;/code&gt; escape sequences.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt;* g_error_new_literal (
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; domain,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; code,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *message);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_error_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-error-free</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Frees a &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; and associated resources.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_error_free (
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; *error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_error_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-error-copy</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Makes a copy of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt;* g_error_copy (
    const &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; *error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_error_matches</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-error-matches</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/em&gt; matches &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;code&lt;/code&gt;&lt;/em&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;
otherwise.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_error_matches (
    const &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt; *error,
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; domain,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; code);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_set_error</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-set-error</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Does nothing if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;; if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; is non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, then *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; must
be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;. A new &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; is created and assigned to *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_set_error (
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt; **err,
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; domain,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; code,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_set_error_literal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-set-error-literal</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Does nothing if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;; if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; is non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, then *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; must
be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;. A new &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; is created and assigned to *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt;.
Unlike &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#g-set-error&quot; title=&quot;g_set_error ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_set_error()&lt;/code&gt;&lt;/a&gt;, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/em&gt; is not a &lt;code class=&quot;function&quot;&gt;printf()&lt;/code&gt;-style format string.
Use this function if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/em&gt; contains text you don't have control over,
that could include &lt;code class=&quot;function&quot;&gt;printf()&lt;/code&gt; escape sequences.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_set_error_literal (
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt; **err,
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; domain,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; code,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *message);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_propagate_error</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-propagate-error</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, free &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt;; otherwise, moves &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt; into *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt;.
The error variable &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt; points to must be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_propagate_error (
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt; **dest,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; *src);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_clear_error</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-clear-error</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, does nothing. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; is non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;,
calls &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#g-error-free&quot; title=&quot;g_error_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_error_free()&lt;/code&gt;&lt;/a&gt; on *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; and sets *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_clear_error (
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **err);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_prefix_error</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-prefix-error</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Formats a string according to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/em&gt; and
prefix it to an existing error message.  If
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;err&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; (ie: no error variable) then do
nothing.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_prefix_error (
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt; **err,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_propagate_prefixed_error</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Error-Reporting.html</Path>
  <Anchor>g-propagate-prefixed-error</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, free &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt;; otherwise,
moves &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt; into *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt;. *&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt; must be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.
After the move, add a prefix as with 
&lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#g-prefix-error&quot; title=&quot;g_prefix_error ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_prefix_error()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_propagate_prefixed_error (
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt; **dest,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt; *src,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_print</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-print</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Outputs a formatted message via the print handler.
The default print handler simply outputs the message to stdout.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_print (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_set_print_handler</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-set-print-handler</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Sets the print handler.
Any messages passed to &lt;a class=&quot;link&quot; href=&quot;glib-Warnings-and-Assertions.html#g-print&quot; title=&quot;g_print ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_print()&lt;/code&gt;&lt;/a&gt; will be output via the new handler.
The default handler simply outputs the message to stdout.
By providing your own handler you can redirect the output, to a GTK+
widget or a log file for example.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Warnings-and-Assertions.html#GPrintFunc&quot; href=&quot;GPrintFunc ()&quot; title=&quot;link&quot;&gt;GPrintFunc&lt;/a&gt; g_set_print_handler (
    &lt;a class=&quot;glib-Warnings-and-Assertions.html#GPrintFunc&quot; href=&quot;GPrintFunc ()&quot; title=&gt;GPrintFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GPrintFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>GPrintFunc</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Specifies the type of the print handler functions.
These are called with the complete formatted string to output.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GPrintFunc) (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_printerr</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-printerr</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Outputs a formatted message via the error message handler.
The default handler simply outputs the message to stderr.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_printerr (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_set_printerr_handler</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-set-printerr-handler</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Sets the handler for printing error messages.
Any messages passed to &lt;a class=&quot;link&quot; href=&quot;glib-Warnings-and-Assertions.html#g-printerr&quot; title=&quot;g_printerr ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_printerr()&lt;/code&gt;&lt;/a&gt; will be output via the new handler.
The default handler simply outputs the message to stderr.
By providing your own handler you can redirect the output, to a GTK+
widget or a log file for example.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Warnings-and-Assertions.html#GPrintFunc&quot; href=&quot;GPrintFunc ()&quot; title=&quot;link&quot;&gt;GPrintFunc&lt;/a&gt; g_set_printerr_handler (
    &lt;a class=&quot;glib-Warnings-and-Assertions.html#GPrintFunc&quot; href=&quot;GPrintFunc ()&quot; title=&gt;GPrintFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_return_if_fail</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-return-if-fail</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Returns from the current function if the expression is not true.
If the expression evaluates to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;, a critical message is logged and
the function returns. This can only be used in functions which do not return
a value.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_return_if_fail(expr)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_return_val_if_fail</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-return-val-if-fail</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Returns from the current function, returning the value &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt;, if the expression
is not true.
If the expression evaluates to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;, a critical message is logged and
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt; is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_return_val_if_fail(expr,val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_return_if_reached</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-return-if-reached</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Logs a critical message and returns from the current function. 
This can only be used in functions which do not return a value.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_return_if_reached()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_return_val_if_reached</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-return-val-if-reached</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Logs a critical message and returns &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_return_val_if_reached(val)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_warn_if_fail</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-warn-if-fail</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Logs a warning if the expression is not true.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_warn_if_fail(expr)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_warn_if_reached</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-warn-if-reached</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Logs a critical warning.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_warn_if_reached()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_on_error_query</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-on-error-query</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Prompts the user with &lt;code class=&quot;computeroutput&quot;&gt;[E]xit, [H]alt, show [S]tack trace or [P]roceed&lt;/code&gt;.
This function is intended to be used for debugging use only. The following
example shows how it can be used together with the &lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#g-log&quot; title=&quot;g_log ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_log()&lt;/code&gt;&lt;/a&gt; functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_on_error_query (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *prg_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_on_error_stack_trace</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>g-on-error-stack-trace</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Invokes &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;gdb&lt;/strong&gt;&lt;/span&gt;, which attaches to the current process and shows a stack trace.
Called by &lt;a class=&quot;link&quot; href=&quot;glib-Warnings-and-Assertions.html#g-on-error-query&quot; title=&quot;g_on_error_query ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_on_error_query()&lt;/code&gt;&lt;/a&gt; when the [S]tack trace option is selected.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_on_error_stack_trace (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *prg_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BREAKPOINT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Warnings-and-Assertions.html</Path>
  <Anchor>G-BREAKPOINT:CAPS</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Inserts a breakpoint instruction into the code.  On x86 and alpha systems
this is implemented as a soft interrupt and on other architectures it raises
a &lt;code class=&quot;literal&quot;&gt;SIGTRAP&lt;/code&gt; signal.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_BREAKPOINT()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_DOMAIN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>G-LOG-DOMAIN:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Defines the log domain.
For applications, this is typically left as the default &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; (or &quot;&quot;) domain.
Libraries should define this so that any messages which they log can
be differentiated from messages from other libraries and application code.
But be careful not to define it in any public header files.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LOG_DOMAIN ((gchar*) 0)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_FATAL_MASK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>G-LOG-FATAL-MASK:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">GLib log levels that are considered fatal by default.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LOG_FATAL_MASK (G_LOG_FLAG_RECURSION | G_LOG_LEVEL_ERROR)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_LEVEL_USER_SHIFT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>G-LOG-LEVEL-USER-SHIFT:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Log level shift offset for user defined log levels (0-7 are used by GLib).</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_LOG_LEVEL_USER_SHIFT (8)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GLogFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogFunc</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Specifies the prototype of log handler functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GLogFunc) (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *log_domain,
    &lt;a class=&quot;glib-Message-Logging.html#GLogLevelFlags&quot; href=&quot;enum GLogLevelFlags&quot; title=&quot;link&quot;&gt;GLogLevelFlags&lt;/a&gt; log_level,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *message,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_FLAG_RECURSION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogLevelFlags</Anchor>
  <NodeRef refid="562"/>
  <Declaration type="html">&lt;pre&gt;G_LOG_FLAG_RECURSION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GLogLevelFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_FLAG_FATAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogLevelFlags</Anchor>
  <NodeRef refid="562"/>
  <Declaration type="html">&lt;pre&gt;G_LOG_FLAG_FATAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GLogLevelFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_LEVEL_ERROR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogLevelFlags</Anchor>
  <NodeRef refid="562"/>
  <Declaration type="html">&lt;pre&gt;G_LOG_LEVEL_ERROR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GLogLevelFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_LEVEL_CRITICAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogLevelFlags</Anchor>
  <NodeRef refid="562"/>
  <Declaration type="html">&lt;pre&gt;G_LOG_LEVEL_CRITICAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GLogLevelFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_LEVEL_WARNING</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogLevelFlags</Anchor>
  <NodeRef refid="562"/>
  <Declaration type="html">&lt;pre&gt;G_LOG_LEVEL_WARNING&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GLogLevelFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_LEVEL_MESSAGE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogLevelFlags</Anchor>
  <NodeRef refid="562"/>
  <Declaration type="html">&lt;pre&gt;G_LOG_LEVEL_MESSAGE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GLogLevelFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_LEVEL_INFO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogLevelFlags</Anchor>
  <NodeRef refid="562"/>
  <Declaration type="html">&lt;pre&gt;G_LOG_LEVEL_INFO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GLogLevelFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_LEVEL_DEBUG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogLevelFlags</Anchor>
  <NodeRef refid="562"/>
  <Declaration type="html">&lt;pre&gt;G_LOG_LEVEL_DEBUG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GLogLevelFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LOG_LEVEL_MASK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogLevelFlags</Anchor>
  <NodeRef refid="562"/>
  <Declaration type="html">&lt;pre&gt;G_LOG_LEVEL_MASK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GLogLevelFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GLogLevelFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>GLogLevelFlags</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Flags specifying the level of log messages. It is possible to change
how GLib treats messages of the various levels using &lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#g-log-set-handler&quot; title=&quot;g_log_set_handler ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_log_set_handler()&lt;/code&gt;&lt;/a&gt;
and &lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#g-log-set-fatal-mask&quot; title=&quot;g_log_set_fatal_mask ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_log_set_fatal_mask()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_LOG_FLAG_RECURSION = 1 &amp;lt;&amp;lt; 0,
    G_LOG_FLAG_FATAL = 1 &amp;lt;&amp;lt; 1,
    G_LOG_LEVEL_ERROR = 1 &amp;lt;&amp;lt; 2,
    G_LOG_LEVEL_CRITICAL = 1 &amp;lt;&amp;lt; 3,
    G_LOG_LEVEL_WARNING = 1 &amp;lt;&amp;lt; 4,
    G_LOG_LEVEL_MESSAGE = 1 &amp;lt;&amp;lt; 5,
    G_LOG_LEVEL_INFO = 1 &amp;lt;&amp;lt; 6,
    G_LOG_LEVEL_DEBUG = 1 &amp;lt;&amp;lt; 7,
    G_LOG_LEVEL_MASK = ~(G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL) 
} GLogLevelFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_log</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-log</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Logs an error or debugging message.
If the log level has been set as fatal, the &lt;code class=&quot;function&quot;&gt;abort()&lt;/code&gt;
function is called to terminate the program.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_log (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *log_domain,
    &lt;a class=&quot;glib-Message-Logging.html#GLogLevelFlags&quot; href=&quot;enum GLogLevelFlags&quot; title=&quot;link&quot;&gt;GLogLevelFlags&lt;/a&gt; log_level,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_logv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-logv</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Logs an error or debugging message.
If the log level has been set as fatal, the &lt;code class=&quot;function&quot;&gt;abort()&lt;/code&gt;
function is called to terminate the program.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_logv (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *log_domain,
    &lt;a class=&quot;glib-Message-Logging.html#GLogLevelFlags&quot; href=&quot;enum GLogLevelFlags&quot; title=&quot;link&quot;&gt;GLogLevelFlags&lt;/a&gt; log_level,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_message</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-message</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">A convenience function/macro to log a normal message.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_message(...)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_warning</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-warning</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">A convenience function/macro to log a warning message.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_warning(...)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_critical</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-critical</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Logs a &quot;critical warning&quot; (&lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#G-LOG-LEVEL-CRITICAL:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_LOG_LEVEL_CRITICAL&lt;/span&gt;&lt;/a&gt;). It's more or less
application-defined what constitutes a critical vs. a regular
warning. You could call &lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#g-log-set-always-fatal&quot; title=&quot;g_log_set_always_fatal ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_log_set_always_fatal()&lt;/code&gt;&lt;/a&gt; to make critical
warnings exit the program, then use &lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#g-critical&quot; title=&quot;g_critical()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_critical()&lt;/code&gt;&lt;/a&gt; for fatal errors, for
example.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_critical(...)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_error</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-error</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">A convenience function/macro to log an error message.
Error messages are always fatal, resulting in a call to
&lt;code class=&quot;function&quot;&gt;abort()&lt;/code&gt; to terminate the application.
This function will result in a core dump; don't use it for errors you
expect. Using this function indicates a bug in your program, i.e. an
assertion failure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_error(...)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_debug</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-debug</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">A convenience function/macro to log a debug message.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_debug(...)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_log_set_handler</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-log-set-handler</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Sets the log handler for a domain and a set of log levels.
To handle fatal and recursive messages the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;log_levels&lt;/code&gt;&lt;/em&gt; parameter
must be combined with the &lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#G-LOG-FLAG-FATAL:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_LOG_FLAG_FATAL&lt;/span&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#G-LOG-FLAG-RECURSION:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_LOG_FLAG_RECURSION&lt;/span&gt;&lt;/a&gt; 
bit flags.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_log_set_handler (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *log_domain,
    &lt;a class=&quot;glib-Message-Logging.html#GLogLevelFlags&quot; href=&quot;enum GLogLevelFlags&quot; title=&quot;link&quot;&gt;GLogLevelFlags&lt;/a&gt; log_levels,
    &lt;a class=&quot;glib-Message-Logging.html#GLogFunc&quot; href=&quot;GLogFunc ()&quot; title=&quot;link&quot;&gt;GLogFunc&lt;/a&gt; log_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_log_remove_handler</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-log-remove-handler</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Removes the log handler.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_log_remove_handler (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *log_domain,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; handler_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_log_set_always_fatal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-log-set-always-fatal</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Sets the message levels which are always fatal, in any log domain.
When a message with any of these levels is logged the program terminates.
You can only set the levels defined by GLib to be fatal.
&lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#G-LOG-LEVEL-ERROR:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_LOG_LEVEL_ERROR&lt;/code&gt;&lt;/a&gt; is always fatal.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Message-Logging.html#GLogLevelFlags&quot; href=&quot;enum GLogLevelFlags&quot; title=&quot;link&quot;&gt;GLogLevelFlags&lt;/a&gt; g_log_set_always_fatal (
    &lt;a class=&quot;glib-Message-Logging.html#GLogLevelFlags&quot; href=&quot;enum GLogLevelFlags&quot; title=&gt;GLogLevelFlags&lt;/a&gt; fatal_mask);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_log_set_fatal_mask</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-log-set-fatal-mask</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Sets the log levels which are fatal in the given domain.
&lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#G-LOG-LEVEL-ERROR:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_LOG_LEVEL_ERROR&lt;/code&gt;&lt;/a&gt; is always fatal.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Message-Logging.html#GLogLevelFlags&quot; href=&quot;enum GLogLevelFlags&quot; title=&quot;link&quot;&gt;GLogLevelFlags&lt;/a&gt; g_log_set_fatal_mask (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *log_domain,
    &lt;a class=&quot;glib-Message-Logging.html#GLogLevelFlags&quot; href=&quot;enum GLogLevelFlags&quot; title=&gt;GLogLevelFlags&lt;/a&gt; fatal_mask);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_log_default_handler</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-log-default-handler</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">The default log handler set up by GLib; &lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#g-log-set-default-handler&quot; title=&quot;g_log_set_default_handler ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_log_set_default_handler()&lt;/code&gt;&lt;/a&gt; 
allows to install an alternate default log handler.
This is used if no log handler has been set for the particular log domain
and log level combination. It outputs the message to stderr or stdout
and if the log level is fatal it calls &lt;code class=&quot;function&quot;&gt;abort()&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_log_default_handler (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *log_domain,
    &lt;a class=&quot;glib-Message-Logging.html#GLogLevelFlags&quot; href=&quot;enum GLogLevelFlags&quot; title=&quot;link&quot;&gt;GLogLevelFlags&lt;/a&gt; log_level,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *message,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; unused_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_log_set_default_handler</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Message-Logging.html</Path>
  <Anchor>g-log-set-default-handler</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Installs a default log handler which is used if no 
log handler has been set for the particular log domain
and log level combination. By default, GLib uses 
&lt;a class=&quot;link&quot; href=&quot;glib-Message-Logging.html#g-log-default-handler&quot; title=&quot;g_log_default_handler ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_log_default_handler()&lt;/code&gt;&lt;/a&gt; as default log handler.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Message-Logging.html#GLogFunc&quot; href=&quot;GLogFunc ()&quot; title=&quot;link&quot;&gt;GLogFunc&lt;/a&gt; g_log_set_default_handler (
    &lt;a class=&quot;glib-Message-Logging.html#GLogFunc&quot; href=&quot;GLogFunc ()&quot; title=&quot;link&quot;&gt;GLogFunc&lt;/a&gt; log_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strdup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strdup</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Duplicates a string.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.
The returned string should be freed when no longer needed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strdup (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strndup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strndup</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Duplicates the first &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/em&gt; bytes of a string, returning a newly-allocated
buffer &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/em&gt; + 1 bytes long which will always be nul-terminated.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; is less than &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/em&gt; bytes long the buffer is padded with nuls.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.
The returned value should be freed when no longer needed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strndup (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str,
    gsize n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strdupv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strdupv</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Copies &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;-terminated array of strings. The copy is a deep copy;
the new array should be freed by first freeing each string, then
the array itself. &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strfreev&quot; title=&quot;g_strfreev ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strfreev()&lt;/code&gt;&lt;/a&gt; does this for you. If called
on a &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; value, &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strdupv&quot; title=&quot;g_strdupv ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strdupv()&lt;/code&gt;&lt;/a&gt; simply returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_strdupv (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **str_array);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strnfill</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strnfill</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Creates a new string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/em&gt; bytes long filled with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;fill_char&lt;/code&gt;&lt;/em&gt;.
The returned string should be freed when no longer needed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strnfill (
    gsize length,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; fill_char);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_stpcpy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-stpcpy</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Copies a nul-terminated string into the dest buffer, include the
trailing nul, and return a pointer to the trailing nul byte.
This is useful for concatenating multiple strings together
without having to repeatedly scan for the end.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_stpcpy (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *dest,
    const char *src);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strstr_len</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strstr-len</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Searches the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;haystack&lt;/code&gt;&lt;/em&gt; for the first occurrence
of the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;needle&lt;/code&gt;&lt;/em&gt;, limiting the length of the search
to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;haystack_len&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strstr_len (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *haystack,
    gssize haystack_len,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *needle);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strrstr</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strrstr</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Searches the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;haystack&lt;/code&gt;&lt;/em&gt; for the last occurrence
of the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;needle&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strrstr (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *haystack,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *needle);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strrstr_len</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strrstr-len</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Searches the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;haystack&lt;/code&gt;&lt;/em&gt; for the last occurrence
of the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;needle&lt;/code&gt;&lt;/em&gt;, limiting the length of the search
to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;haystack_len&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strrstr_len (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *haystack,
    gssize haystack_len,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *needle);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_str_has_prefix</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-str-has-prefix</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Looks whether the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; begins with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_str_has_prefix (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *prefix);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_str_has_suffix</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-str-has-suffix</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Looks whether the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; ends with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;suffix&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_str_has_suffix (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *suffix);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strcmp0</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strcmp0</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Compares &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str1&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str2&lt;/code&gt;&lt;/em&gt; like &lt;code class=&quot;function&quot;&gt;strcmp()&lt;/code&gt;. Handles &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; strings gracefully.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_strcmp0 (
    const char *str1,
    const char *str2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strlcpy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strlcpy</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Portability wrapper that calls &lt;code class=&quot;function&quot;&gt;strlcpy()&lt;/code&gt; on systems which have it, and emulates
&lt;code class=&quot;function&quot;&gt;strlcpy()&lt;/code&gt; otherwise. Copies &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt;; &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt; is guaranteed to be
nul-terminated; &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt; must be nul-terminated; &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest_size&lt;/code&gt;&lt;/em&gt; is the buffer size, not
the number of chars to copy. Caveat: &lt;code class=&quot;function&quot;&gt;strlcpy()&lt;/code&gt; is supposedly more secure than
&lt;code class=&quot;function&quot;&gt;strcpy()&lt;/code&gt; or &lt;code class=&quot;function&quot;&gt;strncpy()&lt;/code&gt;, but if you really want to avoid screwups, &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strdup&quot; title=&quot;g_strdup ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strdup()&lt;/code&gt;&lt;/a&gt; is
an even better idea.</Abstract>
  <Declaration type="html">&lt;pre&gt;gsize g_strlcpy (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *dest,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *src,
    gsize dest_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strlcat</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strlcat</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Portability wrapper that calls &lt;code class=&quot;function&quot;&gt;strlcat()&lt;/code&gt; on systems which have it, and emulates it otherwise. 
Appends nul-terminated &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt; string to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt;, guaranteeing
nul-termination for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt;. The total size of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt; won't exceed
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest_size&lt;/code&gt;&lt;/em&gt;. Caveat: this is supposedly a more secure alternative to &lt;code class=&quot;function&quot;&gt;strcat()&lt;/code&gt; or
&lt;code class=&quot;function&quot;&gt;strncat()&lt;/code&gt;, but for real security &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strconcat&quot; title=&quot;g_strconcat ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strconcat()&lt;/code&gt;&lt;/a&gt; is harder to mess up.</Abstract>
  <Declaration type="html">&lt;pre&gt;gsize g_strlcat (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *dest,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *src,
    gsize dest_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strdup_printf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strdup-printf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Similar to the standard C &lt;code class=&quot;function&quot;&gt;sprintf()&lt;/code&gt; function
but safer, since it calculates the maximum space required and allocates
memory to hold the result.
The returned string should be freed when no longer needed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strdup_printf (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strdup_vprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strdup-vprintf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Similar to the standard C &lt;code class=&quot;function&quot;&gt;vsprintf()&lt;/code&gt; function
but safer, since it calculates the maximum space required and allocates
memory to hold the result.
The returned string should be freed when no longer needed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strdup_vprintf (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_printf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-printf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">An implementation of the standard &lt;code class=&quot;function&quot;&gt;printf()&lt;/code&gt; function which supports 
positional parameters, as specified in the Single Unix Specification.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_printf (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; const *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_vprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-vprintf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">An implementation of the standard &lt;code class=&quot;function&quot;&gt;vprintf()&lt;/code&gt; function which supports 
positional parameters, as specified in the Single Unix Specification.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_vprintf (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; const *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_fprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-fprintf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">An implementation of the standard &lt;code class=&quot;function&quot;&gt;fprintf()&lt;/code&gt; function which supports 
positional parameters, as specified in the Single Unix Specification.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_fprintf (
    FILE *file,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; const *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_vfprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-vfprintf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">An implementation of the standard &lt;code class=&quot;function&quot;&gt;fprintf()&lt;/code&gt; function which supports 
positional parameters, as specified in the Single Unix Specification.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_vfprintf (
    FILE *file,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; const *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-sprintf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">An implementation of the standard &lt;code class=&quot;function&quot;&gt;sprintf()&lt;/code&gt; function which supports 
positional parameters, as specified in the Single Unix Specification.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_sprintf (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; const *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_vsprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-vsprintf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">An implementation of the standard &lt;code class=&quot;function&quot;&gt;vsprintf()&lt;/code&gt; function which supports 
positional parameters, as specified in the Single Unix Specification.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_vsprintf (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; const *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_snprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-snprintf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A safer form of the standard &lt;code class=&quot;function&quot;&gt;sprintf()&lt;/code&gt; function. The output is guaranteed
to not exceed &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/em&gt; characters (including the terminating nul character), so 
it is easy to ensure that a buffer overflow cannot occur.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_snprintf (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&quot;link&quot;&gt;gulong&lt;/a&gt; n,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; const *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_vsnprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-vsnprintf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A safer form of the standard &lt;code class=&quot;function&quot;&gt;vsprintf()&lt;/code&gt; function. The output is guaranteed
to not exceed &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/em&gt; characters (including the terminating nul character), so 
it is easy to ensure that a buffer overflow cannot occur.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_vsnprintf (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&quot;link&quot;&gt;gulong&lt;/a&gt; n,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; const *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_vasprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-vasprintf</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">An implementation of the GNU &lt;code class=&quot;function&quot;&gt;vasprintf()&lt;/code&gt; function which supports 
positional parameters, as specified in the Single Unix Specification.
This function is similar to &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-vsprintf&quot; title=&quot;g_vsprintf ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_vsprintf()&lt;/code&gt;&lt;/a&gt;, except that it allocates a 
string to hold the output, instead of putting the output in a buffer 
you allocate in advance.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_vasprintf (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **string,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; const *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_printf_string_upper_bound</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-printf-string-upper-bound</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Calculates the maximum space needed to store the output of the &lt;code class=&quot;function&quot;&gt;sprintf()&lt;/code&gt; 
function.</Abstract>
  <Declaration type="html">&lt;pre&gt;gsize g_printf_string_upper_bound (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_isalnum</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-isalnum</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is alphanumeric.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_isalnum (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_isalpha</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-isalpha</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is alphabetic (i.e. a letter).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_isalpha (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_iscntrl</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-iscntrl</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is a control character.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_iscntrl (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_isdigit</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-isdigit</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is digit (0-9).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_isdigit (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_isgraph</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-isgraph</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is a printing character and not a space.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_isgraph (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_islower</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-islower</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is an ASCII lower case letter.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_islower (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_isprint</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-isprint</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is a printing character.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_isprint (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_ispunct</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-ispunct</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is a punctuation character.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_ispunct (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_isspace</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-isspace</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is a white-space character.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_isspace (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_isupper</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-isupper</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is an ASCII upper case letter.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_isupper (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_isxdigit</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-isxdigit</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines whether a character is a hexadecimal-digit character.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ascii_isxdigit (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_digit_value</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-digit-value</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines the numeric value of a character as a decimal
digit. Differs from &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-unichar-digit-value&quot; title=&quot;g_unichar_digit_value ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_unichar_digit_value()&lt;/code&gt;&lt;/a&gt; because it takes
a char, so there's no worry about sign extension if characters
are signed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_ascii_digit_value (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_xdigit_value</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-xdigit-value</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Determines the numeric value of a character as a hexidecimal
digit. Differs from &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-unichar-xdigit-value&quot; title=&quot;g_unichar_xdigit_value ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_unichar_xdigit_value()&lt;/code&gt;&lt;/a&gt; because it takes
a char, so there's no worry about sign extension if characters
are signed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_ascii_xdigit_value (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_strcasecmp</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-strcasecmp</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Compare two strings, ignoring the case of ASCII characters.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_ascii_strcasecmp (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *s1,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *s2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_strncasecmp</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-strncasecmp</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Compare &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;s1&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;s2&lt;/code&gt;&lt;/em&gt;, ignoring the case of ASCII characters and any
characters after the first &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/em&gt; in each string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_ascii_strncasecmp (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *s1,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *s2,
    gsize n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_strup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-strup</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts all lower case ASCII letters to upper case ASCII letters.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_ascii_strup (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_strdown</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-strdown</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts all upper case ASCII letters to lower case ASCII letters.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_ascii_strdown (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_tolower</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-tolower</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Convert a character to ASCII lower case.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; g_ascii_tolower (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_toupper</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-toupper</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Convert a character to ASCII upper case.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; g_ascii_toupper (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_ascii_up</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-string-ascii-up</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts all lower case ASCII letters to upper case ASCII letters.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_ascii_up (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&gt;GString&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_ascii_down</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-string-ascii-down</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts all upper case ASCII letters to lower case ASCII letters.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_ascii_down (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&gt;GString&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strup</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts a string to upper case.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strup (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_strup&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. This function is totally broken for the reasons discussed 
in the &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strncasecmp&quot; title=&quot;g_strncasecmp ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strncasecmp()&lt;/code&gt;&lt;/a&gt; docs - use &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-ascii-strup&quot; title=&quot;g_ascii_strup ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_ascii_strup()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-strup&quot; title=&quot;g_utf8_strup ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_strup()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strdown</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strdown</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts a string to lower case.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strdown (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_strdown&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. This function is totally broken for the reasons discussed 
in the &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strncasecmp&quot; title=&quot;g_strncasecmp ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strncasecmp()&lt;/code&gt;&lt;/a&gt; docs - use &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-ascii-strdown&quot; title=&quot;g_ascii_strdown ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_ascii_strdown()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-strdown&quot; title=&quot;g_utf8_strdown ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_strdown()&lt;/code&gt;&lt;/a&gt; 
instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strcasecmp</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strcasecmp</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A case-insensitive string comparison, corresponding to the standard
&lt;code class=&quot;function&quot;&gt;strcasecmp()&lt;/code&gt; function on platforms which support it.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_strcasecmp (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *s1,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *s2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_strcasecmp&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. See &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strncasecmp&quot; title=&quot;g_strncasecmp ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strncasecmp()&lt;/code&gt;&lt;/a&gt; for a discussion of why this function 
  is deprecated and how to replace it.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strncasecmp</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strncasecmp</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">There are therefore two replacement functions: &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-ascii-strncasecmp&quot; title=&quot;g_ascii_strncasecmp ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_ascii_strncasecmp()&lt;/code&gt;&lt;/a&gt;,
which only works on ASCII and is not locale-sensitive, and
&lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-casefold&quot; title=&quot;g_utf8_casefold ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_casefold()&lt;/code&gt;&lt;/a&gt;, which is good for case-insensitive sorting of UTF-8.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_strncasecmp (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *s1,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *s2,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_strncasecmp&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. The problem with &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strncasecmp&quot; title=&quot;g_strncasecmp ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strncasecmp()&lt;/code&gt;&lt;/a&gt; is that it does the 
comparison by calling &lt;code class=&quot;function&quot;&gt;toupper()&lt;/code&gt;/&lt;code class=&quot;function&quot;&gt;tolower()&lt;/code&gt;. These functions are
locale-specific and operate on single bytes. However, it is impossible
to handle things correctly from an I18N standpoint by operating on
bytes, since characters may be multibyte. Thus &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strncasecmp&quot; title=&quot;g_strncasecmp ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strncasecmp()&lt;/code&gt;&lt;/a&gt; is
broken if your string is guaranteed to be ASCII, since it's
locale-sensitive, and it's broken if your string is localized, since
it doesn't work on many encodings at all, including UTF-8, EUC-JP,
etc.
</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strreverse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strreverse</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Reverses all of the bytes in a string.
For example, &lt;code class=&quot;literal&quot;&gt;g_strreverse (&quot;abcdef&quot;)&lt;/code&gt; will result in &quot;fedcba&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strreverse (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_strtoll</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-strtoll</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts a string to a &lt;span class=&quot;type&quot;&gt;gint64&lt;/span&gt; value.
This function behaves like the standard &lt;code class=&quot;function&quot;&gt;strtoll()&lt;/code&gt; function
does in the C locale. It does this without actually
changing the current locale, since that would not be
thread-safe.</Abstract>
  <Declaration type="html">&lt;pre&gt;gint64 g_ascii_strtoll (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *nptr,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **endptr,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; base);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_strtoull</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-strtoull</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts a string to a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#guint64&quot; title=&quot;guint64 ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;guint64&lt;/span&gt;&lt;/a&gt; value.
This function behaves like the standard &lt;code class=&quot;function&quot;&gt;strtoull()&lt;/code&gt; function
does in the C locale. It does this without actually
changing the current locale, since that would not be
thread-safe.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint64&quot; href=&quot;guint64 ()&quot; title=&quot;link&quot;&gt;guint64&lt;/a&gt; g_ascii_strtoull (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *nptr,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **endptr,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; base);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ASCII_DTOSTR_BUF_SIZE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>G-ASCII-DTOSTR-BUF-SIZE:CAPS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A good size for a buffer to be passed into &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-ascii-dtostr&quot; title=&quot;g_ascii_dtostr ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_ascii_dtostr()&lt;/code&gt;&lt;/a&gt;.
It is guaranteed to be enough for all output of that function on systems with
 64bit IEEE-compatible doubles.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_ASCII_DTOSTR_BUF_SIZE (29 + 10)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_strtod</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-strtod</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts a string to a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gdouble&quot; title=&quot;gdouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;gdouble&lt;/span&gt;&lt;/a&gt; value.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&quot;link&quot;&gt;gdouble&lt;/a&gt; g_ascii_strtod (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *nptr,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **endptr);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_dtostr</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-dtostr</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gdouble&quot; title=&quot;gdouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;gdouble&lt;/span&gt;&lt;/a&gt; to a string, using the '.' as
decimal point. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_ascii_dtostr (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *buffer,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; buf_len,
    &lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&gt;gdouble&lt;/a&gt; d);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ascii_formatd</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-ascii-formatd</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gdouble&quot; title=&quot;gdouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;gdouble&lt;/span&gt;&lt;/a&gt; to a string, using the '.' as
decimal point. To format the number you pass in
a &lt;code class=&quot;function&quot;&gt;printf()&lt;/code&gt;-style format string. Allowed conversion
specifiers are 'e', 'E', 'f', 'F', 'g' and 'G'. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_ascii_formatd (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *buffer,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; buf_len,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *format,
    &lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&gt;gdouble&lt;/a&gt; d);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strtod</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strtod</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts a string to a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gdouble&quot; title=&quot;gdouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;gdouble&lt;/span&gt;&lt;/a&gt; value.
It calls the standard &lt;code class=&quot;function&quot;&gt;strtod()&lt;/code&gt; function to handle the conversion, but
if the string is not completely converted it attempts the conversion
again with &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-ascii-strtod&quot; title=&quot;g_ascii_strtod ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_ascii_strtod()&lt;/code&gt;&lt;/a&gt;, and returns the best match.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&quot;link&quot;&gt;gdouble&lt;/a&gt; g_strtod (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *nptr,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **endptr);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strchug</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strchug</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Removes leading whitespace from a string, by moving the rest of the
characters forward.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strchug (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strchomp</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strchomp</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Removes trailing whitespace from a string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strchomp (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strstrip</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strstrip</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Removes leading and trailing whitespace from a string. See &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strchomp&quot; title=&quot;g_strchomp ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strchomp()&lt;/code&gt;&lt;/a&gt; and
&lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strchug&quot; title=&quot;g_strchug ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strchug()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_strstrip( string )&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strdelimit</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strdelimit</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Converts any delimiter characters in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;new_delimiter&lt;/code&gt;&lt;/em&gt;.
Any characters in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; which are found in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;delimiters&lt;/code&gt;&lt;/em&gt; are changed
to the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;new_delimiter&lt;/code&gt;&lt;/em&gt; character. Modifies &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; in place, and returns 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; itself, not a copy. The return value is to allow nesting such as
&lt;code class=&quot;literal&quot;&gt;g_ascii_strup (g_strdelimit (str, &quot;abc&quot;, '?'))&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strdelimit (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *delimiters,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; new_delimiter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_STR_DELIMITERS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>G-STR-DELIMITERS:CAPS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">The standard delimiters, used in &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strdelimit&quot; title=&quot;g_strdelimit ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strdelimit()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_STR_DELIMITERS &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strescape</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strescape</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Escapes the special characters '\b', '\f', '\n', '\r', '\t', '\' and
'&quot;' in the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/em&gt; by inserting a '\' before
them. Additionally all characters in the range 0x01-0x1F (everything
below SPACE) and in the range 0x7F-0xFF (all non-ASCII chars) are
replaced with a '\' followed by their octal representation. Characters
supplied in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;exceptions&lt;/code&gt;&lt;/em&gt; are not escaped.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strescape (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *source,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *exceptions);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strcompress</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strcompress</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Replaces all escaped characters with their one byte equivalent. It
does the reverse conversion of &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strescape&quot; title=&quot;g_strescape ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strescape()&lt;/code&gt;&lt;/a&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strcompress (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *source);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strcanon</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strcanon</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">For each character in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;, if the character is not in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;valid_chars&lt;/code&gt;&lt;/em&gt;,
replaces the character with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;substitutor&lt;/code&gt;&lt;/em&gt;. Modifies &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; in place, 
and return &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; itself, not a copy. The return value is to allow
nesting such as &lt;code class=&quot;literal&quot;&gt;g_ascii_strup (g_strcanon (str, &quot;abc&quot;, '?'))&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strcanon (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *valid_chars,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; substitutor);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strsplit</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strsplit</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Splits a string into a maximum of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;max_tokens&lt;/code&gt;&lt;/em&gt; pieces, using the given
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;delimiter&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;max_tokens&lt;/code&gt;&lt;/em&gt; is reached, the remainder of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; is appended
to the last token. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_strsplit (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *delimiter,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; max_tokens);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strsplit_set</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strsplit-set</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Splits &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; into a number of tokens not containing any of the characters
in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;delimiter&lt;/code&gt;&lt;/em&gt;. A token is the (possibly empty) longest string that does not
contain any of the characters in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;delimiters&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;max_tokens&lt;/code&gt;&lt;/em&gt; is reached, the
remainder is appended to the last token.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_strsplit_set (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *delimiters,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; max_tokens);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strfreev</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strfreev</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Frees a &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;-terminated array of strings, and the array itself.
If called on a &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; value, &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strfreev&quot; title=&quot;g_strfreev ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strfreev()&lt;/code&gt;&lt;/a&gt; simply returns.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_strfreev (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **str_array);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strconcat</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strconcat</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Concatenates all of the given strings into one long string.  The returned string
should be freed when no longer needed.  </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strconcat (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string1,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strjoin</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strjoin</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Joins a number of strings together to form one long string, with the optional
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;separator&lt;/code&gt;&lt;/em&gt; inserted between each of them.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strjoin (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *separator,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strjoinv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strjoinv</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Joins a number of strings together to form one long string, with the optional
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;separator&lt;/code&gt;&lt;/em&gt; inserted between each of them.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strjoinv (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *separator,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **str_array);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strv_length</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strv-length</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Returns the length of the given &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;-terminated 
string array &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str_array&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_strv_length (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **str_array);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strerror</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strerror</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Returns a string corresponding to the given error code, e.g. &quot;no such process&quot;.
You should use this function in preference to &lt;code class=&quot;function&quot;&gt;strerror()&lt;/code&gt;, because it returns a
string in UTF-8 encoding, and since not all platforms support the 
&lt;code class=&quot;function&quot;&gt;strerror()&lt;/code&gt; function.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strerror (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; errnum);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strsignal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Utility-Functions.html</Path>
  <Anchor>g-strsignal</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Returns a string describing the given signal, e.g. &quot;Segmentation fault&quot;.
You should use this function in preference to &lt;code class=&quot;function&quot;&gt;strsignal()&lt;/code&gt;, because it returns a
string in UTF-8 encoding, and since not all platforms support the
&lt;code class=&quot;function&quot;&gt;strsignal()&lt;/code&gt; function.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strsignal (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; signum);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gprintf.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_convert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-convert</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Converts a string from one character set to another.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_convert (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    gssize len,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *to_codeset,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *from_codeset,
    gsize *bytes_read,
    gsize *bytes_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_convert_with_fallback</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-convert-with-fallback</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Converts a string from one character set to another, possibly
including fallback sequences for characters not representable
in the output. Note that it is not guaranteed that the specification
for the fallback sequences in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;fallback&lt;/code&gt;&lt;/em&gt; will be honored. Some
systems may do an approximate conversion from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;from_codeset&lt;/code&gt;&lt;/em&gt;
to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;to_codeset&lt;/code&gt;&lt;/em&gt; in their &lt;code class=&quot;function&quot;&gt;iconv()&lt;/code&gt; functions, 
in which case GLib will simply return that approximate conversion.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_convert_with_fallback (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    gssize len,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *to_codeset,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *from_codeset,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *fallback,
    gsize *bytes_read,
    gsize *bytes_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GIConv</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>GIConv</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GIConv&lt;/span&gt; struct wraps an
&lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;iconv()&lt;/code&gt;&lt;/code&gt; conversion descriptor. It contains private data
and should only be accessed using the following functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GIConv GIConv;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_convert_with_iconv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-convert-with-iconv</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Converts a string from one character set to another. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_convert_with_iconv (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    gssize len,
    &lt;a class=&quot;glib-Character-Set-Conversion.html#GIConv&quot; href=&quot;GIConv&quot; title=&quot;link&quot;&gt;GIConv&lt;/a&gt; converter,
    gsize *bytes_read,
    gsize *bytes_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CONVERT_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>G-CONVERT-ERROR:CAPS</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Error domain for character set conversions. Errors in this domain will
be from the &lt;a class=&quot;link&quot; href=&quot;glib-Character-Set-Conversion.html#GConvertError&quot; title=&quot;enum GConvertError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GConvertError&lt;/span&gt;&lt;/a&gt; enumeration. See &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; for information on 
error domains.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CONVERT_ERROR g_convert_error_quark()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_iconv_open</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-iconv-open</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Same as the standard UNIX routine &lt;code class=&quot;function&quot;&gt;iconv_open()&lt;/code&gt;, but
may be implemented via libiconv on UNIX flavors that lack
a native implementation.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Character-Set-Conversion.html#GIConv&quot; href=&quot;GIConv&quot; title=&quot;link&quot;&gt;GIConv&lt;/a&gt; g_iconv_open (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *to_codeset,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *from_codeset);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_iconv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-iconv</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Same as the standard UNIX routine &lt;code class=&quot;function&quot;&gt;iconv()&lt;/code&gt;, but
may be implemented via libiconv on UNIX flavors that lack
a native implementation.</Abstract>
  <Declaration type="html">&lt;pre&gt;gsize g_iconv (
    &lt;a class=&quot;glib-Character-Set-Conversion.html#GIConv&quot; href=&quot;GIConv&quot; title=&quot;link&quot;&gt;GIConv&lt;/a&gt; converter,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **inbuf,
    gsize *inbytes_left,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **outbuf,
    gsize *outbytes_left);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_iconv_close</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-iconv-close</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Same as the standard UNIX routine &lt;code class=&quot;function&quot;&gt;iconv_close()&lt;/code&gt;, but
may be implemented via libiconv on UNIX flavors that lack
a native implementation. Should be called to clean up
the conversion descriptor from &lt;a class=&quot;link&quot; href=&quot;glib-Character-Set-Conversion.html#g-iconv-open&quot; title=&quot;g_iconv_open ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_iconv_open()&lt;/code&gt;&lt;/a&gt; when
you are done converting things.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_iconv_close (
    &lt;a class=&quot;glib-Character-Set-Conversion.html#GIConv&quot; href=&quot;GIConv&quot; title=&gt;GIConv&lt;/a&gt; converter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_locale_to_utf8</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-locale-to-utf8</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Converts a string which is in the encoding used for strings by
the C runtime (usually the same as that used by the operating
system) in the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#setlocale&quot; title=&quot;Locale&quot;&gt;current locale&lt;/a&gt; into a
UTF-8 string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_locale_to_utf8 (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *opsysstring,
    gssize len,
    gsize *bytes_read,
    gsize *bytes_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_filename_to_utf8</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-filename-to-utf8</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Converts a string which is in the encoding used by GLib for
filenames into a UTF-8 string. Note that on Windows GLib uses UTF-8
for filenames; on other platforms, this function indirectly depends on 
the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#setlocale&quot; title=&quot;Locale&quot;&gt;current locale&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_filename_to_utf8 (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *opsysstring,
    gssize len,
    gsize *bytes_read,
    gsize *bytes_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_filename_from_utf8</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-filename-from-utf8</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Converts a string from UTF-8 to the encoding GLib uses for
filenames. Note that on Windows GLib uses UTF-8 for filenames;
on other platforms, this function indirectly depends on the 
&lt;a class=&quot;link&quot; href=&quot;glib-running.html#setlocale&quot; title=&quot;Locale&quot;&gt;current locale&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_filename_from_utf8 (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *utf8string,
    gssize len,
    gsize *bytes_read,
    gsize *bytes_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_filename_from_uri</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-filename-from-uri</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Converts an escaped ASCII-encoded URI to a local filename in the
encoding used for filenames.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_filename_from_uri (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **hostname,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_filename_to_uri</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-filename-to-uri</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Converts an absolute filename to an escaped ASCII-encoded URI, with the path
component following Section 3.3. of RFC 2396.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_filename_to_uri (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *hostname,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_filename_charsets</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-get-filename-charsets</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Determines the preferred character sets used for filenames.
The first character set from the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;charsets&lt;/code&gt;&lt;/em&gt; is the filename encoding, the
subsequent character sets are used when trying to generate a displayable
representation of a filename, see &lt;a class=&quot;link&quot; href=&quot;glib-Character-Set-Conversion.html#g-filename-display-name&quot; title=&quot;g_filename_display_name ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_filename_display_name()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_get_filename_charsets (
    G_CONST_RETURN &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; ***charsets);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_filename_display_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-filename-display-name</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Converts a filename into a valid UTF-8 string. The conversion is 
not necessarily reversible, so you should keep the original around 
and use the return value of this function only for display purposes.
Unlike &lt;a class=&quot;link&quot; href=&quot;glib-Character-Set-Conversion.html#g-filename-to-utf8&quot; title=&quot;g_filename_to_utf8 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_filename_to_utf8()&lt;/code&gt;&lt;/a&gt;, the result is guaranteed to be non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; 
even if the filename actually isn't in the GLib file name encoding.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_filename_display_name (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_filename_display_basename</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-filename-display-basename</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Returns the display basename for the particular filename, guaranteed
to be valid UTF-8. The display name might not be identical to the filename,
for instance there might be problems converting it to UTF-8, and some files
can be translated in the display.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_filename_display_basename (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_uri_list_extract_uris</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-uri-list-extract-uris</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Splits an URI list conforming to the text/uri-list
mime type defined in RFC 2483 into individual URIs,
discarding any comments. The URIs are not validated.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_uri_list_extract_uris (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *uri_list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_locale_from_utf8</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-locale-from-utf8</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Converts a string from UTF-8 to the encoding used for strings by
the C runtime (usually the same as that used by the operating
system) in the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#setlocale&quot; title=&quot;Locale&quot;&gt;current locale&lt;/a&gt;. On
Windows this means the system codepage.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_locale_from_utf8 (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *utf8string,
    gssize len,
    gsize *bytes_read,
    gsize *bytes_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CONVERT_ERROR_NO_CONVERSION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>GConvertError</Anchor>
  <NodeRef refid="670"/>
  <Declaration type="html">&lt;pre&gt;G_CONVERT_ERROR_NO_CONVERSION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GConvertError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CONVERT_ERROR_ILLEGAL_SEQUENCE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>GConvertError</Anchor>
  <NodeRef refid="670"/>
  <Declaration type="html">&lt;pre&gt;G_CONVERT_ERROR_ILLEGAL_SEQUENCE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GConvertError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CONVERT_ERROR_FAILED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>GConvertError</Anchor>
  <NodeRef refid="670"/>
  <Declaration type="html">&lt;pre&gt;G_CONVERT_ERROR_FAILED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GConvertError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CONVERT_ERROR_PARTIAL_INPUT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>GConvertError</Anchor>
  <NodeRef refid="670"/>
  <Declaration type="html">&lt;pre&gt;G_CONVERT_ERROR_PARTIAL_INPUT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GConvertError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CONVERT_ERROR_BAD_URI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>GConvertError</Anchor>
  <NodeRef refid="670"/>
  <Declaration type="html">&lt;pre&gt;G_CONVERT_ERROR_BAD_URI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GConvertError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CONVERT_ERROR_NOT_ABSOLUTE_PATH</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>GConvertError</Anchor>
  <NodeRef refid="670"/>
  <Declaration type="html">&lt;pre&gt;G_CONVERT_ERROR_NOT_ABSOLUTE_PATH&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GConvertError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GConvertError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>GConvertError</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Error codes returned by character set conversion routines.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_CONVERT_ERROR_NO_CONVERSION,
    G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
    G_CONVERT_ERROR_FAILED,
    G_CONVERT_ERROR_PARTIAL_INPUT,
    G_CONVERT_ERROR_BAD_URI,
    G_CONVERT_ERROR_NOT_ABSOLUTE_PATH 
} GConvertError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_charset</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Character-Set-Conversion.html</Path>
  <Anchor>g-get-charset</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Obtains the character set for the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#setlocale&quot; title=&quot;Locale&quot;&gt;current 
locale&lt;/a&gt;; you might use this character set as an argument to 
&lt;a class=&quot;link&quot; href=&quot;glib-Character-Set-Conversion.html#g-convert&quot; title=&quot;g_convert ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_convert()&lt;/code&gt;&lt;/a&gt;, to convert from the current locale's encoding to some 
other encoding. (Frequently &lt;a class=&quot;link&quot; href=&quot;glib-Character-Set-Conversion.html#g-locale-to-utf8&quot; title=&quot;g_locale_to_utf8 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_locale_to_utf8()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Character-Set-Conversion.html#g-locale-from-utf8&quot; title=&quot;g_locale_from_utf8 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_locale_from_utf8()&lt;/code&gt;&lt;/a&gt;
are nice shortcuts, though.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; g_get_charset (
    G_CONST_RETURN char **charset);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gunichar</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>gunichar</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">A type which can hold any UCS-4 character code. </Abstract>
  <Declaration type="html">&lt;pre&gt;typedef guint32 gunichar;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gunichar2</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>gunichar2</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">A type which can hold any UTF-16 code 
point&lt;sup&gt;[&lt;a name=&quot;utf16_surrogate_pairs&quot; href=&quot;#ftn.utf16_surrogate_pairs&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef guint16 gunichar2;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_validate</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-validate</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;ch&lt;/code&gt;&lt;/em&gt; is a valid Unicode character. Some possible
integer values of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;ch&lt;/code&gt;&lt;/em&gt; will not be valid. 0 is considered a valid
character, though it's normally a string terminator.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_validate (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; ch);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_isalnum</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-isalnum</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines whether a character is alphanumeric.
Given some UTF-8 text, obtain a character value
with &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_isalnum (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_isalpha</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-isalpha</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines whether a character is alphabetic (i.e. a letter).
Given some UTF-8 text, obtain a character value with
&lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_isalpha (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_iscntrl</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-iscntrl</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines whether a character is a control character.
Given some UTF-8 text, obtain a character value with
&lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_iscntrl (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_isdefined</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-isdefined</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines if a given character is assigned in the Unicode
standard.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_isdefined (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_isdigit</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-isdigit</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines whether a character is numeric (i.e. a digit).  This
covers ASCII 0-9 and also digits in other languages/scripts.  Given
some UTF-8 text, obtain a character value with &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_isdigit (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_isgraph</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-isgraph</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines whether a character is printable and not a space
(returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; for control characters, format characters, and
spaces). &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-unichar-isprint&quot; title=&quot;g_unichar_isprint ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_unichar_isprint()&lt;/code&gt;&lt;/a&gt; is similar, but returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; for
spaces. Given some UTF-8 text, obtain a character value with
&lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_isgraph (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_islower</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-islower</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines whether a character is a lowercase letter.
Given some UTF-8 text, obtain a character value with
&lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_islower (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_ismark</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-ismark</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines whether a character is a mark (non-spacing mark,
combining mark, or enclosing mark in Unicode speak).
Given some UTF-8 text, obtain a character value
with &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_ismark (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_isprint</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-isprint</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines whether a character is printable.
Unlike &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-unichar-isgraph&quot; title=&quot;g_unichar_isgraph ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_unichar_isgraph()&lt;/code&gt;&lt;/a&gt;, returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; for spaces.
Given some UTF-8 text, obtain a character value with
&lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_isprint (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_ispunct</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-ispunct</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines whether a character is punctuation or a symbol.
Given some UTF-8 text, obtain a character value with
&lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_ispunct (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_isspace</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-isspace</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines whether a character is a space, tab, or line separator
(newline, carriage return, etc.).  Given some UTF-8 text, obtain a
character value with &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_isspace (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_istitle</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-istitle</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines if a character is titlecase. Some characters in
Unicode which are composites, such as the DZ digraph
have three case variants instead of just two. The titlecase
form is used at the beginning of a word where only the
first letter is capitalized. The titlecase form of the DZ
digraph is U+01F2 LATIN CAPITAL LETTTER D WITH SMALL LETTER Z.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_istitle (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_isupper</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-isupper</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines if a character is uppercase.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_isupper (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_isxdigit</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-isxdigit</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines if a character is a hexidecimal digit.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_isxdigit (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_iswide</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-iswide</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines if a character is typically rendered in a double-width
cell.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_iswide (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_iswide_cjk</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-iswide-cjk</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines if a character is typically rendered in a double-width
cell under legacy East Asian locales.  If a character is wide according to
&lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-unichar-iswide&quot; title=&quot;g_unichar_iswide ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_unichar_iswide()&lt;/code&gt;&lt;/a&gt;, then it is also reported wide with this function, but
the converse is not necessarily true.  See the
&lt;a class=&quot;ulink&quot; href=&quot;http://www.unicode.org/reports/tr11/&quot; target=&quot;_top&quot;&gt;Unicode Standard
Annex &lt;span class=&quot;type&quot;&gt;11&lt;/span&gt;&lt;/a&gt; for details.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_iswide_cjk (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_iszerowidth</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-iszerowidth</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines if a given character typically takes zero width when rendered.
The return value is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; for all non-spacing and enclosing marks
(e.g., combining accents), format characters, zero-width
space, but not U+00AD SOFT HYPHEN.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_iszerowidth (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_toupper</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-toupper</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts a character to uppercase.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; g_unichar_toupper (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_tolower</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-tolower</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts a character to lower case.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; g_unichar_tolower (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_totitle</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-totitle</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts a character to the titlecase.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; g_unichar_totitle (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_digit_value</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-digit-value</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines the numeric value of a character as a decimal
digit.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_unichar_digit_value (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_xdigit_value</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-xdigit-value</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines the numeric value of a character as a hexidecimal
digit.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_unichar_xdigit_value (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_CONTROL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_CONTROL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_FORMAT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_FORMAT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_UNASSIGNED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_UNASSIGNED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_PRIVATE_USE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_PRIVATE_USE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SURROGATE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SURROGATE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_LOWERCASE_LETTER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_LOWERCASE_LETTER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_MODIFIER_LETTER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_MODIFIER_LETTER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_OTHER_LETTER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_OTHER_LETTER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_TITLECASE_LETTER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_TITLECASE_LETTER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_UPPERCASE_LETTER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_UPPERCASE_LETTER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_COMBINING_MARK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_COMBINING_MARK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_ENCLOSING_MARK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_ENCLOSING_MARK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_NON_SPACING_MARK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_NON_SPACING_MARK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_DECIMAL_NUMBER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_DECIMAL_NUMBER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_LETTER_NUMBER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_LETTER_NUMBER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_OTHER_NUMBER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_OTHER_NUMBER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_CONNECT_PUNCTUATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_CONNECT_PUNCTUATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_DASH_PUNCTUATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_DASH_PUNCTUATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_CLOSE_PUNCTUATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_CLOSE_PUNCTUATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_FINAL_PUNCTUATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_FINAL_PUNCTUATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_INITIAL_PUNCTUATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_INITIAL_PUNCTUATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_OTHER_PUNCTUATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_OTHER_PUNCTUATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_OPEN_PUNCTUATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_OPEN_PUNCTUATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_CURRENCY_SYMBOL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_CURRENCY_SYMBOL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_MODIFIER_SYMBOL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_MODIFIER_SYMBOL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_MATH_SYMBOL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_MATH_SYMBOL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_OTHER_SYMBOL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_OTHER_SYMBOL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_LINE_SEPARATOR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_LINE_SEPARATOR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_PARAGRAPH_SEPARATOR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_PARAGRAPH_SEPARATOR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SPACE_SEPARATOR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="697"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SPACE_SEPARATOR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUnicodeType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeType</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">These are the possible character classifications from the 
Unicode specification.
See &lt;a class=&quot;ulink&quot; href=&quot;http://www.unicode.org/Public/UNIDATA/UnicodeData.html&quot; target=&quot;_top&quot;&gt;http://www.unicode.org/Public/UNIDATA/UnicodeData.html&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_UNICODE_CONTROL,
    G_UNICODE_FORMAT,
    G_UNICODE_UNASSIGNED,
    G_UNICODE_PRIVATE_USE,
    G_UNICODE_SURROGATE,
    G_UNICODE_LOWERCASE_LETTER,
    G_UNICODE_MODIFIER_LETTER,
    G_UNICODE_OTHER_LETTER,
    G_UNICODE_TITLECASE_LETTER,
    G_UNICODE_UPPERCASE_LETTER,
    G_UNICODE_COMBINING_MARK,
    G_UNICODE_ENCLOSING_MARK,
    G_UNICODE_NON_SPACING_MARK,
    G_UNICODE_DECIMAL_NUMBER,
    G_UNICODE_LETTER_NUMBER,
    G_UNICODE_OTHER_NUMBER,
    G_UNICODE_CONNECT_PUNCTUATION,
    G_UNICODE_DASH_PUNCTUATION,
    G_UNICODE_CLOSE_PUNCTUATION,
    G_UNICODE_FINAL_PUNCTUATION,
    G_UNICODE_INITIAL_PUNCTUATION,
    G_UNICODE_OTHER_PUNCTUATION,
    G_UNICODE_OPEN_PUNCTUATION,
    G_UNICODE_CURRENCY_SYMBOL,
    G_UNICODE_MODIFIER_SYMBOL,
    G_UNICODE_MATH_SYMBOL,
    G_UNICODE_OTHER_SYMBOL,
    G_UNICODE_LINE_SEPARATOR,
    G_UNICODE_PARAGRAPH_SEPARATOR,
    G_UNICODE_SPACE_SEPARATOR 
} GUnicodeType;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_type</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-type</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Classifies a Unicode character by type.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#GUnicodeType&quot; href=&quot;enum GUnicodeType&quot; title=&quot;link&quot;&gt;GUnicodeType&lt;/a&gt; g_unichar_type (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_MANDATORY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_MANDATORY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_CARRIAGE_RETURN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_CARRIAGE_RETURN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_LINE_FEED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_LINE_FEED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_COMBINING_MARK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_COMBINING_MARK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_SURROGATE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_SURROGATE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_ZERO_WIDTH_SPACE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_ZERO_WIDTH_SPACE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_INSEPARABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_INSEPARABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_NON_BREAKING_GLUE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_NON_BREAKING_GLUE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_CONTINGENT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_CONTINGENT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_SPACE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_SPACE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_AFTER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_AFTER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_BEFORE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_BEFORE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_BEFORE_AND_AFTER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_BEFORE_AND_AFTER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_HYPHEN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_HYPHEN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_NON_STARTER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_NON_STARTER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_OPEN_PUNCTUATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_OPEN_PUNCTUATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_CLOSE_PUNCTUATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_CLOSE_PUNCTUATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_QUOTATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_QUOTATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_EXCLAMATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_EXCLAMATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_IDEOGRAPHIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_IDEOGRAPHIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_NUMERIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_NUMERIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_INFIX_SEPARATOR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_INFIX_SEPARATOR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_SYMBOL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_SYMBOL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_ALPHABETIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_ALPHABETIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_PREFIX</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_PREFIX&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_POSTFIX</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_POSTFIX&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_COMPLEX_CONTEXT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_COMPLEX_CONTEXT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_AMBIGUOUS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_AMBIGUOUS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_UNKNOWN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_UNKNOWN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_NEXT_LINE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_NEXT_LINE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_WORD_JOINER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_WORD_JOINER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_HANGUL_L_JAMO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_HANGUL_L_JAMO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_HANGUL_V_JAMO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_HANGUL_V_JAMO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_HANGUL_T_JAMO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_HANGUL_T_JAMO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_HANGUL_LV_SYLLABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_HANGUL_LV_SYLLABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="699"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeBreakType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUnicodeBreakType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeBreakType</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">These are the possible line break classifications.
The five Hangul types were added in Unicode 4.1, so, has been
introduced in GLib 2.10.  Note that new types may be added in the future.
Applications should be ready to handle unknown values.
They may be regarded as &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#G-UNICODE-BREAK-UNKNOWN:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_UNICODE_BREAK_UNKNOWN&lt;/code&gt;&lt;/a&gt;.
See &lt;a class=&quot;ulink&quot; href=&quot;http://www.unicode.org/unicode/reports/tr14/&quot; target=&quot;_top&quot;&gt;http://www.unicode.org/unicode/reports/tr14/&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_UNICODE_BREAK_MANDATORY,
    G_UNICODE_BREAK_CARRIAGE_RETURN,
    G_UNICODE_BREAK_LINE_FEED,
    G_UNICODE_BREAK_COMBINING_MARK,
    G_UNICODE_BREAK_SURROGATE,
    G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
    G_UNICODE_BREAK_INSEPARABLE,
    G_UNICODE_BREAK_NON_BREAKING_GLUE,
    G_UNICODE_BREAK_CONTINGENT,
    G_UNICODE_BREAK_SPACE,
    G_UNICODE_BREAK_AFTER,
    G_UNICODE_BREAK_BEFORE,
    G_UNICODE_BREAK_BEFORE_AND_AFTER,
    G_UNICODE_BREAK_HYPHEN,
    G_UNICODE_BREAK_NON_STARTER,
    G_UNICODE_BREAK_OPEN_PUNCTUATION,
    G_UNICODE_BREAK_CLOSE_PUNCTUATION,
    G_UNICODE_BREAK_QUOTATION,
    G_UNICODE_BREAK_EXCLAMATION,
    G_UNICODE_BREAK_IDEOGRAPHIC,
    G_UNICODE_BREAK_NUMERIC,
    G_UNICODE_BREAK_INFIX_SEPARATOR,
    G_UNICODE_BREAK_SYMBOL,
    G_UNICODE_BREAK_ALPHABETIC,
    G_UNICODE_BREAK_PREFIX,
    G_UNICODE_BREAK_POSTFIX,
    G_UNICODE_BREAK_COMPLEX_CONTEXT,
    G_UNICODE_BREAK_AMBIGUOUS,
    G_UNICODE_BREAK_UNKNOWN,
    G_UNICODE_BREAK_NEXT_LINE,
    G_UNICODE_BREAK_WORD_JOINER,
    G_UNICODE_BREAK_HANGUL_L_JAMO,
    G_UNICODE_BREAK_HANGUL_V_JAMO,
    G_UNICODE_BREAK_HANGUL_T_JAMO,
    G_UNICODE_BREAK_HANGUL_LV_SYLLABLE,
    G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE 
} GUnicodeBreakType;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_break_type</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-break-type</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines the break type of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;c&lt;/code&gt;&lt;/em&gt;. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;c&lt;/code&gt;&lt;/em&gt; should be a Unicode character
(to derive a character from UTF-8 encoded text, use
&lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char&quot; title=&quot;g_utf8_get_char ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char()&lt;/code&gt;&lt;/a&gt;). The break type is used to find word and line
breaks (&quot;text boundaries&quot;), Pango implements the Unicode boundary
resolution algorithms and normally you would use a function such
as &lt;a
href=&quot;/usr/share/gtk-doc/html/pango/pango-Text-Processing.html#pango-break&quot;
&gt;&lt;code class=&quot;function&quot;&gt;pango_break()&lt;/code&gt;&lt;/a&gt; instead of caring about break types yourself.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#GUnicodeBreakType&quot; href=&quot;enum GUnicodeBreakType&quot; title=&quot;link&quot;&gt;GUnicodeBreakType&lt;/a&gt; g_unichar_break_type (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_combining_class</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-combining-class</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Determines the canonical combining class of a Unicode character.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_unichar_combining_class (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; uc);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unicode_canonical_ordering</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unicode-canonical-ordering</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Computes the canonical ordering of a string in-place.  
This rearranges decomposed characters in the string 
according to their combining classes.  See the Unicode 
manual for more information.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_unicode_canonical_ordering (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; *string,
    gsize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unicode_canonical_decomposition</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unicode-canonical-decomposition</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Computes the canonical decomposition of a Unicode character.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt;* g_unicode_canonical_decomposition (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; ch,
    gsize *result_len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_get_mirror_char</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-get-mirror-char</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">In Unicode, some characters are &lt;em class=&quot;firstterm&quot;&gt;mirrored&lt;/em&gt;. This
means that their images are mirrored horizontally in text that is laid
out from right to left. For instance, &quot;(&quot; would become its mirror image,
&quot;)&quot;, in right-to-left text.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_unichar_get_mirror_char (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; ch,
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; *mirrored_ch);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_INVALID_CODE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_INVALID_CODE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_COMMON</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_COMMON&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_INHERITED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_INHERITED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_ARABIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_ARABIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_ARMENIAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_ARMENIAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_BENGALI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_BENGALI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_BOPOMOFO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_BOPOMOFO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_CHEROKEE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_CHEROKEE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_COPTIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_COPTIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_CYRILLIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_CYRILLIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_DESERET</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_DESERET&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_DEVANAGARI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_DEVANAGARI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_ETHIOPIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_ETHIOPIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_GEORGIAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_GEORGIAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_GOTHIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_GOTHIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_GREEK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_GREEK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_GUJARATI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_GUJARATI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_GURMUKHI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_GURMUKHI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_HAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_HAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_HANGUL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_HANGUL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_HEBREW</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_HEBREW&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_HIRAGANA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_HIRAGANA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_KANNADA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_KANNADA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_KATAKANA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_KATAKANA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_KHMER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_KHMER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_LAO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_LAO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_LATIN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_LATIN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_MALAYALAM</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_MALAYALAM&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_MONGOLIAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_MONGOLIAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_MYANMAR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_MYANMAR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_OGHAM</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_OGHAM&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_OLD_ITALIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_OLD_ITALIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_ORIYA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_ORIYA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_RUNIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_RUNIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_SINHALA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_SINHALA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_SYRIAC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_SYRIAC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_TAMIL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_TAMIL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_TELUGU</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_TELUGU&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_THAANA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_THAANA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_THAI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_THAI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_TIBETAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_TIBETAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_YI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_YI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_TAGALOG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_TAGALOG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_HANUNOO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_HANUNOO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_BUHID</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_BUHID&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_TAGBANWA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_TAGBANWA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_BRAILLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_BRAILLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_CYPRIOT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_CYPRIOT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_LIMBU</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_LIMBU&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_OSMANYA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_OSMANYA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_SHAVIAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_SHAVIAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_LINEAR_B</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_LINEAR_B&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_TAI_LE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_TAI_LE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_UGARITIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_UGARITIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_NEW_TAI_LUE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_NEW_TAI_LUE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_BUGINESE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_BUGINESE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_GLAGOLITIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_GLAGOLITIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_TIFINAGH</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_TIFINAGH&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_SYLOTI_NAGRI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_SYLOTI_NAGRI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_OLD_PERSIAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_OLD_PERSIAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_KHAROSHTHI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_KHAROSHTHI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_UNKNOWN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_UNKNOWN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_BALINESE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_BALINESE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_CUNEIFORM</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_CUNEIFORM&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_PHOENICIAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_PHOENICIAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_PHAGS_PA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_PHAGS_PA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_NKO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_NKO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_KAYAH_LI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_KAYAH_LI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_LEPCHA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_LEPCHA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_REJANG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_REJANG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_SUNDANESE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_SUNDANESE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_SAURASHTRA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_SAURASHTRA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_CHAM</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_CHAM&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_OL_CHIKI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_OL_CHIKI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_VAI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_VAI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_CARIAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_CARIAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_LYCIAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_LYCIAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_UNICODE_SCRIPT_LYDIAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="705"/>
  <Declaration type="html">&lt;pre&gt;G_UNICODE_SCRIPT_LYDIAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUnicodeScript</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUnicodeScript</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GUnicodeScript</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#GUnicodeScript&quot; title=&quot;enum GUnicodeScript&quot;&gt;&lt;span class=&quot;type&quot;&gt;GUnicodeScript&lt;/span&gt;&lt;/a&gt; enumeration identifies different writing
systems. The values correspond to the names as defined in the
Unicode standard. The enumeration has been added in GLib 2.14,
and is interchangeable with &lt;a
href=&quot;/usr/share/gtk-doc/html/pango/pango-Scripts-and-Languages.html#PangoScript&quot;
&gt;&lt;span class=&quot;type&quot;&gt;PangoScript&lt;/span&gt;&lt;/a&gt;.
Note that new types may be added in the future. Applications 
should be ready to handle unknown values.
See &lt;a class=&quot;ulink&quot; href=&quot;http://www.unicode.org/reports/tr24/&quot; target=&quot;_top&quot;&gt;Unicode Standard Annex
&lt;span class=&quot;type&quot;&gt;&quot;&quot;&lt;/span&gt; Script names&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_UNICODE_SCRIPT_INVALID_CODE = -1,
    G_UNICODE_SCRIPT_COMMON = 0,
    G_UNICODE_SCRIPT_INHERITED,
    G_UNICODE_SCRIPT_ARABIC,
    G_UNICODE_SCRIPT_ARMENIAN,
    G_UNICODE_SCRIPT_BENGALI,
    G_UNICODE_SCRIPT_BOPOMOFO,
    G_UNICODE_SCRIPT_CHEROKEE,
    G_UNICODE_SCRIPT_COPTIC,
    G_UNICODE_SCRIPT_CYRILLIC,
    G_UNICODE_SCRIPT_DESERET,
    G_UNICODE_SCRIPT_DEVANAGARI,
    G_UNICODE_SCRIPT_ETHIOPIC,
    G_UNICODE_SCRIPT_GEORGIAN,
    G_UNICODE_SCRIPT_GOTHIC,
    G_UNICODE_SCRIPT_GREEK,
    G_UNICODE_SCRIPT_GUJARATI,
    G_UNICODE_SCRIPT_GURMUKHI,
    G_UNICODE_SCRIPT_HAN,
    G_UNICODE_SCRIPT_HANGUL,
    G_UNICODE_SCRIPT_HEBREW,
    G_UNICODE_SCRIPT_HIRAGANA,
    G_UNICODE_SCRIPT_KANNADA,
    G_UNICODE_SCRIPT_KATAKANA,
    G_UNICODE_SCRIPT_KHMER,
    G_UNICODE_SCRIPT_LAO,
    G_UNICODE_SCRIPT_LATIN,
    G_UNICODE_SCRIPT_MALAYALAM,
    G_UNICODE_SCRIPT_MONGOLIAN,
    G_UNICODE_SCRIPT_MYANMAR,
    G_UNICODE_SCRIPT_OGHAM,
    G_UNICODE_SCRIPT_OLD_ITALIC,
    G_UNICODE_SCRIPT_ORIYA,
    G_UNICODE_SCRIPT_RUNIC,
    G_UNICODE_SCRIPT_SINHALA,
    G_UNICODE_SCRIPT_SYRIAC,
    G_UNICODE_SCRIPT_TAMIL,
    G_UNICODE_SCRIPT_TELUGU,
    G_UNICODE_SCRIPT_THAANA,
    G_UNICODE_SCRIPT_THAI,
    G_UNICODE_SCRIPT_TIBETAN,
    G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL,
    G_UNICODE_SCRIPT_YI,
    G_UNICODE_SCRIPT_TAGALOG,
    G_UNICODE_SCRIPT_HANUNOO,
    G_UNICODE_SCRIPT_BUHID,
    G_UNICODE_SCRIPT_TAGBANWA,
    G_UNICODE_SCRIPT_BRAILLE,
    G_UNICODE_SCRIPT_CYPRIOT,
    G_UNICODE_SCRIPT_LIMBU,
    G_UNICODE_SCRIPT_OSMANYA,
    G_UNICODE_SCRIPT_SHAVIAN,
    G_UNICODE_SCRIPT_LINEAR_B,
    G_UNICODE_SCRIPT_TAI_LE,
    G_UNICODE_SCRIPT_UGARITIC,
    G_UNICODE_SCRIPT_NEW_TAI_LUE,
    G_UNICODE_SCRIPT_BUGINESE,
    G_UNICODE_SCRIPT_GLAGOLITIC,
    G_UNICODE_SCRIPT_TIFINAGH,
    G_UNICODE_SCRIPT_SYLOTI_NAGRI,
    G_UNICODE_SCRIPT_OLD_PERSIAN,
    G_UNICODE_SCRIPT_KHAROSHTHI,
    G_UNICODE_SCRIPT_UNKNOWN,
    G_UNICODE_SCRIPT_BALINESE,
    G_UNICODE_SCRIPT_CUNEIFORM,
    G_UNICODE_SCRIPT_PHOENICIAN,
    G_UNICODE_SCRIPT_PHAGS_PA,
    G_UNICODE_SCRIPT_NKO,
    G_UNICODE_SCRIPT_KAYAH_LI,
    G_UNICODE_SCRIPT_LEPCHA,
    G_UNICODE_SCRIPT_REJANG,
    G_UNICODE_SCRIPT_SUNDANESE,
    G_UNICODE_SCRIPT_SAURASHTRA,
    G_UNICODE_SCRIPT_CHAM,
    G_UNICODE_SCRIPT_OL_CHIKI,
    G_UNICODE_SCRIPT_VAI,
    G_UNICODE_SCRIPT_CARIAN,
    G_UNICODE_SCRIPT_LYCIAN,
    G_UNICODE_SCRIPT_LYDIAN  
} GUnicodeScript;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_get_script</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-get-script</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Looks up the &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#GUnicodeScript&quot; title=&quot;enum GUnicodeScript&quot;&gt;&lt;span class=&quot;type&quot;&gt;GUnicodeScript&lt;/span&gt;&lt;/a&gt; for a particular character (as defined 
by Unicode Standard Annex &lt;span class=&quot;type&quot;&gt;24&lt;/span&gt;). No check is made for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;ch&lt;/code&gt;&lt;/em&gt; being a
valid Unicode character; if you pass in invalid character, the
result is undefined.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#GUnicodeScript&quot; href=&quot;enum GUnicodeScript&quot; title=&quot;link&quot;&gt;GUnicodeScript&lt;/a&gt; g_unichar_get_script (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; ch);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_next_char</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-next-char</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Skips to the next character in a UTF-8 string. The string must be
valid; this macro is as fast as possible, and has no error-checking.
You would use this macro to iterate over a string character by
character. The macro returns the start of the next UTF-8 character.
Before using this macro, use &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-validate&quot; title=&quot;g_utf8_validate ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_validate()&lt;/code&gt;&lt;/a&gt; to validate strings
that may contain invalid UTF-8.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_utf8_next_char(p)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_get_char</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-get-char</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts a sequence of bytes encoded as UTF-8 to a Unicode character.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/em&gt; does not point to a valid UTF-8 encoded character, results are
undefined. If you are not sure that the bytes are complete
valid Unicode characters, you should use &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-get-char-validated&quot; title=&quot;g_utf8_get_char_validated ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_get_char_validated()&lt;/code&gt;&lt;/a&gt;
instead.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; g_utf8_get_char (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *p);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_get_char_validated</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-get-char-validated</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Convert a sequence of bytes encoded as UTF-8 to a Unicode character.
This function checks for incomplete characters, for invalid characters
such as characters that are out of the range of Unicode, and for
overlong encodings of valid characters.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; g_utf8_get_char_validated (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *p,
    gssize max_len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_offset_to_pointer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-offset-to-pointer</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts from an integer character offset to a pointer to a position
within the string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_offset_to_pointer (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&gt;glong&lt;/a&gt; offset);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_pointer_to_offset</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-pointer-to-offset</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts from a pointer to position within a string to a integer
character offset.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; g_utf8_pointer_to_offset (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *pos);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_prev_char</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-prev-char</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Finds the previous UTF-8 character in the string before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_prev_char (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *p);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_find_next_char</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-find-next-char</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Finds the start of the next UTF-8 character in the string after &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_find_next_char (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *p,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_find_prev_char</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-find-prev-char</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Given a position &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/em&gt; with a UTF-8 encoded string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt;, find the start
of the previous UTF-8 character starting before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/em&gt;. Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; if no
UTF-8 characters are present in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_find_prev_char (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *p);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_strlen</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-strlen</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Returns the length of the string in characters.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; g_utf8_strlen (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *p,
    gssize max);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_strncpy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-strncpy</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Like the standard C &lt;code class=&quot;function&quot;&gt;strncpy()&lt;/code&gt; function, but 
copies a given number of characters instead of a given number of 
bytes. The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt; string must be valid UTF-8 encoded text. 
(Use &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-validate&quot; title=&quot;g_utf8_validate ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_validate()&lt;/code&gt;&lt;/a&gt; on all text before trying to use UTF-8 
utility functions with it.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_strncpy (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *dest,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *src,
    gsize n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_strchr</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-strchr</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Finds the leftmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; bytes.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; is -1, allow unbounded search.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_strchr (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *p,
    gssize len,
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_strrchr</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-strrchr</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Find the rightmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; bytes.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; is -1, allow unbounded search.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_strrchr (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *p,
    gssize len,
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_strreverse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-strreverse</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Reverses a UTF-8 string. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; must be valid UTF-8 encoded text. 
(Use &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-validate&quot; title=&quot;g_utf8_validate ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_validate()&lt;/code&gt;&lt;/a&gt; on all text before trying to use UTF-8 
utility functions with it.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_strreverse (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_validate</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-validate</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Validates UTF-8 encoded text. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; is the text to validate;
if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt; is nul-terminated, then &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;max_len&lt;/code&gt;&lt;/em&gt; can be -1, otherwise
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;max_len&lt;/code&gt;&lt;/em&gt; should be the number of bytes to validate.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt; is non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, then the end of the valid range
will be stored there (i.e. the start of the first invalid 
character if some bytes were invalid, or the end of the text 
being validated otherwise).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_utf8_validate (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    gssize max_len,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_strup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-strup</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts all Unicode characters in the string that have a case
to uppercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string increasing. (For instance, the
German ess-zet will be changed to SS.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_strup (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_strdown</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-strdown</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts all Unicode characters in the string that have a case
to lowercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string changing.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_strdown (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_casefold</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-casefold</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts a string into a form that is independent of case. The
result will not correspond to any particular case, but can be
compared for equality or ordered with the results of calling
&lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-casefold&quot; title=&quot;g_utf8_casefold ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_casefold()&lt;/code&gt;&lt;/a&gt; on other strings.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_casefold (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_normalize</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-normalize</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts a string into canonical form, standardizing
such issues as whether a character with an accent
is represented as a base character and combining
accent or as a single precomposed character. The
string has to be valid UTF-8, otherwise &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is
returned. You should generally call &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-normalize&quot; title=&quot;g_utf8_normalize ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_normalize()&lt;/code&gt;&lt;/a&gt;
before comparing two Unicode strings.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_normalize (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    gssize len,
    &lt;a class=&quot;glib-Unicode-Manipulation.html#GNormalizeMode&quot; href=&quot;enum GNormalizeMode&quot; title=&gt;GNormalizeMode&lt;/a&gt; mode);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_NORMALIZE_DEFAULT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GNormalizeMode</Anchor>
  <NodeRef refid="725"/>
  <Declaration type="html">&lt;pre&gt;G_NORMALIZE_DEFAULT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GNormalizeMode</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_NORMALIZE_NFD</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GNormalizeMode</Anchor>
  <NodeRef refid="725"/>
  <Declaration type="html">&lt;pre&gt;G_NORMALIZE_NFD&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GNormalizeMode</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_NORMALIZE_DEFAULT_COMPOSE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GNormalizeMode</Anchor>
  <NodeRef refid="725"/>
  <Declaration type="html">&lt;pre&gt;G_NORMALIZE_DEFAULT_COMPOSE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GNormalizeMode</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_NORMALIZE_NFC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GNormalizeMode</Anchor>
  <NodeRef refid="725"/>
  <Declaration type="html">&lt;pre&gt;G_NORMALIZE_NFC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GNormalizeMode</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_NORMALIZE_ALL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GNormalizeMode</Anchor>
  <NodeRef refid="725"/>
  <Declaration type="html">&lt;pre&gt;G_NORMALIZE_ALL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GNormalizeMode</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_NORMALIZE_NFKD</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GNormalizeMode</Anchor>
  <NodeRef refid="725"/>
  <Declaration type="html">&lt;pre&gt;G_NORMALIZE_NFKD&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GNormalizeMode</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_NORMALIZE_ALL_COMPOSE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GNormalizeMode</Anchor>
  <NodeRef refid="725"/>
  <Declaration type="html">&lt;pre&gt;G_NORMALIZE_ALL_COMPOSE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GNormalizeMode</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_NORMALIZE_NFKC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GNormalizeMode</Anchor>
  <NodeRef refid="725"/>
  <Declaration type="html">&lt;pre&gt;G_NORMALIZE_NFKC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GNormalizeMode</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GNormalizeMode</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>GNormalizeMode</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Defines how a Unicode string is transformed in a canonical 
form, standardizing such issues as whether a character with an accent is 
represented as a base character and combining accent or as a single precomposed
character. Unicode strings should generally be normalized before comparing them.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_NORMALIZE_DEFAULT,
    G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT,
    G_NORMALIZE_DEFAULT_COMPOSE,
    G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE,
    G_NORMALIZE_ALL,
    G_NORMALIZE_NFKD = G_NORMALIZE_ALL,
    G_NORMALIZE_ALL_COMPOSE,
    G_NORMALIZE_NFKC = G_NORMALIZE_ALL_COMPOSE 
} GNormalizeMode;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_collate</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-collate</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Compares two strings for ordering using the linguistically
correct rules for the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#setlocale&quot; title=&quot;Locale&quot;&gt;current locale&lt;/a&gt;. 
When sorting a large number of strings, it will be significantly 
faster to obtain collation keys with &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-collate-key&quot; title=&quot;g_utf8_collate_key ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_collate_key()&lt;/code&gt;&lt;/a&gt; and 
compare the keys with &lt;code class=&quot;function&quot;&gt;strcmp()&lt;/code&gt; when sorting instead of sorting 
the original strings.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_utf8_collate (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str1,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_collate_key</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-collate-key</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts a string into a collation key that can be compared
with other collation keys produced by the same function using 
&lt;code class=&quot;function&quot;&gt;strcmp()&lt;/code&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_collate_key (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_collate_key_for_filename</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-collate-key-for-filename</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts a string into a collation key that can be compared
with other collation keys produced by the same function using &lt;code class=&quot;function&quot;&gt;strcmp()&lt;/code&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf8_collate_key_for_filename (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_to_utf16</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-to-utf16</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Convert a string from UTF-8 to UTF-16. A 0 character will be
added to the result after the converted text.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar2&quot; href=&quot;gunichar2&quot; title=&quot;link&quot;&gt;gunichar2&lt;/a&gt;* g_utf8_to_utf16 (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; len,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_read,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_to_ucs4</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-to-ucs4</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Convert a string from UTF-8 to a 32-bit fixed width
representation as UCS-4. A trailing 0 will be added to the
string after the converted text.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt;* g_utf8_to_ucs4 (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; len,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_read,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf8_to_ucs4_fast</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf8-to-ucs4-fast</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Convert a string from UTF-8 to a 32-bit fixed width
representation as UCS-4, assuming valid UTF-8 input.
This function is roughly twice as fast as &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-to-ucs4&quot; title=&quot;g_utf8_to_ucs4 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_to_ucs4()&lt;/code&gt;&lt;/a&gt;
but does no error checking on the input.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt;* g_utf8_to_ucs4_fast (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; len,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&gt;glong&lt;/a&gt; *items_written);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf16_to_ucs4</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf16-to-ucs4</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Convert a string from UTF-16 to UCS-4. The result will be
nul-terminated.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt;* g_utf16_to_ucs4 (
    const &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar2&quot; href=&quot;gunichar2&quot; title=&quot;link&quot;&gt;gunichar2&lt;/a&gt; *str,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; len,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_read,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utf16_to_utf8</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-utf16-to-utf8</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Convert a string from UTF-16 to UTF-8. The result will be
terminated with a 0 byte.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_utf16_to_utf8 (
    const &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar2&quot; href=&quot;gunichar2&quot; title=&quot;link&quot;&gt;gunichar2&lt;/a&gt; *str,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; len,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_read,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ucs4_to_utf16</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-ucs4-to-utf16</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Convert a string from UCS-4 to UTF-16. A 0 character will be
added to the result after the converted text.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar2&quot; href=&quot;gunichar2&quot; title=&quot;link&quot;&gt;gunichar2&lt;/a&gt;* g_ucs4_to_utf16 (
    const &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; *str,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; len,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_read,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ucs4_to_utf8</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-ucs4-to-utf8</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Convert a string from a 32-bit fixed width representation as UCS-4.
to UTF-8. The result will be terminated with a 0 byte.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_ucs4_to_utf8 (
    const &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; *str,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; len,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_read,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&quot;link&quot;&gt;glong&lt;/a&gt; *items_written,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unichar_to_utf8</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Unicode-Manipulation.html</Path>
  <Anchor>g-unichar-to-utf8</Anchor>
  <NodeRef refid="33"/>
  <Abstract type="html">Converts a single character to UTF-8.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_unichar_to_utf8 (
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&quot;link&quot;&gt;gunichar&lt;/a&gt; c,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *outbuf);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_base64_encode_step</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Base64-Encoding.html</Path>
  <Anchor>g-base64-encode-step</Anchor>
  <NodeRef refid="34"/>
  <Abstract type="html">Incrementally encode a sequence of binary data into it's Base-64 stringified
representation. By calling this function multiple times you can convert 
data in chunks to avoid having to have the full encoded data in memory.</Abstract>
  <Declaration type="html">&lt;pre&gt;gsize g_base64_encode_step (
    const &lt;a class=&quot;glib-Basic-Types.html#guchar&quot; href=&quot;guchar&quot; title=&quot;link&quot;&gt;guchar&lt;/a&gt; *in,
    gsize len,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; break_lines,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *out,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *state,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; *save);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_base64_encode_close</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Base64-Encoding.html</Path>
  <Anchor>g-base64-encode-close</Anchor>
  <NodeRef refid="34"/>
  <Abstract type="html">Flush the status from a sequence of calls to &lt;a class=&quot;link&quot; href=&quot;glib-Base64-Encoding.html#g-base64-encode-step&quot; title=&quot;g_base64_encode_step ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_base64_encode_step()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;gsize g_base64_encode_close (
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; break_lines,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *out,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *state,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; *save);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_base64_encode</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Base64-Encoding.html</Path>
  <Anchor>g-base64-encode</Anchor>
  <NodeRef refid="34"/>
  <Abstract type="html">Encode a sequence of binary data into its Base-64 stringified
representation.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_base64_encode (
    const &lt;a class=&quot;glib-Basic-Types.html#guchar&quot; href=&quot;guchar&quot; title=&gt;guchar&lt;/a&gt; *data,
    gsize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_base64_decode_step</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Base64-Encoding.html</Path>
  <Anchor>g-base64-decode-step</Anchor>
  <NodeRef refid="34"/>
  <Abstract type="html">Incrementally decode a sequence of binary data from its Base-64 stringified
representation. By calling this function multiple times you can convert 
data in chunks to avoid having to have the full encoded data in memory.</Abstract>
  <Declaration type="html">&lt;pre&gt;gsize g_base64_decode_step (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *in,
    gsize len,
    &lt;a class=&quot;glib-Basic-Types.html#guchar&quot; href=&quot;guchar&quot; title=&quot;link&quot;&gt;guchar&lt;/a&gt; *out,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *state,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; *save);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_base64_decode</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Base64-Encoding.html</Path>
  <Anchor>g-base64-decode</Anchor>
  <NodeRef refid="34"/>
  <Abstract type="html">Decode a sequence of Base-64 encoded text into binary data</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guchar&quot; href=&quot;guchar&quot; title=&quot;link&quot;&gt;guchar&lt;/a&gt;* g_base64_decode (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *text,
    gsize *out_len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CHECKSUM_MD5</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>GChecksumType</Anchor>
  <NodeRef refid="742"/>
  <Declaration type="html">&lt;pre&gt;G_CHECKSUM_MD5&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GChecksumType">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GChecksumType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CHECKSUM_SHA1</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>GChecksumType</Anchor>
  <NodeRef refid="742"/>
  <Declaration type="html">&lt;pre&gt;G_CHECKSUM_SHA1&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GChecksumType">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GChecksumType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CHECKSUM_SHA256</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>GChecksumType</Anchor>
  <NodeRef refid="742"/>
  <Declaration type="html">&lt;pre&gt;G_CHECKSUM_SHA256&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GChecksumType">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GChecksumType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GChecksumType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>GChecksumType</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">The hashing algorithm to be used by &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#GChecksum&quot; title=&quot;GChecksum&quot;&gt;&lt;span class=&quot;type&quot;&gt;GChecksum&lt;/span&gt;&lt;/a&gt; when performing the
digest of some data.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_CHECKSUM_MD5,
    G_CHECKSUM_SHA1,
    G_CHECKSUM_SHA256 
} GChecksumType;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_checksum_type_get_length</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>g-checksum-type-get-length</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">Gets the length in bytes of digests of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;checksum_type&lt;/code&gt;&lt;/em&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;gssize g_checksum_type_get_length (
    &lt;a class=&quot;glib-Data-Checksums.html#GChecksumType&quot; href=&quot;enum GChecksumType&quot; title=&gt;GChecksumType&lt;/a&gt; checksum_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GChecksum</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>GChecksum</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">An opaque structure representing a checksumming operation.
To create a new GChecksum, use &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#g-checksum-new&quot; title=&quot;g_checksum_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_checksum_new()&lt;/code&gt;&lt;/a&gt;. To free
a GChecksum, use &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#g-checksum-free&quot; title=&quot;g_checksum_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_checksum_free()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GChecksum GChecksum;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_checksum_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>g-checksum-new</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#GChecksum&quot; title=&quot;GChecksum&quot;&gt;&lt;span class=&quot;type&quot;&gt;GChecksum&lt;/span&gt;&lt;/a&gt;, using the checksum algorithm &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;checksum_type&lt;/code&gt;&lt;/em&gt;. 
If the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;checksum_type&lt;/code&gt;&lt;/em&gt; is not known, &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is returned.
A &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#GChecksum&quot; title=&quot;GChecksum&quot;&gt;&lt;span class=&quot;type&quot;&gt;GChecksum&lt;/span&gt;&lt;/a&gt; can be used to compute the checksum, or digest, of an
arbitrary binary blob, using different hashing algorithms.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Data-Checksums.html#GChecksum&quot; href=&quot;GChecksum&quot; title=&quot;link&quot;&gt;GChecksum&lt;/a&gt;* g_checksum_new (
    &lt;a class=&quot;glib-Data-Checksums.html#GChecksumType&quot; href=&quot;enum GChecksumType&quot; title=&gt;GChecksumType&lt;/a&gt; checksum_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_checksum_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>g-checksum-copy</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">Copies a &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#GChecksum&quot; title=&quot;GChecksum&quot;&gt;&lt;span class=&quot;type&quot;&gt;GChecksum&lt;/span&gt;&lt;/a&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;checksum&lt;/code&gt;&lt;/em&gt; has been closed, by calling
&lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#g-checksum-get-string&quot; title=&quot;g_checksum_get_string ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_checksum_get_string()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#g-checksum-get-digest&quot; title=&quot;g_checksum_get_digest ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_checksum_get_digest()&lt;/code&gt;&lt;/a&gt;, the copied
checksum will be closed as well.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Data-Checksums.html#GChecksum&quot; href=&quot;GChecksum&quot; title=&quot;link&quot;&gt;GChecksum&lt;/a&gt;* g_checksum_copy (
    const &lt;a class=&quot;glib-Data-Checksums.html#GChecksum&quot; href=&quot;GChecksum&quot; title=&gt;GChecksum&lt;/a&gt; *checksum);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_checksum_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>g-checksum-free</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">Frees the memory allocated for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;checksum&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_checksum_free (
    &lt;a class=&quot;glib-Data-Checksums.html#GChecksum&quot; href=&quot;GChecksum&quot; title=&gt;GChecksum&lt;/a&gt; *checksum);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_checksum_reset</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>g-checksum-reset</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">Resets the state of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;checksum&lt;/code&gt;&lt;/em&gt; back to it's initial state.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_checksum_reset (
    &lt;a class=&quot;glib-Data-Checksums.html#GChecksum&quot; href=&quot;GChecksum&quot; title=&gt;GChecksum&lt;/a&gt; *checksum);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_checksum_update</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>g-checksum-update</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">Feeds &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; into an existing &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#GChecksum&quot; title=&quot;GChecksum&quot;&gt;&lt;span class=&quot;type&quot;&gt;GChecksum&lt;/span&gt;&lt;/a&gt;. The checksum must still be
open, that is &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#g-checksum-get-string&quot; title=&quot;g_checksum_get_string ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_checksum_get_string()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#g-checksum-get-digest&quot; title=&quot;g_checksum_get_digest ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_checksum_get_digest()&lt;/code&gt;&lt;/a&gt; must
not have been called on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;checksum&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_checksum_update (
    &lt;a class=&quot;glib-Data-Checksums.html#GChecksum&quot; href=&quot;GChecksum&quot; title=&quot;link&quot;&gt;GChecksum&lt;/a&gt; *checksum,
    const &lt;a class=&quot;glib-Basic-Types.html#guchar&quot; href=&quot;guchar&quot; title=&gt;guchar&lt;/a&gt; *data,
    gssize length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_checksum_get_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>g-checksum-get-string</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">Gets the digest as an hexadecimal string.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_checksum_get_string (
    &lt;a class=&quot;glib-Data-Checksums.html#GChecksum&quot; href=&quot;GChecksum&quot; title=&gt;GChecksum&lt;/a&gt; *checksum);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_checksum_get_digest</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>g-checksum-get-digest</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">Gets the digest from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;checksum&lt;/code&gt;&lt;/em&gt; as a raw binary vector and places it
into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/em&gt;. The size of the digest depends on the type of checksum.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_checksum_get_digest (
    &lt;a class=&quot;glib-Data-Checksums.html#GChecksum&quot; href=&quot;GChecksum&quot; title=&gt;GChecksum&lt;/a&gt; *checksum,
    guint8 *buffer,
    gsize *digest_len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_compute_checksum_for_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>g-compute-checksum-for-data</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">Computes the checksum for a binary &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/em&gt;. This is a
convenience wrapper for &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#g-checksum-new&quot; title=&quot;g_checksum_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_checksum_new()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#g-checksum-get-string&quot; title=&quot;g_checksum_get_string ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_checksum_get_string()&lt;/code&gt;&lt;/a&gt;
and &lt;a class=&quot;link&quot; href=&quot;glib-Data-Checksums.html#g-checksum-free&quot; title=&quot;g_checksum_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_checksum_free()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_compute_checksum_for_data (
    &lt;a class=&quot;glib-Data-Checksums.html#GChecksumType&quot; href=&quot;enum GChecksumType&quot; title=&quot;link&quot;&gt;GChecksumType&lt;/a&gt; checksum_type,
    const &lt;a class=&quot;glib-Basic-Types.html#guchar&quot; href=&quot;guchar&quot; title=&gt;guchar&lt;/a&gt; *data,
    gsize length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_compute_checksum_for_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Data-Checksums.html</Path>
  <Anchor>g-compute-checksum-for-string</Anchor>
  <NodeRef refid="35"/>
  <Abstract type="html">Computes the checksum of a string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_compute_checksum_for_string (
    &lt;a class=&quot;glib-Data-Checksums.html#GChecksumType&quot; href=&quot;enum GChecksumType&quot; title=&quot;link&quot;&gt;GChecksumType&lt;/a&gt; checksum_type,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str,
    gssize length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>Q_</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-I18N.html</Path>
  <Anchor>Q-:CAPS</Anchor>
  <NodeRef refid="36"/>
  <Abstract type="html">Like &lt;a
href=&quot;/usr/share/gtk-doc/html/camel/camel-camel-i18n.html#gettext-macro&quot;
&gt;&lt;code class=&quot;function&quot;&gt;_()&lt;/code&gt;&lt;/a&gt;, but handles context in message ids. This has the advantage that 
the string can be adorned with a prefix to guarantee uniqueness and provide 
context to the translator. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define Q_(String)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gi18n-lib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>C_</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-I18N.html</Path>
  <Anchor>C-:CAPS</Anchor>
  <NodeRef refid="36"/>
  <Abstract type="html">Uses gettext to get the translation for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;msgid&lt;/code&gt;&lt;/em&gt;. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;msgctxt&lt;/code&gt;&lt;/em&gt; is 
used as a context. This is mainly useful for short strings which 
may need different translations, depending on the context in which 
they are used.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define C_(Context,String)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gi18n-lib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>N_</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-I18N.html</Path>
  <Anchor>N-:CAPS</Anchor>
  <NodeRef refid="36"/>
  <Abstract type="html">Only marks a string for translation.
This is useful in situations where the translated strings can't
be directly used, e.g. in string array initializers. 
To get the translated string, call &lt;a
href=&quot;/usr/share/gtk-doc/html/camel/camel-camel-i18n.html#gettext&quot;
&gt;&lt;code class=&quot;function&quot;&gt;gettext()&lt;/code&gt;&lt;/a&gt; at runtime.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define N_(String)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gi18n-lib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>NC_</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-I18N.html</Path>
  <Anchor>NC-:CAPS</Anchor>
  <NodeRef refid="36"/>
  <Abstract type="html">Only marks a string for translation, with context.
This is useful in situations where the translated strings can't
be directly used, e.g. in string array initializers. 
To get the translated string, you should call &lt;a class=&quot;link&quot; href=&quot;glib-I18N.html#g-dpgettext2&quot; title=&quot;g_dpgettext2 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_dpgettext2()&lt;/code&gt;&lt;/a&gt; at runtime.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define NC_(Context, String)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gi18n-lib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dgettext</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-I18N.html</Path>
  <Anchor>g-dgettext</Anchor>
  <NodeRef refid="36"/>
  <Abstract type="html">This function is a wrapper of &lt;a
href=&quot;/usr/share/gtk-doc/html/camel/camel-camel-i18n.html#dgettext&quot;
&gt;&lt;code class=&quot;function&quot;&gt;dgettext()&lt;/code&gt;&lt;/a&gt; which does not translate
the message if the default domain as set with &lt;a
href=&quot;/usr/share/gtk-doc/html/camel/camel-camel-i18n.html#textdomain&quot;
&gt;&lt;code class=&quot;function&quot;&gt;textdomain()&lt;/code&gt;&lt;/a&gt; has no
translations for the current locale.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_dgettext (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *domain,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *msgid);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gi18n-lib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dngettext</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-I18N.html</Path>
  <Anchor>g-dngettext</Anchor>
  <NodeRef refid="36"/>
  <Abstract type="html">This function is a wrapper of &lt;code class=&quot;function&quot;&gt;dngettext()&lt;/code&gt; which does not translate
the message if the default domain as set with &lt;a
href=&quot;/usr/share/gtk-doc/html/camel/camel-camel-i18n.html#textdomain&quot;
&gt;&lt;code class=&quot;function&quot;&gt;textdomain()&lt;/code&gt;&lt;/a&gt; has no
translations for the current locale.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_dngettext (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *domain,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *msgid,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *msgid_plural,
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&gt;gulong&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gi18n-lib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dpgettext</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-I18N.html</Path>
  <Anchor>g-dpgettext</Anchor>
  <NodeRef refid="36"/>
  <Abstract type="html">This function is a variant of &lt;a class=&quot;link&quot; href=&quot;glib-I18N.html#g-dgettext&quot; title=&quot;g_dgettext ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_dgettext()&lt;/code&gt;&lt;/a&gt; which supports
a disambiguating message context. GNU gettext uses the
'\004' character to separate the message context and
message id in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;msgctxtid&lt;/code&gt;&lt;/em&gt;.
If 0 is passed as &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;msgidoffset&lt;/code&gt;&lt;/em&gt;, this function will fall back to
trying to use the deprecated convention of using &quot;|&quot; as a separation
character.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_dpgettext (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *domain,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *msgctxtid,
    gsize msgidoffset);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gi18n-lib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dpgettext2</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-I18N.html</Path>
  <Anchor>g-dpgettext2</Anchor>
  <NodeRef refid="36"/>
  <Abstract type="html">This function is a variant of &lt;a class=&quot;link&quot; href=&quot;glib-I18N.html#g-dgettext&quot; title=&quot;g_dgettext ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_dgettext()&lt;/code&gt;&lt;/a&gt; which supports
a disambiguating message context. GNU gettext uses the
'\004' character to separate the message context and
message id in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;msgctxtid&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_dpgettext2 (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *domain,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *context,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *msgid);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gi18n-lib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strip_context</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-I18N.html</Path>
  <Anchor>g-strip-context</Anchor>
  <NodeRef refid="36"/>
  <Abstract type="html">An auxiliary function for &lt;a
href=&quot;/usr/share/gtk-doc/html/camel/camel-camel-i18n.html#gettext&quot;
&gt;&lt;code class=&quot;function&quot;&gt;gettext()&lt;/code&gt;&lt;/a&gt; support (see &lt;a class=&quot;link&quot; href=&quot;glib-I18N.html#Q-:CAPS&quot; title=&quot;Q_()&quot;&gt;&lt;code class=&quot;function&quot;&gt;Q_()&lt;/code&gt;&lt;/a&gt;).</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_strip_context (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *msgid,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *msgval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gi18n-lib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_language_names</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-I18N.html</Path>
  <Anchor>g-get-language-names</Anchor>
  <NodeRef refid="36"/>
  <Abstract type="html">Computes a list of applicable locale names, which can be used to 
e.g. construct locale-dependent filenames or search paths. The returned 
list is sorted from most desirable to least desirable and always contains 
the default locale &quot;C&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* const * g_get_language_names (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gi18n-lib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_USEC_PER_SEC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>G-USEC-PER-SEC:CAPS</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Number of microseconds in one second (1 million). This macro is provided for
code readability.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_USEC_PER_SEC 1000000&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTimeVal</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GTimeVal</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Represents a precise time, with seconds and microseconds. 
Similar to the &lt;span class=&quot;structname&quot;&gt;struct timeval&lt;/span&gt; returned by 
the &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;gettimeofday()&lt;/code&gt;&lt;/code&gt; UNIX call.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    glong tv_sec;
    glong tv_usec;
} GTimeVal;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_current_time</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-get-current-time</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Equivalent to the UNIX &lt;code class=&quot;function&quot;&gt;gettimeofday()&lt;/code&gt; function, but portable.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_get_current_time (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; href=&quot;GTimeVal&quot; title=&gt;GTimeVal&lt;/a&gt; *result);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_usleep</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-usleep</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Pauses the current thread for the given number of microseconds. There
are 1 million microseconds per second (represented by the
&lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#G-USEC-PER-SEC:CAPS&quot; title=&quot;G_USEC_PER_SEC&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_USEC_PER_SEC&lt;/span&gt;&lt;/a&gt; macro). &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-usleep&quot; title=&quot;g_usleep ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_usleep()&lt;/code&gt;&lt;/a&gt; may have limited precision,
depending on hardware and operating system; don't rely on the exact
length of the sleep.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_usleep (
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&gt;gulong&lt;/a&gt; microseconds);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_time_val_add</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-time-val-add</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Adds the given number of microseconds to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;time_&lt;/code&gt;&lt;/em&gt;. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;microseconds&lt;/code&gt;&lt;/em&gt; can
also be negative to decrease the value of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;time_&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_time_val_add (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; href=&quot;GTimeVal&quot; title=&quot;link&quot;&gt;GTimeVal&lt;/a&gt; *time_,
    &lt;a class=&quot;glib-Basic-Types.html#glong&quot; href=&quot;glong&quot; title=&gt;glong&lt;/a&gt; microseconds);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_time_val_from_iso8601</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-time-val-from-iso8601</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Converts a string containing an ISO 8601 encoded date and time
to a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; title=&quot;GTimeVal&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTimeVal&lt;/span&gt;&lt;/a&gt; and puts it into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;time_&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_time_val_from_iso8601 (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *iso_date,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; href=&quot;GTimeVal&quot; title=&gt;GTimeVal&lt;/a&gt; *time_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_time_val_to_iso8601</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-time-val-to-iso8601</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Converts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;time_&lt;/code&gt;&lt;/em&gt; into an ISO 8601 encoded string, relative to the
Coordinated Universal Time (UTC).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_time_val_to_iso8601 (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; href=&quot;GTimeVal&quot; title=&gt;GTimeVal&lt;/a&gt; *time_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDate</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDate</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Represents a day between January 1, Year 1 and a few thousand years in
the future. None of its members should be accessed directly. If the
&lt;span class=&quot;structname&quot;&gt;GDate&lt;/span&gt; is obtained from &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-new&quot; title=&quot;g_date_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_new()&lt;/code&gt;&lt;/a&gt;, it will
be safe to mutate but invalid and thus not safe for calendrical computations.
If it's declared on the stack, it will contain garbage so must be
initialized with &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-clear&quot; title=&quot;g_date_clear ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_clear()&lt;/code&gt;&lt;/a&gt;. &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-clear&quot; title=&quot;g_date_clear ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_clear()&lt;/code&gt;&lt;/a&gt; makes the date invalid
but sane. An invalid date doesn't represent a day, it's &quot;empty.&quot; A
date becomes valid after you set it to a Julian day or you set a day,
month, and year.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    guint julian_days : 32;
    guint julian : 1;
    guint dmy : 1;
    guint day : 6;
    guint month : 4;
    guint year : 16;
} GDate;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTime</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GTime</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Simply a replacement for &lt;span class=&quot;type&quot;&gt;time_t&lt;/span&gt;. It has been deprected
since it is &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; equivalent to &lt;span class=&quot;type&quot;&gt;time_t&lt;/span&gt; 
on 64-bit platforms with a 64-bit &lt;span class=&quot;type&quot;&gt;time_t&lt;/span&gt;. 
Unrelated to &lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#GTimer&quot; title=&quot;GTimer&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTimer&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef gint32 GTime;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_DAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateDMY</Anchor>
  <NodeRef refid="773"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_DAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateDMY</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_MONTH</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateDMY</Anchor>
  <NodeRef refid="773"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_MONTH&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateDMY</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_YEAR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateDMY</Anchor>
  <NodeRef refid="773"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_YEAR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateDMY</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDateDMY</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateDMY</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">This enumeration isn't used in the API, but may be useful if you need
to mark a number as a day, month, or year.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_DATE_DAY = 0,
    G_DATE_MONTH = 1,
    G_DATE_YEAR = 2 
} GDateDMY;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDateDay</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateDay</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Integer representing a day of the month; between 1 and
31. &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#G-DATE-BAD-DAY:CAPS&quot; title=&quot;G_DATE_BAD_DAY&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_DATE_BAD_DAY&lt;/span&gt;&lt;/a&gt; represents an invalid day of the month.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef guint8 GDateDay;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_BAD_MONTH</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_BAD_MONTH&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_JANUARY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_JANUARY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_FEBRUARY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_FEBRUARY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_MARCH</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_MARCH&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_APRIL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_APRIL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_MAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_MAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_JUNE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_JUNE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_JULY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_JULY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_AUGUST</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_AUGUST&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_SEPTEMBER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_SEPTEMBER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_OCTOBER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_OCTOBER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_NOVEMBER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_NOVEMBER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_DECEMBER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="775"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_DECEMBER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateMonth</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDateMonth</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateMonth</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Enumeration representing a month; values are &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#G-DATE-JANUARY:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_DATE_JANUARY&lt;/span&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#G-DATE-FEBRUARY:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_DATE_FEBRUARY&lt;/span&gt;&lt;/a&gt;, etc. &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#G-DATE-BAD-MONTH:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_DATE_BAD_MONTH&lt;/span&gt;&lt;/a&gt; is the invalid value.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_DATE_BAD_MONTH = 0,
    G_DATE_JANUARY = 1,
    G_DATE_FEBRUARY = 2,
    G_DATE_MARCH = 3,
    G_DATE_APRIL = 4,
    G_DATE_MAY = 5,
    G_DATE_JUNE = 6,
    G_DATE_JULY = 7,
    G_DATE_AUGUST = 8,
    G_DATE_SEPTEMBER = 9,
    G_DATE_OCTOBER = 10,
    G_DATE_NOVEMBER = 11,
    G_DATE_DECEMBER = 12 
} GDateMonth;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDateYear</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateYear</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Integer representing a year; &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#G-DATE-BAD-YEAR:CAPS&quot; title=&quot;G_DATE_BAD_YEAR&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_DATE_BAD_YEAR&lt;/span&gt;&lt;/a&gt; is the invalid
value. The year must be 1 or higher; negative (BC) years are not
allowed. The year is represented with four digits.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef guint16 GDateYear;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_BAD_WEEKDAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateWeekday</Anchor>
  <NodeRef refid="777"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_BAD_WEEKDAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateWeekday</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_MONDAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateWeekday</Anchor>
  <NodeRef refid="777"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_MONDAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateWeekday</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_TUESDAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateWeekday</Anchor>
  <NodeRef refid="777"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_TUESDAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateWeekday</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_WEDNESDAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateWeekday</Anchor>
  <NodeRef refid="777"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_WEDNESDAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateWeekday</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_THURSDAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateWeekday</Anchor>
  <NodeRef refid="777"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_THURSDAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateWeekday</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_FRIDAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateWeekday</Anchor>
  <NodeRef refid="777"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_FRIDAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateWeekday</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_SATURDAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateWeekday</Anchor>
  <NodeRef refid="777"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_SATURDAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateWeekday</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_SUNDAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateWeekday</Anchor>
  <NodeRef refid="777"/>
  <Declaration type="html">&lt;pre&gt;G_DATE_SUNDAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GDateWeekday</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDateWeekday</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>GDateWeekday</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Enumeration representing a day of the week; &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#G-DATE-MONDAY:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_DATE_MONDAY&lt;/span&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#G-DATE-TUESDAY:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_DATE_TUESDAY&lt;/span&gt;&lt;/a&gt;, etc. &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#G-DATE-BAD-WEEKDAY:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_DATE_BAD_WEEKDAY&lt;/span&gt;&lt;/a&gt; is an invalid weekday.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_DATE_BAD_WEEKDAY = 0,
    G_DATE_MONDAY = 1,
    G_DATE_TUESDAY = 2,
    G_DATE_WEDNESDAY = 3,
    G_DATE_THURSDAY = 4,
    G_DATE_FRIDAY = 5,
    G_DATE_SATURDAY = 6,
    G_DATE_SUNDAY = 7 
} GDateWeekday;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_BAD_DAY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>G-DATE-BAD-DAY:CAPS</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Represents an invalid &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDateDay&quot; title=&quot;GDateDay&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDateDay&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DATE_BAD_DAY 0U&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_BAD_JULIAN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>G-DATE-BAD-JULIAN:CAPS</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Represents an invalid Julian day number.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DATE_BAD_JULIAN 0U&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATE_BAD_YEAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>G-DATE-BAD-YEAR:CAPS</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Represents an invalid year.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DATE_BAD_YEAR 0U&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-new</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Allocates a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt; and initializes it to a sane state. The new date will
be cleared (as if you'd called &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-clear&quot; title=&quot;g_date_clear ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_clear()&lt;/code&gt;&lt;/a&gt;) but invalid (it won't
represent an existing day). Free the return value with &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-free&quot; title=&quot;g_date_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_free()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt;* g_date_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_new_dmy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-new-dmy</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-new&quot; title=&quot;g_date_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_new()&lt;/code&gt;&lt;/a&gt;, but also sets the value of the date. Assuming the
day-month-year triplet you pass in represents an existing day, the
returned date will be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt;* g_date_new_dmy (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateDay&quot; href=&quot;GDateDay&quot; title=&quot;link&quot;&gt;GDateDay&lt;/a&gt; day,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateMonth&quot; href=&quot;enum GDateMonth&quot; title=&quot;link&quot;&gt;GDateMonth&lt;/a&gt; month,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateYear&quot; href=&quot;GDateYear&quot; title=&gt;GDateYear&lt;/a&gt; year);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_new_julian</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-new-julian</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-new&quot; title=&quot;g_date_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_new()&lt;/code&gt;&lt;/a&gt;, but also sets the value of the date. Assuming the
Julian day number you pass in is valid (greater than 0, less than an
unreasonably large number), the returned date will be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt;* g_date_new_julian (
    guint32 julian_day);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_clear</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-clear</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Initializes one or more &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt; structs to a sane but invalid
state. The cleared dates will not represent an existing date, but will
not contain garbage. Useful to init a date declared on the stack.
Validity can be tested with &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-valid&quot; title=&quot;g_date_valid ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_valid()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_clear (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n_dates);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-free</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Frees a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt; returned from &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-new&quot; title=&quot;g_date_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_new()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_free (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_set_day</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-set-day</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Sets the day of the month for a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt;. If the resulting day-month-year
triplet is invalid, the date will be invalid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_set_day (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateDay&quot; href=&quot;GDateDay&quot; title=&gt;GDateDay&lt;/a&gt; day);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_set_month</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-set-month</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Sets the month of the year for a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt;.  If the resulting
day-month-year triplet is invalid, the date will be invalid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_set_month (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateMonth&quot; href=&quot;enum GDateMonth&quot; title=&gt;GDateMonth&lt;/a&gt; month);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_set_year</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-set-year</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Sets the year for a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt;. If the resulting day-month-year triplet is
invalid, the date will be invalid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_set_year (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateYear&quot; href=&quot;GDateYear&quot; title=&gt;GDateYear&lt;/a&gt; year);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_set_dmy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-set-dmy</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Sets the value of a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt; from a day, month, and year. The day-month-year 
triplet must be valid; if you aren't sure it is, call &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-valid-dmy&quot; title=&quot;g_date_valid_dmy ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_valid_dmy()&lt;/code&gt;&lt;/a&gt; to
check before you set it.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_set_dmy (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateDay&quot; href=&quot;GDateDay&quot; title=&quot;link&quot;&gt;GDateDay&lt;/a&gt; day,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateMonth&quot; href=&quot;enum GDateMonth&quot; title=&quot;link&quot;&gt;GDateMonth&lt;/a&gt; month,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateYear&quot; href=&quot;GDateYear&quot; title=&gt;GDateYear&lt;/a&gt; y);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_set_julian</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-set-julian</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Sets the value of a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt; from a Julian day number.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_set_julian (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date,
    guint32 julian_date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_set_time</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-set-time</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Sets the value of a date from a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GTime&quot; title=&quot;GTime&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTime&lt;/span&gt;&lt;/a&gt; value.
The time to date conversion is done using the user's current timezone.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_set_time (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GTime&quot; href=&quot;GTime&quot; title=&gt;GTime&lt;/a&gt; time_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_date_set_time&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_set_time_t</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-set-time-t</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Sets the value of a date to the date corresponding to a time 
specified as a time_t. The time to date conversion is done using 
the user's current timezone.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_set_time_t (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date,
    time_t timet);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_set_time_val</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-set-time-val</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Sets the value of a date from a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; title=&quot;GTimeVal&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTimeVal&lt;/span&gt;&lt;/a&gt; value.  Note that the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;tv_usec&lt;/code&gt;&lt;/em&gt; member is ignored, because &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt; can't make use of the
additional precision.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_set_time_val (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GTimeVal&quot; href=&quot;GTimeVal&quot; title=&gt;GTimeVal&lt;/a&gt; *timeval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_set_parse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-set-parse</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Parses a user-inputted string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt;, and try to figure out what date it
represents, taking the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#setlocale&quot; title=&quot;Locale&quot;&gt;current locale&lt;/a&gt; 
into account. If the string is successfully parsed, the date will be 
valid after the call. Otherwise, it will be invalid. You should check 
using &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-valid&quot; title=&quot;g_date_valid ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_valid()&lt;/code&gt;&lt;/a&gt; to see whether the parsing succeeded.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_set_parse (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *str);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_add_days</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-add-days</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Increments a date some number of days. To move forward by weeks, add
weeks*7 days. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_add_days (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n_days);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_subtract_days</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-subtract-days</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Moves a date some number of days into the past. To move by weeks, just
move by weeks*7 days. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_subtract_days (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n_days);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_add_months</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-add-months</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Increments a date by some number of months. If the day of the month is
greater than 28, this routine may change the day of the month (because
the destination month may not have the current day in it). The date
must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_add_months (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n_months);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_subtract_months</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-subtract-months</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Moves a date some number of months into the past. If the current day of
the month doesn't exist in the destination month, the day of the month
may change. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_subtract_months (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n_months);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_add_years</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-add-years</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Increments a date by some number of years. If the date is February 29,
and the destination year is not a leap year, the date will be changed
to February 28. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_add_years (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n_years);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_subtract_years</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-subtract-years</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Moves a date some number of years into the past. If the current day
doesn't exist in the destination year (i.e. it's February 29 and you
move to a non-leap-year) then the day is changed to February 29. The date
must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_subtract_years (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n_years);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_days_between</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-days-between</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Computes the number of days between two dates.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;date2&lt;/code&gt;&lt;/em&gt; is prior to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;date1&lt;/code&gt;&lt;/em&gt;, the returned value is negative.
Both dates must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_date_days_between (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date1,
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_compare</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-compare</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">&lt;code class=&quot;function&quot;&gt;qsort()&lt;/code&gt;-style comparsion function for dates. Both
dates must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_date_compare (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *lhs,
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *rhs);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_clamp</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-clamp</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/em&gt; is prior to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;min_date&lt;/code&gt;&lt;/em&gt;, sets &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/em&gt; equal to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;min_date&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/em&gt; falls after &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;max_date&lt;/code&gt;&lt;/em&gt;, sets &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/em&gt; equal to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;max_date&lt;/code&gt;&lt;/em&gt;.
Otherwise, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/em&gt; is unchanged.
Either of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;min_date&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;max_date&lt;/code&gt;&lt;/em&gt; may be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.  All non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; dates
must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_clamp (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date,
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *min_date,
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *max_date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_order</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-order</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;date1&lt;/code&gt;&lt;/em&gt; is less than or equal to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;date2&lt;/code&gt;&lt;/em&gt;,
and swap the values if this is not the case.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_order (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&quot;link&quot;&gt;GDate&lt;/a&gt; *date1,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_day</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-day</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the day of the month. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateDay&quot; href=&quot;GDateDay&quot; title=&quot;link&quot;&gt;GDateDay&lt;/a&gt; g_date_get_day (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_month</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-month</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the month of the year. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateMonth&quot; href=&quot;enum GDateMonth&quot; title=&quot;link&quot;&gt;GDateMonth&lt;/a&gt; g_date_get_month (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_year</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-year</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the year of a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt;. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateYear&quot; href=&quot;GDateYear&quot; title=&quot;link&quot;&gt;GDateYear&lt;/a&gt; g_date_get_year (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_julian</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-julian</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the Julian day or &quot;serial number&quot; of the &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt;. The
Julian day is simply the number of days since January 1, Year 1; i.e.,
January 1, Year 1 is Julian day 1; January 2, Year 1 is Julian day 2,
etc. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;guint32 g_date_get_julian (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_weekday</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-weekday</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the day of the week for a &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt;. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateWeekday&quot; href=&quot;enum GDateWeekday&quot; title=&quot;link&quot;&gt;GDateWeekday&lt;/a&gt; g_date_get_weekday (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_day_of_year</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-day-of-year</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the day of the year, where Jan 1 is the first day of the
year. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_date_get_day_of_year (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_days_in_month</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-days-in-month</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the number of days in a month, taking leap years into account.</Abstract>
  <Declaration type="html">&lt;pre&gt;guint8 g_date_get_days_in_month (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateMonth&quot; href=&quot;enum GDateMonth&quot; title=&quot;link&quot;&gt;GDateMonth&lt;/a&gt; month,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateYear&quot; href=&quot;GDateYear&quot; title=&gt;GDateYear&lt;/a&gt; year);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_is_first_of_month</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-is-first-of-month</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the date is on the first of a month. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_date_is_first_of_month (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_is_last_of_month</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-is-last-of-month</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the date is the last day of the month. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_date_is_last_of_month (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_is_leap_year</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-is-leap-year</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the year is a leap year.&lt;sup&gt;[&lt;a name=&quot;id3239494&quot; href=&quot;#ftn.id3239494&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;]&lt;/sup&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_date_is_leap_year (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateYear&quot; href=&quot;GDateYear&quot; title=&gt;GDateYear&lt;/a&gt; year);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_monday_week_of_year</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-monday-week-of-year</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the week of the year, where weeks are understood to start on
Monday. If the date is before the first Monday of the year, return
0. The date must be valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_date_get_monday_week_of_year (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_monday_weeks_in_year</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-monday-weeks-in-year</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the number of weeks in the year, where weeks are taken to start
on Monday. Will be 52 or 53. The date must be valid. (Years always have 52
7-day periods, plus 1 or 2 extra days depending on whether it's a leap
year. This function is basically telling you how many Mondays are in
the year, i.e. there are 53 Mondays if one of the extra days happens
to be a Monday.)</Abstract>
  <Declaration type="html">&lt;pre&gt;guint8 g_date_get_monday_weeks_in_year (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateYear&quot; href=&quot;GDateYear&quot; title=&gt;GDateYear&lt;/a&gt; year);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_sunday_week_of_year</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-sunday-week-of-year</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the week of the year during which this date falls, if weeks 
are understood to being on Sunday. The date must be valid. Can return 0 if 
the day is before the first Sunday of the year.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_date_get_sunday_week_of_year (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_sunday_weeks_in_year</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-sunday-weeks-in-year</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the number of weeks in the year, where weeks are taken to start
on Sunday. Will be 52 or 53. The date must be valid. (Years always have 52
7-day periods, plus 1 or 2 extra days depending on whether it's a leap
year. This function is basically telling you how many Sundays are in
the year, i.e. there are 53 Sundays if one of the extra days happens
to be a Sunday.)</Abstract>
  <Declaration type="html">&lt;pre&gt;guint8 g_date_get_sunday_weeks_in_year (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateYear&quot; href=&quot;GDateYear&quot; title=&gt;GDateYear&lt;/a&gt; year);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_get_iso8601_week_of_year</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-get-iso8601-week-of-year</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns the week of the year, where weeks are interpreted according
to ISO 8601.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_date_get_iso8601_week_of_year (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_strftime</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-strftime</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Generates a printed representation of the date, in a 
&lt;a class=&quot;link&quot; href=&quot;glib-running.html#setlocale&quot; title=&quot;Locale&quot;&gt;locale&lt;/a&gt;-specific way. Works just like 
the platform's C library &lt;code class=&quot;function&quot;&gt;strftime()&lt;/code&gt; function, but only accepts date-related 
formats; time-related formats give undefined results. Date must be valid. 
Unlike &lt;code class=&quot;function&quot;&gt;strftime()&lt;/code&gt; (which uses the locale encoding), works on a UTF-8 format 
string and stores a UTF-8 result.</Abstract>
  <Declaration type="html">&lt;pre&gt;gsize g_date_strftime (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *s,
    gsize slen,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *format,
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_to_struct_tm</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-to-struct-tm</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Fills in the date-related bits of a &lt;span class=&quot;structname&quot;&gt;struct tm&lt;/span&gt;
using the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/em&gt; value. Initializes the non-date parts with something
sane but meaningless.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_date_to_struct_tm (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date,
    struct tm *tm);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_valid</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-valid</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt; represents an existing day. The date must not
contain garbage; it should have been initialized with &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-clear&quot; title=&quot;g_date_clear ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_clear()&lt;/code&gt;&lt;/a&gt;
if it wasn't allocated by one of the &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#g-date-new&quot; title=&quot;g_date_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_date_new()&lt;/code&gt;&lt;/a&gt; variants.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_date_valid (
    const &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDate&quot; href=&quot;GDate&quot; title=&gt;GDate&lt;/a&gt; *date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_valid_day</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-valid-day</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the day of the month is valid (a day is valid if it's
between 1 and 31 inclusive).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_date_valid_day (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateDay&quot; href=&quot;GDateDay&quot; title=&gt;GDateDay&lt;/a&gt; day);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_valid_month</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-valid-month</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the month value is valid. The 12 &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDateMonth&quot; title=&quot;enum GDateMonth&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDateMonth&lt;/span&gt;&lt;/a&gt;
enumeration values are the only valid months.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_date_valid_month (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateMonth&quot; href=&quot;enum GDateMonth&quot; title=&gt;GDateMonth&lt;/a&gt; month);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_valid_year</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-valid-year</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the year is valid. Any year greater than 0 is valid,
though there is a 16-bit limit to what &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt; will understand.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_date_valid_year (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateYear&quot; href=&quot;GDateYear&quot; title=&gt;GDateYear&lt;/a&gt; year);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_valid_dmy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-valid-dmy</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the day-month-year triplet forms a valid, existing day
in the range of days &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDate&quot; title=&quot;GDate&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt; understands (Year 1 or later, no more than
a few thousand years in the future).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_date_valid_dmy (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateDay&quot; href=&quot;GDateDay&quot; title=&quot;link&quot;&gt;GDateDay&lt;/a&gt; day,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateMonth&quot; href=&quot;enum GDateMonth&quot; title=&quot;link&quot;&gt;GDateMonth&lt;/a&gt; month,
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateYear&quot; href=&quot;GDateYear&quot; title=&gt;GDateYear&lt;/a&gt; year);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_valid_julian</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-valid-julian</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the Julian day is valid. Anything greater than zero 
is basically a valid Julian, though there is a 32-bit limit.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; g_date_valid_julian (
    guint32 julian_date);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_date_valid_weekday</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Date-and-Time-Functions.html</Path>
  <Anchor>g-date-valid-weekday</Anchor>
  <NodeRef refid="37"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the weekday is valid. The seven &lt;a class=&quot;link&quot; href=&quot;glib-Date-and-Time-Functions.html#GDateWeekday&quot; title=&quot;enum GDateWeekday&quot;&gt;&lt;span class=&quot;type&quot;&gt;GDateWeekday&lt;/span&gt;&lt;/a&gt; enumeration
values are the only valid weekdays.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_date_valid_weekday (
    &lt;a class=&quot;glib-Date-and-Time-Functions.html#GDateWeekday&quot; href=&quot;enum GDateWeekday&quot; title=&gt;GDateWeekday&lt;/a&gt; weekday);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GRand</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>GRand</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Random-Numbers.html#GRand&quot; title=&quot;GRand&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRand&lt;/span&gt;&lt;/a&gt; struct is an opaque data structure. It should only be
accessed through the &lt;code class=&quot;function&quot;&gt;g_rand_*&lt;/code&gt; functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GRand GRand;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_new_with_seed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-new-with-seed</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Creates a new random number generator initialized with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seed&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&gt;GRand&lt;/a&gt;* g_rand_new_with_seed (
    guint32 seed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_new_with_seed_array</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-new-with-seed-array</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Creates a new random number generator initialized with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seed&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&quot;link&quot;&gt;GRand&lt;/a&gt;* g_rand_new_with_seed_array (
    const guint32 *seed,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; seed_length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-new</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Creates a new random number generator initialized with a seed taken
either from &lt;code class=&quot;filename&quot;&gt;/dev/urandom&lt;/code&gt; (if existing) or from 
the current time (as a fallback).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&gt;GRand&lt;/a&gt;* g_rand_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-copy</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Copies a &lt;a class=&quot;link&quot; href=&quot;glib-Random-Numbers.html#GRand&quot; title=&quot;GRand&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRand&lt;/span&gt;&lt;/a&gt; into a new one with the same exact state as before.
This way you can take a snapshot of the random number generator for
replaying later.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&quot;link&quot;&gt;GRand&lt;/a&gt;* g_rand_copy (
    &lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&gt;GRand&lt;/a&gt; *rand_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-free</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Frees the memory allocated for the &lt;a class=&quot;link&quot; href=&quot;glib-Random-Numbers.html#GRand&quot; title=&quot;GRand&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRand&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_rand_free (
    &lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&gt;GRand&lt;/a&gt; *rand_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_set_seed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-set-seed</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Sets the seed for the random number generator &lt;a class=&quot;link&quot; href=&quot;glib-Random-Numbers.html#GRand&quot; title=&quot;GRand&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRand&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seed&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_rand_set_seed (
    &lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&gt;GRand&lt;/a&gt; *rand_,
    guint32 seed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_set_seed_array</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-set-seed-array</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Initializes the random number generator by an array of
longs.  Array can be of arbitrary size, though only the
first 624 values are taken.  This function is useful
if you have many low entropy seeds, or if you require more then
32bits of actual entropy for your application.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_rand_set_seed_array (
    &lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&quot;link&quot;&gt;GRand&lt;/a&gt; *rand_,
    const guint32 *seed,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; seed_length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_boolean</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-boolean</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Returns a random &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gboolean&quot; title=&quot;gboolean&quot;&gt;&lt;span class=&quot;type&quot;&gt;gboolean&lt;/span&gt;&lt;/a&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;rand_&lt;/code&gt;&lt;/em&gt;. This corresponds to a unbiased
coin toss.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_rand_boolean(rand_)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_int</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-int</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Returns the next random &lt;span class=&quot;type&quot;&gt;guint32&lt;/span&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;rand_&lt;/code&gt;&lt;/em&gt; equally distributed over
the range [0..2^32-1].</Abstract>
  <Declaration type="html">&lt;pre&gt;guint32 g_rand_int (
    &lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&gt;GRand&lt;/a&gt; *rand_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_int_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-int-range</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Returns the next random &lt;span class=&quot;type&quot;&gt;gint32&lt;/span&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;rand_&lt;/code&gt;&lt;/em&gt; equally distributed over
the range [&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/em&gt;..&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt;-1].</Abstract>
  <Declaration type="html">&lt;pre&gt;gint32 g_rand_int_range (
    &lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&gt;GRand&lt;/a&gt; *rand_,
    gint32 begin,
    gint32 end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_double</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-double</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Returns the next random &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gdouble&quot; title=&quot;gdouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;gdouble&lt;/span&gt;&lt;/a&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;rand_&lt;/code&gt;&lt;/em&gt; equally distributed over
the range [0..1).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&quot;link&quot;&gt;gdouble&lt;/a&gt; g_rand_double (
    &lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&gt;GRand&lt;/a&gt; *rand_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rand_double_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-rand-double-range</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Returns the next random &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gdouble&quot; title=&quot;gdouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;gdouble&lt;/span&gt;&lt;/a&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;rand_&lt;/code&gt;&lt;/em&gt; equally distributed over
the range [&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/em&gt;..&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt;).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&quot;link&quot;&gt;gdouble&lt;/a&gt; g_rand_double_range (
    &lt;a class=&quot;glib-Random-Numbers.html#GRand&quot; href=&quot;GRand&quot; title=&quot;link&quot;&gt;GRand&lt;/a&gt; *rand_,
    &lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&quot;link&quot;&gt;gdouble&lt;/a&gt; begin,
    &lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&gt;gdouble&lt;/a&gt; end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_random_set_seed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-random-set-seed</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Sets the seed for the global random number generator, which is used
by the &lt;code class=&quot;function&quot;&gt;g_random_*&lt;/code&gt; functions, to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seed&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_random_set_seed (
    guint32 seed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_random_boolean</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-random-boolean</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Returns a random &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gboolean&quot; title=&quot;gboolean&quot;&gt;&lt;span class=&quot;type&quot;&gt;gboolean&lt;/span&gt;&lt;/a&gt;. This corresponds to a unbiased coin toss.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_random_boolean()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_random_int</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-random-int</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Return a random &lt;span class=&quot;type&quot;&gt;guint32&lt;/span&gt; equally distributed over the range
[0..2^32-1].</Abstract>
  <Declaration type="html">&lt;pre&gt;guint32 g_random_int (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_random_int_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-random-int-range</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Returns a random &lt;span class=&quot;type&quot;&gt;gint32&lt;/span&gt; equally distributed over the range
[&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/em&gt;..&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt;-1].</Abstract>
  <Declaration type="html">&lt;pre&gt;gint32 g_random_int_range (
    gint32 begin,
    gint32 end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_random_double</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-random-double</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Returns a random &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gdouble&quot; title=&quot;gdouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;gdouble&lt;/span&gt;&lt;/a&gt; equally distributed over the range [0..1).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&gt;gdouble&lt;/a&gt; g_random_double (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_random_double_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Random-Numbers.html</Path>
  <Anchor>g-random-double-range</Anchor>
  <NodeRef refid="38"/>
  <Abstract type="html">Returns a random &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gdouble&quot; title=&quot;gdouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;gdouble&lt;/span&gt;&lt;/a&gt; equally distributed over the range [&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/em&gt;..&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt;).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&quot;link&quot;&gt;gdouble&lt;/a&gt; g_random_double_range (
    &lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&quot;link&quot;&gt;gdouble&lt;/a&gt; begin,
    &lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&gt;gdouble&lt;/a&gt; end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHookList</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookList</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GHookList&lt;/span&gt; struct represents a 
list of hook functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gulong seq_id;
    guint hook_size : 16;
    guint is_setup : 1;
    GHook *hooks;
    gpointer dummy3;
    GHookFinalizeFunc finalize_hook;
    gpointer dummy[2];
} GHookList;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHookFinalizeFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookFinalizeFunc</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Defines the type of function to be called when a hook in a 
list of hooks gets finalized.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GHookFinalizeFunc) (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&gt;GHook&lt;/a&gt; *hook);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHook</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHook</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GHook&lt;/span&gt; struct represents a single hook 
function in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gpointer data;
    GHook *next;
    GHook *prev;
    guint ref_count;
    gulong hook_id;
    guint flags;
    gpointer func;
    GDestroyNotify destroy;
} GHook;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHookFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookFunc</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Defines the type of a hook function that can be invoked
by &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-list-invoke&quot; title=&quot;g_hook_list_invoke ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_list_invoke()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GHookFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHookCheckFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookCheckFunc</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Defines the type of a hook function that can be invoked
by &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-list-invoke-check&quot; title=&quot;g_hook_list_invoke_check ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_list_invoke_check()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GHookCheckFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_list_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-list-init</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Initializes a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;.
This must be called before the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt; is used.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_list_init (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; hook_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_list_invoke</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-list-invoke</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Calls all of the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; functions in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_list_invoke (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; may_recurse);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_list_invoke_check</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-list-invoke-check</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Calls all of the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; functions in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;.
Any function which returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; is removed from the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_list_invoke_check (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; may_recurse);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_list_marshal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-list-marshal</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Calls a function on each valid &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_list_marshal (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; may_recurse,
    &lt;a class=&quot;glib-Hook-Functions.html#GHookMarshaller&quot; href=&quot;GHookMarshaller ()&quot; title=&quot;link&quot;&gt;GHookMarshaller&lt;/a&gt; marshaller,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHookMarshaller</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookMarshaller</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Defines the type of function used by &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-list-marshal&quot; title=&quot;g_hook_list_marshal ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_list_marshal()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GHookMarshaller) (
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt; *hook,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_list_marshal_check</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-list-marshal-check</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Calls a function on each valid &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; and destroys it if the 
function returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_list_marshal_check (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; may_recurse,
    &lt;a class=&quot;glib-Hook-Functions.html#GHookCheckMarshaller&quot; href=&quot;GHookCheckMarshaller ()&quot; title=&quot;link&quot;&gt;GHookCheckMarshaller&lt;/a&gt; marshaller,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHookCheckMarshaller</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookCheckMarshaller</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Defines the type of function used by &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-list-marshal-check&quot; title=&quot;g_hook_list_marshal_check ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_list_marshal_check()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GHookCheckMarshaller) (
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt; *hook,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_list_clear</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-list-clear</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Removes all the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; elements from a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_list_clear (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&gt;GHookList&lt;/a&gt; *hook_list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_alloc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-alloc</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Allocates space for a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; and initializes it.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt;* g_hook_alloc (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&gt;GHookList&lt;/a&gt; *hook_list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_append</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-append</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Appends a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; onto the end of a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_hook_append( hook_list, hook )&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_prepend</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-prepend</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Prepends a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; on the start of a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_prepend (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&gt;GHook&lt;/a&gt; *hook);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_insert_before</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-insert-before</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Inserts a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; into a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;, before a given &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_insert_before (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt; *sibling,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&gt;GHook&lt;/a&gt; *hook);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_insert_sorted</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-insert-sorted</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Inserts a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; into a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;, sorted by the given function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_insert_sorted (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt; *hook,
    &lt;a class=&quot;glib-Hook-Functions.html#GHookCompareFunc&quot; href=&quot;GHookCompareFunc ()&quot; title=&gt;GHookCompareFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHookCompareFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookCompareFunc</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Defines the type of function used to compare &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; elements in
&lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-insert-sorted&quot; title=&quot;g_hook_insert_sorted ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_insert_sorted()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; (
    *GHookCompareFunc) (
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt; *new_hook,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&gt;GHook&lt;/a&gt; *sibling);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_compare_ids</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-compare-ids</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Compares the ids of two &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; elements, returning a negative value
if the second id is greater than the first.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_hook_compare_ids (
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt; *new_hook,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&gt;GHook&lt;/a&gt; *sibling);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_get</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-get</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Returns the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; with the given id, or &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; if it is not found.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt;* g_hook_get (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&gt;gulong&lt;/a&gt; hook_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_find</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-find</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Finds a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt; using the given function to test for a match.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt;* g_hook_find (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; need_valids,
    &lt;a class=&quot;glib-Hook-Functions.html#GHookFindFunc&quot; href=&quot;GHookFindFunc ()&quot; title=&quot;link&quot;&gt;GHookFindFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHookFindFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookFindFunc</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Defines the type of the function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-find&quot; title=&quot;g_hook_find ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_find()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GHookFindFunc) (
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt; *hook,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_find_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-find-data</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Finds a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt; with the given data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt;* g_hook_find_data (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; need_valids,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_find_func</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-find-func</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Finds a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt; with the given function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt;* g_hook_find_func (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; need_valids,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_find_func_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-find-func-data</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Finds a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt; with the given function and data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt;* g_hook_find_func_data (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; need_valids,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_first_valid</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-first-valid</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Returns the first &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt; which has not been destroyed.
The reference count for the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; is incremented, so you must call
&lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-unref&quot; title=&quot;g_hook_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_unref()&lt;/code&gt;&lt;/a&gt; to restore it when no longer needed. (Or call
&lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-next-valid&quot; title=&quot;g_hook_next_valid ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_next_valid()&lt;/code&gt;&lt;/a&gt; if you are stepping through the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt;* g_hook_first_valid (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; may_be_in_call);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_next_valid</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-next-valid</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Returns the next &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt; which has not been destroyed.
The reference count for the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; is incremented, so you must call
&lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-unref&quot; title=&quot;g_hook_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_unref()&lt;/code&gt;&lt;/a&gt; to restore it when no longer needed. (Or continue to call
&lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-next-valid&quot; title=&quot;g_hook_next_valid ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_next_valid()&lt;/code&gt;&lt;/a&gt; until &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is returned.)
</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt;* g_hook_next_valid (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt; *hook,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; may_be_in_call);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_HOOK_FLAG_ACTIVE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookFlagMask</Anchor>
  <NodeRef refid="876"/>
  <Declaration type="html">&lt;pre&gt;G_HOOK_FLAG_ACTIVE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GHookFlagMask</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_HOOK_FLAG_IN_CALL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookFlagMask</Anchor>
  <NodeRef refid="876"/>
  <Declaration type="html">&lt;pre&gt;G_HOOK_FLAG_IN_CALL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GHookFlagMask</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_HOOK_FLAG_MASK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookFlagMask</Anchor>
  <NodeRef refid="876"/>
  <Declaration type="html">&lt;pre&gt;G_HOOK_FLAG_MASK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GHookFlagMask</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHookFlagMask</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>GHookFlagMask</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Flags used internally in the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; implementation.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_HOOK_FLAG_ACTIVE = 1 &amp;lt;&amp;lt; 0,
    G_HOOK_FLAG_IN_CALL = 1 &amp;lt;&amp;lt; 1,
    G_HOOK_FLAG_MASK = 0x0f 
} GHookFlagMask;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_HOOK_FLAGS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>G-HOOK-FLAGS:CAPS</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Returns the flags of a hook.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_HOOK_FLAGS(hook) (G_HOOK (hook)-&amp;gt;
    flags)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_HOOK_FLAG_USER_SHIFT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>G-HOOK-FLAG-USER-SHIFT:CAPS</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">The position of the first bit which is not reserved for internal
use be the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; implementation, i.e. 
&lt;code class=&quot;literal&quot;&gt;1 &amp;lt;&amp;lt; G_HOOK_FLAG_USER_SHIFT&lt;/code&gt; is the first bit
which can be used for application-defined flags.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_HOOK_FLAG_USER_SHIFT (4)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_HOOK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>G-HOOK:CAPS</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Casts a pointer to a &lt;code class=&quot;literal&quot;&gt;GHook*&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_HOOK(hook) ((GHook*) (hook))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_HOOK_IS_VALID</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>G-HOOK-IS-VALID:CAPS</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; is valid, i.e. it is in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;, it is active
and it has not been destroyed.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_HOOK_IS_VALID(hook)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_HOOK_ACTIVE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>G-HOOK-ACTIVE:CAPS</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; is active, which is normally &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; until the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt;
is destroyed.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_HOOK_ACTIVE(hook)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_HOOK_IN_CALL</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>G-HOOK-IN-CALL:CAPS</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; function is currently executing.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_HOOK_IN_CALL(hook)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_HOOK_IS_UNLINKED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>G-HOOK-IS-UNLINKED:CAPS</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; is not in a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;.
</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_HOOK_IS_UNLINKED(hook)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-ref</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Increments the reference count for a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&quot;link&quot;&gt;GHook&lt;/a&gt;* g_hook_ref (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&gt;GHook&lt;/a&gt; *hook);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-unref</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Decrements the reference count of a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt;.
If the reference count falls to 0, the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; is removed from the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;
and &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-free&quot; title=&quot;g_hook_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_free()&lt;/code&gt;&lt;/a&gt; is called to free it.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_unref (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&gt;GHook&lt;/a&gt; *hook);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-free</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Calls the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt; &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;finalize_hook&lt;/code&gt;&lt;/em&gt; function if it exists, and frees the memory
allocated for the &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_free (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&gt;GHook&lt;/a&gt; *hook);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-destroy</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Destroys a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt;, given its ID.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_hook_destroy (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&gt;gulong&lt;/a&gt; hook_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hook_destroy_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hook-Functions.html</Path>
  <Anchor>g-hook-destroy-link</Anchor>
  <NodeRef refid="39"/>
  <Abstract type="html">Removes one &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHook&quot; title=&quot;GHook&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHook&lt;/span&gt;&lt;/a&gt; from a &lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#GHookList&quot; title=&quot;GHookList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHookList&lt;/span&gt;&lt;/a&gt;, marking it inactive and calling
&lt;a class=&quot;link&quot; href=&quot;glib-Hook-Functions.html#g-hook-unref&quot; title=&quot;g_hook_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hook_unref()&lt;/code&gt;&lt;/a&gt; on it. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hook_destroy_link (
    &lt;a class=&quot;glib-Hook-Functions.html#GHookList&quot; href=&quot;GHookList&quot; title=&quot;link&quot;&gt;GHookList&lt;/a&gt; *hook_list,
    &lt;a class=&quot;glib-Hook-Functions.html#GHook&quot; href=&quot;GHook&quot; title=&gt;GHook&lt;/a&gt; *hook);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_application_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-application-name</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets a human-readable name for the application, as set by
&lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-set-application-name&quot; title=&quot;g_set_application_name ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_set_application_name()&lt;/code&gt;&lt;/a&gt;. This name should be localized if
possible, and is intended for display to the user.  Contrast with
&lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-get-prgname&quot; title=&quot;g_get_prgname ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_prgname()&lt;/code&gt;&lt;/a&gt;, which gets a non-localized name. If
&lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-set-application-name&quot; title=&quot;g_set_application_name ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_set_application_name()&lt;/code&gt;&lt;/a&gt; has not been called, returns the result of
&lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-get-prgname&quot; title=&quot;g_get_prgname ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_prgname()&lt;/code&gt;&lt;/a&gt; (which may be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; if &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-set-prgname&quot; title=&quot;g_set_prgname ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_set_prgname()&lt;/code&gt;&lt;/a&gt; has also not
been called).</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_application_name (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_set_application_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-set-application-name</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Sets a human-readable name for the application. This name should be
localized if possible, and is intended for display to the user.
Contrast with &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-set-prgname&quot; title=&quot;g_set_prgname ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_set_prgname()&lt;/code&gt;&lt;/a&gt;, which sets a non-localized name.
&lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-set-prgname&quot; title=&quot;g_set_prgname ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_set_prgname()&lt;/code&gt;&lt;/a&gt; will be called automatically by &lt;a
href=&quot;/usr/share/gtk-doc/html/gtk/gtk-General.html#gtk-init&quot;
&gt;&lt;code class=&quot;function&quot;&gt;gtk_init()&lt;/code&gt;&lt;/a&gt;,
but &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-set-application-name&quot; title=&quot;g_set_application_name ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_set_application_name()&lt;/code&gt;&lt;/a&gt; will not.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_set_application_name (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *application_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_prgname</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-prgname</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the name of the program. This name should &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; 
be localized, contrast with &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-get-application-name&quot; title=&quot;g_get_application_name ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_application_name()&lt;/code&gt;&lt;/a&gt;.
(If you are using GDK or GTK+ the program name is set in &lt;a
href=&quot;/usr/share/gtk-doc/html/gdk/gdk-General.html#gdk-init&quot;
&gt;&lt;code class=&quot;function&quot;&gt;gdk_init()&lt;/code&gt;&lt;/a&gt;, 
which is called by &lt;a
href=&quot;/usr/share/gtk-doc/html/gtk/gtk-General.html#gtk-init&quot;
&gt;&lt;code class=&quot;function&quot;&gt;gtk_init()&lt;/code&gt;&lt;/a&gt;. The program name is found by taking 
the last component of &lt;code class=&quot;literal&quot;&gt;argv[0]&lt;/code&gt;.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_prgname (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_set_prgname</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-set-prgname</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Sets the name of the program. This name should &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; 
be localized, contrast with &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-set-application-name&quot; title=&quot;g_set_application_name ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_set_application_name()&lt;/code&gt;&lt;/a&gt;. Note that for 
thread-safety reasons this function can only be called once.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_set_prgname (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *prgname);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_getenv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-getenv</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Returns the value of an environment variable. The name and value
are in the GLib file name encoding. On UNIX, this means the actual
bytes which might or might not be in some consistent character set
and encoding. On Windows, it is in UTF-8. On Windows, in case the
environment variable's value contains references to other
environment variables, they are expanded.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_getenv (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *variable);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_setenv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-setenv</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Sets an environment variable. Both the variable's name and value
should be in the GLib file name encoding. On UNIX, this means that
they can be any sequence of bytes. On Windows, they should be in
UTF-8.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_setenv (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *variable,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *value,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; overwrite);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unsetenv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-unsetenv</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Removes an environment variable from the environment.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_unsetenv (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *variable);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_listenv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-listenv</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the names of all variables set in the environment.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;** g_listenv (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_user_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-user-name</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the user name of the current user. The encoding of the returned
string is system-defined. On UNIX, it might be the preferred file name
encoding, or something else, and there is no guarantee that it is even
consistent on a machine. On Windows, it is always UTF-8.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_user_name (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_real_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-real-name</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the real name of the user. This usually comes from the user's entry 
in the &lt;code class=&quot;filename&quot;&gt;passwd&lt;/code&gt; file. The encoding of the returned 
string is system-defined. (On Windows, it is, however, always UTF-8.) 
If the real user name cannot be determined, the string &quot;Unknown&quot; is 
returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_real_name (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_user_cache_dir</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-user-cache-dir</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Returns a base directory in which to store non-essential, cached
data specific to particular user.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_user_cache_dir (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_user_data_dir</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-user-data-dir</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Returns a base directory in which to access application data such
as icons that is customized for a particular user.  </Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_user_data_dir (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_user_config_dir</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-user-config-dir</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Returns a base directory in which to store user-specific application 
configuration information such as user preferences and settings. </Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_user_config_dir (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_USER_DIRECTORY_DESKTOP</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GUserDirectory</Anchor>
  <NodeRef refid="902"/>
  <Declaration type="html">&lt;pre&gt;G_USER_DIRECTORY_DESKTOP&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GUserDirectory">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUserDirectory</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_USER_DIRECTORY_DOCUMENTS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GUserDirectory</Anchor>
  <NodeRef refid="902"/>
  <Declaration type="html">&lt;pre&gt;G_USER_DIRECTORY_DOCUMENTS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GUserDirectory">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUserDirectory</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_USER_DIRECTORY_DOWNLOAD</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GUserDirectory</Anchor>
  <NodeRef refid="902"/>
  <Declaration type="html">&lt;pre&gt;G_USER_DIRECTORY_DOWNLOAD&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GUserDirectory">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUserDirectory</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_USER_DIRECTORY_MUSIC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GUserDirectory</Anchor>
  <NodeRef refid="902"/>
  <Declaration type="html">&lt;pre&gt;G_USER_DIRECTORY_MUSIC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GUserDirectory">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUserDirectory</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_USER_DIRECTORY_PICTURES</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GUserDirectory</Anchor>
  <NodeRef refid="902"/>
  <Declaration type="html">&lt;pre&gt;G_USER_DIRECTORY_PICTURES&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GUserDirectory">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUserDirectory</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_USER_DIRECTORY_PUBLIC_SHARE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GUserDirectory</Anchor>
  <NodeRef refid="902"/>
  <Declaration type="html">&lt;pre&gt;G_USER_DIRECTORY_PUBLIC_SHARE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GUserDirectory">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUserDirectory</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_USER_DIRECTORY_TEMPLATES</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GUserDirectory</Anchor>
  <NodeRef refid="902"/>
  <Declaration type="html">&lt;pre&gt;G_USER_DIRECTORY_TEMPLATES&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GUserDirectory">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUserDirectory</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_USER_DIRECTORY_VIDEOS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GUserDirectory</Anchor>
  <NodeRef refid="902"/>
  <Declaration type="html">&lt;pre&gt;G_USER_DIRECTORY_VIDEOS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GUserDirectory">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUserDirectory</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_USER_N_DIRECTORIES</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GUserDirectory</Anchor>
  <NodeRef refid="902"/>
  <Declaration type="html">&lt;pre&gt;G_USER_N_DIRECTORIES&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GUserDirectory">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GUserDirectory</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GUserDirectory</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GUserDirectory</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">These are logical ids for special directories which are defined
depending on the platform used. You should use &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-get-user-special-dir&quot; title=&quot;g_get_user_special_dir ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_user_special_dir()&lt;/code&gt;&lt;/a&gt;
to retrieve the full path associated to the logical id.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_USER_DIRECTORY_DESKTOP,
    G_USER_DIRECTORY_DOCUMENTS,
    G_USER_DIRECTORY_DOWNLOAD,
    G_USER_DIRECTORY_MUSIC,
    G_USER_DIRECTORY_PICTURES,
    G_USER_DIRECTORY_PUBLIC_SHARE,
    G_USER_DIRECTORY_TEMPLATES,
    G_USER_DIRECTORY_VIDEOS,
    G_USER_N_DIRECTORIES 
} GUserDirectory;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_user_special_dir</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-user-special-dir</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Returns the full path of a special directory using its logical id.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_get_user_special_dir (
    &lt;a class=&quot;glib-Miscellaneous-Utility-Functions.html#GUserDirectory&quot; href=&quot;enum GUserDirectory&quot; title=&gt;GUserDirectory&lt;/a&gt; directory);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_system_data_dirs</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-system-data-dirs</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Returns an ordered list of base directories in which to access 
system-wide application data.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* const * g_get_system_data_dirs (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_system_config_dirs</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-system-config-dirs</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Returns an ordered list of base directories in which to access 
system-wide configuration information.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* const * g_get_system_config_dirs (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_host_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-host-name</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Return a name for the machine. </Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_host_name (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_home_dir</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-home-dir</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the current user's home directory as defined in the 
password database.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_home_dir (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_tmp_dir</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-tmp-dir</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the directory to use for temporary files. This is found from 
inspecting the environment variables &lt;code class=&quot;envar&quot;&gt;TMPDIR&lt;/code&gt;, 
&lt;code class=&quot;envar&quot;&gt;TMP&lt;/code&gt;, and &lt;code class=&quot;envar&quot;&gt;TEMP&lt;/code&gt; in that order. If none 
of those are defined &quot;/tmp&quot; is returned on UNIX and &quot;C:\&quot; on Windows. 
The encoding of the returned string is system-defined. On Windows, 
it is always UTF-8. The return value is never &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_tmp_dir (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_get_current_dir</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-get-current-dir</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the current directory.
The returned string should be freed when no longer needed. The encoding 
of the returned string is system defined. On Windows, it is always UTF-8.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_get_current_dir (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_basename</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-basename</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the name of the file without any leading directory components.  
It returns a pointer into the given file name string.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_basename (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *file_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_basename&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-path-get-basename&quot; title=&quot;g_path_get_basename ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_path_get_basename()&lt;/code&gt;&lt;/a&gt; instead, but notice that
&lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-path-get-basename&quot; title=&quot;g_path_get_basename ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_path_get_basename()&lt;/code&gt;&lt;/a&gt; allocates new memory for the returned string, unlike
this function which returns a pointer into the argument.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dirname</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-dirname</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">This function is deprecated and will be removed in the next major
release of GLib. Use &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-path-get-dirname&quot; title=&quot;g_path_get_dirname ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_path_get_dirname()&lt;/code&gt;&lt;/a&gt; instead.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_dirname&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_dirname&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_path_is_absolute</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-path-is-absolute</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;file_name&lt;/code&gt;&lt;/em&gt; is an absolute file name,
i.e. it contains a full path from the root directory such as &quot;/usr/local&quot;
on UNIX or &quot;C:\windows&quot; on Windows systems.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_path_is_absolute (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *file_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_path_skip_root</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-path-skip-root</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Returns a pointer into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;file_name&lt;/code&gt;&lt;/em&gt; after the root component, i.e. after
the &quot;/&quot; in UNIX or &quot;C:\&quot; under Windows. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;file_name&lt;/code&gt;&lt;/em&gt; is not an absolute
path it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_path_skip_root (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *file_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_path_get_basename</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-path-get-basename</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the last component of the filename. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;file_name&lt;/code&gt;&lt;/em&gt; ends with a 
directory separator it gets the component before the last slash. If 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;file_name&lt;/code&gt;&lt;/em&gt; consists only of directory separators (and on Windows, 
possibly a drive letter), a single separator is returned. If
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;file_name&lt;/code&gt;&lt;/em&gt; is empty, it gets &quot;.&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_path_get_basename (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *file_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_path_get_dirname</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-path-get-dirname</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the directory components of a file name.  If the file name has no
directory components &quot;.&quot; is returned.  The returned string should be
freed when no longer needed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_path_get_dirname (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *file_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_build_filename</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-build-filename</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Creates a filename from a series of elements using the correct
separator for filenames.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_build_filename (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *first_element,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_build_filenamev</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-build-filenamev</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Behaves exactly like &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-build-filename&quot; title=&quot;g_build_filename ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_build_filename()&lt;/code&gt;&lt;/a&gt;, but takes the path elements 
as a string array, instead of varargs. This function is mainly
meant for language bindings.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_build_filenamev (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_build_path</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-build-path</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Creates a path from a series of elements using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;separator&lt;/code&gt;&lt;/em&gt; as the
separator between elements. At the boundary between two elements,
any trailing occurrences of separator in the first element, or
leading occurrences of separator in the second element are removed
and exactly one copy of the separator is inserted.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_build_path (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *separator,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *first_element,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_build_pathv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-build-pathv</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Behaves exactly like &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-build-path&quot; title=&quot;g_build_path ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_build_path()&lt;/code&gt;&lt;/a&gt;, but takes the path elements 
as a string array, instead of varargs. This function is mainly
meant for language bindings.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_build_pathv (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *separator,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_format_size_for_display</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-format-size-for-display</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Formats a size (for example the size of a file) into a human readable string.
Sizes are rounded to the nearest size prefix (KB, MB, GB) and are displayed rounded to
the nearest  tenth. E.g. the file size 3292528 bytes will be converted into
the string &quot;3.1 MB&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;char* g_format_size_for_display (
    goffset size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_find_program_in_path</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-find-program-in-path</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Locates the first executable named &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;program&lt;/code&gt;&lt;/em&gt; in the user's path, in the
same way that &lt;code class=&quot;function&quot;&gt;execvp()&lt;/code&gt; would locate it. Returns an allocated string
with the absolute path name, or &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; if the program is not found in
the path. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;program&lt;/code&gt;&lt;/em&gt; is already an absolute path, returns a copy of
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;program&lt;/code&gt;&lt;/em&gt; if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;program&lt;/code&gt;&lt;/em&gt; exists and is executable, and &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; otherwise.
 
On Windows, if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;program&lt;/code&gt;&lt;/em&gt; does not have a file type suffix, tries
with the suffixes .exe, .cmd, .bat and .com, and the suffixes in
the &lt;code class=&quot;envar&quot;&gt;PATHEXT&lt;/code&gt; environment variable. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_find_program_in_path (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *program);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bit_nth_lsf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-bit-nth-lsf</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Find the position of the first bit set in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mask&lt;/code&gt;&lt;/em&gt;, searching from (but not
including) &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;nth_bit&lt;/code&gt;&lt;/em&gt; upwards. Bits are numbered from 0 (least significant)
to sizeof(&lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gulong&quot; title=&quot;gulong&quot;&gt;&lt;span class=&quot;type&quot;&gt;gulong&lt;/span&gt;&lt;/a&gt;) * 8 - 1 (31 or 63, usually). To start searching from the
0th bit, set &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;nth_bit&lt;/code&gt;&lt;/em&gt; to -1.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_bit_nth_lsf (
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&quot;link&quot;&gt;gulong&lt;/a&gt; mask,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; nth_bit);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bit_nth_msf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-bit-nth-msf</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Find the position of the first bit set in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mask&lt;/code&gt;&lt;/em&gt;, searching from (but not
including) &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;nth_bit&lt;/code&gt;&lt;/em&gt; downwards. Bits are numbered from 0 (least significant)
to sizeof(&lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gulong&quot; title=&quot;gulong&quot;&gt;&lt;span class=&quot;type&quot;&gt;gulong&lt;/span&gt;&lt;/a&gt;) * 8 - 1 (31 or 63, usually). To start searching from the
last bit, set &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;nth_bit&lt;/code&gt;&lt;/em&gt; to -1 or GLIB_SIZEOF_LONG * 8.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_bit_nth_msf (
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&quot;link&quot;&gt;gulong&lt;/a&gt; mask,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; nth_bit);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bit_storage</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-bit-storage</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the number of bits used to hold &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/em&gt;,
e.g. if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/em&gt; is 4, 3 bits are needed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_bit_storage (
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&gt;gulong&lt;/a&gt; number);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_spaced_primes_closest</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-spaced-primes-closest</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Gets the smallest prime number from a built-in array of primes which
is larger than &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;num&lt;/code&gt;&lt;/em&gt;. This is used within GLib to calculate the optimum
size of a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_spaced_primes_closest (
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; num);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_atexit</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-atexit</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Specifies a function to be called at normal program termination.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_atexit (
    &lt;a class=&quot;glib-Miscellaneous-Utility-Functions.html#GVoidFunc&quot; href=&quot;GVoidFunc ()&quot; title=&gt;GVoidFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_parse_debug_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-parse-debug-string</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Parses a string containing debugging options
into a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#guint&quot; title=&quot;guint&quot;&gt;&lt;code class=&quot;literal&quot;&gt;guint&lt;/code&gt;&lt;/a&gt; containing bit flags. This is used 
within GDK and GTK+ to parse the debug options passed on the
command line or through environment variables.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_parse_debug_string (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Miscellaneous-Utility-Functions.html#GDebugKey&quot; href=&quot;GDebugKey&quot; title=&quot;link&quot;&gt;GDebugKey&lt;/a&gt; *keys,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; nkeys);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDebugKey</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GDebugKey</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Associates a string with a bit flag.
Used in &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-parse-debug-string&quot; title=&quot;g_parse_debug_string ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_parse_debug_string()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gchar *key;
    guint value;
} GDebugKey;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GVoidFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GVoidFunc</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Declares a type of function which takes no arguments and has no return value.
It is used to specify the type function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-atexit&quot; title=&quot;g_atexit ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_atexit()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GVoidFunc) (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GFreeFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>GFreeFunc</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Declares a type of function which takes an arbitrary data pointer argument
and has no return value. It is not currently used in GLib or GTK+.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GFreeFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_qsort_with_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-qsort-with-data</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">This is just like the standard C &lt;code class=&quot;function&quot;&gt;qsort()&lt;/code&gt; function, but
the comparison routine accepts a user data argument.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_qsort_with_data (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; pbase,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; total_elems,
    gsize size,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; compare_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_nullify_pointer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Miscellaneous-Utility-Functions.html</Path>
  <Anchor>g-nullify-pointer</Anchor>
  <NodeRef refid="40"/>
  <Abstract type="html">Set the pointer at the specified location to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_nullify_pointer (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; *nullify_location);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GScanner</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GScanner</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">The data structure representing a lexical scanner.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gpointer user_data;
    guint max_parse_errors;
    guint parse_errors;
    const gchar *input_name;
    GData *qdata;
    GScannerConfig *config;
    GTokenType token;
    GTokenValue value;
    guint line;
    guint position;
    GTokenType next_token;
    GTokenValue next_value;
    guint next_line;
    guint next_position;
    GHashTable *symbol_table;
    gint input_fd;
    const gchar *text;
    const gchar *text_end;
    gchar *buffer;
    guint scope_id;
    GScannerMsgFunc msg_handler;
} GScanner;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GScannerConfig</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GScannerConfig</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Specifies the &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt; parser configuration. Most settings can be changed during
the parsing phase and will affect the lexical parsing of the next unpeeked token.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gchar *cset_skip_characters;
    gchar *cset_identifier_first;
    gchar *cset_identifier_nth;
    gchar *cpair_comment_single;
    guint case_sensitive : 1;
    guint skip_comment_multi : 1;
    guint skip_comment_single : 1;
    guint scan_comment_multi : 1;
    guint scan_identifier : 1;
    guint scan_identifier_1char : 1;
    guint scan_identifier_NULL : 1;
    guint scan_symbols : 1;
    guint scan_binary : 1;
    guint scan_octal : 1;
    guint scan_float : 1;
    guint scan_hex : 1;
    guint scan_hex_dollar : 1;
    guint scan_string_sq : 1;
    guint scan_string_dq : 1;
    guint numbers_2_int : 1;
    guint int_2_float : 1;
    guint identifier_2_string : 1;
    guint char_2_token : 1;
    guint symbol_2_token : 1;
    guint scope_0_fallback : 1;
    guint store_int64 : 1;
    guint padding_dummy;
} GScannerConfig;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-new</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt;.
The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;config_templ&lt;/code&gt;&lt;/em&gt; structure specifies the initial settings of the scanner,
which are copied into the &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt; &lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;config&lt;/code&gt;&lt;/em&gt; field.
If you pass &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; then the default settings are used.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt;* g_scanner_new (
    const &lt;a class=&quot;glib-Lexical-Scanner.html#GScannerConfig&quot; href=&quot;GScannerConfig&quot; title=&gt;GScannerConfig&lt;/a&gt; *config_templ);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-destroy</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Frees all memory used by the &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_scanner_destroy (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&gt;GScanner&lt;/a&gt; *scanner);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_input_file</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-input-file</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Prepares to scan a file.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_scanner_input_file (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; input_fd);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_sync_file_offset</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-sync-file-offset</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Rewinds the filedescriptor to the current buffer position and blows 
the file read ahead buffer. This is useful for third party uses of
the scanners filedescriptor, which hooks onto the current scanning 
position.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_scanner_sync_file_offset (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&gt;GScanner&lt;/a&gt; *scanner);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_input_text</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-input-text</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Prepares to scan a text buffer.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_scanner_input_text (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *text,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; text_len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_peek_next_token</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-peek-next-token</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Parses the next token, without removing it from the input stream.
The token data is placed in the
&lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;next_token&lt;/code&gt;&lt;/em&gt;,
&lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;next_value&lt;/code&gt;&lt;/em&gt;,
&lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;next_line&lt;/code&gt;&lt;/em&gt;, and
&lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;next_position&lt;/code&gt;&lt;/em&gt; fields of the &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Lexical-Scanner.html#GTokenType&quot; href=&quot;enum GTokenType&quot; title=&quot;link&quot;&gt;GTokenType&lt;/a&gt; g_scanner_peek_next_token (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&gt;GScanner&lt;/a&gt; *scanner);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_get_next_token</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-get-next-token</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Parses the next token just like &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-peek-next-token&quot; title=&quot;g_scanner_peek_next_token ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_peek_next_token()&lt;/code&gt;&lt;/a&gt; and also
removes it from the input stream.
The token data is placed in the
&lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;token&lt;/code&gt;&lt;/em&gt;,
&lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt;,
&lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;line&lt;/code&gt;&lt;/em&gt;, and
&lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/em&gt; fields of the &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Lexical-Scanner.html#GTokenType&quot; href=&quot;enum GTokenType&quot; title=&quot;link&quot;&gt;GTokenType&lt;/a&gt; g_scanner_get_next_token (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&gt;GScanner&lt;/a&gt; *scanner);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_eof</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-eof</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the scanner has reached the end of the file or text buffer.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_scanner_eof (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&gt;GScanner&lt;/a&gt; *scanner);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_cur_line</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-cur-line</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Returns the current line in the input stream (counting from 1).
This is the line of the last token parsed via &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-get-next-token&quot; title=&quot;g_scanner_get_next_token ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_get_next_token()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_scanner_cur_line (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&gt;GScanner&lt;/a&gt; *scanner);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_cur_position</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-cur-position</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Returns the current position in the current line (counting from 0).
This is the position of the last token parsed via &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-get-next-token&quot; title=&quot;g_scanner_get_next_token ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_get_next_token()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_scanner_cur_position (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&gt;GScanner&lt;/a&gt; *scanner);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_cur_token</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-cur-token</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Gets the current token type.
This is simply the &lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;token&lt;/code&gt;&lt;/em&gt; field in the &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt;
structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Lexical-Scanner.html#GTokenType&quot; href=&quot;enum GTokenType&quot; title=&quot;link&quot;&gt;GTokenType&lt;/a&gt; g_scanner_cur_token (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&gt;GScanner&lt;/a&gt; *scanner);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_cur_value</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-cur-value</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Gets the current token value.
This is simply the &lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; field in the &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt;
structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Lexical-Scanner.html#GTokenValue&quot; href=&quot;union GTokenValue&quot; title=&quot;link&quot;&gt;GTokenValue&lt;/a&gt; g_scanner_cur_value (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&gt;GScanner&lt;/a&gt; *scanner);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_set_scope</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-set-scope</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Sets the current scope.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_scanner_set_scope (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; scope_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_scope_add_symbol</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-scope-add-symbol</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Adds a symbol to the given scope.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_scanner_scope_add_symbol (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; scope_id,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *symbol,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_scope_foreach_symbol</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-scope-foreach-symbol</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Calls the given function for each of the symbol/value pairs in the 
given scope of the &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt;. The function is passed the symbol and 
value of each pair, and the given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; parameter.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_scanner_scope_foreach_symbol (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; scope_id,
    &lt;a class=&quot;glib-Hash-Tables.html#GHFunc&quot; href=&quot;GHFunc ()&quot; title=&quot;link&quot;&gt;GHFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_scope_lookup_symbol</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-scope-lookup-symbol</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Looks up a symbol in a scope and return its value. If the
symbol is not bound in the scope, &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_scanner_scope_lookup_symbol (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; scope_id,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *symbol);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_scope_remove_symbol</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-scope-remove-symbol</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Removes a symbol from a scope.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_scanner_scope_remove_symbol (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; scope_id,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *symbol);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_add_symbol</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-add-symbol</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Adds a symbol to the default scope.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_scanner_add_symbol( scanner, symbol, value )&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_scanner_add_symbol&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-scope-add-symbol&quot; title=&quot;g_scanner_scope_add_symbol ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_scope_add_symbol()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_remove_symbol</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-remove-symbol</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Removes a symbol from the default scope.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_scanner_remove_symbol( scanner, symbol )&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_scanner_remove_symbol&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-scope-remove-symbol&quot; title=&quot;g_scanner_scope_remove_symbol ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_scope_remove_symbol()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_foreach_symbol</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-foreach-symbol</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Calls a function for each symbol in the default scope.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_scanner_foreach_symbol( scanner, func, data )&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_scanner_foreach_symbol&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-scope-foreach-symbol&quot; title=&quot;g_scanner_scope_foreach_symbol ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_scope_foreach_symbol()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_freeze_symbol_table</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-freeze-symbol-table</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">There is no reason to use this macro, since it does nothing.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_scanner_freeze_symbol_table(scanner)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_scanner_freeze_symbol_table&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. This macro does nothing.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_thaw_symbol_table</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-thaw-symbol-table</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">There is no reason to use this macro, since it does nothing.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_scanner_thaw_symbol_table(scanner)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_scanner_thaw_symbol_table&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. This macro does nothing.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_lookup_symbol</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-lookup-symbol</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Looks up a symbol in the current scope and return its value. If the
symbol is not bound in the current scope, &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_scanner_lookup_symbol (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *symbol);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_warn</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-warn</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Outputs a warning message, via the &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt; message handler.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_scanner_warn (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_error</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-error</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Outputs an error message, via the &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScanner&quot; title=&quot;GScanner&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScanner&lt;/span&gt;&lt;/a&gt; message handler.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_scanner_error (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_scanner_unexp_token</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>g-scanner-unexp-token</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Outputs a message through the scanner's msg_handler, resulting from an
unexpected token in the input stream.
Note that you should not call &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-peek-next-token&quot; title=&quot;g_scanner_peek_next_token ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_peek_next_token()&lt;/code&gt;&lt;/a&gt; followed by
&lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-unexp-token&quot; title=&quot;g_scanner_unexp_token ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_unexp_token()&lt;/code&gt;&lt;/a&gt; without an intermediate call to
&lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-get-next-token&quot; title=&quot;g_scanner_get_next_token ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_get_next_token()&lt;/code&gt;&lt;/a&gt;, as &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-unexp-token&quot; title=&quot;g_scanner_unexp_token ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_unexp_token()&lt;/code&gt;&lt;/a&gt; evaluates the
scanner's current token (not the peeked token) to construct part
of the message.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_scanner_unexp_token (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    &lt;a class=&quot;glib-Lexical-Scanner.html#GTokenType&quot; href=&quot;enum GTokenType&quot; title=&quot;link&quot;&gt;GTokenType&lt;/a&gt; expected_token,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *identifier_spec,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *symbol_spec,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *symbol_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *message,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; is_error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GScannerMsgFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GScannerMsgFunc</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">Specifies the type of the message handler function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GScannerMsgFunc) (
    &lt;a class=&quot;glib-Lexical-Scanner.html#GScanner&quot; href=&quot;GScanner&quot; title=&quot;link&quot;&gt;GScanner&lt;/a&gt; *scanner,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *message,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CSET_a_2_z</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>G-CSET-a-2-z</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">The set of lowercase ASCII alphabet characters.
Used for specifying valid identifier characters in &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScannerConfig&quot; title=&quot;GScannerConfig&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScannerConfig&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CSET_a_2_z &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CSET_A_2_Z</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>G-CSET-A-2-Z:CAPS</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">The set of uppercase ASCII alphabet characters.
Used for specifying valid identifier characters in &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScannerConfig&quot; title=&quot;GScannerConfig&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScannerConfig&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CSET_A_2_Z &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CSET_DIGITS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>G-CSET-DIGITS:CAPS</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">The set of digits.
Used for specifying valid identifier characters in &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScannerConfig&quot; title=&quot;GScannerConfig&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScannerConfig&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CSET_DIGITS &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CSET_LATINC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>G-CSET-LATINC:CAPS</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">The set of uppercase ISO 8859-1 alphabet characters which are 
not ASCII characters. 
Used for specifying valid identifier characters in &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScannerConfig&quot; title=&quot;GScannerConfig&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScannerConfig&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CSET_LATINC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CSET_LATINS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>G-CSET-LATINS:CAPS</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">The set of lowercase ISO 8859-1 alphabet characters which are 
not ASCII characters. 
Used for specifying valid identifier characters in &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GScannerConfig&quot; title=&quot;GScannerConfig&quot;&gt;&lt;span class=&quot;type&quot;&gt;GScannerConfig&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CSET_LATINS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TOKEN_EOF</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GTokenType</Anchor>
  <NodeRef refid="967"/>
  <Declaration type="html">&lt;pre&gt;G_TOKEN_EOF&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTokenType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TOKEN_LEFT_PAREN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GTokenType</Anchor>
  <NodeRef refid="967"/>
  <Declaration type="html">&lt;pre&gt;G_TOKEN_LEFT_PAREN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTokenType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TOKEN_RIGHT_PAREN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GTokenType</Anchor>
  <NodeRef refid="967"/>
  <Declaration type="html">&lt;pre&gt;G_TOKEN_RIGHT_PAREN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTokenType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TOKEN_LEFT_CURLY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GTokenType</Anchor>
  <NodeRef refid="967"/>
  <Declaration type="html">&lt;pre&gt;G_TOKEN_LEFT_CURLY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTokenType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TOKEN_RIGHT_CURLY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GTokenType</Anchor>
  <NodeRef refid="967"/>
  <Declaration type="html">&lt;pre&gt;G_TOKEN_RIGHT_CURLY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTokenType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTokenType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GTokenType</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">The possible types of token returned from each &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#g-scanner-get-next-token&quot; title=&quot;g_scanner_get_next_token ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_scanner_get_next_token()&lt;/code&gt;&lt;/a&gt; call.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_TOKEN_EOF = 0,
    G_TOKEN_LEFT_PAREN = '(',
    G_TOKEN_RIGHT_PAREN = ')',
    G_TOKEN_LEFT_CURLY = '{
    ',
    G_TOKEN_RIGHT_CURLY = '
}',
    G_TOKEN_LEFT_BRACE = '[',
    G_TOKEN_RIGHT_BRACE = ']',
    G_TOKEN_EQUAL_SIGN = '=',
    G_TOKEN_COMMA = ',
    ',
    G_TOKEN_NONE = 256,
    G_TOKEN_ERROR,
    G_TOKEN_CHAR,
    G_TOKEN_BINARY,
    G_TOKEN_OCTAL,
    G_TOKEN_INT,
    G_TOKEN_HEX,
    G_TOKEN_FLOAT,
    G_TOKEN_STRING,
    G_TOKEN_SYMBOL,
    G_TOKEN_IDENTIFIER,
    G_TOKEN_IDENTIFIER_NULL,
    G_TOKEN_COMMENT_SINGLE,
    G_TOKEN_COMMENT_MULTI,
    G_TOKEN_LAST 
} GTokenType;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTokenValue</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GTokenValue</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">A union holding the value of the token.</Abstract>
  <Declaration type="html">&lt;pre&gt;union GTokenValue {
    gpointer v_symbol;
    gchar *v_identifier;
    gulong v_binary;
    gulong v_octal;
    gulong v_int;
    guint64 v_int64;
    gdouble v_float;
    gulong v_hex;
    gchar *v_string;
    gchar *v_comment;
    guchar v_char;
    guint v_error;
};
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ERR_UNKNOWN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GErrorType</Anchor>
  <NodeRef refid="969"/>
  <Declaration type="html">&lt;pre&gt;G_ERR_UNKNOWN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GErrorType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ERR_UNEXP_EOF</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GErrorType</Anchor>
  <NodeRef refid="969"/>
  <Declaration type="html">&lt;pre&gt;G_ERR_UNEXP_EOF&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GErrorType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ERR_UNEXP_EOF_IN_STRING</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GErrorType</Anchor>
  <NodeRef refid="969"/>
  <Declaration type="html">&lt;pre&gt;G_ERR_UNEXP_EOF_IN_STRING&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GErrorType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ERR_UNEXP_EOF_IN_COMMENT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GErrorType</Anchor>
  <NodeRef refid="969"/>
  <Declaration type="html">&lt;pre&gt;G_ERR_UNEXP_EOF_IN_COMMENT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GErrorType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ERR_NON_DIGIT_IN_CONST</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GErrorType</Anchor>
  <NodeRef refid="969"/>
  <Declaration type="html">&lt;pre&gt;G_ERR_NON_DIGIT_IN_CONST&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GErrorType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ERR_DIGIT_RADIX</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GErrorType</Anchor>
  <NodeRef refid="969"/>
  <Declaration type="html">&lt;pre&gt;G_ERR_DIGIT_RADIX&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GErrorType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ERR_FLOAT_RADIX</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GErrorType</Anchor>
  <NodeRef refid="969"/>
  <Declaration type="html">&lt;pre&gt;G_ERR_FLOAT_RADIX&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GErrorType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ERR_FLOAT_MALFORMED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GErrorType</Anchor>
  <NodeRef refid="969"/>
  <Declaration type="html">&lt;pre&gt;G_ERR_FLOAT_MALFORMED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GErrorType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GErrorType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Lexical-Scanner.html</Path>
  <Anchor>GErrorType</Anchor>
  <NodeRef refid="41"/>
  <Abstract type="html">The possible errors, used in the &lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;v_error&lt;/code&gt;&lt;/em&gt; field
of &lt;a class=&quot;link&quot; href=&quot;glib-Lexical-Scanner.html#GTokenValue&quot; title=&quot;union GTokenValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTokenValue&lt;/span&gt;&lt;/a&gt;, when the token is a &lt;span class=&quot;type&quot;&gt;G_TOKEN_ERROR&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_ERR_UNKNOWN,
    G_ERR_UNEXP_EOF,
    G_ERR_UNEXP_EOF_IN_STRING,
    G_ERR_UNEXP_EOF_IN_COMMENT,
    G_ERR_NON_DIGIT_IN_CONST,
    G_ERR_DIGIT_RADIX,
    G_ERR_FLOAT_RADIX,
    G_ERR_FLOAT_MALFORMED 
} GErrorType;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCompletion</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>GCompletion</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">The data structure used for automatic completion.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GList* items;
    GCompletionFunc func;
    gchar* prefix;
    GList* cache;
    GCompletionStrncmpFunc strncmp_func;
} GCompletion;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_completion_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>g-completion-new</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; title=&quot;GCompletion&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompletion&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; href=&quot;GCompletion&quot; title=&quot;link&quot;&gt;GCompletion&lt;/a&gt;* g_completion_new (
    &lt;a class=&quot;glib-Automatic-String-Completion.html#GCompletionFunc&quot; href=&quot;GCompletionFunc ()&quot; title=&gt;GCompletionFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCompletionFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>GCompletionFunc</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">Specifies the type of the function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#g-completion-new&quot; title=&quot;g_completion_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_completion_new()&lt;/code&gt;&lt;/a&gt;.
It should return the string corresponding to the given target item.
This is used when you use data structures as &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; title=&quot;GCompletion&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompletion&lt;/span&gt;&lt;/a&gt; items.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* (
    *GCompletionFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; );&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_completion_add_items</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>g-completion-add-items</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">Adds items to the &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; title=&quot;GCompletion&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompletion&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_completion_add_items (
    &lt;a class=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; href=&quot;GCompletion&quot; title=&quot;link&quot;&gt;GCompletion&lt;/a&gt; *cmp,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *items);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_completion_remove_items</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>g-completion-remove-items</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">Removes items from a &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; title=&quot;GCompletion&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompletion&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_completion_remove_items (
    &lt;a class=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; href=&quot;GCompletion&quot; title=&quot;link&quot;&gt;GCompletion&lt;/a&gt; *cmp,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *items);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_completion_clear_items</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>g-completion-clear-items</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">Removes all items from the &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; title=&quot;GCompletion&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompletion&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_completion_clear_items (
    &lt;a class=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; href=&quot;GCompletion&quot; title=&gt;GCompletion&lt;/a&gt; *cmp);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_completion_complete</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>g-completion-complete</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">Attempts to complete the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/em&gt; using the &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; title=&quot;GCompletion&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompletion&lt;/span&gt;&lt;/a&gt; target items.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_completion_complete (
    &lt;a class=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; href=&quot;GCompletion&quot; title=&quot;link&quot;&gt;GCompletion&lt;/a&gt; *cmp,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *prefix,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **new_prefix);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_completion_complete_utf8</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>g-completion-complete-utf8</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">Attempts to complete the string &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;prefix&lt;/code&gt;&lt;/em&gt; using the &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; title=&quot;GCompletion&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompletion&lt;/span&gt;&lt;/a&gt; target items.
In contrast to &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#g-completion-complete&quot; title=&quot;g_completion_complete ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_completion_complete()&lt;/code&gt;&lt;/a&gt;, this function returns the largest common
prefix that is a valid UTF-8 string, omitting a possible common partial 
character.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_completion_complete_utf8 (
    &lt;a class=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; href=&quot;GCompletion&quot; title=&quot;link&quot;&gt;GCompletion&lt;/a&gt; *cmp,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *prefix,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **new_prefix);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_completion_set_compare</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>g-completion-set-compare</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">Sets the function to use for string comparisons. The default
string comparison function is &lt;code class=&quot;function&quot;&gt;strncmp()&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_completion_set_compare (
    &lt;a class=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; href=&quot;GCompletion&quot; title=&quot;link&quot;&gt;GCompletion&lt;/a&gt; *cmp,
    &lt;a class=&quot;glib-Automatic-String-Completion.html#GCompletionStrncmpFunc&quot; href=&quot;GCompletionStrncmpFunc ()&quot; title=&gt;GCompletionStrncmpFunc&lt;/a&gt; strncmp_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCompletionStrncmpFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>GCompletionStrncmpFunc</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">Specifies the type of the function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#g-completion-set-compare&quot; title=&quot;g_completion_set_compare ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_completion_set_compare()&lt;/code&gt;&lt;/a&gt;.
This is used when you use strings as &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; title=&quot;GCompletion&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompletion&lt;/span&gt;&lt;/a&gt; items.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; (
    *GCompletionStrncmpFunc) (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *s1,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *s2,
    gsize n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_completion_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Automatic-String-Completion.html</Path>
  <Anchor>g-completion-free</Anchor>
  <NodeRef refid="42"/>
  <Abstract type="html">Frees all memory used by the &lt;a class=&quot;link&quot; href=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; title=&quot;GCompletion&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompletion&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_completion_free (
    &lt;a class=&quot;glib-Automatic-String-Completion.html#GCompletion&quot; href=&quot;GCompletion&quot; title=&gt;GCompletion&lt;/a&gt; *cmp);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTimer</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Timers.html</Path>
  <Anchor>GTimer</Anchor>
  <NodeRef refid="43"/>
  <Abstract type="html">Opaque datatype that records a start time. </Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GTimer GTimer;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timer_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Timers.html</Path>
  <Anchor>g-timer-new</Anchor>
  <NodeRef refid="43"/>
  <Abstract type="html">Creates a new timer, and starts timing (i.e. &lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#g-timer-start&quot; title=&quot;g_timer_start ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timer_start()&lt;/code&gt;&lt;/a&gt; is implicitly
called for you).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Timers.html#GTimer&quot; href=&quot;GTimer&quot; title=&gt;GTimer&lt;/a&gt;* g_timer_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timer_start</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Timers.html</Path>
  <Anchor>g-timer-start</Anchor>
  <NodeRef refid="43"/>
  <Abstract type="html">Marks a start time, so that future calls to &lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#g-timer-elapsed&quot; title=&quot;g_timer_elapsed ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timer_elapsed()&lt;/code&gt;&lt;/a&gt; will report the
time since &lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#g-timer-start&quot; title=&quot;g_timer_start ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timer_start()&lt;/code&gt;&lt;/a&gt; was called. &lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#g-timer-new&quot; title=&quot;g_timer_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timer_new()&lt;/code&gt;&lt;/a&gt; automatically marks the
start time, so no need to call &lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#g-timer-start&quot; title=&quot;g_timer_start ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timer_start()&lt;/code&gt;&lt;/a&gt; immediately after creating the
timer.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_timer_start (
    &lt;a class=&quot;glib-Timers.html#GTimer&quot; href=&quot;GTimer&quot; title=&gt;GTimer&lt;/a&gt; *timer);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timer_stop</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Timers.html</Path>
  <Anchor>g-timer-stop</Anchor>
  <NodeRef refid="43"/>
  <Abstract type="html">Marks an end time, so calls to &lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#g-timer-elapsed&quot; title=&quot;g_timer_elapsed ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timer_elapsed()&lt;/code&gt;&lt;/a&gt; will return the difference
between this end time and the start time.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_timer_stop (
    &lt;a class=&quot;glib-Timers.html#GTimer&quot; href=&quot;GTimer&quot; title=&gt;GTimer&lt;/a&gt; *timer);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timer_continue</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Timers.html</Path>
  <Anchor>g-timer-continue</Anchor>
  <NodeRef refid="43"/>
  <Abstract type="html">Resumes a timer that has previously been stopped with &lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#g-timer-stop&quot; title=&quot;g_timer_stop ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timer_stop()&lt;/code&gt;&lt;/a&gt;.
&lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#g-timer-stop&quot; title=&quot;g_timer_stop ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timer_stop()&lt;/code&gt;&lt;/a&gt; must be called before using this function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_timer_continue (
    &lt;a class=&quot;glib-Timers.html#GTimer&quot; href=&quot;GTimer&quot; title=&gt;GTimer&lt;/a&gt; *timer);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timer_elapsed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Timers.html</Path>
  <Anchor>g-timer-elapsed</Anchor>
  <NodeRef refid="43"/>
  <Abstract type="html">If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;timer&lt;/code&gt;&lt;/em&gt; has been started but not stopped, obtains the time since the timer was
started. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;timer&lt;/code&gt;&lt;/em&gt; has been stopped, obtains the elapsed time between the time
it was started and the time it was stopped. The return value is the number of
seconds elapsed, including any fractional part. The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;microseconds&lt;/code&gt;&lt;/em&gt;
out parameter is essentially useless.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&quot;link&quot;&gt;gdouble&lt;/a&gt; g_timer_elapsed (
    &lt;a class=&quot;glib-Timers.html#GTimer&quot; href=&quot;GTimer&quot; title=&quot;link&quot;&gt;GTimer&lt;/a&gt; *timer,
    &lt;a class=&quot;glib-Basic-Types.html#gulong&quot; href=&quot;gulong&quot; title=&gt;gulong&lt;/a&gt; *microseconds);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timer_reset</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Timers.html</Path>
  <Anchor>g-timer-reset</Anchor>
  <NodeRef refid="43"/>
  <Abstract type="html">This function is useless; it's fine to call &lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#g-timer-start&quot; title=&quot;g_timer_start ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timer_start()&lt;/code&gt;&lt;/a&gt; on an
already-started timer to reset the start time, so &lt;a class=&quot;link&quot; href=&quot;glib-Timers.html#g-timer-reset&quot; title=&quot;g_timer_reset ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_timer_reset()&lt;/code&gt;&lt;/a&gt; serves no
purpose.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_timer_reset (
    &lt;a class=&quot;glib-Timers.html#GTimer&quot; href=&quot;GTimer&quot; title=&gt;GTimer&lt;/a&gt; *timer);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_timer_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Timers.html</Path>
  <Anchor>g-timer-destroy</Anchor>
  <NodeRef refid="43"/>
  <Abstract type="html">Destroys a timer, freeing associated resources.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_timer_destroy (
    &lt;a class=&quot;glib-Timers.html#GTimer&quot; href=&quot;GTimer&quot; title=&gt;GTimer&lt;/a&gt; *timer);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_FORK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_FORK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_READ</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_READ&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_CHDIR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_CHDIR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_ACCES</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_ACCES&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_PERM</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_PERM&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_2BIG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_2BIG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_NOEXEC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_NOEXEC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_NAMETOOLONG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_NAMETOOLONG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_NOENT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_NOENT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_NOMEM</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_NOMEM&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_NOTDIR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_NOTDIR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_LOOP</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_LOOP&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_TXTBUSY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_TXTBUSY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_IO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_IO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_NFILE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_NFILE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_MFILE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_MFILE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_INVAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_INVAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_ISDIR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_ISDIR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_LIBBAD</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_LIBBAD&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR_FAILED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="989"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_ERROR_FAILED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSpawnError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnError</Anchor>
  <NodeRef refid="44"/>
  <Abstract type="html">Error codes returned by spawning processes.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_SPAWN_ERROR_FORK,
    G_SPAWN_ERROR_READ,
    G_SPAWN_ERROR_CHDIR,
    G_SPAWN_ERROR_ACCES,
    G_SPAWN_ERROR_PERM,
    G_SPAWN_ERROR_2BIG,
    G_SPAWN_ERROR_NOEXEC,
    G_SPAWN_ERROR_NAMETOOLONG,
    G_SPAWN_ERROR_NOENT,
    G_SPAWN_ERROR_NOMEM,
    G_SPAWN_ERROR_NOTDIR,
    G_SPAWN_ERROR_LOOP,
    G_SPAWN_ERROR_TXTBUSY,
    G_SPAWN_ERROR_IO,
    G_SPAWN_ERROR_NFILE,
    G_SPAWN_ERROR_MFILE,
    G_SPAWN_ERROR_INVAL,
    G_SPAWN_ERROR_ISDIR,
    G_SPAWN_ERROR_LIBBAD,
    G_SPAWN_ERROR_FAILED  
} GSpawnError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>G-SPAWN-ERROR:CAPS</Anchor>
  <NodeRef refid="44"/>
  <Abstract type="html">Error domain for spawning processes. Errors in this domain will
be from the &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#GSpawnError&quot; title=&quot;enum GSpawnError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSpawnError&lt;/span&gt;&lt;/a&gt; enumeration. See &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; for information on
error domains.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_SPAWN_ERROR g_spawn_error_quark ()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_LEAVE_DESCRIPTORS_OPEN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnFlags</Anchor>
  <NodeRef refid="991"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_LEAVE_DESCRIPTORS_OPEN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_DO_NOT_REAP_CHILD</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnFlags</Anchor>
  <NodeRef refid="991"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_DO_NOT_REAP_CHILD&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_SEARCH_PATH</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnFlags</Anchor>
  <NodeRef refid="991"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_SEARCH_PATH&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_STDOUT_TO_DEV_NULL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnFlags</Anchor>
  <NodeRef refid="991"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_STDOUT_TO_DEV_NULL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_STDERR_TO_DEV_NULL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnFlags</Anchor>
  <NodeRef refid="991"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_STDERR_TO_DEV_NULL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_CHILD_INHERITS_STDIN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnFlags</Anchor>
  <NodeRef refid="991"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_CHILD_INHERITS_STDIN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SPAWN_FILE_AND_ARGV_ZERO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnFlags</Anchor>
  <NodeRef refid="991"/>
  <Declaration type="html">&lt;pre&gt;G_SPAWN_FILE_AND_ARGV_ZERO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSpawnFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSpawnFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnFlags</Anchor>
  <NodeRef refid="44"/>
  <Abstract type="html">Flags passed to &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-sync&quot; title=&quot;g_spawn_sync ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_sync()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async&quot; title=&quot;g_spawn_async ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async-with-pipes&quot; title=&quot;g_spawn_async_with_pipes ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async_with_pipes()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 &amp;lt;&amp;lt; 0,
    G_SPAWN_DO_NOT_REAP_CHILD = 1 &amp;lt;&amp;lt; 1,
    G_SPAWN_SEARCH_PATH = 1 &amp;lt;&amp;lt; 2,
    G_SPAWN_STDOUT_TO_DEV_NULL = 1 &amp;lt;&amp;lt; 3,
    G_SPAWN_STDERR_TO_DEV_NULL = 1 &amp;lt;&amp;lt; 4,
    G_SPAWN_CHILD_INHERITS_STDIN = 1 &amp;lt;&amp;lt; 5,
    G_SPAWN_FILE_AND_ARGV_ZERO = 1 &amp;lt;&amp;lt; 6 
} GSpawnFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSpawnChildSetupFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>GSpawnChildSetupFunc</Anchor>
  <NodeRef refid="44"/>
  <Abstract type="html">Specifies the type of the setup function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async&quot; title=&quot;g_spawn_async ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async()&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-sync&quot; title=&quot;g_spawn_sync ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_sync()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async-with-pipes&quot; title=&quot;g_spawn_async_with_pipes ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async_with_pipes()&lt;/code&gt;&lt;/a&gt;. On POSIX platforms it
is called in the child after GLib has performed all the setup it plans
to perform but before calling &lt;code class=&quot;function&quot;&gt;exec()&lt;/code&gt;. On POSIX actions taken in this 
function will thus only affect the child, not the parent.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GSpawnChildSetupFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_spawn_async_with_pipes</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>g-spawn-async-with-pipes</Anchor>
  <NodeRef refid="44"/>
  <Abstract type="html">Executes a child program asynchronously (your program will not
block waiting for the child to exit). The child program is
specified by the only argument that must be provided, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;argv&lt;/code&gt;&lt;/em&gt;. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;argv&lt;/code&gt;&lt;/em&gt;
should be a &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;-terminated array of strings, to be passed as the
argument vector for the child. The first string in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;argv&lt;/code&gt;&lt;/em&gt; is of
course the name of the program to execute. By default, the name of
the program must be a full path; the &lt;code class=&quot;envar&quot;&gt;PATH&lt;/code&gt; shell variable 
will only be searched if you pass the &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SPAWN_SEARCH_PATH&lt;/code&gt;&lt;/a&gt; flag.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_spawn_async_with_pipes (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *working_directory,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **argv,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **envp,
    &lt;a class=&quot;glib-Spawning-Processes.html#GSpawnFlags&quot; href=&quot;enum GSpawnFlags&quot; title=&quot;link&quot;&gt;GSpawnFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Spawning-Processes.html#GSpawnChildSetupFunc&quot; href=&quot;GSpawnChildSetupFunc ()&quot; title=&quot;link&quot;&gt;GSpawnChildSetupFunc&lt;/a&gt; child_setup,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; user_data,
    GPid *child_pid,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *standard_input,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *standard_output,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *standard_error,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_spawn_async</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>g-spawn-async</Anchor>
  <NodeRef refid="44"/>
  <Abstract type="html">See &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async-with-pipes&quot; title=&quot;g_spawn_async_with_pipes ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async_with_pipes()&lt;/code&gt;&lt;/a&gt; for a full description; this function
simply calls the &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async-with-pipes&quot; title=&quot;g_spawn_async_with_pipes ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async_with_pipes()&lt;/code&gt;&lt;/a&gt; without any pipes.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_spawn_async (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *working_directory,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **argv,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **envp,
    &lt;a class=&quot;glib-Spawning-Processes.html#GSpawnFlags&quot; href=&quot;enum GSpawnFlags&quot; title=&quot;link&quot;&gt;GSpawnFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Spawning-Processes.html#GSpawnChildSetupFunc&quot; href=&quot;GSpawnChildSetupFunc ()&quot; title=&quot;link&quot;&gt;GSpawnChildSetupFunc&lt;/a&gt; child_setup,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; user_data,
    GPid *child_pid,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_spawn_sync</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>g-spawn-sync</Anchor>
  <NodeRef refid="44"/>
  <Abstract type="html">Executes a child synchronously (waits for the child to exit before returning).
All output from the child is stored in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;standard_output&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;standard_error&lt;/code&gt;&lt;/em&gt;,
if those parameters are non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;. Note that you must set the  
&lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#G-SPAWN-STDOUT-TO-DEV-NULL:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SPAWN_STDOUT_TO_DEV_NULL&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#G-SPAWN-STDERR-TO-DEV-NULL:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SPAWN_STDERR_TO_DEV_NULL&lt;/code&gt;&lt;/a&gt; flags when
passing &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;standard_output&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;standard_error&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;exit_status&lt;/code&gt;&lt;/em&gt; is non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, the exit status of the child is stored
there as it would be returned by &lt;code class=&quot;function&quot;&gt;waitpid()&lt;/code&gt;; standard UNIX macros such 
as &lt;code class=&quot;function&quot;&gt;WIFEXITED()&lt;/code&gt; and &lt;code class=&quot;function&quot;&gt;WEXITSTATUS()&lt;/code&gt; must be used to evaluate the exit status.
Note that this function call &lt;code class=&quot;function&quot;&gt;waitpid()&lt;/code&gt; even if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;exit_status&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, and
does not accept the &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#G-SPAWN-DO-NOT-REAP-CHILD:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SPAWN_DO_NOT_REAP_CHILD&lt;/code&gt;&lt;/a&gt; flag.
If an error occurs, no data is returned in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;standard_output&lt;/code&gt;&lt;/em&gt;, 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;standard_error&lt;/code&gt;&lt;/em&gt;, or &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;exit_status&lt;/code&gt;&lt;/em&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_spawn_sync (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *working_directory,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **argv,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **envp,
    &lt;a class=&quot;glib-Spawning-Processes.html#GSpawnFlags&quot; href=&quot;enum GSpawnFlags&quot; title=&quot;link&quot;&gt;GSpawnFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Spawning-Processes.html#GSpawnChildSetupFunc&quot; href=&quot;GSpawnChildSetupFunc ()&quot; title=&quot;link&quot;&gt;GSpawnChildSetupFunc&lt;/a&gt; child_setup,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; user_data,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **standard_output,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **standard_error,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *exit_status,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_spawn_command_line_async</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>g-spawn-command-line-async</Anchor>
  <NodeRef refid="44"/>
  <Abstract type="html">A simple version of &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async&quot; title=&quot;g_spawn_async ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async()&lt;/code&gt;&lt;/a&gt; that parses a command line with
&lt;a class=&quot;link&quot; href=&quot;glib-Shell-related-Utilities.html#g-shell-parse-argv&quot; title=&quot;g_shell_parse_argv ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_shell_parse_argv()&lt;/code&gt;&lt;/a&gt; and passes it to &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async&quot; title=&quot;g_spawn_async ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async()&lt;/code&gt;&lt;/a&gt;. Runs a
command line in the background. Unlike &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async&quot; title=&quot;g_spawn_async ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async()&lt;/code&gt;&lt;/a&gt;, the
&lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SPAWN_SEARCH_PATH&lt;/code&gt;&lt;/a&gt; flag is enabled, other flags are not. Note
that &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SPAWN_SEARCH_PATH&lt;/code&gt;&lt;/a&gt; can have security implications, so
consider using &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async&quot; title=&quot;g_spawn_async ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async()&lt;/code&gt;&lt;/a&gt; directly if appropriate. Possible
errors are those from &lt;a class=&quot;link&quot; href=&quot;glib-Shell-related-Utilities.html#g-shell-parse-argv&quot; title=&quot;g_shell_parse_argv ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_shell_parse_argv()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-async&quot; title=&quot;g_spawn_async ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_async()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_spawn_command_line_async (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *command_line,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_spawn_command_line_sync</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>g-spawn-command-line-sync</Anchor>
  <NodeRef refid="44"/>
  <Abstract type="html">A simple version of &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-sync&quot; title=&quot;g_spawn_sync ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_sync()&lt;/code&gt;&lt;/a&gt; with little-used parameters
removed, taking a command line instead of an argument vector.  See
&lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-sync&quot; title=&quot;g_spawn_sync ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_sync()&lt;/code&gt;&lt;/a&gt; for full details. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;command_line&lt;/code&gt;&lt;/em&gt; will be parsed by
&lt;a class=&quot;link&quot; href=&quot;glib-Shell-related-Utilities.html#g-shell-parse-argv&quot; title=&quot;g_shell_parse_argv ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_shell_parse_argv()&lt;/code&gt;&lt;/a&gt;. Unlike &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-sync&quot; title=&quot;g_spawn_sync ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_sync()&lt;/code&gt;&lt;/a&gt;, the &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SPAWN_SEARCH_PATH&lt;/code&gt;&lt;/a&gt; flag
is enabled. Note that &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#G-SPAWN-SEARCH-PATH:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SPAWN_SEARCH_PATH&lt;/code&gt;&lt;/a&gt; can have security
implications, so consider using &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-sync&quot; title=&quot;g_spawn_sync ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_sync()&lt;/code&gt;&lt;/a&gt; directly if
appropriate. Possible errors are those from &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-sync&quot; title=&quot;g_spawn_sync ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_sync()&lt;/code&gt;&lt;/a&gt; and those
from &lt;a class=&quot;link&quot; href=&quot;glib-Shell-related-Utilities.html#g-shell-parse-argv&quot; title=&quot;g_shell_parse_argv ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_shell_parse_argv()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_spawn_command_line_sync (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *command_line,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **standard_output,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **standard_error,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *exit_status,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_spawn_close_pid</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Spawning-Processes.html</Path>
  <Anchor>g-spawn-close-pid</Anchor>
  <NodeRef refid="44"/>
  <Abstract type="html">On some platforms, notably Windows, the &lt;span class=&quot;type&quot;&gt;GPid&lt;/span&gt; type represents a resource
which must be closed to prevent resource leaking. &lt;a class=&quot;link&quot; href=&quot;glib-Spawning-Processes.html#g-spawn-close-pid&quot; title=&quot;g_spawn_close_pid ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_spawn_close_pid()&lt;/code&gt;&lt;/a&gt;
is provided for this purpose. It should be used on all platforms, even
though it doesn't do anything under UNIX.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_spawn_close_pid (
    GPid pid);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_EXIST</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_EXIST&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_ISDIR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_ISDIR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_ACCES</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_ACCES&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_NAMETOOLONG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_NAMETOOLONG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_NOENT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_NOENT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_NOTDIR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_NOTDIR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_NXIO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_NXIO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_NODEV</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_NODEV&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_ROFS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_ROFS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_TXTBSY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_TXTBSY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_FAULT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_FAULT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_LOOP</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_LOOP&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_NOSPC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_NOSPC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_NOMEM</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_NOMEM&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_MFILE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_MFILE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_NFILE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_NFILE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_BADF</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_BADF&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_INVAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_INVAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_PIPE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_PIPE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_AGAIN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_AGAIN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_INTR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_INTR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_IO</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_IO&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_PERM</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_PERM&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_NOSYS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_NOSYS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR_FAILED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="999"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_ERROR_FAILED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GFileError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileError</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Values corresponding to &lt;code class=&quot;literal&quot;&gt;errno&lt;/code&gt; codes returned from file operations
on UNIX. Unlike &lt;code class=&quot;literal&quot;&gt;errno&lt;/code&gt; codes, &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GFileError&quot; title=&quot;enum GFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFileError&lt;/span&gt;&lt;/a&gt; values are available on 
all systems, even Windows. The exact meaning of each code depends on what
sort of file operation you were performing; the UNIX documentation
gives more details. The following error code descriptions come 
from the GNU C Library manual, and are under the copyright
of that manual.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_FILE_ERROR_EXIST,
    G_FILE_ERROR_ISDIR,
    G_FILE_ERROR_ACCES,
    G_FILE_ERROR_NAMETOOLONG,
    G_FILE_ERROR_NOENT,
    G_FILE_ERROR_NOTDIR,
    G_FILE_ERROR_NXIO,
    G_FILE_ERROR_NODEV,
    G_FILE_ERROR_ROFS,
    G_FILE_ERROR_TXTBSY,
    G_FILE_ERROR_FAULT,
    G_FILE_ERROR_LOOP,
    G_FILE_ERROR_NOSPC,
    G_FILE_ERROR_NOMEM,
    G_FILE_ERROR_MFILE,
    G_FILE_ERROR_NFILE,
    G_FILE_ERROR_BADF,
    G_FILE_ERROR_INVAL,
    G_FILE_ERROR_PIPE,
    G_FILE_ERROR_AGAIN,
    G_FILE_ERROR_INTR,
    G_FILE_ERROR_IO,
    G_FILE_ERROR_PERM,
    G_FILE_ERROR_NOSYS,
    G_FILE_ERROR_FAILED 
} GFileError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>G-FILE-ERROR:CAPS</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Error domain for file operations. Errors in this domain will
be from the &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GFileError&quot; title=&quot;enum GFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFileError&lt;/span&gt;&lt;/a&gt; enumeration. See &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; for information on 
error domains.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_FILE_ERROR g_file_error_quark ()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_TEST_IS_REGULAR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileTest</Anchor>
  <NodeRef refid="1001"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_TEST_IS_REGULAR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileTest</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_TEST_IS_SYMLINK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileTest</Anchor>
  <NodeRef refid="1001"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_TEST_IS_SYMLINK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileTest</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_TEST_IS_DIR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileTest</Anchor>
  <NodeRef refid="1001"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_TEST_IS_DIR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileTest</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_TEST_IS_EXECUTABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileTest</Anchor>
  <NodeRef refid="1001"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_TEST_IS_EXECUTABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileTest</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FILE_TEST_EXISTS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileTest</Anchor>
  <NodeRef refid="1001"/>
  <Declaration type="html">&lt;pre&gt;G_FILE_TEST_EXISTS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GFileTest</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GFileTest</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GFileTest</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A test to perform on a file using &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#g-file-test&quot; title=&quot;g_file_test ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_file_test()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_FILE_TEST_IS_REGULAR = 1 &amp;lt;&amp;lt; 0,
    G_FILE_TEST_IS_SYMLINK = 1 &amp;lt;&amp;lt; 1,
    G_FILE_TEST_IS_DIR = 1 &amp;lt;&amp;lt; 2,
    G_FILE_TEST_IS_EXECUTABLE = 1 &amp;lt;&amp;lt; 3,
    G_FILE_TEST_EXISTS = 1 &amp;lt;&amp;lt; 4 
} GFileTest;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_file_error_from_errno</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-file-error-from-errno</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Gets a &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GFileError&quot; title=&quot;enum GFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFileError&lt;/span&gt;&lt;/a&gt; constant based on the passed-in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/em&gt;.
For example, if you pass in &lt;code class=&quot;literal&quot;&gt;EEXIST&lt;/code&gt; this function returns
&lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#G-FILE-ERROR-EXIST:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_FILE_ERROR_EXIST&lt;/span&gt;&lt;/a&gt;. Unlike &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/em&gt; values, you can portably
assume that all &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GFileError&quot; title=&quot;enum GFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFileError&lt;/span&gt;&lt;/a&gt; values will exist.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-File-Utilities.html#GFileError&quot; href=&quot;enum GFileError&quot; title=&quot;link&quot;&gt;GFileError&lt;/a&gt; g_file_error_from_errno (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; err_no);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_file_get_contents</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-file-get-contents</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Reads an entire file into allocated memory, with good error
checking. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_file_get_contents (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **contents,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_file_set_contents</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-file-set-contents</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Writes all of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;contents&lt;/code&gt;&lt;/em&gt; to a file named &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/em&gt;, with good error checking.
If a file called &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/em&gt; already exists it will be overwritten.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_file_set_contents (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *contents,
    gssize length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_file_test</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-file-test</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if any of the tests in the bitfield &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/em&gt; are
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;. For example, &lt;code class=&quot;literal&quot;&gt;(G_FILE_TEST_EXISTS | 
G_FILE_TEST_IS_DIR)&lt;/code&gt; will return &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the file exists; 
the check whether it's a directory doesn't matter since the existence 
test is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;. With the current set of available tests, there's no point
passing in more than one test at a time.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_file_test (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    &lt;a class=&quot;glib-File-Utilities.html#GFileTest&quot; href=&quot;enum GFileTest&quot; title=&gt;GFileTest&lt;/a&gt; test);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mkstemp</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-mkstemp</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Opens a temporary file. See the &lt;code class=&quot;function&quot;&gt;mkstemp()&lt;/code&gt; documentation
on most UNIX-like systems. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_mkstemp (
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *tmpl);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_file_open_tmp</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-file-open-tmp</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Opens a file for writing in the preferred directory for temporary
files (as returned by &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-get-tmp-dir&quot; title=&quot;g_get_tmp_dir ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_tmp_dir()&lt;/code&gt;&lt;/a&gt;). </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_file_open_tmp (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *tmpl,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **name_used,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_file_read_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-file-read-link</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Reads the contents of the symbolic link &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/em&gt; like the POSIX
&lt;code class=&quot;function&quot;&gt;readlink()&lt;/code&gt; function.  The returned string is in the encoding used
for filenames. Use &lt;a class=&quot;link&quot; href=&quot;glib-Character-Set-Conversion.html#g-filename-to-utf8&quot; title=&quot;g_filename_to_utf8 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_filename_to_utf8()&lt;/code&gt;&lt;/a&gt; to convert it to UTF-8.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_file_read_link (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mkdir_with_parents</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-mkdir-with-parents</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Create a directory if it doesn't already exist. Create intermediate
parent directories as needed, too.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_mkdir_with_parents (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *pathname,
    int mode);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDir</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GDir</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">An opaque structure representing an opened directory.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GDir GDir;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dir_open</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-dir-open</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Opens a directory for reading. The names of the files in the
directory can then be retrieved using &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#g-dir-read-name&quot; title=&quot;g_dir_read_name ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_dir_read_name()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-File-Utilities.html#GDir&quot; href=&quot;GDir&quot; title=&quot;link&quot;&gt;GDir&lt;/a&gt;* g_dir_open (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *path,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dir_read_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-dir-read-name</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Retrieves the name of the next entry in the directory.  The '.' and
'..' entries are omitted. On Windows, the returned name is in
UTF-8. On Unix, it is in the on-disk encoding.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_dir_read_name (
    &lt;a class=&quot;glib-File-Utilities.html#GDir&quot; href=&quot;GDir&quot; title=&gt;GDir&lt;/a&gt; *dir);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dir_rewind</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-dir-rewind</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Resets the given directory. The next call to &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#g-dir-read-name&quot; title=&quot;g_dir_read_name ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_dir_read_name()&lt;/code&gt;&lt;/a&gt;
will return the first entry again.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_dir_rewind (
    &lt;a class=&quot;glib-File-Utilities.html#GDir&quot; href=&quot;GDir&quot; title=&gt;GDir&lt;/a&gt; *dir);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dir_close</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-dir-close</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Closes the directory and deallocates all related resources.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_dir_close (
    &lt;a class=&quot;glib-File-Utilities.html#GDir&quot; href=&quot;GDir&quot; title=&gt;GDir&lt;/a&gt; *dir);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMappedFile</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>GMappedFile</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GMappedFile&quot; title=&quot;GMappedFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMappedFile&lt;/span&gt;&lt;/a&gt; represents a file mapping created with
&lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#g-mapped-file-new&quot; title=&quot;g_mapped_file_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mapped_file_new()&lt;/code&gt;&lt;/a&gt;. It has only private members and should
not be accessed directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GMappedFile GMappedFile;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mapped_file_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-mapped-file-new</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Maps a file into memory. On UNIX, this is using the &lt;code class=&quot;function&quot;&gt;mmap()&lt;/code&gt; function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-File-Utilities.html#GMappedFile&quot; href=&quot;GMappedFile&quot; title=&quot;link&quot;&gt;GMappedFile&lt;/a&gt;* g_mapped_file_new (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; writable,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mapped_file_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-mapped-file-free</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Unmaps the buffer of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;file&lt;/code&gt;&lt;/em&gt; and frees it.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mapped_file_free (
    &lt;a class=&quot;glib-File-Utilities.html#GMappedFile&quot; href=&quot;GMappedFile&quot; title=&gt;GMappedFile&lt;/a&gt; *file);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mapped_file_get_length</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-mapped-file-get-length</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Returns the length of the contents of a &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GMappedFile&quot; title=&quot;GMappedFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMappedFile&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;gsize g_mapped_file_get_length (
    &lt;a class=&quot;glib-File-Utilities.html#GMappedFile&quot; href=&quot;GMappedFile&quot; title=&gt;GMappedFile&lt;/a&gt; *file);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mapped_file_get_contents</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-mapped-file-get-contents</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">Returns the contents of a &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GMappedFile&quot; title=&quot;GMappedFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMappedFile&lt;/span&gt;&lt;/a&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_mapped_file_get_contents (
    &lt;a class=&quot;glib-File-Utilities.html#GMappedFile&quot; href=&quot;GMappedFile&quot; title=&gt;GMappedFile&lt;/a&gt; *file);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_open</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-open</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;open()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;open()&lt;/code&gt; function is
used to convert a pathname into a file descriptor.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_open (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename,
    int flags,
    int mode);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rename</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-rename</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;rename()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;rename()&lt;/code&gt; function 
renames a file, moving it between directories if required.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_rename (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *oldfilename,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *newfilename);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mkdir</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-mkdir</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;mkdir()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;mkdir()&lt;/code&gt; function 
attempts to create a directory with the given name and permissions.
The mode argument is ignored on Windows.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_mkdir (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename,
    int mode);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_stat</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-stat</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;stat()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;stat()&lt;/code&gt; function
returns information about a file. On Windows the &lt;code class=&quot;function&quot;&gt;stat()&lt;/code&gt; function in
the C library checks only the FAT-style READONLY attribute and does
not look at the ACL at all. Thus on Windows the protection bits in
the st_mode field are a fabrication of little use.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_stat (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename,
    struct stat *buf);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_lstat</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-lstat</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;lstat()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;lstat()&lt;/code&gt; function is
like &lt;code class=&quot;function&quot;&gt;stat()&lt;/code&gt; except that in the case of symbolic links, it returns
information about the symbolic link itself and not the file that it
refers to. If the system does not support symbolic links &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#g-lstat&quot; title=&quot;g_lstat ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_lstat()&lt;/code&gt;&lt;/a&gt;
is identical to &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#g-stat&quot; title=&quot;g_stat ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_stat()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_lstat (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename,
    struct stat *buf);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_unlink</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-unlink</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;unlink()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;unlink()&lt;/code&gt; function 
deletes a name from the filesystem. If this was the last link to the 
file and no processes have it opened, the diskspace occupied by the
file is freed.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_unlink (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-remove</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;remove()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;remove()&lt;/code&gt; function
deletes a name from the filesystem.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_remove (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_rmdir</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-rmdir</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;rmdir()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;rmdir()&lt;/code&gt; function
deletes a directory from the filesystem.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_rmdir (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_fopen</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-fopen</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the stdio &lt;code class=&quot;function&quot;&gt;fopen()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;fopen()&lt;/code&gt; function
opens a file and associates a new stream with it.</Abstract>
  <Declaration type="html">&lt;pre&gt;FILE* g_fopen (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *mode);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_freopen</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-freopen</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;freopen()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;freopen()&lt;/code&gt; function
opens a file and associates it with an existing stream.</Abstract>
  <Declaration type="html">&lt;pre&gt;FILE* g_freopen (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *mode,
    FILE *stream);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_chmod</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-chmod</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;chmod()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;chmod()&lt;/code&gt; function is
used to set the permissions of a file system object.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_chmod (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename,
    int mode);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_access</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-access</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;access()&lt;/code&gt; function. This function is used to
test a pathname for one or several of read, write or execute
permissions, or just existence.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_access (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename,
    int mode);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_creat</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-creat</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;creat()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;creat()&lt;/code&gt; function is
used to convert a pathname into a file descriptor, creating a file
if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_creat (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename,
    int mode);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_chdir</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-chdir</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;chdir()&lt;/code&gt; function. The function changes the
current directory of the process to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_chdir (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *path);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_utime</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-File-Utilities.html</Path>
  <Anchor>g-utime</Anchor>
  <NodeRef refid="45"/>
  <Abstract type="html">A wrapper for the POSIX &lt;code class=&quot;function&quot;&gt;utime()&lt;/code&gt; function. The &lt;code class=&quot;function&quot;&gt;utime()&lt;/code&gt; function
sets the access and modification timestamps of a file.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_utime (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *filename,
    struct utimbuf *utb);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib/gstdio.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_URI_RESERVED_CHARS_ALLOWED_IN_PATH</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-URI-Functions.html</Path>
  <Anchor>G-URI-RESERVED-CHARS-ALLOWED-IN-PATH:CAPS</Anchor>
  <NodeRef refid="46"/>
  <Abstract type="html">Allowed characters in a path. Includes &quot;!$&amp;amp;'()*+,;=:@/&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_URI_RESERVED_CHARS_ALLOWED_IN_PATH G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-URI-Functions.html</Path>
  <Anchor>G-URI-RESERVED-CHARS-ALLOWED-IN-PATH-ELEMENT:CAPS</Anchor>
  <NodeRef refid="46"/>
  <Abstract type="html">Allowed characters in path elements. Includes &quot;!$&amp;amp;'()*+,;=:@&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-URI-Functions.html</Path>
  <Anchor>G-URI-RESERVED-CHARS-ALLOWED-IN-USERINFO:CAPS</Anchor>
  <NodeRef refid="46"/>
  <Abstract type="html">Allowed characters in userinfo as defined in RFC 3986. Includes &quot;!$&amp;amp;'()*+,;=:&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_URI_RESERVED_CHARS_GENERIC_DELIMITERS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-URI-Functions.html</Path>
  <Anchor>G-URI-RESERVED-CHARS-GENERIC-DELIMITERS:CAPS</Anchor>
  <NodeRef refid="46"/>
  <Abstract type="html">Generic delimiters characters as defined in RFC 3986. Includes &quot;:/?#[]@&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_URI_RESERVED_CHARS_GENERIC_DELIMITERS &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-URI-Functions.html</Path>
  <Anchor>G-URI-RESERVED-CHARS-SUBCOMPONENT-DELIMITERS:CAPS</Anchor>
  <NodeRef refid="46"/>
  <Abstract type="html">Subcomponent delimiter characters as defined in RFC 3986. Includes &quot;!$&amp;amp;'()*+,;=&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_uri_parse_scheme</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-URI-Functions.html</Path>
  <Anchor>g-uri-parse-scheme</Anchor>
  <NodeRef refid="46"/>
  <Abstract type="html">Gets the scheme portion of a URI string. RFC 3986 decodes the scheme as:</Abstract>
  <Declaration type="html">&lt;pre&gt;char* g_uri_parse_scheme (
    const char *uri);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_uri_escape_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-URI-Functions.html</Path>
  <Anchor>g-uri-escape-string</Anchor>
  <NodeRef refid="46"/>
  <Abstract type="html">Escapes a string for use in a URI.</Abstract>
  <Declaration type="html">&lt;pre&gt;char* g_uri_escape_string (
    const char *unescaped,
    const char *reserved_chars_allowed,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; allow_utf8);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_uri_unescape_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-URI-Functions.html</Path>
  <Anchor>g-uri-unescape-string</Anchor>
  <NodeRef refid="46"/>
  <Abstract type="html">Unescapes a whole escaped string.</Abstract>
  <Declaration type="html">&lt;pre&gt;char* g_uri_unescape_string (
    const char *escaped_string,
    const char *illegal_characters);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_uri_unescape_segment</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-URI-Functions.html</Path>
  <Anchor>g-uri-unescape-segment</Anchor>
  <NodeRef refid="46"/>
  <Abstract type="html">Unescapes a segment of an escaped string.</Abstract>
  <Declaration type="html">&lt;pre&gt;char* g_uri_unescape_segment (
    const char *escaped_string,
    const char *escaped_string_end,
    const char *illegal_characters);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SHELL_ERROR_BAD_QUOTING</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Shell-related-Utilities.html</Path>
  <Anchor>GShellError</Anchor>
  <NodeRef refid="1044"/>
  <Declaration type="html">&lt;pre&gt;G_SHELL_ERROR_BAD_QUOTING&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GShellError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SHELL_ERROR_EMPTY_STRING</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Shell-related-Utilities.html</Path>
  <Anchor>GShellError</Anchor>
  <NodeRef refid="1044"/>
  <Declaration type="html">&lt;pre&gt;G_SHELL_ERROR_EMPTY_STRING&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GShellError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SHELL_ERROR_FAILED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Shell-related-Utilities.html</Path>
  <Anchor>GShellError</Anchor>
  <NodeRef refid="1044"/>
  <Declaration type="html">&lt;pre&gt;G_SHELL_ERROR_FAILED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GShellError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GShellError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Shell-related-Utilities.html</Path>
  <Anchor>GShellError</Anchor>
  <NodeRef refid="47"/>
  <Abstract type="html">Error codes returned by shell functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_SHELL_ERROR_BAD_QUOTING,
    G_SHELL_ERROR_EMPTY_STRING,
    G_SHELL_ERROR_FAILED 
} GShellError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SHELL_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Shell-related-Utilities.html</Path>
  <Anchor>G-SHELL-ERROR:CAPS</Anchor>
  <NodeRef refid="47"/>
  <Abstract type="html">Error domain for shell functions. Errors in this domain will
be from the &lt;a class=&quot;link&quot; href=&quot;glib-Shell-related-Utilities.html#GShellError&quot; title=&quot;enum GShellError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GShellError&lt;/span&gt;&lt;/a&gt; enumeration. See &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; for information on
error domains.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_SHELL_ERROR g_shell_error_quark ()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_shell_parse_argv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Shell-related-Utilities.html</Path>
  <Anchor>g-shell-parse-argv</Anchor>
  <NodeRef refid="47"/>
  <Abstract type="html">Parses a command line into an argument vector, in much the same way
the shell would, but without many of the expansions the shell would
perform (variable expansion, globs, operators, filename expansion,
etc. are not supported). The results are defined to be the same as
those you would get from a UNIX98 /bin/sh, as long as the input
contains none of the unsupported shell expansions. If the input
does contain such expansions, they are passed through
literally. Possible errors are those from the &lt;a class=&quot;link&quot; href=&quot;glib-Shell-related-Utilities.html#G-SHELL-ERROR:CAPS&quot; title=&quot;G_SHELL_ERROR&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_SHELL_ERROR&lt;/span&gt;&lt;/a&gt;
domain. Free the returned vector with &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strfreev&quot; title=&quot;g_strfreev ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strfreev()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_shell_parse_argv (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *command_line,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *argcp,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; ***argvp,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_shell_quote</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Shell-related-Utilities.html</Path>
  <Anchor>g-shell-quote</Anchor>
  <NodeRef refid="47"/>
  <Abstract type="html">Quotes a string so that the shell (/bin/sh) will interpret the
quoted string to mean &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;unquoted_string&lt;/code&gt;&lt;/em&gt;. If you pass a filename to
the shell, for example, you should first quote it with this
function.  The return value must be freed with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-free&quot; title=&quot;g_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_free()&lt;/code&gt;&lt;/a&gt;. The
quoting style used is undefined (single or double quotes may be
used).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_shell_quote (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *unquoted_string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_shell_unquote</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Shell-related-Utilities.html</Path>
  <Anchor>g-shell-unquote</Anchor>
  <NodeRef refid="47"/>
  <Abstract type="html">Unquotes a string as the shell (/bin/sh) would. Only handles
quotes; if a string contains file globs, arithmetic operators,
variables, backticks, redirections, or other special-to-the-shell
features, the result will be different from the result a real shell
would produce (the variables, backticks, etc. will be passed
through literally instead of being expanded). This function is
guaranteed to succeed if applied to the result of
&lt;a class=&quot;link&quot; href=&quot;glib-Shell-related-Utilities.html#g-shell-quote&quot; title=&quot;g_shell_quote ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_shell_quote()&lt;/code&gt;&lt;/a&gt;. If it fails, it returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; and sets the
error. The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;quoted_string&lt;/code&gt;&lt;/em&gt; need not actually contain quoted or
escaped text; &lt;a class=&quot;link&quot; href=&quot;glib-Shell-related-Utilities.html#g-shell-unquote&quot; title=&quot;g_shell_unquote ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_shell_unquote()&lt;/code&gt;&lt;/a&gt; simply goes through the string and
unquotes/unescapes anything that the shell would. Both single and
double quotes are handled, as are escapes including escaped
newlines. The return value must be freed with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-free&quot; title=&quot;g_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_free()&lt;/code&gt;&lt;/a&gt;. Possible
errors are in the &lt;a class=&quot;link&quot; href=&quot;glib-Shell-related-Utilities.html#G-SHELL-ERROR:CAPS&quot; title=&quot;G_SHELL_ERROR&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_SHELL_ERROR&lt;/span&gt;&lt;/a&gt; domain.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_shell_unquote (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *quoted_string,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ERROR_UNKNOWN_OPTION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionError</Anchor>
  <NodeRef refid="1049"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ERROR_UNKNOWN_OPTION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ERROR_BAD_VALUE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionError</Anchor>
  <NodeRef refid="1049"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ERROR_BAD_VALUE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ERROR_FAILED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionError</Anchor>
  <NodeRef refid="1049"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ERROR_FAILED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOptionError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionError</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Error codes returned by option parsing.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_OPTION_ERROR_UNKNOWN_OPTION,
    G_OPTION_ERROR_BAD_VALUE,
    G_OPTION_ERROR_FAILED 
} GOptionError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>G-OPTION-ERROR:CAPS</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Error domain for option parsing. Errors in this domain will
be from the &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#GOptionError&quot; title=&quot;enum GOptionError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOptionError&lt;/span&gt;&lt;/a&gt; enumeration. See &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; for information on 
error domains.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OPTION_ERROR (g_option_error_quark ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOptionArgFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArgFunc</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">The type of function to be passed as callback for &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#G-OPTION-ARG-CALLBACK:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_OPTION_ARG_CALLBACK&lt;/code&gt;&lt;/a&gt;
options.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GOptionArgFunc) (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *option_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *value,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOptionContext</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionContext</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">A &lt;span class=&quot;structname&quot;&gt;GOptionContext&lt;/span&gt; struct defines which options
are accepted by the commandline option parser. The struct has only private 
fields and should not be directly accessed.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GOptionContext GOptionContext;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-new</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Creates a new option context. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt;* g_option_context_new (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *parameter_string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_set_summary</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-set-summary</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Adds a string to be displayed in &lt;code class=&quot;option&quot;&gt;--help&lt;/code&gt; output
before the list of options. This is typically a summary of the
program functionality. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_context_set_summary (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *summary);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_get_summary</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-get-summary</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Returns the summary. See &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-set-summary&quot; title=&quot;g_option_context_set_summary ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_set_summary()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_option_context_get_summary (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&gt;GOptionContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_set_description</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-set-description</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Adds a string to be displayed in &lt;code class=&quot;option&quot;&gt;--help&lt;/code&gt; output
after the list of options. This text often includes a bug reporting
address.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_context_set_description (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *description);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_get_description</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-get-description</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Returns the description. See &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-set-description&quot; title=&quot;g_option_context_set_description ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_set_description()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_option_context_get_description (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&gt;GOptionContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTranslateFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GTranslateFunc</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">The type of functions which are used to translate user-visible
strings, for &lt;code class=&quot;option&quot;&gt;--help&lt;/code&gt; output.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* (
    *GTranslateFunc) (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *str,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_set_translate_func</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-set-translate-func</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Sets the function which is used to translate the contexts 
user-visible strings, for &lt;code class=&quot;option&quot;&gt;--help&lt;/code&gt; output. 
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, strings are not translated.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_context_set_translate_func (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Commandline-option-parser.html#GTranslateFunc&quot; href=&quot;GTranslateFunc ()&quot; title=&quot;link&quot;&gt;GTranslateFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; destroy_notify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_set_translation_domain</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-set-translation-domain</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">A convenience function to use &lt;a
href=&quot;/usr/share/gtk-doc/html/camel/camel-camel-i18n.html#gettext&quot;
&gt;&lt;code class=&quot;function&quot;&gt;gettext()&lt;/code&gt;&lt;/a&gt; for translating
user-visible strings.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_context_set_translation_domain (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *domain);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-free</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Frees context and all the groups which have been 
added to it.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_context_free (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&gt;GOptionContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_parse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-parse</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Parses the command line arguments, recognizing options
which have been added to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/em&gt;. A side-effect of 
calling this function is that &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-set-prgname&quot; title=&quot;g_set_prgname ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_set_prgname()&lt;/code&gt;&lt;/a&gt; will be
called.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_option_context_parse (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *argc,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; ***argv,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_set_help_enabled</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-set-help-enabled</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Enables or disables automatic generation of &lt;code class=&quot;option&quot;&gt;--help&lt;/code&gt; 
output. By default, &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-parse&quot; title=&quot;g_option_context_parse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_parse()&lt;/code&gt;&lt;/a&gt; recognizes
&lt;code class=&quot;option&quot;&gt;--help&lt;/code&gt;, &lt;code class=&quot;option&quot;&gt;-?&lt;/code&gt;, &lt;code class=&quot;option&quot;&gt;--help-all&lt;/code&gt;
and &lt;code class=&quot;option&quot;&gt;--help-&lt;/code&gt;&lt;em class=&quot;replaceable&quot;&gt;&lt;code&gt;groupname&lt;/code&gt;&lt;/em&gt; and creates
suitable output to stdout.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_context_set_help_enabled (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; help_enabled);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_get_help_enabled</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-get-help-enabled</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Returns whether automatic &lt;code class=&quot;option&quot;&gt;--help&lt;/code&gt; generation
is turned on for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/em&gt;. See &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-set-help-enabled&quot; title=&quot;g_option_context_set_help_enabled ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_set_help_enabled()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_option_context_get_help_enabled (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&gt;GOptionContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_set_ignore_unknown_options</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-set-ignore-unknown-options</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Sets whether to ignore unknown options or not. If an argument is 
ignored, it is left in the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;argv&lt;/code&gt;&lt;/em&gt; array after parsing. By default, 
&lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-parse&quot; title=&quot;g_option_context_parse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_parse()&lt;/code&gt;&lt;/a&gt; treats unknown options as error.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_context_set_ignore_unknown_options (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; ignore_unknown);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_get_ignore_unknown_options</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-get-ignore-unknown-options</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Returns whether unknown options are ignored or not. See
&lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-set-ignore-unknown-options&quot; title=&quot;g_option_context_set_ignore_unknown_options ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_set_ignore_unknown_options()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_option_context_get_ignore_unknown_options (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&gt;GOptionContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_get_help</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-get-help</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Returns a formatted, translated help text for the given context.
To obtain the text produced by &lt;code class=&quot;option&quot;&gt;--help&lt;/code&gt;, call
&lt;code class=&quot;literal&quot;&gt;g_option_context_get_help (context, TRUE, NULL)&lt;/code&gt;.
To obtain the text produced by &lt;code class=&quot;option&quot;&gt;--help-all&lt;/code&gt;, call
&lt;code class=&quot;literal&quot;&gt;g_option_context_get_help (context, FALSE, NULL)&lt;/code&gt;.
To obtain the help text for an option group, call
&lt;code class=&quot;literal&quot;&gt;g_option_context_get_help (context, FALSE, group)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_option_context_get_help (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; main_help,
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&gt;GOptionGroup&lt;/a&gt; *group);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ARG_NONE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArg</Anchor>
  <NodeRef refid="1068"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ARG_NONE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionArg</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ARG_STRING</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArg</Anchor>
  <NodeRef refid="1068"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ARG_STRING&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionArg</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ARG_INT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArg</Anchor>
  <NodeRef refid="1068"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ARG_INT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionArg</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ARG_CALLBACK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArg</Anchor>
  <NodeRef refid="1068"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ARG_CALLBACK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionArg</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ARG_FILENAME</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArg</Anchor>
  <NodeRef refid="1068"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ARG_FILENAME&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionArg</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ARG_STRING_ARRAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArg</Anchor>
  <NodeRef refid="1068"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ARG_STRING_ARRAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionArg</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ARG_FILENAME_ARRAY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArg</Anchor>
  <NodeRef refid="1068"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ARG_FILENAME_ARRAY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionArg</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ARG_DOUBLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArg</Anchor>
  <NodeRef refid="1068"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ARG_DOUBLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionArg</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_ARG_INT64</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArg</Anchor>
  <NodeRef refid="1068"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_ARG_INT64&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionArg</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOptionArg</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionArg</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#GOptionArg&quot; title=&quot;enum GOptionArg&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOptionArg&lt;/span&gt;&lt;/a&gt; enum values determine which type of extra argument the
options expect to find. If an option expects an extra argument, it
can be specified in several ways; with a short option:
&lt;code class=&quot;option&quot;&gt;-x arg&lt;/code&gt;, with a long option: &lt;code class=&quot;option&quot;&gt;--name arg&lt;/code&gt;
or combined in a single argument: &lt;code class=&quot;option&quot;&gt;--name=arg&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_OPTION_ARG_NONE,
    G_OPTION_ARG_STRING,
    G_OPTION_ARG_INT,
    G_OPTION_ARG_CALLBACK,
    G_OPTION_ARG_FILENAME,
    G_OPTION_ARG_STRING_ARRAY,
    G_OPTION_ARG_FILENAME_ARRAY,
    G_OPTION_ARG_DOUBLE,
    G_OPTION_ARG_INT64 
} GOptionArg;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_FLAG_HIDDEN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionFlags</Anchor>
  <NodeRef refid="1069"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_FLAG_HIDDEN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_FLAG_IN_MAIN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionFlags</Anchor>
  <NodeRef refid="1069"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_FLAG_IN_MAIN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_FLAG_REVERSE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionFlags</Anchor>
  <NodeRef refid="1069"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_FLAG_REVERSE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_FLAG_NO_ARG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionFlags</Anchor>
  <NodeRef refid="1069"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_FLAG_NO_ARG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_FLAG_FILENAME</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionFlags</Anchor>
  <NodeRef refid="1069"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_FLAG_FILENAME&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_FLAG_OPTIONAL_ARG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionFlags</Anchor>
  <NodeRef refid="1069"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_FLAG_OPTIONAL_ARG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_FLAG_NOALIAS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionFlags</Anchor>
  <NodeRef refid="1069"/>
  <Declaration type="html">&lt;pre&gt;G_OPTION_FLAG_NOALIAS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GOptionFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOptionFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionFlags</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Flags which modify individual options.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_OPTION_FLAG_HIDDEN = 1 &amp;lt;&amp;lt; 0,
    G_OPTION_FLAG_IN_MAIN = 1 &amp;lt;&amp;lt; 1,
    G_OPTION_FLAG_REVERSE = 1 &amp;lt;&amp;lt; 2,
    G_OPTION_FLAG_NO_ARG = 1 &amp;lt;&amp;lt; 3,
    G_OPTION_FLAG_FILENAME = 1 &amp;lt;&amp;lt; 4,
    G_OPTION_FLAG_OPTIONAL_ARG = 1 &amp;lt;&amp;lt; 5,
    G_OPTION_FLAG_NOALIAS = 1 &amp;lt;&amp;lt; 6 
} GOptionFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OPTION_REMAINING</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>G-OPTION-REMAINING:CAPS</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">If a long option in the main group has this name, it is not treated as a 
regular option. Instead it collects all non-option arguments which would
otherwise be left in &lt;code class=&quot;literal&quot;&gt;argv&lt;/code&gt;. The option must be of type
&lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#G-OPTION-ARG-CALLBACK:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_OPTION_ARG_CALLBACK&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#G-OPTION-ARG-STRING-ARRAY:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_OPTION_ARG_STRING_ARRAY&lt;/code&gt;&lt;/a&gt;
or &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#G-OPTION-ARG-FILENAME-ARRAY:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_OPTION_ARG_FILENAME_ARRAY&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OPTION_REMAINING &quot;&quot;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOptionEntry</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionEntry</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">A &lt;span class=&quot;structname&quot;&gt;GOptionEntry&lt;/span&gt; defines a single option.
To have an effect, they must be added to a &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; title=&quot;GOptionGroup&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOptionGroup&lt;/span&gt;&lt;/a&gt; with
&lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-add-main-entries&quot; title=&quot;g_option_context_add_main_entries ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_add_main_entries()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-group-add-entries&quot; title=&quot;g_option_group_add_entries ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_group_add_entries()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    const gchar *long_name;
    gchar short_name;
    gint flags;
    GOptionArg arg;
    gpointer arg_data;
    const gchar *description;
    const gchar *arg_description;
} GOptionEntry;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_add_main_entries</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-add-main-entries</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">A convenience function which creates a main group if it doesn't 
exist, adds the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;entries&lt;/code&gt;&lt;/em&gt; to it and sets the translation domain.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_context_add_main_entries (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    const &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionEntry&quot; href=&quot;GOptionEntry&quot; title=&quot;link&quot;&gt;GOptionEntry&lt;/a&gt; *entries,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *translation_domain);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOptionGroup</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionGroup</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">A &lt;span class=&quot;structname&quot;&gt;GOptionGroup&lt;/span&gt; struct defines the options in a single
group. The struct has only private fields and should not be directly accessed. </Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GOptionGroup GOptionGroup;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_add_group</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-add-group</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Adds a &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; title=&quot;GOptionGroup&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOptionGroup&lt;/span&gt;&lt;/a&gt; to the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/em&gt;, so that parsing with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/em&gt;
will recognize the options in the group. Note that the group will
be freed together with the context when &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-free&quot; title=&quot;g_option_context_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_free()&lt;/code&gt;&lt;/a&gt; is
called, so you must not free the group yourself after adding it
to a context.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_context_add_group (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&gt;GOptionGroup&lt;/a&gt; *group);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_set_main_group</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-set-main-group</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Sets a &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; title=&quot;GOptionGroup&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOptionGroup&lt;/span&gt;&lt;/a&gt; as main group of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/em&gt;. 
This has the same effect as calling &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-add-group&quot; title=&quot;g_option_context_add_group ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_add_group()&lt;/code&gt;&lt;/a&gt;, 
the only difference is that the options in the main group are 
treated differently when generating &lt;code class=&quot;option&quot;&gt;--help&lt;/code&gt; output.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_context_set_main_group (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&gt;GOptionGroup&lt;/a&gt; *group);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_context_get_main_group</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-context-get-main-group</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Returns a pointer to the main group of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&quot;link&quot;&gt;GOptionGroup&lt;/a&gt;* g_option_context_get_main_group (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&gt;GOptionContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_group_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-group-new</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; title=&quot;GOptionGroup&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOptionGroup&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&quot;link&quot;&gt;GOptionGroup&lt;/a&gt;* g_option_group_new (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *description,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *help_description,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; user_data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; destroy);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_group_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-group-free</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Frees a &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; title=&quot;GOptionGroup&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOptionGroup&lt;/span&gt;&lt;/a&gt;. Note that you must &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt;
free groups which have been added to a &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; title=&quot;GOptionContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GOptionContext&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_group_free (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&gt;GOptionGroup&lt;/a&gt; *group);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_group_add_entries</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-group-add-entries</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Adds the options specified in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;entries&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_group_add_entries (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&quot;link&quot;&gt;GOptionGroup&lt;/a&gt; *group,
    const &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionEntry&quot; href=&quot;GOptionEntry&quot; title=&gt;GOptionEntry&lt;/a&gt; *entries);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOptionParseFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionParseFunc</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">The type of function that can be called before and after parsing. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GOptionParseFunc) (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&quot;link&quot;&gt;GOptionGroup&lt;/a&gt; *group,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_group_set_parse_hooks</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-group-set-parse-hooks</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Associates two functions with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/em&gt; which will be called 
from &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-parse&quot; title=&quot;g_option_context_parse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_parse()&lt;/code&gt;&lt;/a&gt; before the first option is parsed
and after the last option has been parsed, respectively.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_group_set_parse_hooks (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&quot;link&quot;&gt;GOptionGroup&lt;/a&gt; *group,
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionParseFunc&quot; href=&quot;GOptionParseFunc ()&quot; title=&quot;link&quot;&gt;GOptionParseFunc&lt;/a&gt; pre_parse_func,
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionParseFunc&quot; href=&quot;GOptionParseFunc ()&quot; title=&gt;GOptionParseFunc&lt;/a&gt; post_parse_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GOptionErrorFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>GOptionErrorFunc</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">The type of function to be used as callback when a parse error occurs.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GOptionErrorFunc) (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionContext&quot; href=&quot;GOptionContext&quot; title=&quot;link&quot;&gt;GOptionContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&quot;link&quot;&gt;GOptionGroup&lt;/a&gt; *group,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_group_set_error_hook</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-group-set-error-hook</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Associates a function with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/em&gt; which will be called 
from &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#g-option-context-parse&quot; title=&quot;g_option_context_parse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_option_context_parse()&lt;/code&gt;&lt;/a&gt; when an error occurs.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_group_set_error_hook (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&quot;link&quot;&gt;GOptionGroup&lt;/a&gt; *group,
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionErrorFunc&quot; href=&quot;GOptionErrorFunc ()&quot; title=&gt;GOptionErrorFunc&lt;/a&gt; error_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_group_set_translate_func</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-group-set-translate-func</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">Sets the function which is used to translate user-visible
strings, for &lt;code class=&quot;option&quot;&gt;--help&lt;/code&gt; output. Different
groups can use different &lt;a class=&quot;link&quot; href=&quot;glib-Commandline-option-parser.html#GTranslateFunc&quot; title=&quot;GTranslateFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTranslateFunc&lt;/span&gt;&lt;/a&gt;s. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt;
is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, strings are not translated.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_group_set_translate_func (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&quot;link&quot;&gt;GOptionGroup&lt;/a&gt; *group,
    &lt;a class=&quot;glib-Commandline-option-parser.html#GTranslateFunc&quot; href=&quot;GTranslateFunc ()&quot; title=&quot;link&quot;&gt;GTranslateFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; destroy_notify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_option_group_set_translation_domain</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Commandline-option-parser.html</Path>
  <Anchor>g-option-group-set-translation-domain</Anchor>
  <NodeRef refid="48"/>
  <Abstract type="html">A convenience function to use &lt;a
href=&quot;/usr/share/gtk-doc/html/camel/camel-camel-i18n.html#gettext&quot;
&gt;&lt;code class=&quot;function&quot;&gt;gettext()&lt;/code&gt;&lt;/a&gt; for translating
user-visible strings.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_option_group_set_translation_domain (
    &lt;a class=&quot;glib-Commandline-option-parser.html#GOptionGroup&quot; href=&quot;GOptionGroup&quot; title=&quot;link&quot;&gt;GOptionGroup&lt;/a&gt; *group,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *domain);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GPatternSpec</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Glob-style-pattern-matching.html</Path>
  <Anchor>GPatternSpec</Anchor>
  <NodeRef refid="49"/>
  <Abstract type="html">A &lt;span class=&quot;structname&quot;&gt;GPatternSpec&lt;/span&gt; is the 'compiled' form of a pattern.
This structure is opaque and its fields cannot be accessed directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GPatternSpec GPatternSpec;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_pattern_spec_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Glob-style-pattern-matching.html</Path>
  <Anchor>g-pattern-spec-new</Anchor>
  <NodeRef refid="49"/>
  <Abstract type="html">Compiles a pattern to a &lt;a class=&quot;link&quot; href=&quot;glib-Glob-style-pattern-matching.html#GPatternSpec&quot; title=&quot;GPatternSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPatternSpec&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Glob-style-pattern-matching.html#GPatternSpec&quot; href=&quot;GPatternSpec&quot; title=&quot;link&quot;&gt;GPatternSpec&lt;/a&gt;* g_pattern_spec_new (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *pattern);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_pattern_spec_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Glob-style-pattern-matching.html</Path>
  <Anchor>g-pattern-spec-free</Anchor>
  <NodeRef refid="49"/>
  <Abstract type="html">Frees the memory allocated for the &lt;a class=&quot;link&quot; href=&quot;glib-Glob-style-pattern-matching.html#GPatternSpec&quot; title=&quot;GPatternSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPatternSpec&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_pattern_spec_free (
    &lt;a class=&quot;glib-Glob-style-pattern-matching.html#GPatternSpec&quot; href=&quot;GPatternSpec&quot; title=&gt;GPatternSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_pattern_spec_equal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Glob-style-pattern-matching.html</Path>
  <Anchor>g-pattern-spec-equal</Anchor>
  <NodeRef refid="49"/>
  <Abstract type="html">Compares two compiled pattern specs and returns whether they
will match the same set of strings.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_pattern_spec_equal (
    &lt;a class=&quot;glib-Glob-style-pattern-matching.html#GPatternSpec&quot; href=&quot;GPatternSpec&quot; title=&quot;link&quot;&gt;GPatternSpec&lt;/a&gt; *pspec1,
    &lt;a class=&quot;glib-Glob-style-pattern-matching.html#GPatternSpec&quot; href=&quot;GPatternSpec&quot; title=&gt;GPatternSpec&lt;/a&gt; *pspec2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_pattern_match</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Glob-style-pattern-matching.html</Path>
  <Anchor>g-pattern-match</Anchor>
  <NodeRef refid="49"/>
  <Abstract type="html">Matches a string against a compiled pattern. Passing the correct length of 
the string given is mandatory. The reversed string can be omitted by passing 
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, this is more efficient if the reversed version of the string to be 
matched is not at hand, as &lt;a class=&quot;link&quot; href=&quot;glib-Glob-style-pattern-matching.html#g-pattern-match&quot; title=&quot;g_pattern_match ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_pattern_match()&lt;/code&gt;&lt;/a&gt; will only construct it if the 
compiled pattern requires reverse matches.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_pattern_match (
    &lt;a class=&quot;glib-Glob-style-pattern-matching.html#GPatternSpec&quot; href=&quot;GPatternSpec&quot; title=&quot;link&quot;&gt;GPatternSpec&lt;/a&gt; *pspec,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; string_length,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string_reversed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_pattern_match_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Glob-style-pattern-matching.html</Path>
  <Anchor>g-pattern-match-string</Anchor>
  <NodeRef refid="49"/>
  <Abstract type="html">Matches a string against a compiled pattern. If the string is to be 
matched against more than one pattern, consider using &lt;a class=&quot;link&quot; href=&quot;glib-Glob-style-pattern-matching.html#g-pattern-match&quot; title=&quot;g_pattern_match ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_pattern_match()&lt;/code&gt;&lt;/a&gt; 
instead while supplying the reversed string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_pattern_match_string (
    &lt;a class=&quot;glib-Glob-style-pattern-matching.html#GPatternSpec&quot; href=&quot;GPatternSpec&quot; title=&quot;link&quot;&gt;GPatternSpec&lt;/a&gt; *pspec,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_pattern_match_simple</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Glob-style-pattern-matching.html</Path>
  <Anchor>g-pattern-match-simple</Anchor>
  <NodeRef refid="49"/>
  <Abstract type="html">Matches a string against a pattern given as a string.
If this function is to be called in a loop, it's more efficient to compile
the pattern once with &lt;a class=&quot;link&quot; href=&quot;glib-Glob-style-pattern-matching.html#g-pattern-spec-new&quot; title=&quot;g_pattern_spec_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_pattern_spec_new()&lt;/code&gt;&lt;/a&gt; and call &lt;a class=&quot;link&quot; href=&quot;glib-Glob-style-pattern-matching.html#g-pattern-match-string&quot; title=&quot;g_pattern_match_string ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_pattern_match_string()&lt;/code&gt;&lt;/a&gt;
repeatedly.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_pattern_match_simple (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *pattern,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_COMPILE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_COMPILE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_OPTIMIZE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_OPTIMIZE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_REPLACE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_REPLACE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_MATCH</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_MATCH&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_INTERNAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_INTERNAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_STRAY_BACKSLASH</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_STRAY_BACKSLASH&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_MISSING_CONTROL_CHAR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_MISSING_CONTROL_CHAR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_UNRECOGNIZED_ESCAPE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_UNRECOGNIZED_ESCAPE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_QUANTIFIER_TOO_BIG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_QUANTIFIER_TOO_BIG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_RANGE_OUT_OF_ORDER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_RANGE_OUT_OF_ORDER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_NOTHING_TO_REPEAT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_NOTHING_TO_REPEAT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_UNRECOGNIZED_CHARACTER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_UNRECOGNIZED_CHARACTER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_UNMATCHED_PARENTHESIS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_UNMATCHED_PARENTHESIS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_UNTERMINATED_COMMENT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_UNTERMINATED_COMMENT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_EXPRESSION_TOO_LARGE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_EXPRESSION_TOO_LARGE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_MEMORY_ERROR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_MEMORY_ERROR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_MALFORMED_CONDITION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_MALFORMED_CONDITION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_ASSERTION_EXPECTED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_ASSERTION_EXPECTED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_HEX_CODE_TOO_LARGE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_HEX_CODE_TOO_LARGE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_INVALID_CONDITION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_INVALID_CONDITION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_INFINITE_LOOP</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_INFINITE_LOOP&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_MALFORMED_PROPERTY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_MALFORMED_PROPERTY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_UNKNOWN_PROPERTY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_UNKNOWN_PROPERTY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_TOO_MANY_SUBPATTERNS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_TOO_MANY_SUBPATTERNS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_INVALID_OCTAL_VALUE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_INVALID_OCTAL_VALUE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_DEFINE_REPETION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_DEFINE_REPETION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR_MISSING_BACK_REFERENCE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="1093"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ERROR_MISSING_BACK_REFERENCE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexError">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GRegexError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexError</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Error codes returned by regular expressions functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_REGEX_ERROR_COMPILE,
    G_REGEX_ERROR_OPTIMIZE,
    G_REGEX_ERROR_REPLACE,
    G_REGEX_ERROR_MATCH,
    G_REGEX_ERROR_INTERNAL,
    G_REGEX_ERROR_STRAY_BACKSLASH = 101,
    G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
    G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
    G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
    G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
    G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
    G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
    G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
    G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
    G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
    G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
    G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
    G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
    G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
    G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
    G_REGEX_ERROR_MEMORY_ERROR = 121,
    G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
    G_REGEX_ERROR_MALFORMED_CONDITION = 126,
    G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
    G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
    G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
    G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
    G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
    G_REGEX_ERROR_INVALID_CONDITION = 135,
    G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
    G_REGEX_ERROR_INFINITE_LOOP = 140,
    G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
    G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
    G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
    G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
    G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
    G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
    G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
    G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
    G_REGEX_ERROR_DEFINE_REPETION = 155,
    G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
    G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157 
} GRegexError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>G-REGEX-ERROR:CAPS</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Error domain for regular expressions. Errors in this domain will be from the &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#GRegexError&quot; title=&quot;enum GRegexError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRegexError&lt;/span&gt;&lt;/a&gt; enumeration. See &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; for information on error domains.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_REGEX_ERROR g_regex_error_quark ()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_CASELESS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_CASELESS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_MULTILINE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_MULTILINE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_DOTALL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_DOTALL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_EXTENDED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_EXTENDED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_ANCHORED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_ANCHORED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_DOLLAR_ENDONLY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_DOLLAR_ENDONLY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_UNGREEDY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_UNGREEDY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_RAW</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_RAW&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_NO_AUTO_CAPTURE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_NO_AUTO_CAPTURE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_OPTIMIZE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_OPTIMIZE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_DUPNAMES</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_DUPNAMES&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_NEWLINE_CR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_NEWLINE_CR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_NEWLINE_LF</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_NEWLINE_LF&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_NEWLINE_CRLF</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="1095"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_NEWLINE_CRLF&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexCompileFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexCompileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GRegexCompileFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexCompileFlags</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Flags specifying compile-time options.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_REGEX_CASELESS = 1 &amp;lt;&amp;lt; 0,
    G_REGEX_MULTILINE = 1 &amp;lt;&amp;lt; 1,
    G_REGEX_DOTALL = 1 &amp;lt;&amp;lt; 2,
    G_REGEX_EXTENDED = 1 &amp;lt;&amp;lt; 3,
    G_REGEX_ANCHORED = 1 &amp;lt;&amp;lt; 4,
    G_REGEX_DOLLAR_ENDONLY = 1 &amp;lt;&amp;lt; 5,
    G_REGEX_UNGREEDY = 1 &amp;lt;&amp;lt; 9,
    G_REGEX_RAW = 1 &amp;lt;&amp;lt; 11,
    G_REGEX_NO_AUTO_CAPTURE = 1 &amp;lt;&amp;lt; 12,
    G_REGEX_OPTIMIZE = 1 &amp;lt;&amp;lt; 13,
    G_REGEX_DUPNAMES = 1 &amp;lt;&amp;lt; 19,
    G_REGEX_NEWLINE_CR = 1 &amp;lt;&amp;lt; 20,
    G_REGEX_NEWLINE_LF = 1 &amp;lt;&amp;lt; 21,
    G_REGEX_NEWLINE_CRLF = G_REGEX_NEWLINE_CR | G_REGEX_NEWLINE_LF 
} GRegexCompileFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_MATCH_ANCHORED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexMatchFlags</Anchor>
  <NodeRef refid="1096"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_MATCH_ANCHORED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexMatchFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexMatchFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_MATCH_NOTBOL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexMatchFlags</Anchor>
  <NodeRef refid="1096"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_MATCH_NOTBOL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexMatchFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexMatchFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_MATCH_NOTEOL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexMatchFlags</Anchor>
  <NodeRef refid="1096"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_MATCH_NOTEOL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexMatchFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexMatchFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_MATCH_NOTEMPTY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexMatchFlags</Anchor>
  <NodeRef refid="1096"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_MATCH_NOTEMPTY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexMatchFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexMatchFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_MATCH_PARTIAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexMatchFlags</Anchor>
  <NodeRef refid="1096"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_MATCH_PARTIAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexMatchFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexMatchFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_MATCH_NEWLINE_CR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexMatchFlags</Anchor>
  <NodeRef refid="1096"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_MATCH_NEWLINE_CR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexMatchFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexMatchFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_MATCH_NEWLINE_LF</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexMatchFlags</Anchor>
  <NodeRef refid="1096"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_MATCH_NEWLINE_LF&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexMatchFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexMatchFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_MATCH_NEWLINE_CRLF</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexMatchFlags</Anchor>
  <NodeRef refid="1096"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_MATCH_NEWLINE_CRLF&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexMatchFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexMatchFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_REGEX_MATCH_NEWLINE_ANY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexMatchFlags</Anchor>
  <NodeRef refid="1096"/>
  <Declaration type="html">&lt;pre&gt;G_REGEX_MATCH_NEWLINE_ANY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="GRegexMatchFlags">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GRegexMatchFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GRegexMatchFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexMatchFlags</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Flags specifying match-time options.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_REGEX_MATCH_ANCHORED = 1 &amp;lt;&amp;lt; 4,
    G_REGEX_MATCH_NOTBOL = 1 &amp;lt;&amp;lt; 7,
    G_REGEX_MATCH_NOTEOL = 1 &amp;lt;&amp;lt; 8,
    G_REGEX_MATCH_NOTEMPTY = 1 &amp;lt;&amp;lt; 10,
    G_REGEX_MATCH_PARTIAL = 1 &amp;lt;&amp;lt; 15,
    G_REGEX_MATCH_NEWLINE_CR = 1 &amp;lt;&amp;lt; 20,
    G_REGEX_MATCH_NEWLINE_LF = 1 &amp;lt;&amp;lt; 21,
    G_REGEX_MATCH_NEWLINE_CRLF = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_LF,
    G_REGEX_MATCH_NEWLINE_ANY = 1 &amp;lt;&amp;lt; 22 
} GRegexMatchFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GRegex</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegex</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">A GRegex is the &quot;compiled&quot; form of a regular expression pattern. This
structure is opaque and its fields cannot be accessed directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GRegex GRegex;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GRegexEvalCallback</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GRegexEvalCallback</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Specifies the type of the function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-replace-eval&quot; title=&quot;g_regex_replace_eval ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_replace_eval()&lt;/code&gt;&lt;/a&gt;.
It is called for each occurance of the pattern in the string passed
to &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-replace-eval&quot; title=&quot;g_regex_replace_eval ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_replace_eval()&lt;/code&gt;&lt;/a&gt;, and it should append the replacement to
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;result&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GRegexEvalCallback) (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&quot;link&quot;&gt;GMatchInfo&lt;/a&gt; *match_info,
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *result,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-new</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Compiles the regular expression to an internal form, and does 
the initial setup of the &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; title=&quot;GRegex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRegex&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt;* g_regex_new (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *pattern,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexCompileFlags&quot; href=&quot;enum GRegexCompileFlags&quot; title=&quot;link&quot;&gt;GRegexCompileFlags&lt;/a&gt; compile_options,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&quot;link&quot;&gt;GRegexMatchFlags&lt;/a&gt; match_options,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-ref</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Increases reference count of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/em&gt; by 1.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt;* g_regex_ref (
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&gt;GRegex&lt;/a&gt; *regex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-unref</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Decreases reference count of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/em&gt; by 1. When reference count drops
to zero, it frees all the memory associated with the regex structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_regex_unref (
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&gt;GRegex&lt;/a&gt; *regex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_get_pattern</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-get-pattern</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Gets the pattern string associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/em&gt;, i.e. a copy of 
the string passed to &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-new&quot; title=&quot;g_regex_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_new()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_regex_get_pattern (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&gt;GRegex&lt;/a&gt; *regex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_get_max_backref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-get-max-backref</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Returns the number of the highest back reference
in the pattern, or 0 if the pattern does not contain
back references.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_regex_get_max_backref (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&gt;GRegex&lt;/a&gt; *regex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_get_capture_count</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-get-capture-count</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Returns the number of capturing subpatterns in the pattern.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_regex_get_capture_count (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&gt;GRegex&lt;/a&gt; *regex);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_get_string_number</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-get-string-number</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Retrieves the number of the subexpression named &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_regex_get_string_number (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt; *regex,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_escape_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-escape-string</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Escapes the special characters used for regular expressions 
in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;, for instance &quot;a.b*c&quot; becomes &quot;a\.b\*c&quot;. This 
function is useful to dynamically generate regular expressions.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_regex_escape_string (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_match_simple</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-match-simple</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Scans for a match in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pattern&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_regex_match_simple (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *pattern,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexCompileFlags&quot; href=&quot;enum GRegexCompileFlags&quot; title=&quot;link&quot;&gt;GRegexCompileFlags&lt;/a&gt; compile_options,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&gt;GRegexMatchFlags&lt;/a&gt; match_options);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_match</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-match</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Scans for a match in string for the pattern in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/em&gt;. 
The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;match_options&lt;/code&gt;&lt;/em&gt; are combined with the match options specified 
when the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/em&gt; structure was created, letting you have more 
flexibility in reusing &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; title=&quot;GRegex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRegex&lt;/span&gt;&lt;/a&gt; structures.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_regex_match (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt; *regex,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&quot;link&quot;&gt;GRegexMatchFlags&lt;/a&gt; match_options,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&gt;GMatchInfo&lt;/a&gt; **match_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_match_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-match-full</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Scans for a match in string for the pattern in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/em&gt;. 
The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;match_options&lt;/code&gt;&lt;/em&gt; are combined with the match options specified 
when the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/em&gt; structure was created, letting you have more 
flexibility in reusing &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; title=&quot;GRegex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRegex&lt;/span&gt;&lt;/a&gt; structures.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_regex_match_full (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt; *regex,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    gssize string_len,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; start_position,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&quot;link&quot;&gt;GRegexMatchFlags&lt;/a&gt; match_options,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&quot;link&quot;&gt;GMatchInfo&lt;/a&gt; **match_info,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_match_all</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-match-all</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Using the standard algorithm for regular expression matching only 
the longest match in the string is retrieved. This function uses 
a different algorithm so it can retrieve all the possible matches.
For more documentation see &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-match-all-full&quot; title=&quot;g_regex_match_all_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_match_all_full()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_regex_match_all (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt; *regex,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&quot;link&quot;&gt;GRegexMatchFlags&lt;/a&gt; match_options,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&gt;GMatchInfo&lt;/a&gt; **match_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_match_all_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-match-all-full</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Using the standard algorithm for regular expression matching only 
the longest match in the string is retrieved, it is not possibile 
to obtain all the available matches. For instance matching
&quot;&amp;lt;a&amp;gt; &amp;lt;b&amp;gt; &amp;lt;c&amp;gt;&quot; against the pattern &quot;&amp;lt;.*&amp;gt;&quot; 
you get &quot;&amp;lt;a&amp;gt; &amp;lt;b&amp;gt; &amp;lt;c&amp;gt;&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_regex_match_all_full (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt; *regex,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    gssize string_len,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; start_position,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&quot;link&quot;&gt;GRegexMatchFlags&lt;/a&gt; match_options,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&quot;link&quot;&gt;GMatchInfo&lt;/a&gt; **match_info,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_split_simple</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-split-simple</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Breaks the string on the pattern, and returns an array of 
the tokens. If the pattern contains capturing parentheses, 
then the text for each of the substrings will also be returned. 
If the pattern does not match anywhere in the string, then the 
whole string is returned as the first token.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_regex_split_simple (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *pattern,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexCompileFlags&quot; href=&quot;enum GRegexCompileFlags&quot; title=&quot;link&quot;&gt;GRegexCompileFlags&lt;/a&gt; compile_options,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&gt;GRegexMatchFlags&lt;/a&gt; match_options);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_split</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-split</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Breaks the string on the pattern, and returns an array of the tokens.
If the pattern contains capturing parentheses, then the text for each
of the substrings will also be returned. If the pattern does not match
anywhere in the string, then the whole string is returned as the first
token.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_regex_split (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt; *regex,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&gt;GRegexMatchFlags&lt;/a&gt; match_options);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_split_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-split-full</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Breaks the string on the pattern, and returns an array of the tokens.
If the pattern contains capturing parentheses, then the text for each
of the substrings will also be returned. If the pattern does not match
anywhere in the string, then the whole string is returned as the first
token.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_regex_split_full (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt; *regex,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    gssize string_len,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; start_position,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&quot;link&quot;&gt;GRegexMatchFlags&lt;/a&gt; match_options,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; max_tokens,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_replace</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-replace</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Replaces all occurances of the pattern in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/em&gt; with the
replacement text. Backreferences of the form '\number' or 
'\g&amp;lt;number&amp;gt;' in the replacement text are interpolated by the 
number-th captured subexpression of the match, '\g&amp;lt;name&amp;gt;' refers 
to the captured subexpression with the given name. '\0' refers to the 
complete match, but '\0' followed by a number is the octal representation 
of a character. To include a literal '\' in the replacement, write '\\'.
There are also escapes that changes the case of the following text:</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_regex_replace (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt; *regex,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    gssize string_len,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; start_position,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *replacement,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&quot;link&quot;&gt;GRegexMatchFlags&lt;/a&gt; match_options,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_replace_literal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-replace-literal</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Replaces all occurances of the pattern in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/em&gt; with the
replacement text. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;replacement&lt;/code&gt;&lt;/em&gt; is replaced literally, to
include backreferences use &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-replace&quot; title=&quot;g_regex_replace ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_replace()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_regex_replace_literal (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt; *regex,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    gssize string_len,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; start_position,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *replacement,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&quot;link&quot;&gt;GRegexMatchFlags&lt;/a&gt; match_options,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_replace_eval</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-replace-eval</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Replaces occurances of the pattern in regex with the output of 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/em&gt; for that occurance.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_regex_replace_eval (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt; *regex,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string,
    gssize string_len,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; start_position,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexMatchFlags&quot; href=&quot;enum GRegexMatchFlags&quot; title=&quot;link&quot;&gt;GRegexMatchFlags&lt;/a&gt; match_options,
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegexEvalCallback&quot; href=&quot;GRegexEvalCallback ()&quot; title=&quot;link&quot;&gt;GRegexEvalCallback&lt;/a&gt; eval,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; user_data,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_regex_check_replacement</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-regex-check-replacement</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;replacement&lt;/code&gt;&lt;/em&gt; is a valid replacement string 
(see &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-replace&quot; title=&quot;g_regex_replace ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_replace()&lt;/code&gt;&lt;/a&gt;), i.e. that all escape sequences in 
it are valid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_regex_check_replacement (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *replacement,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; *has_references,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMatchInfo</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>GMatchInfo</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">&lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; title=&quot;GMatchInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMatchInfo&lt;/span&gt;&lt;/a&gt; is used to retrieve information about the regular expression match
which created it.
This structure is opaque and its fields cannot be accessed directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GMatchInfo GMatchInfo;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_get_regex</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-get-regex</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; title=&quot;GRegex&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRegex&lt;/span&gt;&lt;/a&gt; object used in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;match_info&lt;/code&gt;&lt;/em&gt;. It belongs to Glib
and must not be freed. Use &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-ref&quot; title=&quot;g_regex_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_ref()&lt;/code&gt;&lt;/a&gt; if you need to keep it
after you free &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;match_info&lt;/code&gt;&lt;/em&gt; object.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GRegex&quot; href=&quot;GRegex&quot; title=&quot;link&quot;&gt;GRegex&lt;/a&gt;* g_match_info_get_regex (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&gt;GMatchInfo&lt;/a&gt; *match_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_get_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-get-string</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Returns the string searched with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;match_info&lt;/code&gt;&lt;/em&gt;. This is the
string passed to &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-match&quot; title=&quot;g_regex_match ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_match()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-replace&quot; title=&quot;g_regex_replace ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_replace()&lt;/code&gt;&lt;/a&gt; so
you may not free it before calling this function.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_match_info_get_string (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&gt;GMatchInfo&lt;/a&gt; *match_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-free</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Frees all the memory associated with the &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; title=&quot;GMatchInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMatchInfo&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_match_info_free (
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&gt;GMatchInfo&lt;/a&gt; *match_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_matches</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-matches</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Returns whether the previous match operation succeeded.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_match_info_matches (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&gt;GMatchInfo&lt;/a&gt; *match_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_next</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-next</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Scans for the next match using the same parameters of the previous
call to &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-match-full&quot; title=&quot;g_regex_match_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_match_full()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-match&quot; title=&quot;g_regex_match ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_match()&lt;/code&gt;&lt;/a&gt; that returned
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;match_info&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_match_info_next (
    &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&quot;link&quot;&gt;GMatchInfo&lt;/a&gt; *match_info,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_get_match_count</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-get-match-count</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Retrieves the number of matched substrings (including substring 0, 
that is the whole matched text), so 1 is returned if the pattern 
has no substrings in it and 0 is returned if the match failed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_match_info_get_match_count (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&gt;GMatchInfo&lt;/a&gt; *match_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_is_partial_match</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-is-partial-match</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Usually if the string passed to g_regex_match*() matches as far as
it goes, but is too short to match the entire pattern, &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; is
returned. There are circumstances where it might be helpful to
distinguish this case from other cases in which there is no match.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_match_info_is_partial_match (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&gt;GMatchInfo&lt;/a&gt; *match_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_expand_references</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-expand-references</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Returns a new string containing the text in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string_to_expand&lt;/code&gt;&lt;/em&gt; with
references and escape sequences expanded. References refer to the last
match done with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; against &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/em&gt; and have the same syntax used by
&lt;a class=&quot;link&quot; href=&quot;glib-Perl-compatible-regular-expressions.html#g-regex-replace&quot; title=&quot;g_regex_replace ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_regex_replace()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_match_info_expand_references (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&quot;link&quot;&gt;GMatchInfo&lt;/a&gt; *match_info,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *string_to_expand,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_fetch</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-fetch</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Retrieves the text matching the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;match_num&lt;/code&gt;&lt;/em&gt;'th capturing 
parentheses. 0 is the full text of the match, 1 is the first paren 
set, 2 the second, and so on.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_match_info_fetch (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&quot;link&quot;&gt;GMatchInfo&lt;/a&gt; *match_info,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; match_num);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_fetch_pos</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-fetch-pos</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Retrieves the position of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;match_num&lt;/code&gt;&lt;/em&gt;'th capturing 
parentheses. 0 is the full text of the match, 1 is the first 
paren set, 2 the second, and so on.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_match_info_fetch_pos (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&quot;link&quot;&gt;GMatchInfo&lt;/a&gt; *match_info,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; match_num,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *start_pos,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; *end_pos);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_fetch_named</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-fetch-named</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Retrieves the text matching the capturing parentheses named &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_match_info_fetch_named (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&quot;link&quot;&gt;GMatchInfo&lt;/a&gt; *match_info,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_fetch_named_pos</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-fetch-named-pos</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Retrieves the position of the capturing parentheses named &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_match_info_fetch_named_pos (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&quot;link&quot;&gt;GMatchInfo&lt;/a&gt; *match_info,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *name,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *start_pos,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; *end_pos);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_match_info_fetch_all</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Perl-compatible-regular-expressions.html</Path>
  <Anchor>g-match-info-fetch-all</Anchor>
  <NodeRef refid="50"/>
  <Abstract type="html">Bundles up pointers to each of the matching substrings from a match
and stores them in an array of gchar pointers. The first element in
the returned array is the match number 0, i.e. the entire matched
text.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_match_info_fetch_all (
    const &lt;a class=&quot;glib-Perl-compatible-regular-expressions.html#GMatchInfo&quot; href=&quot;GMatchInfo&quot; title=&gt;GMatchInfo&lt;/a&gt; *match_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_ERROR_BAD_UTF8</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupError</Anchor>
  <NodeRef refid="1133"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_ERROR_BAD_UTF8&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_ERROR_EMPTY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupError</Anchor>
  <NodeRef refid="1133"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_ERROR_EMPTY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_ERROR_PARSE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupError</Anchor>
  <NodeRef refid="1133"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_ERROR_PARSE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_ERROR_UNKNOWN_ELEMENT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupError</Anchor>
  <NodeRef refid="1133"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_ERROR_UNKNOWN_ELEMENT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupError</Anchor>
  <NodeRef refid="1133"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_ERROR_INVALID_CONTENT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupError</Anchor>
  <NodeRef refid="1133"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_ERROR_INVALID_CONTENT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_ERROR_MISSING_ATTRIBUTE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupError</Anchor>
  <NodeRef refid="1133"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_ERROR_MISSING_ATTRIBUTE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMarkupError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupError</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Error codes returned by markup parsing.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_MARKUP_ERROR_BAD_UTF8,
    G_MARKUP_ERROR_EMPTY,
    G_MARKUP_ERROR_PARSE,
    G_MARKUP_ERROR_UNKNOWN_ELEMENT,
    G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
    G_MARKUP_ERROR_INVALID_CONTENT,
    G_MARKUP_ERROR_MISSING_ATTRIBUTE 
} GMarkupError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>G-MARKUP-ERROR:CAPS</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Error domain for markup parsing. Errors in this domain will
be from the &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupError&quot; title=&quot;enum GMarkupError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMarkupError&lt;/span&gt;&lt;/a&gt; enumeration. See &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; for information on 
error domains.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_MARKUP_ERROR g_markup_error_quark ()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupParseFlags</Anchor>
  <NodeRef refid="1135"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupParseFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_TREAT_CDATA_AS_TEXT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupParseFlags</Anchor>
  <NodeRef refid="1135"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_TREAT_CDATA_AS_TEXT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupParseFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_PREFIX_ERROR_POSITION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupParseFlags</Anchor>
  <NodeRef refid="1135"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_PREFIX_ERROR_POSITION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupParseFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMarkupParseFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupParseFlags</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Flags that affect the behaviour of the parser. </Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 &amp;lt;&amp;lt; 0,
    G_MARKUP_TREAT_CDATA_AS_TEXT = 1 &amp;lt;&amp;lt; 1,
    G_MARKUP_PREFIX_ERROR_POSITION = 1 &amp;lt;&amp;lt; 2 
} GMarkupParseFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMarkupParseContext</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupParseContext</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">A parse context is used to parse a stream of bytes that you expect to
contain marked-up text. See &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#g-markup-parse-context-new&quot; title=&quot;g_markup_parse_context_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_markup_parse_context_new()&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParser&quot; title=&quot;GMarkupParser&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMarkupParser&lt;/span&gt;&lt;/a&gt;, and so on for more details.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GMarkupParseContext GMarkupParseContext;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMarkupParser</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupParser</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Any of the fields in &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParser&quot; title=&quot;GMarkupParser&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMarkupParser&lt;/span&gt;&lt;/a&gt; can be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, in which case they
will be ignored. Except for the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/em&gt; function, any of these
callbacks can set an error; in particular the
&lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#G-MARKUP-ERROR-UNKNOWN-ELEMENT:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_MARKUP_ERROR_UNKNOWN_ELEMENT&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#G-MARKUP-ERROR-UNKNOWN-ATTRIBUTE:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE&lt;/code&gt;&lt;/a&gt;,
and &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#G-MARKUP-ERROR-INVALID-CONTENT:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_MARKUP_ERROR_INVALID_CONTENT&lt;/code&gt;&lt;/a&gt; errors are intended to be set 
from these callbacks. If you set an error from a callback,
&lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#g-markup-parse-context-parse&quot; title=&quot;g_markup_parse_context_parse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_markup_parse_context_parse()&lt;/code&gt;&lt;/a&gt; will report that error back to its caller.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    void (*start_element) (GMarkupParseContext *context, const gchar *element_name, const gchar **attribute_names, const gchar **attribute_values, gpointer user_data, GError **error);
    void (*end_element) (GMarkupParseContext *context, const gchar *element_name, gpointer user_data, GError **error);
    void (*text) (GMarkupParseContext *context, const gchar *text, gsize text_len, gpointer user_data, GError **error);
    void (*passthrough) (GMarkupParseContext *context, const gchar *passthrough_text, gsize text_len, gpointer user_data, GError **error);
    void (*error) (GMarkupParseContext *context, GError *error, gpointer user_data);
} GMarkupParser;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_escape_text</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-escape-text</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Escapes text so that the markup parser will parse it verbatim.
Less than, greater than, ampersand, etc. are replaced with the
corresponding entities. This function would typically be used
when writing out a file to be parsed with the markup parser.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_markup_escape_text (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *text,
    gssize length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_printf_escaped</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-printf-escaped</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Formats arguments according to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/em&gt;, escaping
all string and character arguments in the fashion
of &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#g-markup-escape-text&quot; title=&quot;g_markup_escape_text ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_markup_escape_text()&lt;/code&gt;&lt;/a&gt;. This is useful when you
want to insert literal strings into XML-style markup
output, without having to worry that the strings
might themselves contain markup.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_markup_printf_escaped (
    const char *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_vprintf_escaped</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-vprintf-escaped</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Formats the data in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/em&gt; according to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/em&gt;, escaping
all string and character arguments in the fashion
of &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#g-markup-escape-text&quot; title=&quot;g_markup_escape_text ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_markup_escape_text()&lt;/code&gt;&lt;/a&gt;. See &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#g-markup-printf-escaped&quot; title=&quot;g_markup_printf_escaped ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_markup_printf_escaped()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_markup_vprintf_escaped (
    const char *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_parse_context_end_parse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-parse-context-end-parse</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Signals to the &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; title=&quot;GMarkupParseContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMarkupParseContext&lt;/span&gt;&lt;/a&gt; that all data has been
fed into the parse context with &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#g-markup-parse-context-parse&quot; title=&quot;g_markup_parse_context_parse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_markup_parse_context_parse()&lt;/code&gt;&lt;/a&gt;.
This function reports an error if the document isn't complete,
for example if elements are still open.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_markup_parse_context_end_parse (
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; href=&quot;GMarkupParseContext&quot; title=&quot;link&quot;&gt;GMarkupParseContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_parse_context_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-parse-context-free</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Frees a &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; title=&quot;GMarkupParseContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMarkupParseContext&lt;/span&gt;&lt;/a&gt;. Can't be called from inside
one of the &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParser&quot; title=&quot;GMarkupParser&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMarkupParser&lt;/span&gt;&lt;/a&gt; functions. Can't be called while
a subparser is pushed.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_markup_parse_context_free (
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; href=&quot;GMarkupParseContext&quot; title=&gt;GMarkupParseContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_parse_context_get_position</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-parse-context-get-position</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Retrieves the current line number and the number of the character on
that line. Intended for use in error messages; there are no strict
semantics for what constitutes the &quot;current&quot; line number other than
&quot;the best number we could come up with for error messages.&quot;</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_markup_parse_context_get_position (
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; href=&quot;GMarkupParseContext&quot; title=&quot;link&quot;&gt;GMarkupParseContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; *line_number,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; *char_number);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_parse_context_get_element</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-parse-context-get-element</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Retrieves the name of the currently open element.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_markup_parse_context_get_element (
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; href=&quot;GMarkupParseContext&quot; title=&gt;GMarkupParseContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_parse_context_get_element_stack</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-parse-context-get-element-stack</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Retrieves the element stack from the internal state of the parser.
The returned &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; is a list of strings where the first item is
the currently open tag (as would be returned by
&lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#g-markup-parse-context-get-element&quot; title=&quot;g_markup_parse_context_get_element ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_markup_parse_context_get_element()&lt;/code&gt;&lt;/a&gt;) and the next item is its
immediate parent.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_markup_parse_context_get_element_stack (
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; href=&quot;GMarkupParseContext&quot; title=&gt;GMarkupParseContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_parse_context_get_user_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-parse-context-get-user-data</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Returns the user_data associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/em&gt;.  This will either
be the user_data that was provided to &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#g-markup-parse-context-new&quot; title=&quot;g_markup_parse_context_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_markup_parse_context_new()&lt;/code&gt;&lt;/a&gt;
or to the most recent call of &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#g-markup-parse-context-push&quot; title=&quot;g_markup_parse_context_push ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_markup_parse_context_push()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_markup_parse_context_get_user_data (
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; href=&quot;GMarkupParseContext&quot; title=&gt;GMarkupParseContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_parse_context_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-parse-context-new</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Creates a new parse context. A parse context is used to parse
marked-up documents. You can feed any number of documents into
a context, as long as no errors occur; once an error occurs,
the parse context can't continue to parse text (you have to free it
and create a new parse context).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; href=&quot;GMarkupParseContext&quot; title=&quot;link&quot;&gt;GMarkupParseContext&lt;/a&gt;* g_markup_parse_context_new (
    const &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParser&quot; href=&quot;GMarkupParser&quot; title=&quot;link&quot;&gt;GMarkupParser&lt;/a&gt; *parser,
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseFlags&quot; href=&quot;enum GMarkupParseFlags&quot; title=&quot;link&quot;&gt;GMarkupParseFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; user_data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; user_data_dnotify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_parse_context_parse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-parse-context-parse</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Feed some data to the &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; title=&quot;GMarkupParseContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMarkupParseContext&lt;/span&gt;&lt;/a&gt;. The data need not
be valid UTF-8; an error will be signaled if it's invalid.
The data need not be an entire document; you can feed a document
into the parser incrementally, via multiple calls to this function.
Typically, as you receive data from a network connection or file,
you feed each received chunk of data into this function, aborting
the process if an error occurs. Once an error is reported, no further
data may be fed to the &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; title=&quot;GMarkupParseContext&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMarkupParseContext&lt;/span&gt;&lt;/a&gt;; all errors are fatal.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_markup_parse_context_parse (
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; href=&quot;GMarkupParseContext&quot; title=&quot;link&quot;&gt;GMarkupParseContext&lt;/a&gt; *context,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *text,
    gssize text_len,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_parse_context_push</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-parse-context-push</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Temporarily redirects markup data to a sub-parser.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_markup_parse_context_push (
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; href=&quot;GMarkupParseContext&quot; title=&quot;link&quot;&gt;GMarkupParseContext&lt;/a&gt; *context,
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParser&quot; href=&quot;GMarkupParser&quot; title=&quot;link&quot;&gt;GMarkupParser&lt;/a&gt; *parser,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_parse_context_pop</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-parse-context-pop</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Completes the process of a temporary sub-parser redirection.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_markup_parse_context_pop (
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParseContext&quot; href=&quot;GMarkupParseContext&quot; title=&gt;GMarkupParseContext&lt;/a&gt; *context);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_COLLECT_INVALID</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupCollectType</Anchor>
  <NodeRef refid="1151"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_COLLECT_INVALID&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupCollectType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_COLLECT_STRING</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupCollectType</Anchor>
  <NodeRef refid="1151"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_COLLECT_STRING&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupCollectType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_COLLECT_STRDUP</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupCollectType</Anchor>
  <NodeRef refid="1151"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_COLLECT_STRDUP&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupCollectType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_COLLECT_BOOLEAN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupCollectType</Anchor>
  <NodeRef refid="1151"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_COLLECT_BOOLEAN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupCollectType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_COLLECT_TRISTATE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupCollectType</Anchor>
  <NodeRef refid="1151"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_COLLECT_TRISTATE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupCollectType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_MARKUP_COLLECT_OPTIONAL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupCollectType</Anchor>
  <NodeRef refid="1151"/>
  <Declaration type="html">&lt;pre&gt;G_MARKUP_COLLECT_OPTIONAL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GMarkupCollectType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMarkupCollectType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>GMarkupCollectType</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">A mixed enumerated type and flags field.  You must specify one type
(string, strdup, boolean, tristate).  Additionally, you may
optionally bitwise OR the type with the flag
&lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#G-MARKUP-COLLECT-OPTIONAL:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_MARKUP_COLLECT_OPTIONAL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_MARKUP_COLLECT_INVALID,
    G_MARKUP_COLLECT_STRING,
    G_MARKUP_COLLECT_STRDUP,
    G_MARKUP_COLLECT_BOOLEAN,
    G_MARKUP_COLLECT_TRISTATE,
    G_MARKUP_COLLECT_OPTIONAL = (1 &amp;lt;&amp;lt; 16) 
} GMarkupCollectType;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_markup_collect_attributes</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Simple-XML-Subset-Parser.html</Path>
  <Anchor>g-markup-collect-attributes</Anchor>
  <NodeRef refid="51"/>
  <Abstract type="html">Collects the attributes of the element from the
data passed to the &lt;a class=&quot;link&quot; href=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupParser&quot; title=&quot;GMarkupParser&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMarkupParser&lt;/span&gt;&lt;/a&gt; start_element
function, dealing with common error conditions
and supporting boolean values.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_markup_collect_attributes (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *element_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **attribute_names,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **attribute_values,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&quot;link&quot;&gt;GError&lt;/a&gt; **error,
    &lt;a class=&quot;glib-Simple-XML-Subset-Parser.html#GMarkupCollectType&quot; href=&quot;enum GMarkupCollectType&quot; title=&quot;link&quot;&gt;GMarkupCollectType&lt;/a&gt; first_type,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *first_attr,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GKeyFile</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFile</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GKeyFile&lt;/span&gt; struct contains only private fields
and should not be used directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GKeyFile GKeyFile;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-ERROR:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Error domain for key file parsing. Errors in this domain will
be from the &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#GKeyFileError&quot; title=&quot;enum GKeyFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GKeyFileError&lt;/span&gt;&lt;/a&gt; enumeration. See &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; for information on 
error domains.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_ERROR g_key_file_error_quark()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_ERROR_UNKNOWN_ENCODING</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileError</Anchor>
  <NodeRef refid="1155"/>
  <Declaration type="html">&lt;pre&gt;G_KEY_FILE_ERROR_UNKNOWN_ENCODING&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GKeyFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_ERROR_PARSE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileError</Anchor>
  <NodeRef refid="1155"/>
  <Declaration type="html">&lt;pre&gt;G_KEY_FILE_ERROR_PARSE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GKeyFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_ERROR_NOT_FOUND</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileError</Anchor>
  <NodeRef refid="1155"/>
  <Declaration type="html">&lt;pre&gt;G_KEY_FILE_ERROR_NOT_FOUND&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GKeyFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_ERROR_KEY_NOT_FOUND</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileError</Anchor>
  <NodeRef refid="1155"/>
  <Declaration type="html">&lt;pre&gt;G_KEY_FILE_ERROR_KEY_NOT_FOUND&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GKeyFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_ERROR_GROUP_NOT_FOUND</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileError</Anchor>
  <NodeRef refid="1155"/>
  <Declaration type="html">&lt;pre&gt;G_KEY_FILE_ERROR_GROUP_NOT_FOUND&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GKeyFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_ERROR_INVALID_VALUE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileError</Anchor>
  <NodeRef refid="1155"/>
  <Declaration type="html">&lt;pre&gt;G_KEY_FILE_ERROR_INVALID_VALUE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GKeyFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GKeyFileError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileError</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Error codes returned by key file parsing.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_KEY_FILE_ERROR_UNKNOWN_ENCODING,
    G_KEY_FILE_ERROR_PARSE,
    G_KEY_FILE_ERROR_NOT_FOUND,
    G_KEY_FILE_ERROR_KEY_NOT_FOUND,
    G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
    G_KEY_FILE_ERROR_INVALID_VALUE 
} GKeyFileError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_NONE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileFlags</Anchor>
  <NodeRef refid="1156"/>
  <Declaration type="html">&lt;pre&gt;G_KEY_FILE_NONE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GKeyFileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_KEEP_COMMENTS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileFlags</Anchor>
  <NodeRef refid="1156"/>
  <Declaration type="html">&lt;pre&gt;G_KEY_FILE_KEEP_COMMENTS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GKeyFileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_KEEP_TRANSLATIONS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileFlags</Anchor>
  <NodeRef refid="1156"/>
  <Declaration type="html">&lt;pre&gt;G_KEY_FILE_KEEP_TRANSLATIONS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GKeyFileFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GKeyFileFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>GKeyFileFlags</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Flags which influence the parsing.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_KEY_FILE_NONE = 0,
    G_KEY_FILE_KEEP_COMMENTS = 1 &amp;lt;&amp;lt; 0,
    G_KEY_FILE_KEEP_TRANSLATIONS = 1 &amp;lt;&amp;lt; 1 
} GKeyFileFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-new</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Creates a new empty &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; title=&quot;GKeyFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GKeyFile&lt;/span&gt;&lt;/a&gt; object. Use
&lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#g-key-file-load-from-file&quot; title=&quot;g_key_file_load_from_file ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_key_file_load_from_file()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#g-key-file-load-from-data&quot; title=&quot;g_key_file_load_from_data ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_key_file_load_from_data()&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#g-key-file-load-from-dirs&quot; title=&quot;g_key_file_load_from_dirs ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_key_file_load_from_dirs()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#g-key-file-load-from-data-dirs&quot; title=&quot;g_key_file_load_from_data_dirs ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_key_file_load_from_data_dirs()&lt;/code&gt;&lt;/a&gt; to
read an existing key file.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&gt;GKeyFile&lt;/a&gt;* g_key_file_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-free</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Frees a &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; title=&quot;GKeyFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GKeyFile&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_free (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&gt;GKeyFile&lt;/a&gt; *key_file);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_list_separator</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-list-separator</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Sets the character which is used to separate
values in lists. Typically ';' or ',' are used
as separators. The default list separator is ';'.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_list_separator (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; separator);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_load_from_file</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-load-from-file</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Loads a key file into an empty &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; title=&quot;GKeyFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GKeyFile&lt;/span&gt;&lt;/a&gt; structure.
If the file could not be loaded then &lt;code class=&quot;literal&quot;&gt;error&lt;/code&gt; is set to 
either a &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GFileError&quot; title=&quot;enum GFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFileError&lt;/span&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#GKeyFileError&quot; title=&quot;enum GKeyFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GKeyFileError&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_load_from_file (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *file,
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFileFlags&quot; href=&quot;enum GKeyFileFlags&quot; title=&quot;link&quot;&gt;GKeyFileFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_load_from_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-load-from-data</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Loads a key file from memory into an empty &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; title=&quot;GKeyFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GKeyFile&lt;/span&gt;&lt;/a&gt; structure.  
If the object cannot be created then &lt;code class=&quot;literal&quot;&gt;error&lt;/code&gt; is set to a &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#GKeyFileError&quot; title=&quot;enum GKeyFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GKeyFileError&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_load_from_data (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *data,
    gsize length,
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFileFlags&quot; href=&quot;enum GKeyFileFlags&quot; title=&quot;link&quot;&gt;GKeyFileFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_load_from_data_dirs</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-load-from-data-dirs</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">This function looks for a key file named &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;file&lt;/code&gt;&lt;/em&gt; in the paths 
returned from &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-get-user-data-dir&quot; title=&quot;g_get_user_data_dir ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_user_data_dir()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-get-system-data-dirs&quot; title=&quot;g_get_system_data_dirs ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_system_data_dirs()&lt;/code&gt;&lt;/a&gt;, 
loads the file into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_file&lt;/code&gt;&lt;/em&gt; and returns the file's full path in 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;full_path&lt;/code&gt;&lt;/em&gt;.  If the file could not be loaded then an &lt;code class=&quot;literal&quot;&gt;error&lt;/code&gt; is
set to either a &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GFileError&quot; title=&quot;enum GFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFileError&lt;/span&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#GKeyFileError&quot; title=&quot;enum GKeyFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GKeyFileError&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_load_from_data_dirs (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *file,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **full_path,
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFileFlags&quot; href=&quot;enum GKeyFileFlags&quot; title=&quot;link&quot;&gt;GKeyFileFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_load_from_dirs</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-load-from-dirs</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">This function looks for a key file named &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;file&lt;/code&gt;&lt;/em&gt; in the paths
specified in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;search_dirs&lt;/code&gt;&lt;/em&gt;, loads the file into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_file&lt;/code&gt;&lt;/em&gt; and
returns the file's full path in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;full_path&lt;/code&gt;&lt;/em&gt;.  If the file could not
be loaded then an &lt;code class=&quot;literal&quot;&gt;error&lt;/code&gt; is set to either a &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GFileError&quot; title=&quot;enum GFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFileError&lt;/span&gt;&lt;/a&gt; or
&lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#GKeyFileError&quot; title=&quot;enum GKeyFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GKeyFileError&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_load_from_dirs (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **search_dirs,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **full_path,
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFileFlags&quot; href=&quot;enum GKeyFileFlags&quot; title=&quot;link&quot;&gt;GKeyFileFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_to_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-to-data</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">This function outputs &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_file&lt;/code&gt;&lt;/em&gt; as a string.  </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_key_file_to_data (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_start_group</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-start-group</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the name of the start group of the file.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_key_file_get_start_group (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&gt;GKeyFile&lt;/a&gt; *key_file);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_groups</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-groups</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns all groups in the key file loaded with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_file&lt;/code&gt;&lt;/em&gt;.  
The array of returned groups will be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;-terminated, so 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/em&gt; may optionally be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_key_file_get_groups (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&gt;GKeyFile&lt;/a&gt; *key_file,
    gsize *length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_keys</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-keys</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns all keys for the group name &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  The array of
returned keys will be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;-terminated, so &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/em&gt; may
optionally be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;. In the event that the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; cannot
be found, &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is returned and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/em&gt; is set to
&lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-ERROR-GROUP-NOT-FOUND:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_KEY_FILE_ERROR_GROUP_NOT_FOUND&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_key_file_get_keys (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_has_group</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-has-group</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Looks whether the key file has the group &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_has_group (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *group_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_has_key</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-has-key</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Looks whether the key file has the key &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; in the group
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_has_key (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_value</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-value</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the value associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_key_file_get_value (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-string</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the value associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_key_file_get_string (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_locale_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-locale-string</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the value associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;
translated in the given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;locale&lt;/code&gt;&lt;/em&gt; if available.  If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;locale&lt;/code&gt;&lt;/em&gt; is
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; then the current locale is assumed. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_key_file_get_locale_string (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *locale,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_boolean</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-boolean</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the value associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; as a
boolean. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_get_boolean (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_integer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-integer</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the value associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; as an
integer. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_key_file_get_integer (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_double</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-double</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the value associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; as a
double. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, the start_group is used.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&quot;link&quot;&gt;gdouble&lt;/a&gt; g_key_file_get_double (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_string_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-string-list</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the values associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_key_file_get_string_list (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_locale_string_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-locale-string-list</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the values associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;
translated in the given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;locale&lt;/code&gt;&lt;/em&gt; if available.  If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;locale&lt;/code&gt;&lt;/em&gt; is
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; then the current locale is assumed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_key_file_get_locale_string_list (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *locale,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_boolean_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-boolean-list</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the values associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; as
booleans. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt;* g_key_file_get_boolean_list (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_integer_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-integer-list</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the values associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; as
integers. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt;* g_key_file_get_integer_list (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_double_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-double-list</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Returns the values associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; as
doubles. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&quot;link&quot;&gt;gdouble&lt;/a&gt;* g_key_file_get_double_list (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_get_comment</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-get-comment</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Retrieves a comment above &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; then &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/em&gt; will be read from above 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;. If both &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; are &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, then 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/em&gt; will be read from above the first group in the file.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_key_file_get_comment (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_value</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-value</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a new value with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then it is created. 
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_value (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-string</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a new string value with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.  
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_string (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_locale_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-locale-string</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a string value for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;locale&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  
If the translation for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_locale_string (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *locale,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_boolean</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-boolean</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a new boolean value with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_boolean (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_integer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-integer</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a new integer value with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_integer (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_double</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-double</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a new double value with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_double (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&gt;gdouble&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_string_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-string-list</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a list of string values for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.  
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_string_list (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; * const list[],
    gsize length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_locale_string_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-locale-string-list</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a list of string values for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;locale&lt;/code&gt;&lt;/em&gt; under
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  If the translation for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then
it is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_locale_string_list (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *locale,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; * const list[],
    gsize length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_boolean_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-boolean-list</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a list of boolean values with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, the start_group is used.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_boolean_list (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; list[],
    gsize length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_integer_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-integer-list</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a list of integer values with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_integer_list (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; list[],
    gsize length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_double_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-double-list</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Associates a list of double values with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; under
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; cannot be found then it is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_key_file_set_double_list (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Basic-Types.html#gdouble&quot; href=&quot;gdouble&quot; title=&gt;gdouble&lt;/a&gt; list[],
    gsize length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_set_comment</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-set-comment</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Places a comment above &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; then &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/em&gt; will be written above &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.  
If both &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;  are &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, then &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/em&gt; will be 
written above the first group in the file.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_set_comment (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *comment,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_remove_group</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-remove-group</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Removes the specified group, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;, 
from the key file.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_remove_group (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_remove_key</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-remove-key</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Removes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; from the key file.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_remove_key (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_key_file_remove_comment</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>g-key-file-remove-comment</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">Removes a comment above &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; then &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/em&gt; will be removed above &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt;. 
If both &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group_name&lt;/code&gt;&lt;/em&gt; are &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, then &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/em&gt; will
be removed above the first group in the file.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_key_file_remove_comment (
    &lt;a class=&quot;glib-Key-value-file-parser.html#GKeyFile&quot; href=&quot;GKeyFile&quot; title=&quot;link&quot;&gt;GKeyFile&lt;/a&gt; *key_file,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_GROUP</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-GROUP:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">The name of the main group of a desktop entry file, as defined in the
&lt;a class=&quot;ulink&quot; href=&quot;http://freedesktop.org/Standards/desktop-entry-spec&quot; target=&quot;_top&quot;&gt;Desktop
Entry Specification&lt;/a&gt;. Consult the specification for more
details about the meanings of the keys below.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_GROUP &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-TYPE:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a string giving the type of the desktop entry. Usually
&lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-TYPE-APPLICATION:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_TYPE_APPLICATION&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_TYPE_APPLICATION&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-TYPE-LINK:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_TYPE_LINK&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_TYPE_LINK&lt;/code&gt;&lt;/a&gt;, or
&lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-TYPE-DIRECTORY:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_TYPE_DIRECTORY&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_TYPE_DIRECTORY&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_TYPE &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_VERSION</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-VERSION:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a string giving the version of the Desktop
Entry Specification used for the desktop entry file.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_VERSION &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_NAME</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-NAME:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a localized string giving the specific name of the
desktop entry.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_NAME &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-GENERIC-NAME:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a localized string giving the generic name of the
desktop entry.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-NO-DISPLAY:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a boolean stating whether the desktop entry should be
shown in menus.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_COMMENT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-COMMENT:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a localized string giving the tooltip for the desktop
entry.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_COMMENT &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_ICON</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-ICON:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a localized string giving the name of the icon to be
displayed for the desktop entry.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_ICON &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_HIDDEN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-HIDDEN:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a boolean stating whether the desktop entry has been
deleted by the user.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_HIDDEN &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-ONLY-SHOW-IN:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a list of strings identifying the environments that
should display the desktop entry.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-NOT-SHOW-IN:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a list of strings identifying the environments that
should not display the desktop entry.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_TRY_EXEC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-TRY-EXEC:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a string giving the file name of a binary on disk
used to determine if the program is actually installed. It is only
valid for desktop entries with the &lt;code class=&quot;literal&quot;&gt;Application&lt;/code&gt;
type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_TRY_EXEC &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_EXEC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-EXEC:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a string giving the command line to execute. It is only
valid for desktop entries with the &lt;code class=&quot;literal&quot;&gt;Application&lt;/code&gt;
type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_EXEC &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_PATH</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-PATH:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a string containing the working directory to run the
program in. It is only valid for desktop entries with the
&lt;code class=&quot;literal&quot;&gt;Application&lt;/code&gt; type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_PATH &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_TERMINAL</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-TERMINAL:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a boolean stating whether the program should be
run in a terminal window. It is only valid for desktop entries with
the &lt;code class=&quot;literal&quot;&gt;Application&lt;/code&gt; type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_TERMINAL &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_MIME_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-MIME-TYPE:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a list of strings giving the MIME types supported
by this desktop entry.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_MIME_TYPE &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_CATEGORIES</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-CATEGORIES:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a list of strings giving the categories in which the
desktop entry should be shown in a menu.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_CATEGORIES &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-STARTUP-NOTIFY:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a boolean stating whether the application supports
the &lt;a class=&quot;ulink&quot; href=&quot;http://www.freedesktop.org/Standards/startup-notification-spec&quot; target=&quot;_top&quot;&gt;Startup
Notification Protocol Specification&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-STARTUP-WM-CLASS:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is string identifying the WM class or name hint of a
window that the application will create, which can be used to emulate
Startup Notification with older applications.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_KEY_URL</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-KEY-URL:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">A key under &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-GROUP:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_GROUP&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_GROUP&lt;/code&gt;&lt;/a&gt;
whose value is a string giving the URL to access. It is only valid
for desktop entries with the &lt;code class=&quot;literal&quot;&gt;Link&lt;/code&gt; type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_KEY_URL &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_TYPE_APPLICATION</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-TYPE-APPLICATION:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">The value of the &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-KEY-TYPE:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_KEY_TYPE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_KEY_TYPE&lt;/code&gt;&lt;/a&gt;
key for desktop entries representing applications.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_TYPE_APPLICATION &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_TYPE_LINK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-TYPE-LINK:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">The value of the &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-KEY-TYPE:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_KEY_TYPE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_KEY_TYPE&lt;/code&gt;&lt;/a&gt;
key for desktop entries representing links to documents.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_TYPE_LINK &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_KEY_FILE_DESKTOP_TYPE_DIRECTORY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Key-value-file-parser.html</Path>
  <Anchor>G-KEY-FILE-DESKTOP-TYPE-DIRECTORY:CAPS</Anchor>
  <NodeRef refid="52"/>
  <Abstract type="html">The value of the &lt;a class=&quot;link&quot; href=&quot;glib-Key-value-file-parser.html#G-KEY-FILE-DESKTOP-KEY-TYPE:CAPS&quot; title=&quot;G_KEY_FILE_DESKTOP_KEY_TYPE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_KEY_FILE_DESKTOP_KEY_TYPE&lt;/code&gt;&lt;/a&gt;
key for desktop entries representing directories.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_KEY_FILE_DESKTOP_TYPE_DIRECTORY &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GBookmarkFile</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>GBookmarkFile</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GBookmarkFile&lt;/span&gt; struct contains only private data
and should not be used directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GBookmarkFile GBookmarkFile;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BOOKMARK_FILE_ERROR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>G-BOOKMARK-FILE-ERROR:CAPS</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Error domain for bookmark file parsing. Errors in this domain will be
from the &lt;a class=&quot;link&quot; href=&quot;glib-Bookmark-file-parser.html#GBookmarkFileError&quot; title=&quot;enum GBookmarkFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GBookmarkFileError&lt;/span&gt;&lt;/a&gt; enumeration. See &lt;a class=&quot;link&quot; href=&quot;glib-Error-Reporting.html#GError&quot; title=&quot;GError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GError&lt;/span&gt;&lt;/a&gt; for informations
on error domains.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_BOOKMARK_FILE_ERROR (g_bookmark_file_error_quark ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BOOKMARK_FILE_ERROR_INVALID_URI</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>GBookmarkFileError</Anchor>
  <NodeRef refid="1222"/>
  <Declaration type="html">&lt;pre&gt;G_BOOKMARK_FILE_ERROR_INVALID_URI&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GBookmarkFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BOOKMARK_FILE_ERROR_INVALID_VALUE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>GBookmarkFileError</Anchor>
  <NodeRef refid="1222"/>
  <Declaration type="html">&lt;pre&gt;G_BOOKMARK_FILE_ERROR_INVALID_VALUE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GBookmarkFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>GBookmarkFileError</Anchor>
  <NodeRef refid="1222"/>
  <Declaration type="html">&lt;pre&gt;G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GBookmarkFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>GBookmarkFileError</Anchor>
  <NodeRef refid="1222"/>
  <Declaration type="html">&lt;pre&gt;G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GBookmarkFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BOOKMARK_FILE_ERROR_READ</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>GBookmarkFileError</Anchor>
  <NodeRef refid="1222"/>
  <Declaration type="html">&lt;pre&gt;G_BOOKMARK_FILE_ERROR_READ&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GBookmarkFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>GBookmarkFileError</Anchor>
  <NodeRef refid="1222"/>
  <Declaration type="html">&lt;pre&gt;G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GBookmarkFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BOOKMARK_FILE_ERROR_WRITE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>GBookmarkFileError</Anchor>
  <NodeRef refid="1222"/>
  <Declaration type="html">&lt;pre&gt;G_BOOKMARK_FILE_ERROR_WRITE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GBookmarkFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>GBookmarkFileError</Anchor>
  <NodeRef refid="1222"/>
  <Declaration type="html">&lt;pre&gt;G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GBookmarkFileError</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GBookmarkFileError</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>GBookmarkFileError</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Error codes returned by bookmark file parsing.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_BOOKMARK_FILE_ERROR_INVALID_URI,
    G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
    G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
    G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
    G_BOOKMARK_FILE_ERROR_READ,
    G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING,
    G_BOOKMARK_FILE_ERROR_WRITE,
    G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND 
} GBookmarkFileError;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-new</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Creates a new empty &lt;a class=&quot;link&quot; href=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; title=&quot;GBookmarkFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GBookmarkFile&lt;/span&gt;&lt;/a&gt; object.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&gt;GBookmarkFile&lt;/a&gt;* g_bookmark_file_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-free</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Frees a &lt;a class=&quot;link&quot; href=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; title=&quot;GBookmarkFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GBookmarkFile&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_free (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&gt;GBookmarkFile&lt;/a&gt; *bookmark);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_load_from_file</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-load-from-file</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Loads a desktop bookmark file into an empty &lt;a class=&quot;link&quot; href=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; title=&quot;GBookmarkFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GBookmarkFile&lt;/span&gt;&lt;/a&gt; structure.
If the file could not be loaded then &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/em&gt; is set to either a &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GFileError&quot; title=&quot;enum GFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFileError&lt;/span&gt;&lt;/a&gt;
or &lt;a class=&quot;link&quot; href=&quot;glib-Bookmark-file-parser.html#GBookmarkFileError&quot; title=&quot;enum GBookmarkFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GBookmarkFileError&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_load_from_file (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_load_from_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-load-from-data</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Loads a bookmark file from memory into an empty &lt;a class=&quot;link&quot; href=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; title=&quot;GBookmarkFile&quot;&gt;&lt;span class=&quot;type&quot;&gt;GBookmarkFile&lt;/span&gt;&lt;/a&gt;
structure.  If the object cannot be created then &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/em&gt; is set to a
&lt;a class=&quot;link&quot; href=&quot;glib-Bookmark-file-parser.html#GBookmarkFileError&quot; title=&quot;enum GBookmarkFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GBookmarkFileError&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_load_from_data (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *data,
    gsize length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_load_from_data_dirs</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-load-from-data-dirs</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">This function looks for a desktop bookmark file named &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;file&lt;/code&gt;&lt;/em&gt; in the
paths returned from &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-get-user-data-dir&quot; title=&quot;g_get_user_data_dir ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_user_data_dir()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-get-system-data-dirs&quot; title=&quot;g_get_system_data_dirs ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_system_data_dirs()&lt;/code&gt;&lt;/a&gt;, 
loads the file into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt; and returns the file's full path in 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;full_path&lt;/code&gt;&lt;/em&gt;.  If the file could not be loaded then an &lt;code class=&quot;literal&quot;&gt;error&lt;/code&gt; is
set to either a &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#GFileError&quot; title=&quot;enum GFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFileError&lt;/span&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Bookmark-file-parser.html#GBookmarkFileError&quot; title=&quot;enum GBookmarkFileError&quot;&gt;&lt;span class=&quot;type&quot;&gt;GBookmarkFileError&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_load_from_data_dirs (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *file,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **full_path,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_to_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-to-data</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">This function outputs &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt; as a string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_bookmark_file_to_data (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_to_file</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-to-file</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">This function outputs &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt; into a file.  The write process is
guaranteed to be atomic by using &lt;a class=&quot;link&quot; href=&quot;glib-File-Utilities.html#g-file-set-contents&quot; title=&quot;g_file_set_contents ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_file_set_contents()&lt;/code&gt;&lt;/a&gt; internally.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_to_file (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *filename,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_has_item</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-has-item</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Looks whether the desktop bookmark has an item with its URI set to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_has_item (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *uri);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_has_group</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-has-group</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/em&gt; appears in the list of groups to which
the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; belongs to.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_has_group (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_has_application</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-has-application</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Checks whether the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; inside &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt; has been
registered by application &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_has_application (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *name,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_size</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-size</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Gets the number of bookmarks inside &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_bookmark_file_get_size (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&gt;GBookmarkFile&lt;/a&gt; *bookmark);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_uris</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-uris</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Returns all URIs of the bookmarks in the bookmark file &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt;.
The array of returned URIs will be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;-terminated, so &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/em&gt; may
optionally be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_bookmark_file_get_uris (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    gsize *length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_title</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-title</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Returns the title of the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_bookmark_file_get_title (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_description</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-description</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Retrieves the description of the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_bookmark_file_get_description (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_mime_type</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-mime-type</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Retrieves the MIME type of the resource pointed by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_bookmark_file_get_mime_type (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_is_private</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-is-private</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Gets whether the private flag of the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; is set.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_get_is_private (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_icon</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-icon</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Gets the icon of the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_get_icon (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **href,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **mime_type,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_added</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-added</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Gets the time the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; was added to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;time_t g_bookmark_file_get_added (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_modified</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-modified</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Gets the time when the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; was last modified.</Abstract>
  <Declaration type="html">&lt;pre&gt;time_t g_bookmark_file_get_modified (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_visited</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-visited</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Gets the time the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; was last visited.</Abstract>
  <Declaration type="html">&lt;pre&gt;time_t g_bookmark_file_get_visited (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_groups</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-groups</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Retrieves the list of group names of the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_bookmark_file_get_groups (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_applications</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-applications</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Retrieves the names of the applications that have registered the
bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;** g_bookmark_file_get_applications (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    gsize *length,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_get_app_info</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-get-app-info</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Gets the registration informations of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;app_name&lt;/code&gt;&lt;/em&gt; for the bookmark for
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.  See &lt;a class=&quot;link&quot; href=&quot;glib-Bookmark-file-parser.html#g-bookmark-file-set-app-info&quot; title=&quot;g_bookmark_file_set_app_info ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_bookmark_file_set_app_info()&lt;/code&gt;&lt;/a&gt; for more informations about
the returned data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_get_app_info (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *name,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; **exec,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; *count,
    time_t *stamp,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_set_title</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-set-title</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Sets &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;title&lt;/code&gt;&lt;/em&gt; as the title of the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; inside the
bookmark file &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_set_title (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *title);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_set_description</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-set-description</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Sets &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/em&gt; as the description of the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_set_description (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *description);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_set_mime_type</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-set-mime-type</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Sets &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mime_type&lt;/code&gt;&lt;/em&gt; as the MIME type of the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_set_mime_type (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *mime_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_set_is_private</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-set-is-private</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Sets the private flag of the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_set_is_private (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; is_private);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_set_icon</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-set-icon</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Sets the icon for the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;href&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, unsets
the currently set icon. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;href&lt;/code&gt;&lt;/em&gt; can either be a full URL for the icon
file or the icon name following the Icon Naming specification.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_set_icon (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *href,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *mime_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_set_added</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-set-added</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Sets the time the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; was added into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_set_added (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *uri,
    time_t added);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_set_groups</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-set-groups</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Sets a list of group names for the item with URI &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;.  Each previously
set group name list is removed.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_set_groups (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; **groups,
    gsize length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_set_modified</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-set-modified</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Sets the last time the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; was last modified.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_set_modified (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *uri,
    time_t modified);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_set_visited</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-set-visited</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Sets the time the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; was last visited.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_set_visited (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *uri,
    time_t visited);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_set_app_info</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-set-app-info</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Sets the meta-data of application &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt; inside the list of
applications that have registered a bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; inside
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_set_app_info (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *exec,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; count,
    time_t stamp,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_add_group</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-add-group</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Adds &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/em&gt; to the list of groups to which the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt;
belongs to.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_add_group (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *group);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_add_application</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-add-application</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Adds the application with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/em&gt; to the list of
applications that have registered a bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; into
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_bookmark_file_add_application (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *exec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_remove_group</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-remove-group</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Removes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/em&gt; from the list of groups to which the bookmark
for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; belongs to.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_remove_group (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *group,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_remove_application</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-remove-application</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Removes application registered with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt; from the list of applications
that have registered a bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; inside &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_remove_application (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *name,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_remove_item</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-remove-item</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Removes the bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;uri&lt;/code&gt;&lt;/em&gt; from the bookmark file &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bookmark&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_remove_item (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *uri,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_bookmark_file_move_item</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Bookmark-file-parser.html</Path>
  <Anchor>g-bookmark-file-move-item</Anchor>
  <NodeRef refid="53"/>
  <Abstract type="html">Changes the URI of a bookmark item from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;old_uri&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;new_uri&lt;/code&gt;&lt;/em&gt;.  Any
existing bookmark for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;new_uri&lt;/code&gt;&lt;/em&gt; will be overwritten.  If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;new_uri&lt;/code&gt;&lt;/em&gt; is
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, then the bookmark is removed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_bookmark_file_move_item (
    &lt;a class=&quot;glib-Bookmark-file-parser.html#GBookmarkFile&quot; href=&quot;GBookmarkFile&quot; title=&quot;link&quot;&gt;GBookmarkFile&lt;/a&gt; *bookmark,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *old_uri,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *new_uri,
    &lt;a class=&quot;glib-Error-Reporting.html#GError&quot; href=&quot;GError&quot; title=&gt;GError&lt;/a&gt; **error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_minimized_result</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-minimized-result</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Report the result of a performance or measurement test.
The test should generally strive to minimize the reported
quantities (smaller values are better than larger ones),
this and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;minimized_quantity&lt;/code&gt;&lt;/em&gt; can determine sorting
order for test result reports.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_minimized_result (
    double minimized_quantity,
    const char *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_maximized_result</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-maximized-result</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Report the result of a performance or measurement test.
The test should generally strive to maximize the reported
quantities (larger values are better than smaller ones),
this and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;maximized_quantity&lt;/code&gt;&lt;/em&gt; can determine sorting
order for test result reports.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_maximized_result (
    double maximized_quantity,
    const char *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-init</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Initialize the GLib testing framework, e.g. by seeding the
test random number generator, the name for &lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-get-prgname&quot; title=&quot;g_get_prgname ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_get_prgname()&lt;/code&gt;&lt;/a&gt;
and parsing test related command line args.
So far, the following arguments are understood:</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_init (
    int *argc,
    char ***argv,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_quick</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-quick</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if tests are run in quick mode.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_quick()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_slow</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-slow</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if tests are run in slow mode.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_slow()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_thorough</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-thorough</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if tests are run in thorough mode.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_thorough()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_perf</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-perf</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if tests are run in performance mode.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_perf()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_verbose</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-verbose</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if tests are run in verbose mode.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_verbose()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_quiet</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-quiet</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if tests are run in quiet mode.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_quiet()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_run</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-run</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Runs all tests under the toplevel suite which can be retrieved
with &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-get-root&quot; title=&quot;g_test_get_root ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_get_root()&lt;/code&gt;&lt;/a&gt;. Similar to &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-run-suite&quot; title=&quot;g_test_run_suite ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_run_suite()&lt;/code&gt;&lt;/a&gt;, the test
cases to be run are filtered according to
test path arguments (-p &lt;em class=&quot;replaceable&quot;&gt;&lt;code&gt;testpath&lt;/code&gt;&lt;/em&gt;) as 
parsed by &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-init&quot; title=&quot;g_test_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_init()&lt;/code&gt;&lt;/a&gt;.
&lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-run-suite&quot; title=&quot;g_test_run_suite ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_run_suite()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-run&quot; title=&quot;g_test_run ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_run()&lt;/code&gt;&lt;/a&gt; may only be called once
in a program.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_test_run (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_add_func</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-add-func</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Create a new test case, similar to &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-create-case&quot; title=&quot;g_test_create_case ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_create_case()&lt;/code&gt;&lt;/a&gt;. However
the test is assumed to use no fixture, and test suites are automatically
created on the fly and added to the root fixture, based on the
slash-separated portions of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;testpath&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_add_func (
    const char *testpath,
    void (
    test_funcvoid) (
    ));&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_add_data_func</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-add-data-func</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Create a new test case, similar to &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-create-case&quot; title=&quot;g_test_create_case ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_create_case()&lt;/code&gt;&lt;/a&gt;. However
the test is assumed to use no fixture, and test suites are automatically
created on the fly and added to the root fixture, based on the
slash-separated portions of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;testpath&lt;/code&gt;&lt;/em&gt;. The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;test_data&lt;/code&gt;&lt;/em&gt; argument
will be passed as first argument to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;test_func&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_add_data_func (
    const char *testpath,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; test_data,
    void (
    test_funcgconstpointer) (
    ));&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_add</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-add</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Hook up a new test case at &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;testpath&lt;/code&gt;&lt;/em&gt;, similar to &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-add-func&quot; title=&quot;g_test_add_func ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_add_func()&lt;/code&gt;&lt;/a&gt;.
A fixture data structure with setup and teardown function may be provided
though, similar to &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-create-case&quot; title=&quot;g_test_create_case ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_create_case()&lt;/code&gt;&lt;/a&gt;.
&lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-add&quot; title=&quot;g_test_add()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_add()&lt;/code&gt;&lt;/a&gt; is implemented as a macro, so that the &lt;code class=&quot;function&quot;&gt;fsetup()&lt;/code&gt;, &lt;code class=&quot;function&quot;&gt;ftest()&lt;/code&gt; and
&lt;code class=&quot;function&quot;&gt;fteardown()&lt;/code&gt; callbacks can expect a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;Fixture&lt;/code&gt;&lt;/em&gt; pointer as first argument in
a type safe manner.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_add(testpath, Fixture, tdata, fsetup, ftest, fteardown)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_message</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-message</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Add a message to the test report.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_message (
    const char *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_bug_base</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-bug-base</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Specify the base URI for bug reports.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_bug_base (
    const char *uri_pattern);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_bug</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-bug</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">This function adds a message to test reports that
associates a bug URI with a test case.
Bug URIs are constructed from a base URI set with &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-bug-base&quot; title=&quot;g_test_bug_base ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_bug_base()&lt;/code&gt;&lt;/a&gt;
and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;bug_uri_snippet&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_bug (
    const char *bug_uri_snippet);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_timer_start</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-timer-start</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Start a timing test. Call &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-timer-elapsed&quot; title=&quot;g_test_timer_elapsed ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_timer_elapsed()&lt;/code&gt;&lt;/a&gt; when the task is supposed
to be done. Call this function again to restart the timer.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_timer_start (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_timer_elapsed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-timer-elapsed</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Get the time since the last start of the timer with &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-timer-start&quot; title=&quot;g_test_timer_start ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_timer_start()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;double g_test_timer_elapsed (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_timer_last</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-timer-last</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Report the last result of &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-timer-elapsed&quot; title=&quot;g_test_timer_elapsed ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_timer_elapsed()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;double g_test_timer_last (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_queue_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-queue-free</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Enqueue a pointer to be released with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-free&quot; title=&quot;g_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_free()&lt;/code&gt;&lt;/a&gt; during the next
teardown phase. This is equivalent to calling &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-queue-destroy&quot; title=&quot;g_test_queue_destroy ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_queue_destroy()&lt;/code&gt;&lt;/a&gt;
with a destroy callback of &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-free&quot; title=&quot;g_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_free()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_queue_free (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; gfree_pointer);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_queue_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-queue-destroy</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">This function enqueus a callback @&lt;code class=&quot;function&quot;&gt;destroy_func()&lt;/code&gt; to be executed
during the next test case teardown phase. This is most useful
to auto destruct allocted test resources at the end of a test run.
Resources are released in reverse queue order, that means enqueueing
callback A before callback B will cause &lt;code class=&quot;function&quot;&gt;B()&lt;/code&gt; to be called before
&lt;code class=&quot;function&quot;&gt;A()&lt;/code&gt; during teardown.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_queue_destroy (
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&quot;link&quot;&gt;GDestroyNotify&lt;/a&gt; destroy_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; destroy_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_queue_unref</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-queue-unref</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Enqueue an object to be released with &lt;a
href=&quot;/usr/share/gtk-doc/html/gobject/gobject-The-Base-Object-Type.html#g-object-unref&quot;
&gt;&lt;code class=&quot;function&quot;&gt;g_object_unref()&lt;/code&gt;&lt;/a&gt; during
the next teardown phase. This is equivalent to calling &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-queue-destroy&quot; title=&quot;g_test_queue_destroy ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_queue_destroy()&lt;/code&gt;&lt;/a&gt;
with a destroy callback of &lt;a
href=&quot;/usr/share/gtk-doc/html/gobject/gobject-The-Base-Object-Type.html#g-object-unref&quot;
&gt;&lt;code class=&quot;function&quot;&gt;g_object_unref()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_queue_unref(gobject)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TEST_TRAP_SILENCE_STDOUT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>GTestTrapFlags</Anchor>
  <NodeRef refid="1284"/>
  <Declaration type="html">&lt;pre&gt;G_TEST_TRAP_SILENCE_STDOUT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTestTrapFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TEST_TRAP_SILENCE_STDERR</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>GTestTrapFlags</Anchor>
  <NodeRef refid="1284"/>
  <Declaration type="html">&lt;pre&gt;G_TEST_TRAP_SILENCE_STDERR&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTestTrapFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TEST_TRAP_INHERIT_STDIN</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>GTestTrapFlags</Anchor>
  <NodeRef refid="1284"/>
  <Declaration type="html">&lt;pre&gt;G_TEST_TRAP_INHERIT_STDIN&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTestTrapFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTestTrapFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>GTestTrapFlags</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Test traps are guards around forked tests. These flags
determine what traps to set.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_TEST_TRAP_SILENCE_STDOUT = 1 &amp;lt;&amp;lt; 7,
    G_TEST_TRAP_SILENCE_STDERR = 1 &amp;lt;&amp;lt; 8,
    G_TEST_TRAP_INHERIT_STDIN = 1 &amp;lt;&amp;lt; 9 
} GTestTrapFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_trap_fork</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-trap-fork</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Fork the current test program to execute a test case that might
not return or that might abort. The forked test case is aborted
and considered failing if its run time exceeds &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;usec_timeout&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_test_trap_fork (
    &lt;a class=&quot;glib-Basic-Types.html#guint64&quot; href=&quot;guint64 ()&quot; title=&quot;link&quot;&gt;guint64&lt;/a&gt; usec_timeout,
    &lt;a class=&quot;glib-Testing.html#GTestTrapFlags&quot; href=&quot;enum GTestTrapFlags&quot; title=&gt;GTestTrapFlags&lt;/a&gt; test_trap_flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_trap_has_passed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-trap-has-passed</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Check the result of the last &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-trap-fork&quot; title=&quot;g_test_trap_fork ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_trap_fork()&lt;/code&gt;&lt;/a&gt; call.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; g_test_trap_has_passed (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_trap_reached_timeout</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-trap-reached-timeout</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Check the result of the last &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-trap-fork&quot; title=&quot;g_test_trap_fork ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_trap_fork()&lt;/code&gt;&lt;/a&gt; call.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; g_test_trap_reached_timeout (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_trap_assert_passed</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-trap-assert-passed</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Assert that the last forked test passed. See &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-trap-fork&quot; title=&quot;g_test_trap_fork ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_trap_fork()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_trap_assert_passed()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_trap_assert_failed</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-trap-assert-failed</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Assert that the last forked test failed. See &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-trap-fork&quot; title=&quot;g_test_trap_fork ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_trap_fork()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_trap_assert_failed()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_trap_assert_stdout</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-trap-assert-stdout</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Assert that the stdout output of the last forked test matches &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;soutpattern&lt;/code&gt;&lt;/em&gt;. 
See &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-trap-fork&quot; title=&quot;g_test_trap_fork ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_trap_fork()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_trap_assert_stdout(soutpattern)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_trap_assert_stdout_unmatched</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-trap-assert-stdout-unmatched</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Assert that the stdout output of the last forked test does not match 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;soutpattern&lt;/code&gt;&lt;/em&gt;.  See &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-trap-fork&quot; title=&quot;g_test_trap_fork ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_trap_fork()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_trap_assert_stdout_unmatched(soutpattern)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_trap_assert_stderr</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-trap-assert-stderr</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Assert that the stderr output of the last forked test matches &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;serrpattern&lt;/code&gt;&lt;/em&gt;. 
See &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-trap-fork&quot; title=&quot;g_test_trap_fork ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_trap_fork()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_trap_assert_stderr(serrpattern)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_trap_assert_stderr_unmatched</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-trap-assert-stderr-unmatched</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Assert that the stderr output of the last forked test does not match 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;serrpattern&lt;/code&gt;&lt;/em&gt;.  See &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-trap-fork&quot; title=&quot;g_test_trap_fork ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_trap_fork()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_trap_assert_stderr_unmatched(serrpattern)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_rand_bit</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-rand-bit</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Get a reproducible random bit (0 or 1),
see &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-rand-int&quot; title=&quot;g_test_rand_int ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_rand_int()&lt;/code&gt;&lt;/a&gt; for details on test case random numbers.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_test_rand_bit()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_rand_int</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-rand-int</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Get a reproducible random integer number.</Abstract>
  <Declaration type="html">&lt;pre&gt;gint32 g_test_rand_int (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_rand_int_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-rand-int-range</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Get a reproducible random integer number out of a specified range,
see &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-rand-int&quot; title=&quot;g_test_rand_int ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_rand_int()&lt;/code&gt;&lt;/a&gt; for details on test case random numbers.</Abstract>
  <Declaration type="html">&lt;pre&gt;gint32 g_test_rand_int_range (
    gint32 begin,
    gint32 end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_rand_double</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-rand-double</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Get a reproducible random floating point number,
see &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-rand-int&quot; title=&quot;g_test_rand_int ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_rand_int()&lt;/code&gt;&lt;/a&gt; for details on test case random numbers.</Abstract>
  <Declaration type="html">&lt;pre&gt;double g_test_rand_double (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_rand_double_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-rand-double-range</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Get a reproducible random floating pointer number out of a specified range,
see &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-rand-int&quot; title=&quot;g_test_rand_int ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_rand_int()&lt;/code&gt;&lt;/a&gt; for details on test case random numbers.</Abstract>
  <Declaration type="html">&lt;pre&gt;double g_test_rand_double_range (
    double range_start,
    double range_end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_assert</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-assert</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Debugging macro to terminate the application if the assertion fails.
If the assertion fails (i.e. the expression is not true), an error message
is logged and the application is terminated.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_assert(expr)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_assert_not_reached</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-assert-not-reached</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Debugging macro to terminate the application if it is ever reached.
If it is reached, an error message is logged and the application is terminated.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_assert_not_reached()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_assert_cmpstr</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-assert-cmpstr</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Debugging macro to terminate the application with a warning message 
if a string comparison fails.
The strings are compared using &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-strcmp0&quot; title=&quot;g_strcmp0 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_strcmp0()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_assert_cmpstr(s1, cmp, s2)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_assert_cmpint</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-assert-cmpint</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Debugging macro to terminate the application with a warning message 
if an integer comparison fails.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_assert_cmpint(n1, cmp, n2)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_assert_cmpuint</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-assert-cmpuint</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Debugging macro to terminate the application with a warning message 
if an unsigned integer comparison fails.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_assert_cmpuint(n1, cmp, n2)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_assert_cmphex</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-assert-cmphex</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Debugging macro to terminate the application with a warning message 
if an unsigned integer comparison fails. This is a variant of
&lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-assert-cmpuint&quot; title=&quot;g_assert_cmpuint()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_assert_cmpuint()&lt;/code&gt;&lt;/a&gt; that displays the numbers in hexadecimal notation
in the message.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_assert_cmphex(n1, cmp, n2)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_assert_cmpfloat</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-assert-cmpfloat</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Debugging macro to terminate the application with a warning message 
if a floating point number comparison fails.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_assert_cmpfloat(n1,cmp,n2)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTestCase</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>GTestCase</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">An opaque structure representing a test case.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct GTestCase GTestCase;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTestSuite</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>GTestSuite</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">An opaque structure representing a test suite.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct GTestSuite GTestSuite;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_create_case</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-create-case</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Create a new &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#GTestCase&quot; title=&quot;GTestCase&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTestCase&lt;/span&gt;&lt;/a&gt;, named &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;test_name&lt;/code&gt;&lt;/em&gt;, this API is fairly
low level, calling &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-add&quot; title=&quot;g_test_add()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_add()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-add-func&quot; title=&quot;g_test_add_func ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_add_func()&lt;/code&gt;&lt;/a&gt; is preferable.
When this test is executed, a fixture structure of size &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data_size&lt;/code&gt;&lt;/em&gt;
will be allocated and filled with 0s. Then &lt;code class=&quot;function&quot;&gt;data_setup()&lt;/code&gt; is called
to initialize the fixture. After fixture setup, the actual test
function &lt;code class=&quot;function&quot;&gt;data_test()&lt;/code&gt; is called. Once the test run completed, the
fixture structure is torn down  by calling &lt;code class=&quot;function&quot;&gt;data_teardown()&lt;/code&gt; and
after that the memory is released.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Testing.html#GTestCase&quot; href=&quot;GTestCase&quot; title=&quot;link&quot;&gt;GTestCase&lt;/a&gt;* g_test_create_case (
    const char *test_name,
    gsize data_size,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; test_data,
    void (
    data_setupvoid) (
    ),
    void (
    data_testvoid) (
    ),
    void (
    data_teardownvoid) (
    ));&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_create_suite</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-create-suite</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Create a new test suite with the name &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;suite_name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Testing.html#GTestSuite&quot; href=&quot;GTestSuite&quot; title=&gt;GTestSuite&lt;/a&gt;* g_test_create_suite (
    const char *suite_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_get_root</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-get-root</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Get the toplevel test suite for the test path API.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Testing.html#GTestSuite&quot; href=&quot;GTestSuite&quot; title=&gt;GTestSuite&lt;/a&gt;* g_test_get_root (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_suite_add</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-suite-add</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Adds &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;test_case&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;suite&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_suite_add (
    &lt;a class=&quot;glib-Testing.html#GTestSuite&quot; href=&quot;GTestSuite&quot; title=&quot;link&quot;&gt;GTestSuite&lt;/a&gt; *suite,
    &lt;a class=&quot;glib-Testing.html#GTestCase&quot; href=&quot;GTestCase&quot; title=&gt;GTestCase&lt;/a&gt; *test_case);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_suite_add_suite</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-suite-add-suite</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Adds &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;nestedsuite&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;suite&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_test_suite_add_suite (
    &lt;a class=&quot;glib-Testing.html#GTestSuite&quot; href=&quot;GTestSuite&quot; title=&quot;link&quot;&gt;GTestSuite&lt;/a&gt; *suite,
    &lt;a class=&quot;glib-Testing.html#GTestSuite&quot; href=&quot;GTestSuite&quot; title=&gt;GTestSuite&lt;/a&gt; *nestedsuite);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_test_run_suite</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Testing.html</Path>
  <Anchor>g-test-run-suite</Anchor>
  <NodeRef refid="54"/>
  <Abstract type="html">Execute the tests within &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;suite&lt;/code&gt;&lt;/em&gt; and all nested &lt;span class=&quot;type&quot;&gt;GTestSuites&lt;/span&gt;.
The test suites to be executed are filtered according to
test path arguments (-p &lt;em class=&quot;replaceable&quot;&gt;&lt;code&gt;testpath&lt;/code&gt;&lt;/em&gt;) 
as parsed by &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-init&quot; title=&quot;g_test_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_init()&lt;/code&gt;&lt;/a&gt;.
&lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-run-suite&quot; title=&quot;g_test_run_suite ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_run_suite()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Testing.html#g-test-run&quot; title=&quot;g_test_run ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_test_run()&lt;/code&gt;&lt;/a&gt; may only be called once
in a program.</Abstract>
  <Declaration type="html">&lt;pre&gt;int g_test_run_suite (
    &lt;a class=&quot;glib-Testing.html#GTestSuite&quot; href=&quot;GTestSuite&quot; title=&gt;GTestSuite&lt;/a&gt; *suite);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>MAXPATHLEN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>MAXPATHLEN:CAPS</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">Provided for UNIX emulation on Windows; equivalent to UNIX 
macro &lt;a class=&quot;link&quot; href=&quot;glib-Windows-Compatibility-Functions.html#MAXPATHLEN:CAPS&quot; title=&quot;MAXPATHLEN&quot;&gt;&lt;code class=&quot;literal&quot;&gt;MAXPATHLEN&lt;/code&gt;&lt;/a&gt;, which is the maximum length of a filename
(including full path).</Abstract>
  <Declaration type="html">&lt;pre&gt;#define MAXPATHLEN 1024&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_win32_error_message</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>g-win32-error-message</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">Translate a Win32 error code (as returned by &lt;code class=&quot;function&quot;&gt;GetLastError()&lt;/code&gt;) into
the corresponding message. The message is either language neutral,
or in the thread's language, or the user's language, the system's
language, or US English (see docs for &lt;code class=&quot;function&quot;&gt;FormatMessage()&lt;/code&gt;). The
returned string is in UTF-8. It should be deallocated with
&lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-free&quot; title=&quot;g_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_free()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_win32_error_message (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; error);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_win32_getlocale</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>g-win32-getlocale</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-running.html#setlocale&quot; title=&quot;Locale&quot;&gt;&lt;code class=&quot;function&quot;&gt;setlocale()&lt;/code&gt;&lt;/a&gt; function in the Microsoft C library uses locale
names of the form &quot;English_United States.1252&quot; etc. We want the
UNIXish standard form &quot;en_US&quot;, &quot;zh_TW&quot; etc. This function gets the
current thread locale from Windows - without any encoding info -
and returns it as a string of the above form for use in forming
file names etc. The returned string should be deallocated with
&lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocation.html#g-free&quot; title=&quot;g_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_free()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt;* g_win32_getlocale (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_win32_get_package_installation_directory</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>g-win32-get-package-installation-directory</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">Try to determine the installation directory for a software package.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_win32_get_package_installation_directory (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *package,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *dll_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_win32_get_package_installation_directory&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_win32_get_package_installation_directory_of_module</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>g-win32-get-package-installation-directory-of-module</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">This function tries to determine the installation directory of a
software package based on the location of a DLL of the software
package.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_win32_get_package_installation_directory_of_module (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; hmodule);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_win32_get_package_installation_subdirectory</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>g-win32-get-package-installation-subdirectory</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">This function is deprecated. Use
&lt;a class=&quot;link&quot; href=&quot;glib-Windows-Compatibility-Functions.html#g-win32-get-package-installation-directory-of-module&quot; title=&quot;g_win32_get_package_installation_directory_of_module ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_win32_get_package_installation_directory_of_module()&lt;/code&gt;&lt;/a&gt; and
&lt;a class=&quot;link&quot; href=&quot;glib-Miscellaneous-Utility-Functions.html#g-build-filename&quot; title=&quot;g_build_filename ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_build_filename()&lt;/code&gt;&lt;/a&gt; instead.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_win32_get_package_installation_subdirectory (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *package,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *dll_name,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *subdir);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_win32_get_package_installation_subdirectory&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_win32_get_windows_version</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>g-win32-get-windows-version</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">Returns version information for the Windows operating system the
code is running on. See MSDN documentation for the &lt;code class=&quot;function&quot;&gt;GetVersion()&lt;/code&gt;
function. To summarize, the most significant bit is one on Win9x,
and zero on NT-based systems. Since version 2.14, GLib works only
on NT-based systems, so checking whether your are running on Win9x
in your own software is moot. The least significant byte is 4 on
Windows NT 4, and 5 on Windows XP. Software that needs really
detailled version and feature information should use Win32 API like
&lt;code class=&quot;function&quot;&gt;GetVersionEx()&lt;/code&gt; and &lt;code class=&quot;function&quot;&gt;VerifyVersionInfo()&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; g_win32_get_windows_version (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_win32_locale_filename_from_utf8</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>g-win32-locale-filename-from-utf8</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">Converts a filename from UTF-8 to the system codepage.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_win32_locale_filename_from_utf8 (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *utf8filename);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_WIN32_DLLMAIN_FOR_DLL_NAME</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>G-WIN32-DLLMAIN-FOR-DLL-NAME:CAPS</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">On Windows, this macro defines a &lt;code class=&quot;function&quot;&gt;DllMain()&lt;/code&gt; function that stores the actual 
DLL name that the code being compiled will be included in.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_WIN32_DLLMAIN_FOR_DLL_NAME(static, dll_name)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;G_WIN32_DLLMAIN_FOR_DLL_NAME&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_WIN32_HAVE_WIDECHAR_API</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>G-WIN32-HAVE-WIDECHAR-API:CAPS</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">On Windows, this macro defines an expression which evaluates to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;
if the code is running on a version of Windows where the wide
character versions of the Win32 API functions, and the wide chaacter
versions of the C library functions work. (They are always present in
the DLLs, but don't work on Windows 9x and Me.)</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_WIN32_HAVE_WIDECHAR_API() TRUE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_WIN32_IS_NT_BASED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Windows-Compatibility-Functions.html</Path>
  <Anchor>G-WIN32-IS-NT-BASED:CAPS</Anchor>
  <NodeRef refid="55"/>
  <Abstract type="html">On Windows, this macro defines an expression which evaluates to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; 
if the code is running on an NT-based Windows operating system.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_WIN32_IS_NT_BASED() TRUE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slice_alloc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Slices.html</Path>
  <Anchor>g-slice-alloc</Anchor>
  <NodeRef refid="57"/>
  <Abstract type="html">Allocates a block of memory from the slice allocator.
The block adress handed out can be expected to be aligned
to at least &lt;code class=&quot;literal&quot;&gt;1 * sizeof (void*)&lt;/code&gt;,
though in general slices are 2 * sizeof (void*) bytes aligned,
if a &lt;code class=&quot;function&quot;&gt;malloc()&lt;/code&gt; fallback implementation is used instead,
the alignment may be reduced in a libc dependent fashion.
Note that the underlying slice allocation mechanism can
be changed with the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_SLICE&quot; title=&quot;G_SLICE&quot;&gt;G_SLICE=always-malloc&lt;/a&gt;
environment variable.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; g_slice_alloc (
    gsize block_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slice_alloc0</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Slices.html</Path>
  <Anchor>g-slice-alloc0</Anchor>
  <NodeRef refid="57"/>
  <Abstract type="html">Allocates a block of memory via &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc&quot; title=&quot;g_slice_alloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc()&lt;/code&gt;&lt;/a&gt;
and initialize the returned memory to 0.
Note that the underlying slice allocation mechanism can
be changed with the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_SLICE&quot; title=&quot;G_SLICE&quot;&gt;G_SLICE=always-malloc&lt;/a&gt;
environment variable.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; g_slice_alloc0 (
    gsize block_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slice_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Slices.html</Path>
  <Anchor>g-slice-copy</Anchor>
  <NodeRef refid="57"/>
  <Abstract type="html">Allocates a block of memory from the slice allocator and copies
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;block_size&lt;/code&gt;&lt;/em&gt; bytes into it from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mem_block&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_slice_copy (
    gsize block_size,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; mem_block);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slice_free1</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Slices.html</Path>
  <Anchor>g-slice-free1</Anchor>
  <NodeRef refid="57"/>
  <Abstract type="html">Frees a block of memory. The memory must have been allocated via
&lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc&quot; title=&quot;g_slice_alloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc0&quot; title=&quot;g_slice_alloc0 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc0()&lt;/code&gt;&lt;/a&gt;
and the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;block_size&lt;/code&gt;&lt;/em&gt; has to match the size specified upon allocation.
Note that the exact release behaviour can be changed with the
&lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_DEBUG&quot; title=&quot;G_DEBUG&quot;&gt;G_DEBUG=gc-friendly&lt;/a&gt; environment variable,
also see &lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_SLICE&quot; title=&quot;G_SLICE&quot;&gt;G_SLICE&lt;/a&gt; for related debugging options.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_slice_free1 (
    gsize block_size,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; mem_block);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slice_free_chain_with_offset</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Slices.html</Path>
  <Anchor>g-slice-free-chain-with-offset</Anchor>
  <NodeRef refid="57"/>
  <Abstract type="html">Frees a linked list of memory blocks of structure type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;.
The memory blocks must be equal-sized, allocated via
&lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc&quot; title=&quot;g_slice_alloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc0&quot; title=&quot;g_slice_alloc0 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc0()&lt;/code&gt;&lt;/a&gt;
and linked together by a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/em&gt; pointer (similar to &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;). The offset 
of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/em&gt; field in each block is passed as third argument.
Note that the exact release behaviour can be changed with the
&lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_DEBUG&quot; title=&quot;G_DEBUG&quot;&gt;G_DEBUG=gc-friendly&lt;/a&gt; environment variable,
also see &lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_SLICE&quot; title=&quot;G_SLICE&quot;&gt;G_SLICE&lt;/a&gt; for related debugging options.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_slice_free_chain_with_offset (
    gsize block_size,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; mem_chain,
    gsize next_offset);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slice_new</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Slices.html</Path>
  <Anchor>g-slice-new</Anchor>
  <NodeRef refid="57"/>
  <Abstract type="html">A convenience macro to allocate a block of memory from the slice allocator.
It calls &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc&quot; title=&quot;g_slice_alloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc()&lt;/code&gt;&lt;/a&gt; with &lt;code class=&quot;literal&quot;&gt;sizeof (&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;)&lt;/code&gt; and casts 
the returned pointer to a pointer of the given type, avoiding a type cast 
in the source code.
Note that the underlying slice allocation mechanism can
be changed with the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_SLICE&quot; title=&quot;G_SLICE&quot;&gt;G_SLICE=always-malloc&lt;/a&gt;
environment variable.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_slice_new(type)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slice_new0</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Slices.html</Path>
  <Anchor>g-slice-new0</Anchor>
  <NodeRef refid="57"/>
  <Abstract type="html">A convenience macro to allocate a block of memory from the slice allocator
and set the memory to 0. It calls &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc0&quot; title=&quot;g_slice_alloc0 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc0()&lt;/code&gt;&lt;/a&gt; with 
&lt;code class=&quot;literal&quot;&gt;sizeof (&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;)&lt;/code&gt; and casts the returned pointer to a pointer 
of the given type, avoiding a type cast in the source code.
Note that the underlying slice allocation mechanism can
be changed with the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_SLICE&quot; title=&quot;G_SLICE&quot;&gt;G_SLICE=always-malloc&lt;/a&gt;
environment variable.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_slice_new0(type)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slice_dup</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Slices.html</Path>
  <Anchor>g-slice-dup</Anchor>
  <NodeRef refid="57"/>
  <Abstract type="html">A convenience macro to duplicate a block of memory using the slice allocator.
It calls &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-copy&quot; title=&quot;g_slice_copy ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_copy()&lt;/code&gt;&lt;/a&gt; with &lt;code class=&quot;literal&quot;&gt;sizeof (&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;)&lt;/code&gt; and casts 
the returned pointer to a pointer of the given type, avoiding a type cast 
in the source code.
Note that the underlying slice allocation mechanism can
be changed with the &lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_SLICE&quot; title=&quot;G_SLICE&quot;&gt;G_SLICE=always-malloc&lt;/a&gt;
environment variable.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_slice_dup(type, mem)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slice_free</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Slices.html</Path>
  <Anchor>g-slice-free</Anchor>
  <NodeRef refid="57"/>
  <Abstract type="html">A convenience macro to free a block of memory that has been allocated
from the slice allocator. It calls &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-free1&quot; title=&quot;g_slice_free1 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_free1()&lt;/code&gt;&lt;/a&gt; using 
&lt;code class=&quot;literal&quot;&gt;sizeof (type)&lt;/code&gt; as the block size.
Note that the exact release behaviour can be changed with the
&lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_DEBUG&quot; title=&quot;G_DEBUG&quot;&gt;G_DEBUG=gc-friendly&lt;/a&gt; environment variable,
also see &lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_SLICE&quot; title=&quot;G_SLICE&quot;&gt;G_SLICE&lt;/a&gt; for related debugging options.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_slice_free(type, mem)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slice_free_chain</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Slices.html</Path>
  <Anchor>g-slice-free-chain</Anchor>
  <NodeRef refid="57"/>
  <Abstract type="html">Frees a linked list of memory blocks of structure type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;.
The memory blocks must be equal-sized, allocated via
&lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc&quot; title=&quot;g_slice_alloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc0&quot; title=&quot;g_slice_alloc0 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc0()&lt;/code&gt;&lt;/a&gt; and linked together by a 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/em&gt; pointer (similar to &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;). The name of the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/em&gt; field in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is passed as third argument.
Note that the exact release behaviour can be changed with the
&lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_DEBUG&quot; title=&quot;G_DEBUG&quot;&gt;G_DEBUG=gc-friendly&lt;/a&gt; environment variable,
also see &lt;a class=&quot;link&quot; href=&quot;glib-running.html#G_SLICE&quot; title=&quot;G_SLICE&quot;&gt;G_SLICE&lt;/a&gt; for related debugging options.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_slice_free_chain(type, mem_chain, next)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GMemChunk</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>GMemChunk</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt; struct is an opaque data structure representing a memory
chunk. It should be accessed only through the use of the following functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GMemChunk GMemChunk;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;GMemChunk&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ALLOC_AND_FREE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>G-ALLOC-AND-FREE:CAPS</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Specifies the type of a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.
Used in &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-new&quot; title=&quot;g_mem_chunk_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_new()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-create&quot; title=&quot;g_mem_chunk_create()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_create()&lt;/code&gt;&lt;/a&gt; to specify that atoms
will be freed individually.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_ALLOC_AND_FREE 2&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;G_ALLOC_AND_FREE&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ALLOC_ONLY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>G-ALLOC-ONLY:CAPS</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Specifies the type of a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.
Used in &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-new&quot; title=&quot;g_mem_chunk_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_new()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-create&quot; title=&quot;g_mem_chunk_create()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_create()&lt;/code&gt;&lt;/a&gt; to specify that atoms
will never be freed individually.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_ALLOC_ONLY 1&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;G_ALLOC_ONLY&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_chunk_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-mem-chunk-new</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Memory-Chunks.html#GMemChunk&quot; href=&quot;GMemChunk&quot; title=&quot;link&quot;&gt;GMemChunk&lt;/a&gt;* g_mem_chunk_new (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *name,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; atom_size,
    gsize area_size,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_mem_chunk_new&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice allocator&lt;/a&gt;
  instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_chunk_alloc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-mem-chunk-alloc</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Allocates an atom of memory from a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_mem_chunk_alloc (
    &lt;a class=&quot;glib-Memory-Chunks.html#GMemChunk&quot; href=&quot;GMemChunk&quot; title=&gt;GMemChunk&lt;/a&gt; *mem_chunk);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_mem_chunk_alloc&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc&quot; title=&quot;g_slice_alloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc()&lt;/code&gt;&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_chunk_alloc0</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-mem-chunk-alloc0</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Allocates an atom of memory from a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;, setting the memory to 0.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_mem_chunk_alloc0 (
    &lt;a class=&quot;glib-Memory-Chunks.html#GMemChunk&quot; href=&quot;GMemChunk&quot; title=&gt;GMemChunk&lt;/a&gt; *mem_chunk);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_mem_chunk_alloc0&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-alloc0&quot; title=&quot;g_slice_alloc0 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_alloc0()&lt;/code&gt;&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_chunk_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-mem-chunk-free</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Frees an atom in a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.
This should only be called if the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt; was created with
&lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#G-ALLOC-AND-FREE:CAPS&quot; title=&quot;G_ALLOC_AND_FREE&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_ALLOC_AND_FREE&lt;/span&gt;&lt;/a&gt;. Otherwise it will simply return.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mem_chunk_free (
    &lt;a class=&quot;glib-Memory-Chunks.html#GMemChunk&quot; href=&quot;GMemChunk&quot; title=&quot;link&quot;&gt;GMemChunk&lt;/a&gt; *mem_chunk,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; mem);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_mem_chunk_free&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-free1&quot; title=&quot;g_slice_free1 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_free1()&lt;/code&gt;&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_chunk_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-mem-chunk-destroy</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Frees all of the memory allocated for a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mem_chunk_destroy (
    &lt;a class=&quot;glib-Memory-Chunks.html#GMemChunk&quot; href=&quot;GMemChunk&quot; title=&gt;GMemChunk&lt;/a&gt; *mem_chunk);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_mem_chunk_destroy&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice 
  allocator&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_chunk_create</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-mem-chunk-create</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">A convenience macro for creating a new &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.
It calls &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-new&quot; title=&quot;g_mem_chunk_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_new()&lt;/code&gt;&lt;/a&gt;, using the given type to create the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;
name. The atom size is determined using &lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;sizeof()&lt;/code&gt;&lt;/code&gt;, and the
area size is calculated by multiplying the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pre_alloc&lt;/code&gt;&lt;/em&gt; parameter with
the atom size.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_mem_chunk_create(type, pre_alloc, alloc_type)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_mem_chunk_create&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice 
  allocator&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_chunk_new</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-chunk-new</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">A convenience macro to allocate an atom of memory from a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.
It calls &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-alloc&quot; title=&quot;g_mem_chunk_alloc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_alloc()&lt;/code&gt;&lt;/a&gt; and casts the returned atom to a pointer to
the given type, avoiding a type cast in the source code.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_chunk_new(type, chunk)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_chunk_new&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-new&quot; title=&quot;g_slice_new()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_new()&lt;/code&gt;&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_chunk_new0</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-chunk-new0</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">A convenience macro to allocate an atom of memory from a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.
It calls &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-alloc0&quot; title=&quot;g_mem_chunk_alloc0 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_alloc0()&lt;/code&gt;&lt;/a&gt; and casts the returned atom to a pointer to
the given type, avoiding a type cast in the source code.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_chunk_new0(type, chunk)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_chunk_new0&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-new0&quot; title=&quot;g_slice_new0()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_new0()&lt;/code&gt;&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_chunk_free</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-chunk-free</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">A convenience macro to free an atom of memory from a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.
It simply switches the arguments and calls &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-free&quot; title=&quot;g_mem_chunk_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_free()&lt;/code&gt;&lt;/a&gt;
It is included simply to complement the other convenience macros, &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-chunk-new&quot; title=&quot;g_chunk_new()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_chunk_new()&lt;/code&gt;&lt;/a&gt;
and &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-chunk-new0&quot; title=&quot;g_chunk_new0()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_chunk_new0()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_chunk_free(mem, mem_chunk)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_chunk_free&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html#g-slice-free&quot; title=&quot;g_slice_free()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slice_free()&lt;/code&gt;&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_chunk_reset</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-mem-chunk-reset</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Resets a GMemChunk to its initial state.
It frees all of the currently allocated blocks of memory.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mem_chunk_reset (
    &lt;a class=&quot;glib-Memory-Chunks.html#GMemChunk&quot; href=&quot;GMemChunk&quot; title=&gt;GMemChunk&lt;/a&gt; *mem_chunk);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_mem_chunk_reset&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice 
  allocator&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_chunk_clean</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-mem-chunk-clean</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Frees any blocks in a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt; which are no longer being used.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mem_chunk_clean (
    &lt;a class=&quot;glib-Memory-Chunks.html#GMemChunk&quot; href=&quot;GMemChunk&quot; title=&gt;GMemChunk&lt;/a&gt; *mem_chunk);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_mem_chunk_clean&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice 
  allocator&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_blow_chunks</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-blow-chunks</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Calls &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-clean&quot; title=&quot;g_mem_chunk_clean ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_clean()&lt;/code&gt;&lt;/a&gt; on all &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt; objects.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_blow_chunks (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_blow_chunks&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice 
  allocator&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_chunk_info</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-mem-chunk-info</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Outputs debugging information for all &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt; objects currently in use.
It outputs the number of &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt; objects currently allocated,
and calls &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-print&quot; title=&quot;g_mem_chunk_print ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_print()&lt;/code&gt;&lt;/a&gt; to output information on each one.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mem_chunk_info (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_mem_chunk_info&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice 
  allocator&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_mem_chunk_print</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Chunks.html</Path>
  <Anchor>g-mem-chunk-print</Anchor>
  <NodeRef refid="58"/>
  <Abstract type="html">Outputs debugging information for a &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt;.
It outputs the name of the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#GMemChunk&quot; title=&quot;GMemChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GMemChunk&lt;/span&gt;&lt;/a&gt; (set with &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Chunks.html#g-mem-chunk-new&quot; title=&quot;g_mem_chunk_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_mem_chunk_new()&lt;/code&gt;&lt;/a&gt;),
the number of bytes used, and the number of blocks of memory allocated.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_mem_chunk_print (
    &lt;a class=&quot;glib-Memory-Chunks.html#GMemChunk&quot; href=&quot;GMemChunk&quot; title=&gt;GMemChunk&lt;/a&gt; *mem_chunk);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_mem_chunk_print&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice 
  allocator&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GList</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>GList</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; struct is used for each element in a doubly-linked list.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gpointer data;
    GList *next;
    GList *prev;
} GList;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_append</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-append</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Adds a new element on to the end of the list.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_append (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_prepend</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-prepend</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Adds a new element on to the start of the list.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_prepend (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-insert</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Inserts a new element into the list at the given position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_insert (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; position);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_insert_before</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-insert-before</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Inserts a new element into the list before the given position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_insert_before (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *sibling,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_insert_sorted</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-insert-sorted</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Inserts a new element into the list, using the given comparison 
function to determine its position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_insert_sorted (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-remove</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Removes an element from a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.
If two elements contain the same data, only the first is removed.
If none of the elements contain the data, the &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; is unchanged.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_remove (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_remove_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-remove-link</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Removes an element from a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;, without freeing the element.
The removed element's prev and next links are set to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, so 
that it becomes a self-contained list with one element.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_remove_link (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *llink);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_delete_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-delete-link</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Removes the node link_ from the list and frees it. 
Compare this to &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-remove-link&quot; title=&quot;g_list_remove_link ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_remove_link()&lt;/code&gt;&lt;/a&gt; which removes the node 
without freeing it.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_delete_link (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *link_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_remove_all</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-remove-all</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Removes all list nodes with data equal to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;. 
Returns the new head of the list. Contrast with 
&lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-remove&quot; title=&quot;g_list_remove ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_remove()&lt;/code&gt;&lt;/a&gt; which removes only the first node 
matching the given data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_remove_all (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-free</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Frees all of the memory used by a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.
The freed elements are returned to the slice allocator.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_list_free (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_alloc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-alloc</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Allocates space for one &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; element.
It is called by &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-append&quot; title=&quot;g_list_append ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_append()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-prepend&quot; title=&quot;g_list_prepend ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_prepend()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-insert&quot; title=&quot;g_list_insert ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_insert()&lt;/code&gt;&lt;/a&gt; and
&lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-insert-sorted&quot; title=&quot;g_list_insert_sorted ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_insert_sorted()&lt;/code&gt;&lt;/a&gt; and so is rarely used on its own.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt;* g_list_alloc (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_free_1</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-free-1</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Frees one &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; element.
It is usually used after &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-remove-link&quot; title=&quot;g_list_remove_link ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_remove_link()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_list_free_1 (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_free1</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-free1</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Another name for &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-free-1&quot; title=&quot;g_list_free_1 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_free_1()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_list_free1&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_length</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-length</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Gets the number of elements in a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_list_length (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-copy</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Copies a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_copy (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_reverse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-reverse</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Reverses a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.
It simply switches the next and prev pointers of each element.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_reverse (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_sort</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-sort</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Sorts a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; using the given comparison function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_sort (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; compare_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCompareFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>GCompareFunc</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Specifies the type of a comparison function used to compare two
values.  The function should return a negative integer if the first
value comes before the second, 0 if they are equal, or a positive
integer if the first value comes after the second.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; (
    *GCompareFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; a,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; b);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_insert_sorted_with_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-insert-sorted-with-data</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Inserts a new element into the list, using the given comparison 
function to determine its position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_insert_sorted_with_data (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_sort_with_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-sort-with-data</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-sort&quot; title=&quot;g_list_sort ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_sort()&lt;/code&gt;&lt;/a&gt;, but the comparison function accepts 
a user data argument.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_sort_with_data (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; compare_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCompareDataFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>GCompareDataFunc</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Specifies the type of a comparison function used to compare two
values.  The function should return a negative integer if the first
value comes before the second, 0 if they are equal, or a positive
integer if the first value comes after the second.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; (
    *GCompareDataFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; a,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; b,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_concat</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-concat</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Adds the second &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; onto the end of the first &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.
Note that the elements of the second &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; are not copied.
They are used directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_concat (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list1,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *list2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-foreach</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Calls a function for each element of a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_list_foreach (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GFunc&quot; href=&quot;GFunc ()&quot; title=&quot;link&quot;&gt;GFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>GFunc</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Specifies the type of functions passed to &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-foreach&quot; title=&quot;g_list_foreach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_foreach()&lt;/code&gt;&lt;/a&gt; and
&lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-foreach&quot; title=&quot;g_slist_foreach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_foreach()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_first</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-first</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Gets the first element in a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_first (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_last</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-last</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Gets the last element in a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_last (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_previous</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-previous</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">A convenience macro to gets the previous element in a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_list_previous(list)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_next</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-next</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">A convenience macro to gets the next element in a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_list_next(list)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_nth</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-nth</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Gets the element at the given position in a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_nth (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_nth_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-nth-data</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Gets the data of the element at the given position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_list_nth_data (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_nth_prev</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-nth-prev</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Gets the element &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/em&gt; places before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_nth_prev (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_find</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-find</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Finds the element in a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; which 
contains the given data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_find (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_find_custom</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-find-custom</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Finds an element in a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt;, using a supplied function to 
find the desired element. It iterates over the list, calling 
the given function which should return 0 when the desired 
element is found. The function takes two &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gconstpointer&quot; title=&quot;gconstpointer&quot;&gt;&lt;span class=&quot;type&quot;&gt;gconstpointer&lt;/span&gt;&lt;/a&gt; arguments, 
the &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; element's data as the first argument and the 
given user data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_list_find_custom (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_position</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-position</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Gets the position of the given element 
in the &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; (starting from 0).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_list_position (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *llink);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_index</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-index</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Gets the position of the element containing 
the given data (starting from 0).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_list_index (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_push_allocator</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-push-allocator</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Sets the allocator to use to allocate &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; elements.
Use &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#g-list-pop-allocator&quot; title=&quot;g_list_pop_allocator ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_list_pop_allocator()&lt;/code&gt;&lt;/a&gt; to restore the previous allocator.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_list_push_allocator (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; allocator);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_list_push_allocator&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. It does nothing, since &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; has been
converted to the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice allocator&lt;/a&gt;</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_list_pop_allocator</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Doubly-Linked-Lists.html</Path>
  <Anchor>g-list-pop-allocator</Anchor>
  <NodeRef refid="59"/>
  <Abstract type="html">Restores the previous &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocators.html#GAllocator&quot; title=&quot;GAllocator&quot;&gt;&lt;span class=&quot;type&quot;&gt;GAllocator&lt;/span&gt;&lt;/a&gt;, used when allocating &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; elements.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_list_pop_allocator (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_list_pop_allocator&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. It does nothing, since &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GList&quot; title=&quot;GList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; has been
converted to the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice allocator&lt;/a&gt;</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSList</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>GSList</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; struct is used for each element in the singly-linked list.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gpointer data;
    GSList *next;
} GSList;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_alloc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-alloc</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Allocates space for one &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; element.
It is called by the &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-append&quot; title=&quot;g_slist_append ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_append()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-prepend&quot; title=&quot;g_slist_prepend ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_prepend()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-insert&quot; title=&quot;g_slist_insert ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_insert()&lt;/code&gt;&lt;/a&gt; and
&lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-insert-sorted&quot; title=&quot;g_slist_insert_sorted ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_insert_sorted()&lt;/code&gt;&lt;/a&gt; functions and so is rarely used on its own.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt;* g_slist_alloc (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_append</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-append</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Adds a new element on to the end of the list.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_append (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_prepend</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-prepend</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Adds a new element on to the start of the list.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_prepend (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-insert</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Inserts a new element into the list at the given position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_insert (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; position);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_insert_before</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-insert-before</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Inserts a node before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;sibling&lt;/code&gt;&lt;/em&gt; containing &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_insert_before (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *slist,
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *sibling,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_insert_sorted</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-insert-sorted</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Inserts a new element into the list, using the given 
comparison function to determine its position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_insert_sorted (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-remove</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Removes an element from a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;.
If two elements contain the same data, only the first is removed.
If none of the elements contain the data, the &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; is unchanged.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_remove (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_remove_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-remove-link</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Removes an element from a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;, without 
freeing the element. The removed element's next 
link is set to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, so that it becomes a
self-contained list with one element.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_remove_link (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt; *link_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_delete_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-delete-link</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Removes the node link_ from the list and frees it. 
Compare this to &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-remove-link&quot; title=&quot;g_slist_remove_link ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_remove_link()&lt;/code&gt;&lt;/a&gt; which removes the node 
without freeing it.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_delete_link (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt; *link_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_remove_all</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-remove-all</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Removes all list nodes with data equal to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;. 
Returns the new head of the list. Contrast with 
&lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-remove&quot; title=&quot;g_slist_remove ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_remove()&lt;/code&gt;&lt;/a&gt; which removes only the first node 
matching the given data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_remove_all (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-free</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Frees all of the memory used by a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;.
The freed elements are returned to the slice allocator.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_slist_free (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_free_1</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-free-1</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Frees one &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; element.
It is usually used after &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-remove-link&quot; title=&quot;g_slist_remove_link ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_remove_link()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_slist_free_1 (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_free1</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-free1</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">A macro which does the same as &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-free-1&quot; title=&quot;g_slist_free_1 ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_free_1()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_slist_free1&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_length</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-length</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Gets the number of elements in a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_slist_length (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-copy</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Copies a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_copy (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_reverse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-reverse</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Reverses a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_reverse (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_insert_sorted_with_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-insert-sorted-with-data</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Inserts a new element into the list, using the given 
comparison function to determine its position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_insert_sorted_with_data (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_sort</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-sort</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Sorts a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; using the given comparison function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_sort (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; compare_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_sort_with_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-sort-with-data</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-sort&quot; title=&quot;g_slist_sort ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_sort()&lt;/code&gt;&lt;/a&gt;, but the sort function accepts a user data argument.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_sort_with_data (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; compare_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_concat</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-concat</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Adds the second &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; onto the end of the first &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;.
Note that the elements of the second &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; are not copied.
They are used directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_concat (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list1,
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt; *list2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-foreach</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Calls a function for each element of a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_slist_foreach (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GFunc&quot; href=&quot;GFunc ()&quot; title=&quot;link&quot;&gt;GFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_last</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-last</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Gets the last element in a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;.
 </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_last (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt; *list);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_next</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-next</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">A convenience macro to gets the next element in a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_slist_next(slist)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_nth</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-nth</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Gets the element at the given position in a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_nth (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_nth_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-nth-data</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Gets the data of the element at the given position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_slist_nth_data (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_find</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-find</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Finds the element in a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; which 
contains the given data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_find (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_find_custom</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-find-custom</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Finds an element in a &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt;, using a supplied function to 
find the desired element. It iterates over the list, calling 
the given function which should return 0 when the desired 
element is found. The function takes two &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gconstpointer&quot; title=&quot;gconstpointer&quot;&gt;&lt;span class=&quot;type&quot;&gt;gconstpointer&lt;/span&gt;&lt;/a&gt; arguments, 
the &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; element's data as the first argument and the 
given user data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt;* g_slist_find_custom (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_position</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-position</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Gets the position of the given element 
in the &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; (starting from 0).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_slist_position (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&gt;GSList&lt;/a&gt; *llink);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_index</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-index</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Gets the position of the element containing 
the given data (starting from 0).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_slist_index (
    &lt;a class=&quot;glib-Singly-Linked-Lists.html#GSList&quot; href=&quot;GSList&quot; title=&quot;link&quot;&gt;GSList&lt;/a&gt; *list,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_push_allocator</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-push-allocator</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Sets the allocator to use to allocate &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; elements.
Use &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#g-slist-pop-allocator&quot; title=&quot;g_slist_pop_allocator ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_slist_pop_allocator()&lt;/code&gt;&lt;/a&gt; to restore the previous allocator.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_slist_push_allocator (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; dummy);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_slist_push_allocator&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. It does nothing, since &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; has been
converted to the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice allocator&lt;/a&gt;</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_slist_pop_allocator</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Singly-Linked-Lists.html</Path>
  <Anchor>g-slist-pop-allocator</Anchor>
  <NodeRef refid="60"/>
  <Abstract type="html">Restores the previous &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocators.html#GAllocator&quot; title=&quot;GAllocator&quot;&gt;&lt;span class=&quot;type&quot;&gt;GAllocator&lt;/span&gt;&lt;/a&gt;, used when allocating &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; elements.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_slist_pop_allocator (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_slist_pop_allocator&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. It does nothing, since &lt;a class=&quot;link&quot; href=&quot;glib-Singly-Linked-Lists.html#GSList&quot; title=&quot;GSList&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSList&lt;/span&gt;&lt;/a&gt; has been
converted to the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice allocator&lt;/a&gt;</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GQueue</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>GQueue</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Contains the public fields of a Queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GList *head;
    GList *tail;
    guint length;
} GQueue;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-new</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Double-ended-Queues.html#GQueue&quot; title=&quot;GQueue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQueue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt;* g_queue_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-free</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Frees the memory allocated for the &lt;a class=&quot;link&quot; href=&quot;glib-Double-ended-Queues.html#GQueue&quot; title=&quot;GQueue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQueue&lt;/span&gt;&lt;/a&gt;. Only call this function if
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; was created with &lt;a class=&quot;link&quot; href=&quot;glib-Double-ended-Queues.html#g-queue-new&quot; title=&quot;g_queue_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_queue_new()&lt;/code&gt;&lt;/a&gt;. If queue elements contain
dynamically-allocated memory, they should be freed first.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_free (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_QUEUE_INIT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>G-QUEUE-INIT:CAPS</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">A statically-allocated &lt;a class=&quot;link&quot; href=&quot;glib-Double-ended-Queues.html#GQueue&quot; title=&quot;GQueue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQueue&lt;/span&gt;&lt;/a&gt; must be initialized with this macro before it
can be used.  This macro can be used to initialize a variable, but it cannot
be assigned to a variable.  In that case you have to use &lt;a class=&quot;link&quot; href=&quot;glib-Double-ended-Queues.html#g-queue-init&quot; title=&quot;g_queue_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_queue_init()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_QUEUE_INIT {
    NULL, NULL, 0 }&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-init</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">A statically-allocated &lt;a class=&quot;link&quot; href=&quot;glib-Double-ended-Queues.html#GQueue&quot; title=&quot;GQueue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQueue&lt;/span&gt;&lt;/a&gt; must be initialized with this function
before it can be used. Alternatively you can initialize it with
&lt;a class=&quot;link&quot; href=&quot;glib-Double-ended-Queues.html#G-QUEUE-INIT:CAPS&quot; title=&quot;G_QUEUE_INIT&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_QUEUE_INIT&lt;/span&gt;&lt;/a&gt;. It is not necessary to initialize queues created with
&lt;a class=&quot;link&quot; href=&quot;glib-Double-ended-Queues.html#g-queue-new&quot; title=&quot;g_queue_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_queue_new()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_init (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_clear</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-clear</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Removes all the elements in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. If queue elements contain
dynamically-allocated memory, they should be freed first.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_clear (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_is_empty</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-is-empty</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the queue is empty.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_queue_is_empty (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_get_length</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-get-length</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Returns the number of items in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_queue_get_length (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_reverse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-reverse</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Reverses the order of the items in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_reverse (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-copy</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Copies a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. Note that is a shallow copy. If the elements in the
queue consist of pointers to data, the pointers are copied, but the
actual data is not.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt;* g_queue_copy (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-foreach</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Calls &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; for each element in the queue passing &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; to the
function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_foreach (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GFunc&quot; href=&quot;GFunc ()&quot; title=&quot;link&quot;&gt;GFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_find</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-find</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Finds the first link in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; which contains &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_queue_find (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_find_custom</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-find-custom</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Finds an element in a &lt;a class=&quot;link&quot; href=&quot;glib-Double-ended-Queues.html#GQueue&quot; title=&quot;GQueue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQueue&lt;/span&gt;&lt;/a&gt;, using a supplied function to find the
desired element. It iterates over the queue, calling the given function
which should return 0 when the desired element is found. The function
takes two gconstpointer arguments, the &lt;a class=&quot;link&quot; href=&quot;glib-Double-ended-Queues.html#GQueue&quot; title=&quot;GQueue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQueue&lt;/span&gt;&lt;/a&gt; element's data as the
first argument and the given user data as the second argument.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_queue_find_custom (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_sort</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-sort</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Sorts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;compare_func&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_sort (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; compare_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_push_head</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-push-head</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Adds a new element at the head of the queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_push_head (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_push_tail</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-push-tail</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Adds a new element at the tail of the queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_push_tail (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_push_nth</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-push-nth</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Inserts a new element into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; at the given position</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_push_nth (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_pop_head</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-pop-head</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Removes the first element of the queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_queue_pop_head (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_pop_tail</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-pop-tail</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Removes the last element of the queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_queue_pop_tail (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_pop_nth</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-pop-nth</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Removes the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/em&gt;'th element of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_queue_pop_nth (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_peek_head</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-peek-head</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Returns the first element of the queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_queue_peek_head (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_peek_tail</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-peek-tail</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Returns the last element of the queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_queue_peek_tail (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_peek_nth</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-peek-nth</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Returns the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/em&gt;'th element of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_queue_peek_nth (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_index</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-index</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Returns the position of the first element in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; which contains &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_queue_index (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-remove</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Removes the first element in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; that contains &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_remove (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_remove_all</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-remove-all</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Remove all elemeents in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; which contains &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_remove_all (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_insert_before</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-insert-before</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Inserts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;sibling&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_insert_before (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *sibling,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_insert_after</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-insert-after</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Inserts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; after &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;sibling&lt;/code&gt;&lt;/em&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_insert_after (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt; *sibling,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_insert_sorted</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-insert-sorted</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Inserts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; to determine the new position.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_insert_sorted (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_push_head_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-push-head-link</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Adds a new element at the head of the queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_push_head_link (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *link_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_push_tail_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-push-tail-link</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Adds a new element at the tail of the queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_push_tail_link (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *link_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_push_nth_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-push-nth-link</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Inserts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;link&lt;/code&gt;&lt;/em&gt; into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; at the given position.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_push_nth_link (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; n,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *link_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_pop_head_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-pop-head-link</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Removes the first element of the queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_queue_pop_head_link (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_pop_tail_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-pop-tail-link</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Removes the last element of the queue.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_queue_pop_tail_link (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_pop_nth_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-pop-nth-link</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Removes and returns the link at the given position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_queue_pop_nth_link (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_peek_head_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-peek-head-link</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Returns the first link in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_queue_peek_head_link (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_peek_tail_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-peek-tail-link</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Returns the last link &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_queue_peek_tail_link (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&gt;GQueue&lt;/a&gt; *queue);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_peek_nth_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-peek-nth-link</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Returns the link at the given position</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_queue_peek_nth_link (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_link_index</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-link-index</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Returns the position of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;link_&lt;/code&gt;&lt;/em&gt; in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_queue_link_index (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *link_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_unlink</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-unlink</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Unlinks &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;link_&lt;/code&gt;&lt;/em&gt; so that it will no longer be part of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt;. The link is
not freed.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_unlink (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *link_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_queue_delete_link</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Double-ended-Queues.html</Path>
  <Anchor>g-queue-delete-link</Anchor>
  <NodeRef refid="61"/>
  <Abstract type="html">Removes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;link_&lt;/code&gt;&lt;/em&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/em&gt; and frees it.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_queue_delete_link (
    &lt;a class=&quot;glib-Double-ended-Queues.html#GQueue&quot; href=&quot;GQueue&quot; title=&quot;link&quot;&gt;GQueue&lt;/a&gt; *queue,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&gt;GList&lt;/a&gt; *link_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSequence</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>GSequence</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GSequence&lt;/span&gt; struct is an opaque data type
representing a &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html&quot; title=&quot;Sequences&quot;&gt;Sequence&lt;/a&gt; data type.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GSequence GSequence;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSequenceIter</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>GSequenceIter</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GSequenceIter&lt;/span&gt; struct is an opaque data
type representing an iterator pointing into a &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#GSequence&quot; title=&quot;GSequence&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSequence&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GSequenceNode GSequenceIter;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSequenceIterCompareFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>GSequenceIterCompareFunc</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#GSequenceIterCompareFunc&quot; title=&quot;GSequenceIterCompareFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSequenceIterCompareFunc&lt;/span&gt;&lt;/a&gt; is a function used to compare
iterators. It must return zero if the iterators compare equal, a
negative value if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt; comes before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt;, and a positive value if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt; comes
before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; (
    *GSequenceIterCompareFunc) (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *a,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *b,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-new</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Creates a new GSequence. The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data_destroy&lt;/code&gt;&lt;/em&gt; function, if non-&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; will
be called on all items when the sequence is destroyed and on items that
are removed from the sequence.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt;* g_sequence_new (
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; data_destroy);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-free</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Frees the memory allocated for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/em&gt; has a data destroy 
function associated with it, that function is called on all items in
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_free (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&gt;GSequence&lt;/a&gt; *seq);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_get_length</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-get-length</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns the length of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/em&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_sequence_get_length (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&gt;GSequence&lt;/a&gt; *seq);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-foreach</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Calls &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; for each item in the sequence passing &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt;
to the function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_foreach (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt; *seq,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GFunc&quot; href=&quot;GFunc ()&quot; title=&quot;link&quot;&gt;GFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_foreach_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-foreach-range</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Calls &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; for each item in the range (&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/em&gt;, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt;) passing
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; to the function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_foreach_range (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *begin,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *end,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GFunc&quot; href=&quot;GFunc ()&quot; title=&quot;link&quot;&gt;GFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_sort</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-sort</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Sorts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/em&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cmp_func&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_sort (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt; *seq,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; cmp_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; cmp_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_sort_iter</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-sort-iter</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#g-sequence-sort&quot; title=&quot;g_sequence_sort ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_sequence_sort()&lt;/code&gt;&lt;/a&gt;, but uses a &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#GSequenceIterCompareFunc&quot; title=&quot;GSequenceIterCompareFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSequenceIterCompareFunc&lt;/span&gt;&lt;/a&gt; instead
of a GCompareDataFunc as the compare function</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_sort_iter (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt; *seq,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIterCompareFunc&quot; href=&quot;GSequenceIterCompareFunc ()&quot; title=&quot;link&quot;&gt;GSequenceIterCompareFunc&lt;/a&gt; cmp_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; cmp_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_get_begin_iter</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-get-begin-iter</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns the begin iterator for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_get_begin_iter (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&gt;GSequence&lt;/a&gt; *seq);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_get_end_iter</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-get-end-iter</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns the end iterator for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seg&lt;/code&gt;&lt;/em&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_get_end_iter (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&gt;GSequence&lt;/a&gt; *seq);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_get_iter_at_pos</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-get-iter-at-pos</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns the iterator at position &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pos&lt;/code&gt;&lt;/em&gt;. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pos&lt;/code&gt;&lt;/em&gt; is negative or larger
than the number of items in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/em&gt;, the end iterator is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_get_iter_at_pos (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt; *seq,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; pos);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_append</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-append</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Adds a new item to the end of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_append (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt; *seq,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_prepend</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-prepend</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Adds a new item to the front of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/em&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_prepend (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt; *seq,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_insert_before</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-insert-before</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Inserts a new item just before the item pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_insert_before (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *iter,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_move</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-move</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Moves the item pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt; to the position indicated by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt;.
After calling this function &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt; will point to the position immediately
after &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt;. It is allowed for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt; to point into different
sequences.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_move (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *src,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *dest);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_swap</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-swap</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Swaps the items pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt;. It is allowed for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt;
to point into difference sequences.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_swap (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *a,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *b);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_insert_sorted</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-insert-sorted</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Inserts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;sequence&lt;/code&gt;&lt;/em&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; to determine the new position.
The sequence must already be sorted according to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cmp_func&lt;/code&gt;&lt;/em&gt;; otherwise the
new position of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; is undefined.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_insert_sorted (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt; *seq,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; cmp_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; cmp_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_insert_sorted_iter</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-insert-sorted-iter</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#g-sequence-insert-sorted&quot; title=&quot;g_sequence_insert_sorted ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_sequence_insert_sorted()&lt;/code&gt;&lt;/a&gt;, but uses
a &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#GSequenceIterCompareFunc&quot; title=&quot;GSequenceIterCompareFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSequenceIterCompareFunc&lt;/span&gt;&lt;/a&gt; instead of a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; title=&quot;GCompareDataFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompareDataFunc&lt;/span&gt;&lt;/a&gt; as
the compare function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_insert_sorted_iter (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt; *seq,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIterCompareFunc&quot; href=&quot;GSequenceIterCompareFunc ()&quot; title=&quot;link&quot;&gt;GSequenceIterCompareFunc&lt;/a&gt; iter_cmp,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; cmp_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_sort_changed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-sort-changed</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Moves the data pointed to a new position as indicated by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cmp_func&lt;/code&gt;&lt;/em&gt;. This
function should be called for items in a sequence already sorted according
to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cmp_func&lt;/code&gt;&lt;/em&gt; whenever some aspect of an item changes so that &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cmp_func&lt;/code&gt;&lt;/em&gt;
may return different values for that item.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_sort_changed (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *iter,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; cmp_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; cmp_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_sort_changed_iter</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-sort-changed-iter</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#g-sequence-sort-changed&quot; title=&quot;g_sequence_sort_changed ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_sequence_sort_changed()&lt;/code&gt;&lt;/a&gt;, but uses
a &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#GSequenceIterCompareFunc&quot; title=&quot;GSequenceIterCompareFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSequenceIterCompareFunc&lt;/span&gt;&lt;/a&gt; instead of a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; title=&quot;GCompareDataFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompareDataFunc&lt;/span&gt;&lt;/a&gt; as
the compare function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_sort_changed_iter (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *iter,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIterCompareFunc&quot; href=&quot;GSequenceIterCompareFunc ()&quot; title=&quot;link&quot;&gt;GSequenceIterCompareFunc&lt;/a&gt; iter_cmp,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; cmp_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-remove</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Removes the item pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt;. It is an error to pass the
end iterator to this function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_remove (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_remove_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-remove-range</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Removes all items in the (&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/em&gt;, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt;) range.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_remove_range (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *begin,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_move_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-move-range</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Inserts the (&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/em&gt;, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt;) range at the destination pointed to by ptr.
The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt; iters must point into the same sequence. It is
allowed for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest&lt;/code&gt;&lt;/em&gt; to point to a different sequence than the one pointed
into by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_move_range (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *dest,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *begin,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_search</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-search</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns an iterator pointing to the position where &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; would
be inserted according to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cmp_func&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cmp_data&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_search (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt; *seq,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; cmp_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; cmp_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_search_iter</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-search-iter</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#g-sequence-search&quot; title=&quot;g_sequence_search ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_sequence_search()&lt;/code&gt;&lt;/a&gt;, but uses
a &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#GSequenceIterCompareFunc&quot; title=&quot;GSequenceIterCompareFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSequenceIterCompareFunc&lt;/span&gt;&lt;/a&gt; instead of a &lt;a class=&quot;link&quot; href=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; title=&quot;GCompareDataFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCompareDataFunc&lt;/span&gt;&lt;/a&gt; as
the compare function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_search_iter (
    &lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt; *seq,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIterCompareFunc&quot; href=&quot;GSequenceIterCompareFunc ()&quot; title=&quot;link&quot;&gt;GSequenceIterCompareFunc&lt;/a&gt; iter_cmp,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; cmp_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_get</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-get</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns the data that &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; points to.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_sequence_get (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_set</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-set</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Changes the data for the item pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; to be &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;. If
the sequence has a data destroy function associated with it, that
function is called on the existing data that &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; pointed to.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_sequence_set (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *iter,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_iter_is_begin</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-iter-is-begin</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; is the begin iterator</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_sequence_iter_is_begin (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_iter_is_end</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-iter-is-end</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; is the end iterator</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_sequence_iter_is_end (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_iter_next</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-iter-next</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns an iterator pointing to the next position after &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt;. If
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; is the end iterator, the end iterator is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_iter_next (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_iter_prev</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-iter-prev</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns an iterator pointing to the previous position before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt;. If
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; is the begin iterator, the begin iterator is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_iter_prev (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_iter_get_position</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-iter-get-position</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns the position of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_sequence_iter_get_position (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_iter_move</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-iter-move</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns the &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#GSequenceIter&quot; title=&quot;GSequenceIter&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSequenceIter&lt;/span&gt;&lt;/a&gt; which is &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;delta&lt;/code&gt;&lt;/em&gt; positions away from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; is closer than -&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;delta&lt;/code&gt;&lt;/em&gt; positions to the beginning of the sequence,
the begin iterator is returned. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; is closer than &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;delta&lt;/code&gt;&lt;/em&gt; positions
to the end of the sequence, the end iterator is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_iter_move (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *iter,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; delta);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_iter_get_sequence</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-iter-get-sequence</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns the &lt;a class=&quot;link&quot; href=&quot;glib-Sequences.html#GSequence&quot; title=&quot;GSequence&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSequence&lt;/span&gt;&lt;/a&gt; that &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; points into.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequence&quot; href=&quot;GSequence&quot; title=&quot;link&quot;&gt;GSequence&lt;/a&gt;* g_sequence_iter_get_sequence (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_iter_compare</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-iter-compare</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Returns a negative number if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt; comes before &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt;, 0 if they are equal,
and a positive number if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/em&gt; comes after &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_sequence_iter_compare (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *a,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *b);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_sequence_range_get_midpoint</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Sequences.html</Path>
  <Anchor>g-sequence-range-get-midpoint</Anchor>
  <NodeRef refid="62"/>
  <Abstract type="html">Finds an iterator somewhere in the range (&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/em&gt;, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/em&gt;). This
iterator will be close to the middle of the range, but is not
guaranteed to be &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;exactly&lt;/em&gt;&lt;/span&gt; in the middle.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt;* g_sequence_range_get_midpoint (
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&quot;link&quot;&gt;GSequenceIter&lt;/a&gt; *begin,
    &lt;a class=&quot;glib-Sequences.html#GSequenceIter&quot; href=&quot;GSequenceIter&quot; title=&gt;GSequenceIter&lt;/a&gt; *end);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTrashStack</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Trash-Stacks.html</Path>
  <Anchor>GTrashStack</Anchor>
  <NodeRef refid="63"/>
  <Abstract type="html">Each piece of memory that is pushed onto the stack
is cast to a &lt;span class=&quot;structname&quot;&gt;GTrashStack*&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GTrashStack *next;
} GTrashStack;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_trash_stack_push</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Trash-Stacks.html</Path>
  <Anchor>g-trash-stack-push</Anchor>
  <NodeRef refid="63"/>
  <Abstract type="html">Pushes a piece of memory onto a &lt;a class=&quot;link&quot; href=&quot;glib-Trash-Stacks.html#GTrashStack&quot; title=&quot;GTrashStack&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTrashStack&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_trash_stack_push (
    &lt;a class=&quot;glib-Trash-Stacks.html#GTrashStack&quot; href=&quot;GTrashStack&quot; title=&quot;link&quot;&gt;GTrashStack&lt;/a&gt; **stack_p,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data_p);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_trash_stack_pop</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Trash-Stacks.html</Path>
  <Anchor>g-trash-stack-pop</Anchor>
  <NodeRef refid="63"/>
  <Abstract type="html">Pops a piece of memory off a &lt;a class=&quot;link&quot; href=&quot;glib-Trash-Stacks.html#GTrashStack&quot; title=&quot;GTrashStack&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTrashStack&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_trash_stack_pop (
    &lt;a class=&quot;glib-Trash-Stacks.html#GTrashStack&quot; href=&quot;GTrashStack&quot; title=&gt;GTrashStack&lt;/a&gt; **stack_p);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_trash_stack_peek</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Trash-Stacks.html</Path>
  <Anchor>g-trash-stack-peek</Anchor>
  <NodeRef refid="63"/>
  <Abstract type="html">Returns the element at the top of a &lt;a class=&quot;link&quot; href=&quot;glib-Trash-Stacks.html#GTrashStack&quot; title=&quot;GTrashStack&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTrashStack&lt;/span&gt;&lt;/a&gt; which may be &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_trash_stack_peek (
    &lt;a class=&quot;glib-Trash-Stacks.html#GTrashStack&quot; href=&quot;GTrashStack&quot; title=&gt;GTrashStack&lt;/a&gt; **stack_p);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_trash_stack_height</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Trash-Stacks.html</Path>
  <Anchor>g-trash-stack-height</Anchor>
  <NodeRef refid="63"/>
  <Abstract type="html">Returns the height of a &lt;a class=&quot;link&quot; href=&quot;glib-Trash-Stacks.html#GTrashStack&quot; title=&quot;GTrashStack&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTrashStack&lt;/span&gt;&lt;/a&gt;.
Note that execution of this function is of O(N) complexity
where N denotes the number of items on the stack.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_trash_stack_height (
    &lt;a class=&quot;glib-Trash-Stacks.html#GTrashStack&quot; href=&quot;GTrashStack&quot; title=&gt;GTrashStack&lt;/a&gt; **stack_p);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHashTable</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>GHashTable</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GHashTable&lt;/span&gt; struct is an opaque data structure to represent a
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html&quot; title=&quot;Hash Tables&quot;&gt;Hash Table&lt;/a&gt;.
It should only be accessed via the following functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GHashTable GHashTable;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-new</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt; with a reference count of 1.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt;* g_hash_table_new (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashFunc&quot; href=&quot;GHashFunc ()&quot; title=&quot;link&quot;&gt;GHashFunc&lt;/a&gt; hash_func,
    &lt;a class=&quot;glib-Hash-Tables.html#GEqualFunc&quot; href=&quot;GEqualFunc ()&quot; title=&gt;GEqualFunc&lt;/a&gt; key_equal_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_new_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-new-full</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt; like &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-new&quot; title=&quot;g_hash_table_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_new()&lt;/code&gt;&lt;/a&gt; with a reference count
of 1 and allows to specify functions to free the memory allocated for the
key and value that get called when removing the entry from the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt;* g_hash_table_new_full (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashFunc&quot; href=&quot;GHashFunc ()&quot; title=&quot;link&quot;&gt;GHashFunc&lt;/a&gt; hash_func,
    &lt;a class=&quot;glib-Hash-Tables.html#GEqualFunc&quot; href=&quot;GEqualFunc ()&quot; title=&quot;link&quot;&gt;GEqualFunc&lt;/a&gt; key_equal_func,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&quot;link&quot;&gt;GDestroyNotify&lt;/a&gt; key_destroy_func,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; value_destroy_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHashFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>GHashFunc</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Specifies the type of the hash function which is passed to
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-new&quot; title=&quot;g_hash_table_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_new()&lt;/code&gt;&lt;/a&gt; when a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt; is created.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; (
    *GHashFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GEqualFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>GEqualFunc</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Specifies the type of a function used to test two values for
equality. The function should return &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if both values are equal and
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; otherwise.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GEqualFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; a,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; b);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-insert</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Inserts a new key and value into a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hash_table_insert (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt; *hash_table,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_replace</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-replace</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Inserts a new key and value into a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt; similar to
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-insert&quot; title=&quot;g_hash_table_insert ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_insert()&lt;/code&gt;&lt;/a&gt;. The difference is that if the key already exists
in the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;, it gets replaced by the new key. If you supplied a
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_destroy_func&lt;/code&gt;&lt;/em&gt; when creating the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;, the old value is freed
using that function. If you supplied a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_destroy_func&lt;/code&gt;&lt;/em&gt; when creating the
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;, the old key is freed using that function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hash_table_replace (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt; *hash_table,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_size</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-size</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Returns the number of elements contained in the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_hash_table_size (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&gt;GHashTable&lt;/a&gt; *hash_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_lookup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-lookup</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Looks up a key in a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;. Note that this function cannot
distinguish between a key that is not present and one which is present
and has the value &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;. If you need this distinction, use
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-lookup-extended&quot; title=&quot;g_hash_table_lookup_extended ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_lookup_extended()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_hash_table_lookup (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt; *hash_table,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_lookup_extended</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-lookup-extended</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Looks up a key in the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;, returning the original key and the
associated value and a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gboolean&quot; title=&quot;gboolean&quot;&gt;&lt;span class=&quot;type&quot;&gt;gboolean&lt;/span&gt;&lt;/a&gt; which is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the key was found. This
is useful if you need to free the memory allocated for the original key,
for example before calling &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-remove&quot; title=&quot;g_hash_table_remove ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_remove()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_hash_table_lookup_extended (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt; *hash_table,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; lookup_key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; *orig_key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-foreach</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Calls the given function for each of the key/value pairs in the
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.  The function is passed the key and value of each
pair, and the given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; parameter.  The hash table may not
be modified while iterating over it (you can't add/remove
items). To remove all items matching a predicate, use
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-foreach-remove&quot; title=&quot;g_hash_table_foreach_remove ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_foreach_remove()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hash_table_foreach (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt; *hash_table,
    &lt;a class=&quot;glib-Hash-Tables.html#GHFunc&quot; href=&quot;GHFunc ()&quot; title=&quot;link&quot;&gt;GHFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_find</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-find</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Calls the given function for key/value pairs in the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt; until
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;predicate&lt;/code&gt;&lt;/em&gt; returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;.  The function is passed the key and value of
each pair, and the given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; parameter. The hash table may not
be modified while iterating over it (you can't add/remove items).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_hash_table_find (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt; *hash_table,
    &lt;a class=&quot;glib-Hash-Tables.html#GHRFunc&quot; href=&quot;GHRFunc ()&quot; title=&quot;link&quot;&gt;GHRFunc&lt;/a&gt; predicate,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>GHFunc</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Specifies the type of the function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-foreach&quot; title=&quot;g_hash_table_foreach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_foreach()&lt;/code&gt;&lt;/a&gt;.
It is called with each key/value pair, together with the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; parameter
which is passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-foreach&quot; title=&quot;g_hash_table_foreach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_foreach()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GHFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; value,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-remove</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Removes a key and its associated value from a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_hash_table_remove (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt; *hash_table,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_steal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-steal</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Removes a key and its associated value from a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt; without
calling the key and value destroy functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_hash_table_steal (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt; *hash_table,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_foreach_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-foreach-remove</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Calls the given function for each key/value pair in the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.
If the function returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;, then the key/value pair is removed from the
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;. If you supplied key or value destroy functions when creating
the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;, they are used to free the memory allocated for the removed
keys and values.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_hash_table_foreach_remove (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt; *hash_table,
    &lt;a class=&quot;glib-Hash-Tables.html#GHRFunc&quot; href=&quot;GHRFunc ()&quot; title=&quot;link&quot;&gt;GHRFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_foreach_steal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-foreach-steal</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Calls the given function for each key/value pair in the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.
If the function returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;, then the key/value pair is removed from the
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;, but no key or value destroy functions are called.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_hash_table_foreach_steal (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt; *hash_table,
    &lt;a class=&quot;glib-Hash-Tables.html#GHRFunc&quot; href=&quot;GHRFunc ()&quot; title=&quot;link&quot;&gt;GHRFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_remove_all</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-remove-all</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Removes all keys and their associated values from a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hash_table_remove_all (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&gt;GHashTable&lt;/a&gt; *hash_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_steal_all</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-steal-all</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Removes all keys and their associated values from a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;
without calling the key and value destroy functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hash_table_steal_all (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&gt;GHashTable&lt;/a&gt; *hash_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_get_keys</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-get-keys</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Retrieves every key inside &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;hash_table&lt;/code&gt;&lt;/em&gt;. The returned data is valid
until &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;hash_table&lt;/code&gt;&lt;/em&gt; is modified.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_hash_table_get_keys (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&gt;GHashTable&lt;/a&gt; *hash_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_get_values</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-get-values</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Retrieves every value inside &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;hash_table&lt;/code&gt;&lt;/em&gt;. The returned data is
valid until &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;hash_table&lt;/code&gt;&lt;/em&gt; is modified.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Doubly-Linked-Lists.html#GList&quot; href=&quot;GList&quot; title=&quot;link&quot;&gt;GList&lt;/a&gt;* g_hash_table_get_values (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&gt;GHashTable&lt;/a&gt; *hash_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHRFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>GHRFunc</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Specifies the type of the function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-foreach-remove&quot; title=&quot;g_hash_table_foreach_remove ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_foreach_remove()&lt;/code&gt;&lt;/a&gt;.
It is called with each key/value pair, together with the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; parameter
passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-foreach-remove&quot; title=&quot;g_hash_table_foreach_remove ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_foreach_remove()&lt;/code&gt;&lt;/a&gt;.
It should return &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the key/value pair should be removed from the
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GHRFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; value,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_freeze</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-freeze</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">This function is deprecated and will be removed in the next major
 release of GLib. It does nothing.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_hash_table_freeze(hash_table)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_hash_table_freeze&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_thaw</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-thaw</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">This function is deprecated and will be removed in the next major
 release of GLib. It does nothing.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_hash_table_thaw(hash_table)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_hash_table_thaw&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-destroy</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Destroys all keys and values in the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt; and decrements its
reference count by 1. If keys and/or values are dynamically allocated,
you should either free them first or create the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt; with destroy
notifiers using &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-new-full&quot; title=&quot;g_hash_table_new_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_new_full()&lt;/code&gt;&lt;/a&gt;. In the latter case the destroy
functions you supplied will be called on all keys and values during the
destruction phase.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hash_table_destroy (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&gt;GHashTable&lt;/a&gt; *hash_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-ref</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Atomically increments the reference count of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;hash_table&lt;/code&gt;&lt;/em&gt; by one.
This function is MT-safe and may be called from any thread.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt;* g_hash_table_ref (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&gt;GHashTable&lt;/a&gt; *hash_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-unref</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Atomically decrements the reference count of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;hash_table&lt;/code&gt;&lt;/em&gt; by one.
If the reference count drops to 0, all keys and values will be
destroyed, and all memory allocated by the hash table is released.
This function is MT-safe and may be called from any thread.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hash_table_unref (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&gt;GHashTable&lt;/a&gt; *hash_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GHashTableIter</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>GHashTableIter</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">A GHashTableIter structure represents an iterator that can be
used to iterate over the elements of a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;. GHashTableIter
structures are typically allocated on the stack and then initialized
with &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-iter-init&quot; title=&quot;g_hash_table_iter_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_iter_init()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GHashTableIter;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_iter_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-iter-init</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Initializes a key/value pair iterator and associates it with
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;hash_table&lt;/code&gt;&lt;/em&gt;. Modifying the hash table after calling this function
invalidates the returned iterator.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hash_table_iter_init (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTableIter&quot; href=&quot;GHashTableIter&quot; title=&quot;link&quot;&gt;GHashTableIter&lt;/a&gt; *iter,
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&gt;GHashTable&lt;/a&gt; *hash_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_iter_next</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-iter-next</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Advances &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt; and retrieves the key and/or value that are now
pointed to as a result of this advancement. If &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; is returned,
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; are not set, and the iterator becomes invalid.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_hash_table_iter_next (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTableIter&quot; href=&quot;GHashTableIter&quot; title=&quot;link&quot;&gt;GHashTableIter&lt;/a&gt; *iter,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; *key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_iter_get_hash_table</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-iter-get-hash-table</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Returns the &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt; associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Hash-Tables.html#GHashTable&quot; href=&quot;GHashTable&quot; title=&quot;link&quot;&gt;GHashTable&lt;/a&gt;* g_hash_table_iter_get_hash_table (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTableIter&quot; href=&quot;GHashTableIter&quot; title=&gt;GHashTableIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_iter_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-iter-remove</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Removes the key/value pair currently pointed to by the iterator
from its associated &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;. Can only be called after
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-iter-next&quot; title=&quot;g_hash_table_iter_next ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_iter_next()&lt;/code&gt;&lt;/a&gt; returned &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;, and cannot be called more
than once for the same key/value pair.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hash_table_iter_remove (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTableIter&quot; href=&quot;GHashTableIter&quot; title=&gt;GHashTableIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_hash_table_iter_steal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-hash-table-iter-steal</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Removes the key/value pair currently pointed to by the iterator
from its associated &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;, without calling the key and value
destroy functions. Can only be called after
&lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-iter-next&quot; title=&quot;g_hash_table_iter_next ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_iter_next()&lt;/code&gt;&lt;/a&gt; returned &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;, and cannot be called more
than once for the same key/value pair.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_hash_table_iter_steal (
    &lt;a class=&quot;glib-Hash-Tables.html#GHashTableIter&quot; href=&quot;GHashTableIter&quot; title=&gt;GHashTableIter&lt;/a&gt; *iter);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_direct_equal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-direct-equal</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Compares two &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gpointer&quot; title=&quot;gpointer&quot;&gt;&lt;span class=&quot;type&quot;&gt;gpointer&lt;/span&gt;&lt;/a&gt; arguments and returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if they are equal.
It can be passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-new&quot; title=&quot;g_hash_table_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_new()&lt;/code&gt;&lt;/a&gt; as the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_equal_func&lt;/code&gt;&lt;/em&gt;
parameter, when using pointers as keys in a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_direct_equal (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; v1,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; v2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_direct_hash</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-direct-hash</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Converts a gpointer to a hash value.
It can be passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-new&quot; title=&quot;g_hash_table_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_new()&lt;/code&gt;&lt;/a&gt; as the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;hash_func&lt;/code&gt;&lt;/em&gt; parameter, 
when using pointers as keys in a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_direct_hash (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; v);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_int_equal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-int-equal</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Compares the two &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gint&quot; title=&quot;gint&quot;&gt;&lt;span class=&quot;type&quot;&gt;gint&lt;/span&gt;&lt;/a&gt; values being pointed to and returns 
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if they are equal.
It can be passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-new&quot; title=&quot;g_hash_table_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_new()&lt;/code&gt;&lt;/a&gt; as the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_equal_func&lt;/code&gt;&lt;/em&gt;
parameter, when using pointers to integers as keys in a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_int_equal (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; v1,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; v2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_int_hash</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-int-hash</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Converts a pointer to a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gint&quot; title=&quot;gint&quot;&gt;&lt;span class=&quot;type&quot;&gt;gint&lt;/span&gt;&lt;/a&gt; to a hash value.
It can be passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-new&quot; title=&quot;g_hash_table_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_new()&lt;/code&gt;&lt;/a&gt; as the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;hash_func&lt;/code&gt;&lt;/em&gt; parameter, 
when using pointers to integers values as keys in a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_int_hash (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; v);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_str_equal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-str-equal</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Compares two strings for byte-by-byte equality and returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; 
if they are equal. It can be passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-new&quot; title=&quot;g_hash_table_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_new()&lt;/code&gt;&lt;/a&gt; as the 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_equal_func&lt;/code&gt;&lt;/em&gt; parameter, when using strings as keys in a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_str_equal (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; v1,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; v2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_str_hash</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Hash-Tables.html</Path>
  <Anchor>g-str-hash</Anchor>
  <NodeRef refid="64"/>
  <Abstract type="html">Converts a string to a hash value.
It can be passed to &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#g-hash-table-new&quot; title=&quot;g_hash_table_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_hash_table_new()&lt;/code&gt;&lt;/a&gt; as the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;hash_func&lt;/code&gt;&lt;/em&gt; 
parameter, when using strings as keys in a &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_str_hash (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; v);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GString</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>GString</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt; struct contains the public fields of a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gchar *str;
    gsize len;
    gsize allocated_len;
} GString;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-new</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;, initialized with the given string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_new (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *init);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_new_len</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-new-len</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt; with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; bytes of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;init&lt;/code&gt;&lt;/em&gt; buffer.  
Because a length is provided, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;init&lt;/code&gt;&lt;/em&gt; need not be nul-terminated,
and can contain embedded nul bytes.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_new_len (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *init,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_sized_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-sized-new</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;, with enough space for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dfl_size&lt;/code&gt;&lt;/em&gt; 
bytes. This is useful if you are going to add a lot of 
text to the string and don't want it to be reallocated 
too often.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&gt;GString&lt;/a&gt;* g_string_sized_new (
    gsize dfl_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_assign</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-assign</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Copies the bytes from a string into a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;, 
destroying any previous contents. It is rather like 
the standard &lt;code class=&quot;function&quot;&gt;strcpy()&lt;/code&gt; function, except that you do not 
have to worry about having enough space to copy the string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_assign (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *rval);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_sprintf</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-sprintf</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Writes a formatted string into a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;.
This is similar to the standard &lt;code class=&quot;function&quot;&gt;sprintf()&lt;/code&gt; function,
except that the &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt; buffer automatically expands 
to contain the results. The previous contents of the 
&lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt; are destroyed.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_string_sprintf&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_string_sprintf&lt;/code&gt; is deprecated and should not be used in newly-written code. This function has been renamed to &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#g-string-printf&quot; title=&quot;g_string_printf ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_printf()&lt;/code&gt;&lt;/a&gt;.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_sprintfa</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-sprintfa</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Appends a formatted string onto the end of a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;.
This function is similar to &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#g-string-sprintf&quot; title=&quot;g_string_sprintf&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_sprintf()&lt;/code&gt;&lt;/a&gt; except that
the text is appended to the &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_string_sprintfa&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_string_sprintfa&lt;/code&gt; is deprecated and should not be used in newly-written code. This function has been renamed to &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#g-string-append-printf&quot; title=&quot;g_string_append_printf ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_append_printf()&lt;/code&gt;&lt;/a&gt;</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_vprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-vprintf</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Writes a formatted string into a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;. 
This function is similar to &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#g-string-printf&quot; title=&quot;g_string_printf ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_printf()&lt;/code&gt;&lt;/a&gt; except that 
the arguments to the format string are passed as a va_list.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_string_vprintf (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_append_vprintf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-append-vprintf</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Appends a formatted string onto the end of a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;.
This function is similar to &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#g-string-append-printf&quot; title=&quot;g_string_append_printf ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_append_printf()&lt;/code&gt;&lt;/a&gt;
except that the arguments to the format string are passed
as a va_list.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_string_append_vprintf (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_printf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-printf</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Writes a formatted string into a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;.
This is similar to the standard &lt;code class=&quot;function&quot;&gt;sprintf()&lt;/code&gt; function,
except that the &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt; buffer automatically expands 
to contain the results. The previous contents of the 
&lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt; are destroyed.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_string_printf (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_append_printf</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-append-printf</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Appends a formatted string onto the end of a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;.
This function is similar to &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#g-string-printf&quot; title=&quot;g_string_printf ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_printf()&lt;/code&gt;&lt;/a&gt; except 
that the text is appended to the &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_string_append_printf (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *format,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_append</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-append</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Adds a string onto the end of a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;, expanding 
it if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_append (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *val);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_append_c</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-append-c</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Adds a byte onto the end of a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;, expanding 
it if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_append_c (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_append_unichar</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-append-unichar</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Converts a Unicode character into UTF-8, and appends it
to the string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_append_unichar (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; wc);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_append_len</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-append-len</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Appends &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; bytes of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;. Because &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; is 
provided, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt; may contain embedded nuls and need not 
be nul-terminated.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_append_len (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *val,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_append_uri_escaped</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-append-uri-escaped</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Appends &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;unescaped&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;, escaped any characters that
are reserved in URIs using URI-style escape sequences.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_append_uri_escaped (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    const char *unescaped,
    const char *reserved_chars_allowed,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; allow_utf8);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.16</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_prepend</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-prepend</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Adds a string on to the start of a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;, 
expanding it if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_prepend (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *val);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_prepend_c</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-prepend-c</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Adds a byte onto the start of a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;, 
expanding it if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_prepend_c (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_prepend_unichar</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-prepend-unichar</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Converts a Unicode character into UTF-8, and prepends it
to the string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_prepend_unichar (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; wc);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_prepend_len</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-prepend-len</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Prepends &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; bytes of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;. 
Because &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; is provided, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt; may contain 
embedded nuls and need not be nul-terminated.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_prepend_len (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *val,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-insert</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Inserts a copy of a string into a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;, 
expanding it if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_insert (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    gssize pos,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *val);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_insert_c</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-insert-c</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Inserts a byte into a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;, expanding it if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_insert_c (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    gssize pos,
    &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; c);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_insert_unichar</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-insert-unichar</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Converts a Unicode character into UTF-8, and insert it
into the string at the given position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_insert_unichar (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    gssize pos,
    &lt;a class=&quot;glib-Unicode-Manipulation.html#gunichar&quot; href=&quot;gunichar&quot; title=&gt;gunichar&lt;/a&gt; wc);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_insert_len</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-insert-len</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Inserts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; bytes of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt; into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; at &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pos&lt;/code&gt;&lt;/em&gt;.  
Because &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; is provided, &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;val&lt;/code&gt;&lt;/em&gt; may contain embedded 
nuls and need not be nul-terminated. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pos&lt;/code&gt;&lt;/em&gt; is -1, 
bytes are inserted at the end of the string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_insert_len (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    gssize pos,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *val,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_overwrite</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-overwrite</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Overwrites part of a string, lengthening it if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_overwrite (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    gsize pos,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *val);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_overwrite_len</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-overwrite-len</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Overwrites part of a string, lengthening it if necessary. 
This function will work with embedded nuls.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_overwrite_len (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    gsize pos,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *val,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_erase</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-erase</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Removes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; bytes from a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;, starting at position &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pos&lt;/code&gt;&lt;/em&gt;.
The rest of the &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt; is shifted down to fill the gap.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_erase (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&gt;GString&lt;/a&gt; *string,
    gssize pos,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_truncate</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-truncate</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Cuts off the end of the GString, leaving the first &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; bytes.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_truncate (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&gt;GString&lt;/a&gt; *string,
    gsize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_set_size</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-set-size</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Sets the length of a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;. If the length is less than
the current length, the string will be truncated. If the
length is greater than the current length, the contents
of the newly added area are undefined. (However, as
always, string-&amp;gt;str[string-&amp;gt;len] will be a nul byte.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_set_size (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&gt;GString&lt;/a&gt; *string,
    gsize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-free</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Frees the memory allocated for the &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;free_segment&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; it also frees the character data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_string_free (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *string,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; free_segment);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_up</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-up</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt; to uppercase.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_up (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&gt;GString&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_string_up&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. This function uses the locale-specific 
  &lt;code class=&quot;function&quot;&gt;toupper()&lt;/code&gt; function, which is almost never the right thing. 
  Use &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-string-ascii-up&quot; title=&quot;g_string_ascii_up ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_ascii_up()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-strup&quot; title=&quot;g_utf8_strup ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_strup()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_down</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-down</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Converts a &lt;a class=&quot;link&quot; href=&quot;glib-Strings.html#GString&quot; title=&quot;GString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt; to lowercase.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt;* g_string_down (
    &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&gt;GString&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_string_down&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. This function uses the locale-specific 
  &lt;code class=&quot;function&quot;&gt;tolower()&lt;/code&gt; function, which is almost never the right thing. 
  Use &lt;a class=&quot;link&quot; href=&quot;glib-String-Utility-Functions.html#g-string-ascii-down&quot; title=&quot;g_string_ascii_down ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_ascii_down()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;glib-Unicode-Manipulation.html#g-utf8-strdown&quot; title=&quot;g_utf8_strdown ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_utf8_strdown()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_hash</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-hash</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Creates a hash code for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/em&gt;; for use with &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_string_hash (
    const &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&gt;GString&lt;/a&gt; *str);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_equal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Strings.html</Path>
  <Anchor>g-string-equal</Anchor>
  <NodeRef refid="65"/>
  <Abstract type="html">Compares two strings for equality, returning &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if they are equal. 
For use with &lt;a class=&quot;link&quot; href=&quot;glib-Hash-Tables.html#GHashTable&quot; title=&quot;GHashTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_string_equal (
    const &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&quot;link&quot;&gt;GString&lt;/a&gt; *v,
    const &lt;a class=&quot;glib-Strings.html#GString&quot; href=&quot;GString&quot; title=&gt;GString&lt;/a&gt; *v2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GStringChunk</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Chunks.html</Path>
  <Anchor>GStringChunk</Anchor>
  <NodeRef refid="66"/>
  <Abstract type="html">An opaque data structure representing String Chunks.
It should only be accessed by using the following functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GStringChunk GStringChunk;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_chunk_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Chunks.html</Path>
  <Anchor>g-string-chunk-new</Anchor>
  <NodeRef refid="66"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#GStringChunk&quot; title=&quot;GStringChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStringChunk&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-String-Chunks.html#GStringChunk&quot; href=&quot;GStringChunk&quot; title=&gt;GStringChunk&lt;/a&gt;* g_string_chunk_new (
    gsize size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_chunk_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Chunks.html</Path>
  <Anchor>g-string-chunk-insert</Anchor>
  <NodeRef refid="66"/>
  <Abstract type="html">Adds a copy of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; to the &lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#GStringChunk&quot; title=&quot;GStringChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStringChunk&lt;/span&gt;&lt;/a&gt;.
It returns a pointer to the new copy of the string 
in the &lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#GStringChunk&quot; title=&quot;GStringChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStringChunk&lt;/span&gt;&lt;/a&gt;. The characters in the string 
can be changed, if necessary, though you should not 
change anything after the end of the string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_string_chunk_insert (
    &lt;a class=&quot;glib-String-Chunks.html#GStringChunk&quot; href=&quot;GStringChunk&quot; title=&quot;link&quot;&gt;GStringChunk&lt;/a&gt; *chunk,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_chunk_insert_const</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Chunks.html</Path>
  <Anchor>g-string-chunk-insert-const</Anchor>
  <NodeRef refid="66"/>
  <Abstract type="html">Adds a copy of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; to the &lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#GStringChunk&quot; title=&quot;GStringChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStringChunk&lt;/span&gt;&lt;/a&gt;, unless the same 
string has already been added to the &lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#GStringChunk&quot; title=&quot;GStringChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStringChunk&lt;/span&gt;&lt;/a&gt; with 
&lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#g-string-chunk-insert-const&quot; title=&quot;g_string_chunk_insert_const ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_chunk_insert_const()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_string_chunk_insert_const (
    &lt;a class=&quot;glib-String-Chunks.html#GStringChunk&quot; href=&quot;GStringChunk&quot; title=&quot;link&quot;&gt;GStringChunk&lt;/a&gt; *chunk,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_chunk_insert_len</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Chunks.html</Path>
  <Anchor>g-string-chunk-insert-len</Anchor>
  <NodeRef refid="66"/>
  <Abstract type="html">Adds a copy of the first &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; bytes of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; to the &lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#GStringChunk&quot; title=&quot;GStringChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStringChunk&lt;/span&gt;&lt;/a&gt;. 
The copy is nul-terminated.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_string_chunk_insert_len (
    &lt;a class=&quot;glib-String-Chunks.html#GStringChunk&quot; href=&quot;GStringChunk&quot; title=&quot;link&quot;&gt;GStringChunk&lt;/a&gt; *chunk,
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string,
    gssize len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_chunk_clear</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Chunks.html</Path>
  <Anchor>g-string-chunk-clear</Anchor>
  <NodeRef refid="66"/>
  <Abstract type="html">Frees all strings contained within the &lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#GStringChunk&quot; title=&quot;GStringChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStringChunk&lt;/span&gt;&lt;/a&gt;.
After calling &lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#g-string-chunk-clear&quot; title=&quot;g_string_chunk_clear ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_chunk_clear()&lt;/code&gt;&lt;/a&gt; it is not safe to
access any of the strings which were contained within it.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_string_chunk_clear (
    &lt;a class=&quot;glib-String-Chunks.html#GStringChunk&quot; href=&quot;GStringChunk&quot; title=&gt;GStringChunk&lt;/a&gt; *chunk);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_string_chunk_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-String-Chunks.html</Path>
  <Anchor>g-string-chunk-free</Anchor>
  <NodeRef refid="66"/>
  <Abstract type="html">Frees all memory allocated by the &lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#GStringChunk&quot; title=&quot;GStringChunk&quot;&gt;&lt;span class=&quot;type&quot;&gt;GStringChunk&lt;/span&gt;&lt;/a&gt;.
After calling &lt;a class=&quot;link&quot; href=&quot;glib-String-Chunks.html#g-string-chunk-free&quot; title=&quot;g_string_chunk_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_string_chunk_free()&lt;/code&gt;&lt;/a&gt; it is not safe to
access any of the strings which were contained within it.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_string_chunk_free (
    &lt;a class=&quot;glib-String-Chunks.html#GStringChunk&quot; href=&quot;GStringChunk&quot; title=&gt;GStringChunk&lt;/a&gt; *chunk);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GArray</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>GArray</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Contains the public fields of an Array.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gchar *data;
    guint len;
} GArray;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-new</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt;* g_array_new (
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; zero_terminated,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; clear_,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; element_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_sized_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-sized-new</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt; with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;reserved_size&lt;/code&gt;&lt;/em&gt; elements
preallocated. This avoids frequent reallocation, if you are going to
add many elements to the array. Note however that the size of the
array is still 0.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt;* g_array_sized_new (
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; zero_terminated,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; clear_,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; element_size,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; reserved_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_append_val</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-append-val</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Adds the value on to the end of the array.
The array will grow in size automatically if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_array_append_val(a,v)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_append_vals</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-append-vals</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Adds &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; elements onto the end of the array.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt;* g_array_append_vals (
    &lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_prepend_val</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-prepend-val</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Adds the value on to the start of the array.
The array will grow in size automatically if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_array_prepend_val(a,v)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_prepend_vals</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-prepend-vals</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Adds &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; elements onto the start of the array.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt;* g_array_prepend_vals (
    &lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_insert_val</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-insert-val</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Inserts an element into an array at the given index.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_array_insert_val(a,i,v)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_insert_vals</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-insert-vals</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Inserts &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;len&lt;/code&gt;&lt;/em&gt; elements into a &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt; at the given index.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt;* g_array_insert_vals (
    &lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; index_,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_remove_index</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-remove-index</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Removes the element at the given index from a &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt;.
The following elements are moved down one place.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt;* g_array_remove_index (
    &lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; index_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_remove_index_fast</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-remove-index-fast</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Removes the element at the given index from a &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt;.
The last element in the array is used to fill in the space, so this function
does not preserve the order of the &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt;. But it is faster than
&lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#g-array-remove-index&quot; title=&quot;g_array_remove_index ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_array_remove_index()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt;* g_array_remove_index_fast (
    &lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; index_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_remove_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-remove-range</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Removes the given number of elements starting at the given index from a
&lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt;.  The following elements are moved to close the gap.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt;* g_array_remove_range (
    &lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; index_,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_sort</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-sort</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Sorts a &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;compare_func&lt;/code&gt;&lt;/em&gt; which should be a &lt;code class=&quot;function&quot;&gt;qsort()&lt;/code&gt;-style comparison
function (returns less than zero for first arg is less than second arg, 
zero for equal, greater zero if first arg is greater than second arg).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_array_sort (
    &lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; compare_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_sort_with_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-sort-with-data</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#g-array-sort&quot; title=&quot;g_array_sort ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_array_sort()&lt;/code&gt;&lt;/a&gt;, but the comparison function receives an extra user data
argument.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_array_sort_with_data (
    &lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; compare_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_index</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-index</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Returns the element of a &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt; at the given index.
The return value is cast to the given type.
</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_array_index(a,t,i)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_set_size</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-set-size</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Sets the size of the array, expanding it if necessary.
If the array was created with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;clear_&lt;/code&gt;&lt;/em&gt; set to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;, the new elements are set to 0.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt;* g_array_set_size (
    &lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_array_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Arrays.html</Path>
  <Anchor>g-array-free</Anchor>
  <NodeRef refid="67"/>
  <Abstract type="html">Frees the memory allocated for the &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;free_segment&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; it frees the memory block holding the elements
as well. Pass &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; if you want to free the &lt;a class=&quot;link&quot; href=&quot;glib-Arrays.html#GArray&quot; title=&quot;GArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GArray&lt;/span&gt;&lt;/a&gt; wrapper but preserve
the underlying array for use elsewhere.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_array_free (
    &lt;a class=&quot;glib-Arrays.html#GArray&quot; href=&quot;GArray&quot; title=&quot;link&quot;&gt;GArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; free_segment);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GPtrArray</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>GPtrArray</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Contains the public fields of a pointer array.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gpointer *pdata;
    guint len;
} GPtrArray;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-new</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; title=&quot;GPtrArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPtrArray&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&gt;GPtrArray&lt;/a&gt;* g_ptr_array_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_sized_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-sized-new</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; title=&quot;GPtrArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPtrArray&lt;/span&gt;&lt;/a&gt; with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;reserved_size&lt;/code&gt;&lt;/em&gt; pointers
preallocated. This avoids frequent reallocation, if you are going to
add many pointers to the array. Note however that the size of the
array is still 0.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt;* g_ptr_array_sized_new (
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; reserved_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_add</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-add</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Adds a pointer to the end of the pointer array.
The array will grow in size automatically if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_ptr_array_add (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-remove</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Removes the first occurrence of the given pointer from the pointer array.
The following elements are moved down one place.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ptr_array_remove (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_remove_index</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-remove-index</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Removes the pointer at the given index from the pointer array.
The following elements are moved down one place.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_ptr_array_remove_index (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; index_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_remove_fast</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-remove-fast</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Removes the first occurrence of the given pointer from the pointer array.
The last element in the array is used to fill in the space, so this function
does not preserve the order of the array. But it is faster than
&lt;a class=&quot;link&quot; href=&quot;glib-Pointer-Arrays.html#g-ptr-array-remove&quot; title=&quot;g_ptr_array_remove ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_ptr_array_remove()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_ptr_array_remove_fast (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_remove_index_fast</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-remove-index-fast</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Removes the pointer at the given index from the pointer array.
The last element in the array is used to fill in the space, so this function
does not preserve the order of the array. But it is faster than
&lt;a class=&quot;link&quot; href=&quot;glib-Pointer-Arrays.html#g-ptr-array-remove-index&quot; title=&quot;g_ptr_array_remove_index ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_ptr_array_remove_index()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_ptr_array_remove_index_fast (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; index_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_remove_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-remove-range</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Removes the given number of pointers starting at the given index from a
&lt;a class=&quot;link&quot; href=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; title=&quot;GPtrArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPtrArray&lt;/span&gt;&lt;/a&gt;.  The following elements are moved to close the gap.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_ptr_array_remove_range (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; index_,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_sort</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-sort</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Sorts the array, using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;compare_func&lt;/code&gt;&lt;/em&gt; which should be a &lt;code class=&quot;function&quot;&gt;qsort()&lt;/code&gt;-style comparison
function (returns less than zero for first arg is less than second arg, 
zero for equal, greater than zero if irst arg is greater than second arg).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_ptr_array_sort (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; compare_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_sort_with_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-sort-with-data</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Pointer-Arrays.html#g-ptr-array-sort&quot; title=&quot;g_ptr_array_sort ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_ptr_array_sort()&lt;/code&gt;&lt;/a&gt;, but the comparison function has an extra user data 
argument.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_ptr_array_sort_with_data (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; compare_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_set_size</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-set-size</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Sets the size of the array, expanding it if necessary.
New elements are set to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_ptr_array_set_size (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_index</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-index</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Returns the pointer at the given index of the pointer array.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_ptr_array_index(array,index_)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-free</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Frees the memory allocated for the &lt;a class=&quot;link&quot; href=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; title=&quot;GPtrArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPtrArray&lt;/span&gt;&lt;/a&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;free_segment&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; it frees the memory block holding the elements
as well. Pass &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#FALSE:CAPS&quot; title=&quot;FALSE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; if you want to free the &lt;a class=&quot;link&quot; href=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; title=&quot;GPtrArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPtrArray&lt;/span&gt;&lt;/a&gt; wrapper but preserve
the underlying array for use elsewhere.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt;* g_ptr_array_free (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; free_seg);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_ptr_array_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Pointer-Arrays.html</Path>
  <Anchor>g-ptr-array-foreach</Anchor>
  <NodeRef refid="68"/>
  <Abstract type="html">Calls a function for each element of a &lt;a class=&quot;link&quot; href=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; title=&quot;GPtrArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GPtrArray&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_ptr_array_foreach (
    &lt;a class=&quot;glib-Pointer-Arrays.html#GPtrArray&quot; href=&quot;GPtrArray&quot; title=&quot;link&quot;&gt;GPtrArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GFunc&quot; href=&quot;GFunc ()&quot; title=&quot;link&quot;&gt;GFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GByteArray</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>GByteArray</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GByteArray&lt;/span&gt; struct allows access to the public fields of a &lt;span class=&quot;structname&quot;&gt;GByteArray&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    guint8 *data;
    guint len;
} GByteArray;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-new</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#GByteArray&quot; title=&quot;GByteArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GByteArray&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&gt;GByteArray&lt;/a&gt;* g_byte_array_new (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_sized_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-sized-new</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#GByteArray&quot; title=&quot;GByteArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GByteArray&lt;/span&gt;&lt;/a&gt; with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;reserved_size&lt;/code&gt;&lt;/em&gt; bytes preallocated. This
avoids frequent reallocation, if you are going to add many bytes to
the array. Note however that the size of the array is still 0.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt;* g_byte_array_sized_new (
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; reserved_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_append</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-append</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Adds the given bytes to the end of the &lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#GByteArray&quot; title=&quot;GByteArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GByteArray&lt;/span&gt;&lt;/a&gt;.
The array will grow in size automatically if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt;* g_byte_array_append (
    &lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt; *array,
    const guint8 *data,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_prepend</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-prepend</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Adds the given data to the start of the &lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#GByteArray&quot; title=&quot;GByteArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GByteArray&lt;/span&gt;&lt;/a&gt;.
The array will grow in size automatically if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt;* g_byte_array_prepend (
    &lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt; *array,
    const guint8 *data,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; len);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_remove_index</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-remove-index</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Removes the byte at the given index from a &lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#GByteArray&quot; title=&quot;GByteArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GByteArray&lt;/span&gt;&lt;/a&gt;.
The following bytes are moved down one place.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt;* g_byte_array_remove_index (
    &lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; index_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_remove_index_fast</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-remove-index-fast</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Removes the byte at the given index from a &lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#GByteArray&quot; title=&quot;GByteArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GByteArray&lt;/span&gt;&lt;/a&gt;.
The last element in the array is used to fill in the space, so this function
does not preserve the order of the &lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#GByteArray&quot; title=&quot;GByteArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GByteArray&lt;/span&gt;&lt;/a&gt;. But it is faster than
&lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#g-byte-array-remove-index&quot; title=&quot;g_byte_array_remove_index ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_byte_array_remove_index()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt;* g_byte_array_remove_index_fast (
    &lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; index_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_remove_range</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-remove-range</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Removes the given number of bytes starting at the given index from a
&lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#GByteArray&quot; title=&quot;GByteArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GByteArray&lt;/span&gt;&lt;/a&gt;.  The following elements are moved to close the gap.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt;* g_byte_array_remove_range (
    &lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; index_,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_sort</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-sort</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Sorts a byte array, using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;compare_func&lt;/code&gt;&lt;/em&gt; which should be a &lt;code class=&quot;function&quot;&gt;qsort()&lt;/code&gt;-style
comparison function (returns less than zero for first arg is less than second 
arg, zero for equal, greater than zero if first arg is greater than second 
arg).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_byte_array_sort (
    &lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; compare_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_sort_with_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-sort-with-data</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#g-byte-array-sort&quot; title=&quot;g_byte_array_sort ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_byte_array_sort()&lt;/code&gt;&lt;/a&gt;, but the comparison function takes an extra user data
argument.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_byte_array_sort_with_data (
    &lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; compare_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_set_size</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-set-size</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Sets the size of the &lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#GByteArray&quot; title=&quot;GByteArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GByteArray&lt;/span&gt;&lt;/a&gt;, expanding it if necessary.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt;* g_byte_array_set_size (
    &lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; length);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_byte_array_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Byte-Arrays.html</Path>
  <Anchor>g-byte-array-free</Anchor>
  <NodeRef refid="69"/>
  <Abstract type="html">Frees the memory allocated by the &lt;a class=&quot;link&quot; href=&quot;glib-Byte-Arrays.html#GByteArray&quot; title=&quot;GByteArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GByteArray&lt;/span&gt;&lt;/a&gt;.
If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;free_segment&lt;/code&gt;&lt;/em&gt; is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; it frees the actual byte data.</Abstract>
  <Declaration type="html">&lt;pre&gt;guint8* g_byte_array_free (
    &lt;a class=&quot;glib-Byte-Arrays.html#GByteArray&quot; href=&quot;GByteArray&quot; title=&quot;link&quot;&gt;GByteArray&lt;/a&gt; *array,
    &lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&gt;gboolean&lt;/a&gt; free_segment);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTree</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>GTree</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GTree&lt;/span&gt; struct is an opaque data structure representing a
&lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html&quot; title=&quot;Balanced Binary Trees&quot;&gt;Balanced Binary Tree&lt;/a&gt;.
It should be accessed only by using the following functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GTree GTree;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-new</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt;* g_tree_new (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&gt;GCompareFunc&lt;/a&gt; key_compare_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_new_with_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-new-with-data</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt; with a comparison function that accepts user data.
See &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#g-tree-new&quot; title=&quot;g_tree_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tree_new()&lt;/code&gt;&lt;/a&gt; for more details.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt;* g_tree_new_with_data (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; key_compare_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; key_compare_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_new_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-new-full</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt; like &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#g-tree-new&quot; title=&quot;g_tree_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tree_new()&lt;/code&gt;&lt;/a&gt; and allows to specify functions 
to free the memory allocated for the key and value that get called when 
removing the entry from the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt;* g_tree_new_full (
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot; href=&quot;GCompareDataFunc ()&quot; title=&quot;link&quot;&gt;GCompareDataFunc&lt;/a&gt; key_compare_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; key_compare_data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&quot;link&quot;&gt;GDestroyNotify&lt;/a&gt; key_destroy_func,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; value_destroy_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-insert</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Inserts a key/value pair into a &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;. If the given key already exists 
in the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt; its corresponding value is set to the new value. If you 
supplied a value_destroy_func when creating the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;, the old value is 
freed using that function. If you supplied a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_destroy_func&lt;/code&gt;&lt;/em&gt; when 
creating the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;, the passed key is freed using that function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_tree_insert (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt; *tree,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_replace</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-replace</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Inserts a new key and value into a &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt; similar to &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#g-tree-insert&quot; title=&quot;g_tree_insert ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tree_insert()&lt;/code&gt;&lt;/a&gt;. 
The difference is that if the key already exists in the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;, it gets 
replaced by the new key. If you supplied a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_destroy_func&lt;/code&gt;&lt;/em&gt; when 
creating the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;, the old value is freed using that function. If you 
supplied a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_destroy_func&lt;/code&gt;&lt;/em&gt; when creating the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;, the old key is 
freed using that function. </Abstract>
  <Declaration type="html">&lt;pre&gt;void g_tree_replace (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt; *tree,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_nnodes</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-nnodes</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Gets the number of nodes in a &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_tree_nnodes (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&gt;GTree&lt;/a&gt; *tree);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_height</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-height</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Gets the height of a &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_tree_height (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&gt;GTree&lt;/a&gt; *tree);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_lookup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-lookup</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Gets the value corresponding to the given key. Since a &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt; is 
automatically balanced as key/value pairs are added, key lookup is very 
fast.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_tree_lookup (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt; *tree,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_lookup_extended</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-lookup-extended</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Looks up a key in the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;, returning the original key and the
associated value and a &lt;a class=&quot;link&quot; href=&quot;glib-Basic-Types.html#gboolean&quot; title=&quot;gboolean&quot;&gt;&lt;span class=&quot;type&quot;&gt;gboolean&lt;/span&gt;&lt;/a&gt; which is &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if the key was found. This 
is useful if you need to free the memory allocated for the original key, 
for example before calling &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#g-tree-remove&quot; title=&quot;g_tree_remove ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tree_remove()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_tree_lookup_extended (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt; *tree,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; lookup_key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; *orig_key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-foreach</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Calls the given function for each of the key/value pairs in the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;.
The function is passed the key and value of each pair, and the given
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; parameter. The tree is traversed in sorted order.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_tree_foreach (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt; *tree,
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTraverseFunc&quot; href=&quot;GTraverseFunc ()&quot; title=&quot;link&quot;&gt;GTraverseFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_traverse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-traverse</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Calls the given function for each node in the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_tree_traverse (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt; *tree,
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTraverseFunc&quot; href=&quot;GTraverseFunc ()&quot; title=&quot;link&quot;&gt;GTraverseFunc&lt;/a&gt; traverse_func,
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTraverseType&quot; href=&quot;enum GTraverseType&quot; title=&quot;link&quot;&gt;GTraverseType&lt;/a&gt; traverse_type,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.2</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_tree_traverse&lt;/code&gt; has been deprecated since version 2.2 and should not be used in newly-written code. The order of a balanced tree is somewhat arbitrary. If you 
just want to visit all nodes in sorted order, use &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#g-tree-foreach&quot; title=&quot;g_tree_foreach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tree_foreach()&lt;/code&gt;&lt;/a&gt; 
instead. If you really need to visit nodes in a different order, consider
using an &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html&quot; title=&quot;N-ary Trees&quot;&gt;N-ary Tree&lt;/a&gt;.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTraverseFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>GTraverseFunc</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Specifies the type of function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#g-tree-traverse&quot; title=&quot;g_tree_traverse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tree_traverse()&lt;/code&gt;&lt;/a&gt;.
It is passed the key and value of each node, together with
the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; parameter passed to &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#g-tree-traverse&quot; title=&quot;g_tree_traverse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tree_traverse()&lt;/code&gt;&lt;/a&gt;.
If the function returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;, the traversal is stopped.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GTraverseFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; key,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; value,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IN_ORDER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>GTraverseType</Anchor>
  <NodeRef refid="1643"/>
  <Declaration type="html">&lt;pre&gt;G_IN_ORDER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTraverseType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PRE_ORDER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>GTraverseType</Anchor>
  <NodeRef refid="1643"/>
  <Declaration type="html">&lt;pre&gt;G_PRE_ORDER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTraverseType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_POST_ORDER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>GTraverseType</Anchor>
  <NodeRef refid="1643"/>
  <Declaration type="html">&lt;pre&gt;G_POST_ORDER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTraverseType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_LEVEL_ORDER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>GTraverseType</Anchor>
  <NodeRef refid="1643"/>
  <Declaration type="html">&lt;pre&gt;G_LEVEL_ORDER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTraverseType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTraverseType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>GTraverseType</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Specifies the type of traveral performed by &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#g-tree-traverse&quot; title=&quot;g_tree_traverse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tree_traverse()&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#g-node-traverse&quot; title=&quot;g_node_traverse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_node_traverse()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#g-node-find&quot; title=&quot;g_node_find ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_node_find()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_IN_ORDER,
    G_PRE_ORDER,
    G_POST_ORDER,
    G_LEVEL_ORDER 
} GTraverseType;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_search</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-search</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Searches a &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;search_func&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_tree_search (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt; *tree,
    &lt;a class=&quot;glib-Doubly-Linked-Lists.html#GCompareFunc&quot; href=&quot;GCompareFunc ()&quot; title=&quot;link&quot;&gt;GCompareFunc&lt;/a&gt; search_func,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-remove</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Removes a key/value pair from a &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_tree_remove (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt; *tree,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_steal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-steal</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Removes a key and its associated value from a &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt; without calling 
the key and value destroy functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_tree_steal (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&quot;link&quot;&gt;GTree&lt;/a&gt; *tree,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tree_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Balanced-Binary-Trees.html</Path>
  <Anchor>g-tree-destroy</Anchor>
  <NodeRef refid="70"/>
  <Abstract type="html">Destroys the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;. If keys and/or values are dynamically allocated, you 
should either free them first or create the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt; using &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#g-tree-new-full&quot; title=&quot;g_tree_new_full ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tree_new_full()&lt;/code&gt;&lt;/a&gt;.
In the latter case the destroy functions you supplied will be called on 
all keys and values before destroying the &lt;a class=&quot;link&quot; href=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; title=&quot;GTree&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTree&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_tree_destroy (
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTree&quot; href=&quot;GTree&quot; title=&gt;GTree&lt;/a&gt; *tree);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GNode</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GNode</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GNode&lt;/span&gt; struct represents one node in a
&lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html&quot; title=&quot;N-ary Trees&quot;&gt;N-ary Tree&lt;/a&gt;.
fields </Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gpointer data;
    GNode *next;
    GNode *prev;
    GNode *parent;
    GNode *children;
} GNode;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-new</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; containing the given data.
Used to create the first node in a tree.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_new (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-copy</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Recursively copies a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; (but does not deep-copy the data inside the 
nodes, see &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#g-node-copy-deep&quot; title=&quot;g_node_copy_deep ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_node_copy_deep()&lt;/code&gt;&lt;/a&gt; if you need that).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_copy (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCopyFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GCopyFunc</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">A function of this signature is used to copy the node data 
when doing a deep-copy of a tree.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; (
    *GCopyFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; src,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_copy_deep</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-copy-deep</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Recursively copies a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; and its data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_copy_deep (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *node,
    &lt;a class=&quot;glib-N-ary-Trees.html#GCopyFunc&quot; href=&quot;GCopyFunc ()&quot; title=&quot;link&quot;&gt;GCopyFunc&lt;/a&gt; copy_func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-insert</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Inserts a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; beneath the parent at the given position.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_insert (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *parent,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; position,
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_insert_before</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-insert-before</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Inserts a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; beneath the parent before the given sibling.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_insert_before (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *parent,
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *sibling,
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_insert_after</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-insert-after</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Inserts a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; beneath the parent after the given sibling.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_insert_after (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *parent,
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *sibling,
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_append</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-append</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Inserts a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; as the last child of the given parent.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_node_append(parent, node)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_prepend</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-prepend</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Inserts a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; as the first child of the given parent.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_prepend (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *parent,
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_insert_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-insert-data</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Inserts a new &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; at the given position.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_node_insert_data(parent, position, data)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_insert_data_before</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-insert-data-before</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Inserts a new &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; before the given sibling.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_node_insert_data_before(parent, sibling, data)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_append_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-append-data</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Inserts a new &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; as the last child of the given parent.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_node_append_data(parent, data)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_prepend_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-prepend-data</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Inserts a new &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; as the first child of the given parent.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_node_prepend_data(parent, data)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_reverse_children</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-reverse-children</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Reverses the order of the children of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.
(It doesn't change the order of the grandchildren.)</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_node_reverse_children (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_traverse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-traverse</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Traverses a tree starting at the given root &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.
It calls the given function for each node visited.
The traversal can be halted at any point by returning &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_node_traverse (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *root,
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTraverseType&quot; href=&quot;enum GTraverseType&quot; title=&quot;link&quot;&gt;GTraverseType&lt;/a&gt; order,
    &lt;a class=&quot;glib-N-ary-Trees.html#GTraverseFlags&quot; href=&quot;enum GTraverseFlags&quot; title=&quot;link&quot;&gt;GTraverseFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; max_depth,
    &lt;a class=&quot;glib-N-ary-Trees.html#GNodeTraverseFunc&quot; href=&quot;GNodeTraverseFunc ()&quot; title=&quot;link&quot;&gt;GNodeTraverseFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TRAVERSE_LEAVES</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GTraverseFlags</Anchor>
  <NodeRef refid="1664"/>
  <Declaration type="html">&lt;pre&gt;G_TRAVERSE_LEAVES&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTraverseFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TRAVERSE_NON_LEAVES</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GTraverseFlags</Anchor>
  <NodeRef refid="1664"/>
  <Declaration type="html">&lt;pre&gt;G_TRAVERSE_NON_LEAVES&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTraverseFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TRAVERSE_ALL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GTraverseFlags</Anchor>
  <NodeRef refid="1664"/>
  <Declaration type="html">&lt;pre&gt;G_TRAVERSE_ALL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTraverseFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TRAVERSE_MASK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GTraverseFlags</Anchor>
  <NodeRef refid="1664"/>
  <Declaration type="html">&lt;pre&gt;G_TRAVERSE_MASK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTraverseFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TRAVERSE_LEAFS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GTraverseFlags</Anchor>
  <NodeRef refid="1664"/>
  <Declaration type="html">&lt;pre&gt;G_TRAVERSE_LEAFS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTraverseFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TRAVERSE_NON_LEAFS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GTraverseFlags</Anchor>
  <NodeRef refid="1664"/>
  <Declaration type="html">&lt;pre&gt;G_TRAVERSE_NON_LEAFS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTraverseFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTraverseFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GTraverseFlags</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Specifies which nodes are visited during several of the tree functions,
including &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#g-node-traverse&quot; title=&quot;g_node_traverse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_node_traverse()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#g-node-find&quot; title=&quot;g_node_find ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_node_find()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_TRAVERSE_LEAVES = 1 &amp;lt;&amp;lt; 0,
    G_TRAVERSE_NON_LEAVES = 1 &amp;lt;&amp;lt; 1,
    G_TRAVERSE_ALL = G_TRAVERSE_LEAVES | G_TRAVERSE_NON_LEAVES,
    G_TRAVERSE_MASK = 0x03,
    G_TRAVERSE_LEAFS = G_TRAVERSE_LEAVES,
    G_TRAVERSE_NON_LEAFS = G_TRAVERSE_NON_LEAVES 
} GTraverseFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GNodeTraverseFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GNodeTraverseFunc</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Specifies the type of function passed to &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#g-node-traverse&quot; title=&quot;g_node_traverse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_node_traverse()&lt;/code&gt;&lt;/a&gt;.
The function is called with each of the nodes visited, together with the
user data passed to &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#g-node-traverse&quot; title=&quot;g_node_traverse ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_node_traverse()&lt;/code&gt;&lt;/a&gt;.
If the function returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;, then the traversal is stopped.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; (
    *GNodeTraverseFunc) (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *node,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_children_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-children-foreach</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Calls a function for each of the children of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.
Note that it doesn't descend beneath the child nodes.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_node_children_foreach (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *node,
    &lt;a class=&quot;glib-N-ary-Trees.html#GTraverseFlags&quot; href=&quot;enum GTraverseFlags&quot; title=&quot;link&quot;&gt;GTraverseFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-N-ary-Trees.html#GNodeForeachFunc&quot; href=&quot;GNodeForeachFunc ()&quot; title=&quot;link&quot;&gt;GNodeForeachFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GNodeForeachFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>GNodeForeachFunc</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Specifies the type of function passed to &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#g-node-children-foreach&quot; title=&quot;g_node_children_foreach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_node_children_foreach()&lt;/code&gt;&lt;/a&gt;.
The function is called with each child node, together with the user data
passed to &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#g-node-children-foreach&quot; title=&quot;g_node_children_foreach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_node_children_foreach()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GNodeForeachFunc) (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *node,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_get_root</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-get-root</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the root of a tree.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_get_root (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_find</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-find</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Finds a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; in a tree.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_find (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *root,
    &lt;a class=&quot;glib-Balanced-Binary-Trees.html#GTraverseType&quot; href=&quot;enum GTraverseType&quot; title=&quot;link&quot;&gt;GTraverseType&lt;/a&gt; order,
    &lt;a class=&quot;glib-N-ary-Trees.html#GTraverseFlags&quot; href=&quot;enum GTraverseFlags&quot; title=&quot;link&quot;&gt;GTraverseFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_find_child</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-find-child</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Finds the first child of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; with the given data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_find_child (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *node,
    &lt;a class=&quot;glib-N-ary-Trees.html#GTraverseFlags&quot; href=&quot;enum GTraverseFlags&quot; title=&quot;link&quot;&gt;GTraverseFlags&lt;/a&gt; flags,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_child_index</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-child-index</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the position of the first child of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; 
which contains the given data.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_node_child_index (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *node,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_child_position</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-child-position</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the position of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; with respect to its siblings.
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;child&lt;/code&gt;&lt;/em&gt; must be a child of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/em&gt;. The first child is numbered 0, 
the second 1, and so on.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_node_child_position (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *node,
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *child);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_first_child</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-first-child</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the first child of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_node_first_child(node)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_last_child</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-last-child</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the last child of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_last_child (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_nth_child</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-nth-child</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets a child of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;, using the given index.
The first child is at index 0. If the index is 
too big, &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_nth_child (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *node,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_first_sibling</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-first-sibling</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the first sibling of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.
This could possibly be the node itself.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_first_sibling (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_next_sibling</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-next-sibling</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the next sibling of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_node_next_sibling(node)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_prev_sibling</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-prev-sibling</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the previous sibling of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_node_prev_sibling(node)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_last_sibling</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-last-sibling</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the last sibling of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.
This could possibly be the node itself.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt;* g_node_last_sibling (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_NODE_IS_LEAF</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>G-NODE-IS-LEAF:CAPS</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; is a leaf node.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_NODE_IS_LEAF(node) (((GNode*) (node))-&amp;gt;
    children == NULL)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_NODE_IS_ROOT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>G-NODE-IS-ROOT:CAPS</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; is the root of a tree.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_NODE_IS_ROOT(node)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_depth</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-depth</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the depth of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_node_depth (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_n_nodes</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-n-nodes</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the number of nodes in a tree.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_node_n_nodes (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *root,
    &lt;a class=&quot;glib-N-ary-Trees.html#GTraverseFlags&quot; href=&quot;enum GTraverseFlags&quot; title=&gt;GTraverseFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_n_children</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-n-children</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the number of children of a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_node_n_children (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_is_ancestor</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-is-ancestor</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/em&gt; is an ancestor of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;descendant&lt;/code&gt;&lt;/em&gt;.
This is true if node is the parent of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;descendant&lt;/code&gt;&lt;/em&gt;, 
or if node is the grandparent of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;descendant&lt;/code&gt;&lt;/em&gt; etc.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_node_is_ancestor (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&quot;link&quot;&gt;GNode&lt;/a&gt; *node,
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *descendant);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_max_height</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-max-height</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Gets the maximum height of all branches beneath a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt;.
This is the maximum distance from the &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; to all leaf nodes.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_node_max_height (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *root);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_unlink</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-unlink</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Unlinks a &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; from a tree, resulting in two separate trees.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_node_unlink (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *node);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-destroy</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Removes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;root&lt;/code&gt;&lt;/em&gt; and its children from the tree, freeing any memory
allocated.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_node_destroy (
    &lt;a class=&quot;glib-N-ary-Trees.html#GNode&quot; href=&quot;GNode&quot; title=&gt;GNode&lt;/a&gt; *root);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_push_allocator</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-push-allocator</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Sets the allocator to use to allocate &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; elements.
Use &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#g-node-pop-allocator&quot; title=&quot;g_node_pop_allocator ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_node_pop_allocator()&lt;/code&gt;&lt;/a&gt; to restore the previous allocator.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_node_push_allocator (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; dummy);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_node_push_allocator&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. It does nothing, since &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; has been converted 
  to the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice allocator&lt;/a&gt;</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_node_pop_allocator</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-N-ary-Trees.html</Path>
  <Anchor>g-node-pop-allocator</Anchor>
  <NodeRef refid="71"/>
  <Abstract type="html">Restores the previous &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocators.html#GAllocator&quot; title=&quot;GAllocator&quot;&gt;&lt;span class=&quot;type&quot;&gt;GAllocator&lt;/span&gt;&lt;/a&gt;, used when allocating &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; elements.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_node_pop_allocator (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_node_pop_allocator&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. It does nothing, since &lt;a class=&quot;link&quot; href=&quot;glib-N-ary-Trees.html#GNode&quot; title=&quot;GNode&quot;&gt;&lt;span class=&quot;type&quot;&gt;GNode&lt;/span&gt;&lt;/a&gt; has been converted 
  to the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice allocator&lt;/a&gt;</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GQuark</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Quarks.html</Path>
  <Anchor>GQuark</Anchor>
  <NodeRef refid="72"/>
  <Abstract type="html">A GQuark is a non-zero integer which uniquely identifies a particular string.
A GQuark value of zero is associated to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef guint32 GQuark;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_quark_from_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Quarks.html</Path>
  <Anchor>g-quark-from-string</Anchor>
  <NodeRef refid="72"/>
  <Abstract type="html">Gets the &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; identifying the given string.
If the string does not currently have an associated &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt;, a new
&lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; is created, using a copy of the string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; g_quark_from_string (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_quark_from_static_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Quarks.html</Path>
  <Anchor>g-quark-from-static-string</Anchor>
  <NodeRef refid="72"/>
  <Abstract type="html">Gets the &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; identifying the given (static) string.
If the string does not currently have an associated &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt;, a new
&lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; is created, linked to the given string.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; g_quark_from_static_string (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_quark_to_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Quarks.html</Path>
  <Anchor>g-quark-to-string</Anchor>
  <NodeRef refid="72"/>
  <Abstract type="html">Gets the string associated with the given &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_quark_to_string (
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&gt;GQuark&lt;/a&gt; quark);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_quark_try_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Quarks.html</Path>
  <Anchor>g-quark-try-string</Anchor>
  <NodeRef refid="72"/>
  <Abstract type="html">Gets the &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; associated with the given string, or 0 if string is
&lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; or it has no associated &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; g_quark_try_string (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_intern_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Quarks.html</Path>
  <Anchor>g-intern-string</Anchor>
  <NodeRef refid="72"/>
  <Abstract type="html">Returns a canonical representation for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;. Interned strings can
be compared for equality by comparing the pointers, instead of using &lt;code class=&quot;function&quot;&gt;strcmp()&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_intern_string (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_intern_static_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Quarks.html</Path>
  <Anchor>g-intern-static-string</Anchor>
  <NodeRef refid="72"/>
  <Abstract type="html">Returns a canonical representation for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt;. Interned strings can
be compared for equality by comparing the pointers, instead of using &lt;code class=&quot;function&quot;&gt;strcmp()&lt;/code&gt;.
&lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#g-intern-static-string&quot; title=&quot;g_intern_static_string ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_intern_static_string()&lt;/code&gt;&lt;/a&gt; does not copy the string, therefore &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/em&gt; must
not be freed or modified.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt;* g_intern_static_string (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&gt;gchar&lt;/a&gt; *string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GData</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>GData</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Keyed-Data-Lists.html#GData&quot; title=&quot;GData&quot;&gt;&lt;span class=&quot;type&quot;&gt;GData&lt;/span&gt;&lt;/a&gt; struct is an opaque data structure to represent a
&lt;a class=&quot;link&quot; href=&quot;glib-Keyed-Data-Lists.html&quot; title=&quot;Keyed Data Lists&quot;&gt;Keyed Data List&lt;/a&gt;.
It should only be accessed via the following functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GData GData;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-init</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Resets the datalist to &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#NULL:CAPS&quot; title=&quot;NULL&quot;&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.
It does not free any memory or call any destroy functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_datalist_init (
    &lt;a class=&quot;glib-Keyed-Data-Lists.html#GData&quot; href=&quot;GData&quot; title=&gt;GData&lt;/a&gt; **datalist);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_id_set_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-id-set-data</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Sets the data corresponding to the given &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; id.
Any previous data with the same key is removed, and its
destroy function is called.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_datalist_id_set_data(dl, q, d)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_id_set_data_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-id-set-data-full</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Sets the data corresponding to the given &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; id, and the function to
be called when the element is removed from the datalist.
Any previous data with the same key is removed, and its
destroy function is called.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_datalist_id_set_data_full (
    &lt;a class=&quot;glib-Keyed-Data-Lists.html#GData&quot; href=&quot;GData&quot; title=&quot;link&quot;&gt;GData&lt;/a&gt; **datalist,
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; key_id,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; destroy_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_id_get_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-id-get-data</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Retrieves the data element corresponding to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_id&lt;/code&gt;&lt;/em&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_datalist_id_get_data (
    &lt;a class=&quot;glib-Keyed-Data-Lists.html#GData&quot; href=&quot;GData&quot; title=&quot;link&quot;&gt;GData&lt;/a&gt; **datalist,
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&gt;GQuark&lt;/a&gt; key_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_id_remove_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-id-remove-data</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Removes an element, using its &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; identifier.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_datalist_id_remove_data(dl, q)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_id_remove_no_notify</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-id-remove-no-notify</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Removes an element, without calling its destroy notification function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_datalist_id_remove_no_notify (
    &lt;a class=&quot;glib-Keyed-Data-Lists.html#GData&quot; href=&quot;GData&quot; title=&quot;link&quot;&gt;GData&lt;/a&gt; **datalist,
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&gt;GQuark&lt;/a&gt; key_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_set_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-set-data</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Sets the data element corresponding to the given string identifier.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_datalist_set_data(dl, k, d)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_set_data_full</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-set-data-full</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Sets the data element corresponding to the given string identifier, and the
function to be called when the data element is removed.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_datalist_set_data_full(dl, k, d, f)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_get_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-get-data</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Gets a data element, using its string identifer.
This is slower than &lt;a class=&quot;link&quot; href=&quot;glib-Keyed-Data-Lists.html#g-datalist-id-get-data&quot; title=&quot;g_datalist_id_get_data ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_datalist_id_get_data()&lt;/code&gt;&lt;/a&gt; because the string is first
converted to a &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_datalist_get_data(dl, k)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_remove_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-remove-data</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Removes an element using its string identifier.
The data element's destroy function is called if it has been set.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_datalist_remove_data(dl, k)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_remove_no_notify</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-remove-no-notify</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Removes an element, without calling its destroy notifier.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_datalist_remove_no_notify(dl, k)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-foreach</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Calls the given function for each data element of the datalist.
The function is called with each data element's &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; id and data,
together with the given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; parameter.
Note that this function is NOT thread-safe. So unless &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;datalist&lt;/code&gt;&lt;/em&gt;
can be protected from any modifications during invocation of this
function, it should not be called.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_datalist_foreach (
    &lt;a class=&quot;glib-Keyed-Data-Lists.html#GData&quot; href=&quot;GData&quot; title=&quot;link&quot;&gt;GData&lt;/a&gt; **datalist,
    &lt;a class=&quot;glib-Datasets.html#GDataForeachFunc&quot; href=&quot;GDataForeachFunc ()&quot; title=&quot;link&quot;&gt;GDataForeachFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_clear</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-clear</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Frees all the data elements of the datalist.
The data elements' destroy functions are called if they have been set.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_datalist_clear (
    &lt;a class=&quot;glib-Keyed-Data-Lists.html#GData&quot; href=&quot;GData&quot; title=&gt;GData&lt;/a&gt; **datalist);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_set_flags</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-set-flags</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Turns on flag values for a data list. This function is used
to keep a small number of boolean flags in an object with
a data list without using any additional space. It is
not generally useful except in circumstances where space
is very tight. (It is used in the base &lt;a
href=&quot;/usr/share/gtk-doc/html/gobject/gobject-The-Base-Object-Type.html#GObject&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt; type, for
example.)</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_datalist_set_flags (
    &lt;a class=&quot;glib-Keyed-Data-Lists.html#GData&quot; href=&quot;GData&quot; title=&quot;link&quot;&gt;GData&lt;/a&gt; **datalist,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_unset_flags</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-unset-flags</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Turns off flag values for a data list. See &lt;a class=&quot;link&quot; href=&quot;glib-Keyed-Data-Lists.html#g-datalist-unset-flags&quot; title=&quot;g_datalist_unset_flags ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_datalist_unset_flags()&lt;/code&gt;&lt;/a&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_datalist_unset_flags (
    &lt;a class=&quot;glib-Keyed-Data-Lists.html#GData&quot; href=&quot;GData&quot; title=&quot;link&quot;&gt;GData&lt;/a&gt; **datalist,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_datalist_get_flags</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>g-datalist-get-flags</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">Gets flags values packed in together with the datalist.
See &lt;a class=&quot;link&quot; href=&quot;glib-Keyed-Data-Lists.html#g-datalist-set-flags&quot; title=&quot;g_datalist_set_flags ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_datalist_set_flags()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&quot;link&quot;&gt;guint&lt;/a&gt; g_datalist_get_flags (
    &lt;a class=&quot;glib-Keyed-Data-Lists.html#GData&quot; href=&quot;GData&quot; title=&gt;GData&lt;/a&gt; **datalist);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DATALIST_FLAGS_MASK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Keyed-Data-Lists.html</Path>
  <Anchor>G-DATALIST-FLAGS-MASK:CAPS</Anchor>
  <NodeRef refid="73"/>
  <Abstract type="html">A bitmask that restricts the possible flags passed to
&lt;a class=&quot;link&quot; href=&quot;glib-Keyed-Data-Lists.html#g-datalist-set-flags&quot; title=&quot;g_datalist_set_flags ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_datalist_set_flags()&lt;/code&gt;&lt;/a&gt;. Passing a flags value where
flags &amp;amp; ~G_DATALIST_FLAGS_MASK != 0 is an error.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DATALIST_FLAGS_MASK 0x3&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_id_set_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-id-set-data</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Sets the data element associated with the given &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; id.
Any previous data with the same key is removed, and its destroy function
is called.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_dataset_id_set_data(l, k, d)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_id_set_data_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-id-set-data-full</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Sets the data element associated with the given &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; id, and also the
function to call when the data element is destroyed.
Any previous data with the same key is removed, and its
destroy function is called.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_dataset_id_set_data_full (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; dataset_location,
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; key_id,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Datasets.html#GDestroyNotify&quot; href=&quot;GDestroyNotify ()&quot; title=&gt;GDestroyNotify&lt;/a&gt; destroy_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDestroyNotify</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>GDestroyNotify</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Specifies the type of function which is called when a data element is
destroyed. It is passed the pointer to the data element and should free
any memory and resources allocated for it.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GDestroyNotify) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_id_get_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-id-get-data</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Gets the data element corresponding to a &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_dataset_id_get_data (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; dataset_location,
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&gt;GQuark&lt;/a&gt; key_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_id_remove_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-id-remove-data</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Removes a data element from a dataset.
The data element's destroy function is called if it has been set.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_dataset_id_remove_data(l, k)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_id_remove_no_notify</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-id-remove-no-notify</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Removes an element, without calling its destroy notification function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_dataset_id_remove_no_notify (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; dataset_location,
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&gt;GQuark&lt;/a&gt; key_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_set_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-set-data</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Sets the data corresponding to the given string identifier.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_dataset_set_data(l, k, d)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_set_data_full</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-set-data-full</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Sets the data corresponding to the given string identifier, and the function
to call when the data element is destroyed.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_dataset_set_data_full(l, k, d, f)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_get_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-get-data</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Gets the data element corresponding to a string.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_dataset_get_data(l, k)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_remove_data</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-remove-data</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Removes a data element corresponding to a string.
Its destroy function is called if it has been set.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_dataset_remove_data(l, k)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_remove_no_notify</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-remove-no-notify</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Removes an element, without calling its destroy notifier.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_dataset_remove_no_notify(l, k)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-foreach</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Calls the given function for each data element which is associated with the
given location.
Note that this function is NOT thread-safe. So unless &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;datalist&lt;/code&gt;&lt;/em&gt;
can be protected from any modifications during invocation of this
function, it should not be called.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_dataset_foreach (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; dataset_location,
    &lt;a class=&quot;glib-Datasets.html#GDataForeachFunc&quot; href=&quot;GDataForeachFunc ()&quot; title=&quot;link&quot;&gt;GDataForeachFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GDataForeachFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>GDataForeachFunc</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Specifies the type of function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Datasets.html#g-dataset-foreach&quot; title=&quot;g_dataset_foreach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_dataset_foreach()&lt;/code&gt;&lt;/a&gt;.
It is called with each &lt;a class=&quot;link&quot; href=&quot;glib-Quarks.html#GQuark&quot; title=&quot;GQuark&quot;&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; id and associated data element,
together with the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; parameter supplied to &lt;a class=&quot;link&quot; href=&quot;glib-Datasets.html#g-dataset-foreach&quot; title=&quot;g_dataset_foreach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_dataset_foreach()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GDataForeachFunc) (
    &lt;a class=&quot;glib-Quarks.html#GQuark&quot; href=&quot;GQuark&quot; title=&quot;link&quot;&gt;GQuark&lt;/a&gt; key_id,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_dataset_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Datasets.html</Path>
  <Anchor>g-dataset-destroy</Anchor>
  <NodeRef refid="74"/>
  <Abstract type="html">Destroys the dataset, freeing all memory allocated, and calling any
destroy functions set for data elements.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_dataset_destroy (
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; dataset_location);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GRelation</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>GRelation</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt; struct is an opaque data structure to represent a
&lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html&quot; title=&quot;Relations and Tuples&quot;&gt;Relation&lt;/a&gt;.
It should only be accessed via the following functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GRelation GRelation;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_relation_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-relation-new</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt; with the given number of fields.
Note that currently the number of fields must be 2.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Relations-and-Tuples.html#GRelation&quot; href=&quot;GRelation&quot; title=&quot;link&quot;&gt;GRelation&lt;/a&gt;* g_relation_new (
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; fields);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_relation_index</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-relation-index</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Creates an index on the given field.
Note that this must be called before any records are added to the &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_relation_index (
    &lt;a class=&quot;glib-Relations-and-Tuples.html#GRelation&quot; href=&quot;GRelation&quot; title=&quot;link&quot;&gt;GRelation&lt;/a&gt; *relation,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; field,
    &lt;a class=&quot;glib-Hash-Tables.html#GHashFunc&quot; href=&quot;GHashFunc ()&quot; title=&quot;link&quot;&gt;GHashFunc&lt;/a&gt; hash_func,
    &lt;a class=&quot;glib-Hash-Tables.html#GEqualFunc&quot; href=&quot;GEqualFunc ()&quot; title=&gt;GEqualFunc&lt;/a&gt; key_equal_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_relation_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-relation-insert</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Inserts a record into a &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_relation_insert (
    &lt;a class=&quot;glib-Relations-and-Tuples.html#GRelation&quot; href=&quot;GRelation&quot; title=&gt;GRelation&lt;/a&gt; *relation,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_relation_exists</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-relation-exists</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Returns &lt;a class=&quot;link&quot; href=&quot;glib-Standard-Macros.html#TRUE:CAPS&quot; title=&quot;TRUE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; if a record with the given values exists in a &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt;.
Note that the values are compared directly, so that, for example, two
copies of the same string will not match.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gboolean&quot; href=&quot;gboolean&quot; title=&quot;link&quot;&gt;gboolean&lt;/a&gt; g_relation_exists (
    &lt;a class=&quot;glib-Relations-and-Tuples.html#GRelation&quot; href=&quot;GRelation&quot; title=&gt;GRelation&lt;/a&gt; *relation,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_relation_count</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-relation-count</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Returns the number of tuples in a &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt; that have the given value
in the given field.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_relation_count (
    &lt;a class=&quot;glib-Relations-and-Tuples.html#GRelation&quot; href=&quot;GRelation&quot; title=&quot;link&quot;&gt;GRelation&lt;/a&gt; *relation,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; key,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; field);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_relation_select</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-relation-select</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Returns all of the tuples which have the given key in the given field.
Use &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#g-tuples-index&quot; title=&quot;g_tuples_index ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tuples_index()&lt;/code&gt;&lt;/a&gt; to access the returned records.
The returned records should be freed with &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#g-tuples-destroy&quot; title=&quot;g_tuples_destroy ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tuples_destroy()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Relations-and-Tuples.html#GTuples&quot; href=&quot;GTuples&quot; title=&quot;link&quot;&gt;GTuples&lt;/a&gt;* g_relation_select (
    &lt;a class=&quot;glib-Relations-and-Tuples.html#GRelation&quot; href=&quot;GRelation&quot; title=&quot;link&quot;&gt;GRelation&lt;/a&gt; *relation,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; key,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; field);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_relation_delete</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-relation-delete</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Deletes any records from a &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt; that have the given key value in
the given field.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; g_relation_delete (
    &lt;a class=&quot;glib-Relations-and-Tuples.html#GRelation&quot; href=&quot;GRelation&quot; title=&quot;link&quot;&gt;GRelation&lt;/a&gt; *relation,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&quot;link&quot;&gt;gconstpointer&lt;/a&gt; key,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; field);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_relation_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-relation-destroy</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Destroys the &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt;, freeing all memory allocated.
However, it does not free memory allocated for the
tuple data, so you should free that first if appropriate.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_relation_destroy (
    &lt;a class=&quot;glib-Relations-and-Tuples.html#GRelation&quot; href=&quot;GRelation&quot; title=&gt;GRelation&lt;/a&gt; *relation);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_relation_print</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-relation-print</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Outputs information about all records in a &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt;, as well as the indexes.
It is for debugging.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_relation_print (
    &lt;a class=&quot;glib-Relations-and-Tuples.html#GRelation&quot; href=&quot;GRelation&quot; title=&gt;GRelation&lt;/a&gt; *relation);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTuples</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>GTuples</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GTuples&quot; title=&quot;GTuples&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTuples&lt;/span&gt;&lt;/a&gt; struct is used to return records (or tuples) from the
&lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt; by &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#g-relation-select&quot; title=&quot;g_relation_select ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_relation_select()&lt;/code&gt;&lt;/a&gt;.
It only contains one public member - the number of records that matched.
To access the matched records, you must use &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#g-tuples-index&quot; title=&quot;g_tuples_index ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_tuples_index()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    guint len;
} GTuples;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tuples_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-tuples-destroy</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Frees the records which were returned by &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#g-relation-select&quot; title=&quot;g_relation_select ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_relation_select()&lt;/code&gt;&lt;/a&gt;.
This should always be called after &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#g-relation-select&quot; title=&quot;g_relation_select ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_relation_select()&lt;/code&gt;&lt;/a&gt; when you are
finished with the records.
The records are not removed from the &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#GRelation&quot; title=&quot;GRelation&quot;&gt;&lt;span class=&quot;type&quot;&gt;GRelation&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_tuples_destroy (
    &lt;a class=&quot;glib-Relations-and-Tuples.html#GTuples&quot; href=&quot;GTuples&quot; title=&gt;GTuples&lt;/a&gt; *tuples);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_tuples_index</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Relations-and-Tuples.html</Path>
  <Anchor>g-tuples-index</Anchor>
  <NodeRef refid="75"/>
  <Abstract type="html">Gets a field from the records returned by &lt;a class=&quot;link&quot; href=&quot;glib-Relations-and-Tuples.html#g-relation-select&quot; title=&quot;g_relation_select ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_relation_select()&lt;/code&gt;&lt;/a&gt;.
It returns the given field of the record at the given index.
The returned value should not be changed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_tuples_index (
    &lt;a class=&quot;glib-Relations-and-Tuples.html#GTuples&quot; href=&quot;GTuples&quot; title=&quot;link&quot;&gt;GTuples&lt;/a&gt; *tuples,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&quot;link&quot;&gt;gint&lt;/a&gt; index_,
    &lt;a class=&quot;glib-Basic-Types.html#gint&quot; href=&quot;gint&quot; title=&gt;gint&lt;/a&gt; field);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCache</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Caches.html</Path>
  <Anchor>GCache</Anchor>
  <NodeRef refid="76"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt; struct is an opaque data structure containing information about
a &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt;. It should only be accessed via the following functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GCache GCache;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cache_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Caches.html</Path>
  <Anchor>g-cache-new</Anchor>
  <NodeRef refid="76"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Caches.html#GCache&quot; href=&quot;GCache&quot; title=&quot;link&quot;&gt;GCache&lt;/a&gt;* g_cache_new (
    &lt;a class=&quot;glib-Caches.html#GCacheNewFunc&quot; href=&quot;GCacheNewFunc ()&quot; title=&quot;link&quot;&gt;GCacheNewFunc&lt;/a&gt; value_new_func,
    &lt;a class=&quot;glib-Caches.html#GCacheDestroyFunc&quot; href=&quot;GCacheDestroyFunc ()&quot; title=&quot;link&quot;&gt;GCacheDestroyFunc&lt;/a&gt; value_destroy_func,
    &lt;a class=&quot;glib-Caches.html#GCacheDupFunc&quot; href=&quot;GCacheDupFunc ()&quot; title=&quot;link&quot;&gt;GCacheDupFunc&lt;/a&gt; key_dup_func,
    &lt;a class=&quot;glib-Caches.html#GCacheDestroyFunc&quot; href=&quot;GCacheDestroyFunc ()&quot; title=&quot;link&quot;&gt;GCacheDestroyFunc&lt;/a&gt; key_destroy_func,
    &lt;a class=&quot;glib-Hash-Tables.html#GHashFunc&quot; href=&quot;GHashFunc ()&quot; title=&quot;link&quot;&gt;GHashFunc&lt;/a&gt; hash_key_func,
    &lt;a class=&quot;glib-Hash-Tables.html#GHashFunc&quot; href=&quot;GHashFunc ()&quot; title=&quot;link&quot;&gt;GHashFunc&lt;/a&gt; hash_value_func,
    &lt;a class=&quot;glib-Hash-Tables.html#GEqualFunc&quot; href=&quot;GEqualFunc ()&quot; title=&gt;GEqualFunc&lt;/a&gt; key_equal_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cache_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Caches.html</Path>
  <Anchor>g-cache-insert</Anchor>
  <NodeRef refid="76"/>
  <Abstract type="html">Gets the value corresponding to the given key, creating it if necessary.
It first checks if the value already exists in the &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt;, by using
the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_equal_func&lt;/code&gt;&lt;/em&gt; function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#g-cache-new&quot; title=&quot;g_cache_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cache_new()&lt;/code&gt;&lt;/a&gt;.
If it does already exist it is returned, and its reference count is increased
by one.
If the value does not currently exist, if is created by calling the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_new_func&lt;/code&gt;&lt;/em&gt;. The key is duplicated by calling
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_dup_func&lt;/code&gt;&lt;/em&gt; and the duplicated key and value are inserted
into the &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; g_cache_insert (
    &lt;a class=&quot;glib-Caches.html#GCache&quot; href=&quot;GCache&quot; title=&quot;link&quot;&gt;GCache&lt;/a&gt; *cache,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cache_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Caches.html</Path>
  <Anchor>g-cache-remove</Anchor>
  <NodeRef refid="76"/>
  <Abstract type="html">Decreases the reference count of the given value.
If it drops to 0 then the value and its corresponding key are destroyed,
using the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_destroy_func&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_destroy_func&lt;/code&gt;&lt;/em&gt; passed to &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#g-cache-new&quot; title=&quot;g_cache_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cache_new()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cache_remove (
    &lt;a class=&quot;glib-Caches.html#GCache&quot; href=&quot;GCache&quot; title=&quot;link&quot;&gt;GCache&lt;/a&gt; *cache,
    &lt;a class=&quot;glib-Basic-Types.html#gconstpointer&quot; href=&quot;gconstpointer&quot; title=&gt;gconstpointer&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cache_destroy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Caches.html</Path>
  <Anchor>g-cache-destroy</Anchor>
  <NodeRef refid="76"/>
  <Abstract type="html">Frees the memory allocated for the &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cache_destroy (
    &lt;a class=&quot;glib-Caches.html#GCache&quot; href=&quot;GCache&quot; title=&gt;GCache&lt;/a&gt; *cache);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cache_key_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Caches.html</Path>
  <Anchor>g-cache-key-foreach</Anchor>
  <NodeRef refid="76"/>
  <Abstract type="html">Calls the given function for each of the keys in the &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cache_key_foreach (
    &lt;a class=&quot;glib-Caches.html#GCache&quot; href=&quot;GCache&quot; title=&quot;link&quot;&gt;GCache&lt;/a&gt; *cache,
    &lt;a class=&quot;glib-Hash-Tables.html#GHFunc&quot; href=&quot;GHFunc ()&quot; title=&quot;link&quot;&gt;GHFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cache_value_foreach</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Caches.html</Path>
  <Anchor>g-cache-value-foreach</Anchor>
  <NodeRef refid="76"/>
  <Abstract type="html">Calls the given function for each of the values in the &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cache_value_foreach (
    &lt;a class=&quot;glib-Caches.html#GCache&quot; href=&quot;GCache&quot; title=&quot;link&quot;&gt;GCache&lt;/a&gt; *cache,
    &lt;a class=&quot;glib-Hash-Tables.html#GHFunc&quot; href=&quot;GHFunc ()&quot; title=&quot;link&quot;&gt;GHFunc&lt;/a&gt; func,
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_cache_value_foreach&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. The reason is that it passes pointers to internal data 
structures to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt;; use &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#g-cache-key-foreach&quot; title=&quot;g_cache_key_foreach ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cache_key_foreach()&lt;/code&gt;&lt;/a&gt; instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCacheDestroyFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Caches.html</Path>
  <Anchor>GCacheDestroyFunc</Anchor>
  <NodeRef refid="76"/>
  <Abstract type="html">Specifies the type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_destroy_func&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_destroy_func&lt;/code&gt;&lt;/em&gt; functions
passed to &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#g-cache-new&quot; title=&quot;g_cache_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cache_new()&lt;/code&gt;&lt;/a&gt;.
The functions are passed a pointer to the &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt; key or &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt; value and
should free any memory and other resources associated with it.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GCacheDestroyFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCacheDupFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Caches.html</Path>
  <Anchor>GCacheDupFunc</Anchor>
  <NodeRef refid="76"/>
  <Abstract type="html">Specifies the type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;key_dup_func&lt;/code&gt;&lt;/em&gt; function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#g-cache-new&quot; title=&quot;g_cache_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cache_new()&lt;/code&gt;&lt;/a&gt;.
The function is passed a key (&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; a value as the prototype implies) and
should return a duplicate of the key.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; (
    *GCacheDupFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCacheNewFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Caches.html</Path>
  <Anchor>GCacheNewFunc</Anchor>
  <NodeRef refid="76"/>
  <Abstract type="html">Specifies the type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_new_func&lt;/code&gt;&lt;/em&gt; function passed to &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#g-cache-new&quot; title=&quot;g_cache_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cache_new()&lt;/code&gt;&lt;/a&gt;.
It is passed a &lt;a class=&quot;link&quot; href=&quot;glib-Caches.html#GCache&quot; title=&quot;GCache&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCache&lt;/span&gt;&lt;/a&gt; key and should create the value corresponding to the
key.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&quot;link&quot;&gt;gpointer&lt;/a&gt; (
    *GCacheNewFunc) (
    &lt;a class=&quot;glib-Basic-Types.html#gpointer&quot; href=&quot;gpointer&quot; title=&gt;gpointer&lt;/a&gt; key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GAllocator</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocators.html</Path>
  <Anchor>GAllocator</Anchor>
  <NodeRef refid="77"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GAllocator&lt;/span&gt; struct contains private data. and 
should only be accessed using the following functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GAllocator GAllocator;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;GAllocator&lt;/code&gt; is deprecated and should not be used in newly-written code.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_allocator_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocators.html</Path>
  <Anchor>g-allocator-new</Anchor>
  <NodeRef refid="77"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocators.html#GAllocator&quot; title=&quot;GAllocator&quot;&gt;&lt;span class=&quot;type&quot;&gt;GAllocator&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;glib-Memory-Allocators.html#GAllocator&quot; href=&quot;GAllocator&quot; title=&quot;link&quot;&gt;GAllocator&lt;/a&gt;* g_allocator_new (
    const &lt;a class=&quot;glib-Basic-Types.html#gchar&quot; href=&quot;gchar&quot; title=&quot;link&quot;&gt;gchar&lt;/a&gt; *name,
    &lt;a class=&quot;glib-Basic-Types.html#guint&quot; href=&quot;guint&quot; title=&gt;guint&lt;/a&gt; n_preallocs);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_allocator_new&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice allocator&lt;/a&gt;
instead</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_allocator_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>glib-Memory-Allocators.html</Path>
  <Anchor>g-allocator-free</Anchor>
  <NodeRef refid="77"/>
  <Abstract type="html">Frees all of the memory allocated by the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Allocators.html#GAllocator&quot; title=&quot;GAllocator&quot;&gt;&lt;span class=&quot;type&quot;&gt;GAllocator&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_allocator_free (
    &lt;a class=&quot;glib-Memory-Allocators.html#GAllocator&quot; href=&quot;GAllocator&quot; title=&gt;GAllocator&lt;/a&gt; *allocator);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="glib">
   <DeprecatedInVersion>2.10</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_allocator_free&lt;/code&gt; has been deprecated since version 2.10 and should not be used in newly-written code. Use the &lt;a class=&quot;link&quot; href=&quot;glib-Memory-Slices.html&quot; title=&quot;Memory Slices&quot;&gt;slice allocator&lt;/a&gt;
instead</DeprecationSummary>
  </Availability>
 </Token>
</Tokens>
