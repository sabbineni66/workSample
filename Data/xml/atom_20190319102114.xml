<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>[working code]</title>
 <link href="http://working-code.com/atom.xml" rel="self"/>
 <link href="http://working-code.com/"/>
 <updated>2014-11-30T21:53:49-08:00</updated>
 <id>http://working-code.com</id>
 <author>
   <name>Kevin Stewart</name>
   <email>kevin@working-code.com</email>
 </author>
 
 
 <entry>
   <title>Creatively Building a Cloud</title>
   <link href="http://working-code.com/2014/11/30/creatively-building-a-cloud.html"/>
   <updated>2014-11-30T00:00:00-08:00</updated>
   <id>http://working-code.com/2014/11/30/creatively-building-a-cloud</id>
   <content type="html">&lt;p&gt;&lt;em&gt;&amp;ldquo;I &lt;strong&gt;am&lt;/strong&gt; the team.&amp;rdquo;&amp;ldquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fifty people looked at me quizzically in a sixth floor conference room in Adobe&amp;rsquo;s West Tower in San Jose. They were gathered for a kickoff meeting to discuss a new project to build mobile applications for creative professionals. These applications would be supported by a mobile backend as a service that my team would be build. There was only one little problem. I had just started the week before and had yet to hire a single person.&lt;/p&gt;

&lt;h1&gt;Music, Maestro, Please&lt;/h1&gt;

&lt;p&gt;A month earlier, I was pretty much ready to leave Adobe. After six long years of the large company lifestyle, I was ready to take some risks and go back to the startup/small company world. While I needed to get the experience of working for a large software company, the exercise had taken its toll. Even after a month-long sabbatical, I didn&amp;rsquo;t feel like I would actually be able to work on the types of products I really wanted to build.&lt;/p&gt;

&lt;p&gt;I sat staring at my calendar trying to identify the exact date I would give my two weeks notice when a co-worker, another Kevin, knocked on my door.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;Hey, man. I know you&amp;rsquo;ve been thinking about your next move. You should go talk to Lonnie; he&amp;rsquo;s starting up a new project that I think is right up your alley. I don&amp;rsquo;t know all the details, but just go talk to him.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After looking up the available job reqs, I found the ones assigned to Lonnie and got enough information to pique my curiosity. First, the project involved mobile applications and services which happened to be my area of interest at the time. Secondly, the open position was for a Sr. Engineering Manager and I had been working my way to that level for the past few years. I emailed Lonnie to see if we could have an exploratory conversation.&lt;/p&gt;

&lt;p&gt;The conversation ignited a spark. There were actually two opportunities. One was to take over the Adobe CS Review team that was building advanced comment and review capabilities as part of Adobe Creative Suite 5. There was a small team in place with a mostly built product. My challenge would be to help the team get through launch and then iterate on the product.&lt;/p&gt;

&lt;p&gt;The next challenge was the new project, codenamed &lt;strong&gt;Adobe Maestro&lt;/strong&gt;. Maestro would be the backend to support two mobile apps initially. The first app was Adobe Ideas, a sketching application for iOS. The second was codenamed Veruca and intended to be an app for presenting creative work. While there were teams to build the mobile apps, we would need to build a team to build Maestro at the same time I would be running the CS Review team. This was &lt;strong&gt;exactly&lt;/strong&gt; the sort of challenge I was craving and I pitched myself to Lonnie as The Guy&amp;trade; for the job. After a round of internal interviewing, I was offered the position and asked to book a trip to San Jose for the kickoff meeting. Oh, and I needed to start hiring.&lt;/p&gt;

&lt;h1&gt;They Are The Best And They Specialize In The Ridiculous&lt;/h1&gt;

&lt;p&gt;Much like Hannibal Smith, I would need to break my A-Team out of prison. John was pretty easy as our manager knew that once I left, John wouldn&amp;rsquo;t be far behind. John was my first full-time hire at Adobe and was a solid developer and even better operations guy. Perfect.&lt;/p&gt;

&lt;p&gt;Steve would be a little more difficult. He was moved to a team working on video transcoding and I knew that team would put up a fight. After following protocol and making him an offer, Steve accepted. However, his management chain tried to block the move by asking to delay it for six months. Pointing out that our project took priority in terms of schedule and business value only caused the situation to escalate. Given the history that Steve and I had with that particular management chain, I stepped aside and let my new VP handle it. Within a matter of days we managed to get the transition time drastically shortened. While it was still longer than I would have liked, I was able to get a percentage of his time sooner which was better than nothing. Steve would drive the frontend development as well as some of the mid-tier work.&lt;/p&gt;

&lt;p&gt;Matt, however, threw a wrench in my plans. He was my heavy hitter and I was hoping to have him lead the backend development. However, he was already working on a complex project and wanted to see it through even though he was interested in &lt;em&gt;getting the band back together&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Sidebar: John, Steve and Matt worked with me on my first project at Adobe. Matt was the primary architect of a new installer compiler called the &lt;strong&gt;Robust Installer Build System, or RIBS&lt;/strong&gt;. This project was so infamous that I will have to write a separate post just on it. However, the short version is that prior to RIBS, Adobe had people hand-roll installers every cycle that shared little code and was extremely fragile. RIBS created a declarative model that could be used to define the behavior of an installer that could then be compiled for each platform. Furthermore, the model was extensible enough to support individual products as well as suites. RIBS not only reduced the cost to build installers in terms of time and people, but it has been at the core of Adobe installers since CS 3. In a way, RIBS was our first legacy and Creative Cloud is our latest.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I respected Matt&amp;rsquo;s decision to stay with his current team, but it definitely impacted the plan. In the end, you go to war with the army you&amp;rsquo;ve got not the one you wish you had. I still had the beginnings of a really good team and had plans to expand it. In the meantime, we needed to get to work.&lt;/p&gt;

&lt;p&gt;In between CS Review duties, I met with John and Steve in my office regularly to hash out architecture issues. Lonnie had given us a constraint we didn&amp;rsquo;t really like; we had to use the acrobat.com platform for Maestro. This was the same platform that CS Review used as well as some other CS Live (the umbrella brand at the time for CS-related sevices) services were built upon. For teams that came from a desktop application background, using acrobat.com as a platform made sense. The frontend of one&amp;rsquo;s service would be built using ActionScript and Flex and talk to endpoints specific to the service within the acrobat.com container. Unfortunately, this led to a monolithic implementation that would force us to use Flash which none of us wanted to do. We were iOS and HTML people. Additionally, we really wanted to build this on top of Amazon Web Sevices (AWS). We had previously implemented and hosted a service at Adobe using their internal managed hosting and we felt AWS was a much better option. The acrobat.com constraint, however, made AWS a non-starter.&lt;/p&gt;

&lt;p&gt;Knowing that the mobile apps were targeting iOS, we made a case for not going all-in on acrobat.com as we wanted the site to be accessible on Mobile Safari. Our solution was to plan on building an API &lt;strong&gt;and&lt;/strong&gt; a Web application. We would design our own API that talked to acrobat.com for storage, but implement our own functionality in our own stack. The frontend would be a Single Page Application (SPA) that would consume the API. We hashed out the rough API on my whiteboard over the course of a week. Steve started work on the frontend and John worked on provisioning our servers and writing our deployment tools. We set a goal to have a prototype built in a few weeks. Luckily, we had a lot of code &lt;a href=&quot;http://kstewart.me/2011/02/17/there-is-an-i-in-team.html&quot;&gt;from our previous project&lt;/a&gt; that saved us a ton of time getting up and running. We chose to skip the API initially and focus on being able to deploy the frontend and demonstrate the basic workflow of uploading assets and navigating to the detail view. By mid-January 2011, the prototype was up and running and the overall Maestro team was ecstatic. If they only knew&amp;hellip;&lt;/p&gt;

&lt;h1&gt;Enter The Presidio&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;Read this memo and book a trip to San Francisco.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The memo was titled &lt;strong&gt;Adobe Touch Apps and the Creative Cloud&lt;/strong&gt;. Huh? Lonnie called me into his office and told me about a summit he attended. Essentially, the company wanted to make a bigger push into mobile apps and services. There was a whole new strategy being devised.&lt;/p&gt;

&lt;p&gt;Uh oh.&lt;/p&gt;

&lt;p&gt;First, there was a strong belief that we could have more ability to innovate on an open platform like Android and use our AIR platform. While many made the (correct) argument that all our potential customers were on iOS and that Android tablets had yet to make any real impact, we were all overruled. This was our &lt;a href=&quot;http://scripting.com/davenet/2001/04/30/strategyTax.html&quot;&gt;Strategy Tax&lt;/a&gt;. The mobile teams had to put their iOS apps on hold and begin the laborious task of rebuilding their applications on a development platform that was not fully ready for mobile (Adobe Ideas, by the way, was already in the App Store and getting pretty good reviews). The list of apps increased from 2 to 6 and new teams would be added to build them. There was talk of working with a hardware vendor that would have the apps pre-installed. The mobile teams were not amused.&lt;/p&gt;

&lt;p&gt;Next, we needed to get this &amp;ldquo;Creative Cloud&amp;rdquo; thing built in time for the Adobe MAX conference in October. Additionally, we needed to have a demo ready for this meeting at The San Francisco Film Centre at The Presidio by the end of February. Related, we were being &lt;strong&gt;mandated&lt;/strong&gt; to use Amazon Web Services. OK, twist my arm. I &lt;strong&gt;love it&lt;/strong&gt; when a plan comes together&amp;hellip;or, I get lucky. We wasted no time updating our demo. We added in the bones of the API by adding it as an intermediary layer between the frontend and the acrobat.com platform. Once we verified that we had feature parity, Steve and John refactored the code to talk to AWS services like S3. John also updated our deployment tools to target Amazon&amp;rsquo;s EC2 instead of our managed hosting infrastructure. Since we were using &lt;a href=&quot;http://puppetlabs.com/&quot;&gt;Puppet&lt;/a&gt; as a key component in our pipeline, this was pretty much trivial. In a week, we were up and running.&lt;/p&gt;

&lt;p&gt;We arrived at The San Francisco Film Centre to find a rather large group in attendance. Multiple teams that were identified as doing work that could contribute to the new strategy would be presenting their projects. And, of course, there would be the obligatory jockeying for position by each team. Adversaries old and new made small talk while keeping a wary eye on who was doing what.&lt;/p&gt;

&lt;p&gt;Every team that would be part of this effort received Motorola Xoom tablets to get familiar with the Android platform and I planned on using it as part of my demo. I briefly explained what Maestro was and how we got it bootstrapped. I showed off the latest feature, color swatch extraction based on our Adobe Kuler (now &lt;a href=&quot;http://www.adobe.com/products/color.html&quot;&gt;Adobe Color CC&lt;/a&gt;) service. To wrap up, I pulled out my Xoom tablet and opened up the Web application. I tapped &lt;strong&gt;Upload&lt;/strong&gt; and used the camera to take a picture of the attendees. Within a minute, the photo was uploaded and being displayed on the site. &lt;em&gt;Hey, we were on crappy venue Wi-fi! What do you want from me?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At that point, a senior VP who was busy checking his email at the back of the room got a sudden case of whiplash. He started sputtering:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;Wait a minute. We need to make sure that this is coordinated and can&amp;rsquo;t have teams going off building their own Web applications. Lonnie, isn&amp;rsquo;t your team slated to build the Web experience for this?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I smiled. Obviously, he thought I was still in Adobe&amp;rsquo;s Core Technology organization and pitching a competing implementation. I looked at Lonnie as he turned around to face the confused SVP.&lt;/p&gt;

&lt;p&gt;Lonnie replied, &lt;em&gt;&amp;ldquo;He &lt;strong&gt;is&lt;/strong&gt; my team.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;Marching Towards MAX&lt;/h1&gt;

&lt;p&gt;The successful demo at The Presidio was not without casualties. Adobe CS Review and the rest of the CS Live services were being sacrificed at the altar of the Strategy Tax. Some executives thought it better to cannibalize CS Review in order to have additional resources applied to Creative Cloud. There was just one problem. The CS Review team wasn&amp;rsquo;t really a services team.&lt;/p&gt;

&lt;p&gt;Remember how I said that the acrobat.com solution made sense for &lt;strong&gt;desktop application teams&lt;/strong&gt;? Well, that&amp;rsquo;s what we had&amp;hellip;people who had spent a lot of time building features for desktop apps now being tasked with building hosted applications. While CS Review &lt;strong&gt;was&lt;/strong&gt; a hosted application, the bulk of the service was abstracted by acrobat.com. The developers on the team didn&amp;rsquo;t really know anything about HTTP, statelessness, scalability or databases. Furthermore, our entire technology stack was foreign to them: Ruby, Sinatra, Redis, MongoDB. They knew none of this stuff.&lt;/p&gt;

&lt;p&gt;Essentially, I had bootstrapped the prototype of the Creative Cloud service and now I would have to further bootstrap the team who would help build the service &lt;em&gt;while building the service.&lt;/em&gt; My approach was much like drizzling extra-virgin olive oil in a blender when making salad dressing. I slowly pulled developers, two at a time, off of CS Review and paired them up with Steve and John so that they could learn what they needed in order to start contributing code. While this slowed Steve and John down a bit, it was necessary. Luckily, the prototype had essentially provided the scaffolding for the full service. We were able to iterate and refactor a working application as opposed to starting completely from scratch.&lt;/p&gt;

&lt;p&gt;We also had other issues. A team in our Hamburg office had positioned themselves as the infrastructure layer that Creative Cloud would be built upon. We did not want this at all. The last thing we needed was another dependency from a remote team. Worse, they did not have a working platform at the time but they &lt;strong&gt;did&lt;/strong&gt; have the buy-in from our CTO. Much time was spent playing defense against them while trying to build the service up. Inevitably, we would have to use them but we held out as long as we could.&lt;/p&gt;

&lt;p&gt;The summer of 2011 was hectic and intense. By the time we had a mid-summer summit in San Jose, the team was in the zone. I was continually giving demos of the refined site. The mobile apps teams were integrating our API in order to store on-device content. One app, Adobe Proto, integrated with us to generate live HTML previews of their content in our Web application. We had switched over to the shared infrastructure layer from the Hamburg team simply my modifying our underlying API implementation. APIs FTW!&lt;/p&gt;

&lt;p&gt;Still, the pressure was on. By September, as we were finalizing features and doing deep testing our hardware partnership fell apart due to a variety of issues. The mobile teams struggled using AIR but managed to get things running. However, the combination of flaky hardware and Android caused endless issues. In the end, the hardware partner would not be able to deliver the tablet on time with the desired quality level. One of the major pillars of the MAX launch crumbled a month before launch. What else could go wrong?&lt;/p&gt;

&lt;h1&gt;Live From The Convention Center&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;We&amp;rsquo;re trying to get a signal. Please stop calling!&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Day 1 Keynote has just ended and the team was elated. Our CTO, Kevin Lynch, has unveiled Creative Cloud to the world. We were all sitting front and center in the LA Convention Center watching this new direction for Adobe being unveiled. The demos of all the mobile apps were amazing. Our hearts stopped as our Web application was being demoed &lt;strong&gt;live on production&lt;/strong&gt;. There was only one minor glitch which few people noticed. Kevin announced the acquisitions of &lt;a href=&quot;https://typekit.com/&quot;&gt;Typekit&lt;/a&gt; and &lt;a href=&quot;http://phonegap.com/&quot;&gt;PhoneGap&lt;/a&gt;. Unbelievable! I kept checking reactions on Twitter&amp;hellip;all positive.&lt;/p&gt;

&lt;p&gt;Until, they tried to go to our site.&lt;/p&gt;

&lt;p&gt;We made a conscious effort to be secure from day one and had immediately ordered SSL certificates so that all site traffic would be encrypted, even in our staging environment. What we &lt;strong&gt;forgot&lt;/strong&gt; is that people would see the address bar during the demo and &lt;strong&gt;not&lt;/strong&gt; notice that it was HTTPS as opposed to HTTP. So, of course, people would type http://creative.adobe.com in their browser to view the site they just saw on stage.&lt;/p&gt;

&lt;p&gt;We forgot to put in an HTTP to HTTPS redirect.&lt;/p&gt;

&lt;p&gt;Shit.&lt;/p&gt;

&lt;p&gt;Before the keynote ended, my phone started buzzing. Lonnie was getting calls because press and other folks were trying to get to the site and getting errors. Our SVP was &lt;em&gt;losing his shit&lt;/em&gt; to put it mildly. John, Steve and I fought the crowd to get back to the conference rooms and try to pick up a decent Wi-fi signal. My phone kept buzzing as John tried to lookup online documentation for the load balancers in order to modify their configuration. Did I mention that we were doing this in a hallway on the floor while thousands of people were walking by us? No pressure.&lt;/p&gt;

&lt;p&gt;After what seemed to be an eternity, John finally got the right HAproxy magic worked out and deployed. I wandered around the convention center for a bit before heading back to my hotel to freshen up a bit. We had a night of serious drinking ahead of us. To say that much tequila was consumed would be an understatement. By this time, I was the undisputed King of Patron. We were having dinner at the second stop of the night when our SVP, CEO and the respective teams from Typekit and PhoneGap walked in. Still smarting from the HTTP redirect incident, I ordered a huge Patron margarita and offered it to our SVP.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;My bad.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All was forgiven and the partying that night seemed like it would never end.&lt;/p&gt;

&lt;p&gt;Two days later, on the last day of Adobe MAX 2011, I was sitting in my hotel room when I saw the news that Steve Jobs had died. My childhood hero and inspiration for me getting into the technology industry had died days after I had achieved the biggest accomplishment of my career.&lt;/p&gt;

&lt;p&gt;I cried.&lt;/p&gt;

&lt;h1&gt;Redesign. Rebuild. Rebirth.&lt;/h1&gt;

&lt;p&gt;Present day. It is October 2014 and I am &lt;strong&gt;not&lt;/strong&gt; in LA for MAX. Still, there is a sense of excitement amongst the team. A lot has changed in the last 3 years.&lt;/p&gt;

&lt;p&gt;In 2012, Adobe decided to step on the gas and change our entire business to move towards a subscription model. Our team helped to add membership features to the site to allow subscribers to download our applications.&lt;/p&gt;

&lt;p&gt;2013 was the year of multiple rebuilds. A desktop syncing application that was acquired was bringing our service to its knees as it wasn&amp;rsquo;t designed to work with our API. We rebuilt the service using &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; to eliminate the bottlenecks in the Ruby stack. This alleviated some of the problems, but the sync application still had the potential for knocking our Web application over. The fundamental problem was the impedance mismatch between their application and our API; it wasn&amp;rsquo;t designed to support their access patterns. A new API, designed for syncing, was required. Another team was spun up to build that sync API while we refocused our API on collaboration features and deprecated its older features. This involved a second rebuild that impacted morale as no new features could be built. We thought that the light at the end of the tunnel was an oncoming train.&lt;/p&gt;

&lt;p&gt;After surviving the sync debacle, we all agreed to make 2014 the turnaround year and get back to what we all cared about for the service; making it the hub for collaborating on creative assets. Once again, we targeted &lt;a href=&quot;http://max.adobe.com/&quot;&gt;Adobe MAX&lt;/a&gt; as the deadline and  planned to rebrand and relaunch the site.&lt;/p&gt;

&lt;p&gt;First, the site would get a visual overhaul. The old design was getting long in the tooth and we were all tired of it as it reminded us of how long it had been since we had done anything that was user-facing. So, the designers on the team made some improvements to the navigational model and some of the design language. Nothing too revolutionary as we had a short window to pull this off.&lt;/p&gt;

&lt;p&gt;Second, we implemented a plugin model to allow other teams inside Adobe to build interactive features for the content types that they are the domain experts in. We worked with one team extensively on a showcase plugin for MAX: &lt;a href=&quot;http://www.adobe.com/creativecloud/extract.html&quot;&gt;Creative Cloud Extract&lt;/a&gt;. Extract simplifies the comp-to-code workflow used by Web designers and developers and makes it so much easier to share Photoshop files and extract the relevant components from them.&lt;/p&gt;

&lt;p&gt;Next, we jumped on a new effort that intersected with our original mission. From the beginning, Creative Cloud was about streamlining round-trip workflows between desktop and mobile applications via a cloud service. The cloud would be the connective tissue that enabled new ways for creative professionals to collaborate and work with their assets in a way that transcends the usual file-and-folder metaphor. The first step towards this goal was realized with &lt;a href=&quot;http://www.adobe.com/creativecloud/libraries.html&quot;&gt;Creative Cloud Libraries&lt;/a&gt;. Libraries provide a simple way to organize creative content, make it accessible from anywhere and share with anyone. Our API would power the collaboration features. And while the primary interaction with Libraries would be inside the desktop and mobile apps, our Web interface would be the universally accessible interface.&lt;/p&gt;

&lt;p&gt;So, as 2014 draws to a close Adobe MAX provided us a bit of a rebirth. The plugin architecture opens the door for a ton of new capabilities. Extract has been well-received and there is more to come on that front. Libraries are but the first example of the types of collaborative tools for creatives we plan to build. The site redesign returns us to our originally planned direction of browsing, filtering and searching as the main navigational metaphors as opposed to file-and-folder organizing. We never wanted to be just about files. Files are a commodity. We are focused on creative content which will increasingly be cloud-based and not tied to the restrictions of a file system. Even more importantly, storage is a commodity. The true value of our service will be the collaboration workflows we enable &lt;strong&gt;around&lt;/strong&gt; your content. Given all of that, &lt;a href=&quot;https://assets.adobe.com&quot;&gt;Creative Cloud Assets&lt;/a&gt; is more aligned with our place and purpose in the Creative Cloud ecosystem. Feel free to &lt;a href=&quot;https://helpx.adobe.com/creative-cloud/how-to/assets-get-started.html&quot;&gt;check out all that we can do&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The past three years was a long, but fulfilling journey. I have no idea what the future holds. Things can always change, for the better or for worse. I am choosing to focus on the positive as so much has happened in the past 3 years. Matt eventually joined the team and is now an Engineering Manager (and John works for &lt;strong&gt;him&lt;/strong&gt;). Steve made the management jump a few years back. My inner circle is intact. The team has grown and we have so many talented people working with us. The challenge for me now is to grow &lt;strong&gt;both&lt;/strong&gt; the team and the service in 2015 and beyond.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bring it.&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Platform Summit 2014</title>
   <link href="http://working-code.com/2014/11/08/platform-summit-2014.html"/>
   <updated>2014-11-08T00:00:00-08:00</updated>
   <id>http://working-code.com/2014/11/08/platform-summit-2014</id>
   <content type="html">&lt;p&gt;This year I attended the second annual &lt;a href=&quot;http://platform.org/#!/2014&quot;&gt;Platform Summit&lt;/a&gt; in Atlanta, Georgia. The event was held at Morehouse College and co-hosted by Morehouse and Georgia Tech from October 24 &amp;ndash; 26. It was two and a half days worth of talks and networking with a highly diverse group of attendees.&lt;/p&gt;

&lt;p&gt;Created by Hank Williams, &lt;a href=&quot;http://platform.org/&quot;&gt;Platform&lt;/a&gt; intends to provide the underrepresented (primarily, Blacks, Latinos and women) increased opportunities and access to the innovation economy. To achieve this goal, Platform focuses on highlighting multicultural role models for future innovators. This is such an important point and I&amp;rsquo;ll return to it later in this post.&lt;/p&gt;

&lt;p&gt;This year&amp;rsquo;s Platform Summit was organized in sections based on a particular theme. Each section would have several speakers, followed by a panel discussion on the topic. Interspersed there were several one-on-one conversations with influential figures in the community. I won&amp;rsquo;t summarize all of the talks; they will be posted on &lt;a href=&quot;https://www.youtube.com/user/platformdotorg&quot;&gt;Youtube&lt;/a&gt; and I recommend that you watch them. I suspect others will write recap-style blog posts that capture the spirit of the event overall. This post will go in a slightly different direction.&lt;/p&gt;

&lt;h1&gt;Black in (Tech) America, Revisited&lt;/h1&gt;

&lt;p&gt;It has been over two years since I wrote &lt;a href=&quot;http://kstewart.me/2012/02/21/black-in-tech-america.html&quot;&gt;Black in (Tech) America&lt;/a&gt; and a lot has changed in that timeframe. Ironically, that post was definitely a source of disagreement between Hank and myself at the time. Now, with the passage of time and more understanding I am actually somewhat embarrassed at the &lt;strong&gt;Am I My Brother&amp;rsquo;s Keeper?&lt;/strong&gt; section of that post. A combination of ignorance and not recognizing my own privilege is on display throughout. Still, I wrote it and I own it.&lt;/p&gt;

&lt;p&gt;Since the time of that post, I &lt;strong&gt;have&lt;/strong&gt; had to deal with getting passed over for promotion. I struggled to understand how I could contribute so much to such an important effort for the business and not be rewarded accordingly. The more I probed, the more it appeared that I just did not fit the archetype of a senior engineering leader. I received mixed messages of &lt;em&gt;You&amp;rsquo;ve absolutely earned it already&lt;/em&gt; and &lt;em&gt;You have certainly improved and are on track for it&lt;/em&gt;. At first, I did not see what was right in front of me. Or perhaps, I just did not want it to be true.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also achieved a better understanding of the economic systems that have created barriers for people of color. The idyllic Shangri-La that is The Valley is just plain inaccessible to most non-white, non-male innovators. Pattern matching is real and extends further than most people realize. More importantly, the &lt;a href=&quot;https://medium.com/theli-st-medium/the-other-side-of-diversity-1bb3de2f053e&quot;&gt;lack of empathy&lt;/a&gt; in most tech companies tends to drive women and people of color from the field entirely.&lt;/p&gt;

&lt;p&gt;Re-reading that post, I still stand by some of the things I stated in the &lt;strong&gt;You Can Hate Me Now&lt;/strong&gt; section. The love and support that children receive  from their families has a direct impact on their future potential. I &lt;strong&gt;still&lt;/strong&gt; believe that the following characteristics set young people up for success:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Loving, caring parents at home&lt;/li&gt;
&lt;li&gt;Education always deemed important&lt;/li&gt;
&lt;li&gt;Letting the work speak for itself&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If I were the type to rewrite history via blog post, I would delete just about everything else and just leave those traits behind.&lt;/p&gt;

&lt;h1&gt;Platform Summit 2014, Revisited&lt;/h1&gt;

&lt;p&gt;As I struggled with my feelings about my company, the tech industry and what I wanted to do with my life one question kept surfacing: &lt;em&gt;What can I do to help others in my situation?&lt;/em&gt; It was that question that led me to pay my own way to attend Platform Summit 2014.&lt;/p&gt;

&lt;p&gt;Van Jones talks about the founding of &lt;a href=&quot;http://www.yeswecode.org/&quot;&gt;#YesWeCode&lt;/a&gt; and how Prince made the thought-provoking statement, &lt;em&gt;When an African-American kid is wearing a hoodie, people think he?s a thug. But when a white kid is wearing a hoodie, people think he?s the next Mark Zuckerberg.&lt;/em&gt; This is real. I have a young son and I have real fear that as he gets older he may lose his life due to some person perceiving him to be a threat.&lt;/p&gt;

&lt;p&gt;I think about my love of technology and how I&amp;rsquo;ve wanted to be in this field since I first was exposed to an Apple II. My heroes/role models were Bill Gates and Steve Jobs. I didn&amp;rsquo;t know of any black people that were successful in software. I couldn&amp;rsquo;t name one that had created any killer applications or game-changing platforms that I had used. There was no one that looked like me (that I knew of) doing the the things that I loved.&lt;/p&gt;

&lt;p&gt;Logic, however, cannot be denied. I eventually discovered people like John Thompson, Paul Judge and of course, Hank Williams. There are others&amp;hellip;they are out there. I met many of them at Platform Summit 2014 and there are even more yet to be discovered. The answer to my question became clear.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Be visible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last year, I attended the &lt;a href=&quot;https://reinvent.awsevents.com/&quot;&gt;AWS re:Invent&lt;/a&gt; conference in Las Vegas. For the first time at a tech conference I felt noticeably uncomfortable. Sure, there were a few Black and Hispanic attendees but not a lot. &lt;em&gt;(I will admit that there were a lot more women than I expected, both as attendees and speakers)&lt;/em&gt; Still, whenever I saw a person of color they were more than likely a member of the hotel staff. Contrast that with the &lt;a href=&quot;http://gophercon.com/&quot;&gt;GopherCon&lt;/a&gt; event I attended this past April where there was a diverse mix of both speakers and attendees. I found myself striking up conversations more easily and enjoying myself more because I felt more at ease.&lt;/p&gt;

&lt;p&gt;I am not likely to be the next Bill Gates, Steve Jobs or Mark Zuckerberg. I don&amp;rsquo;t need to be. I have built a successful career, work for a well-recognized company and I have succeeded. If I can achieve this level of success, so can other people of color. They can exceed my accomplishments. They just have to know that it&amp;rsquo;s &lt;strong&gt;possible&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The thing that I can do is share my experiences. A lot of us suffer from &lt;a href=&quot;http://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;Impostor Syndrome&lt;/a&gt;. The more we can demonstrate people of color succeeding in this industry, the better chance we have of combatting this problem. We absolutely need people leading the charge in creating spaces where young minorities can learn to code. We also need people attacking the legal, social and economic barriers to success. But, we also need people that represent &lt;strong&gt;all of us&lt;/strong&gt; working on the apps and services that people use every day.&lt;/p&gt;

&lt;p&gt;People of color are voracious consumers of technology but they often do not have as much of a say in &lt;em&gt;creating it&lt;/em&gt;. Personally, I find the whole idea of &lt;a href=&quot;http://en.wikipedia.org/wiki/Black_Twitter&quot;&gt;Black Twitter&lt;/a&gt; isolationist. I love Twitter, but I don&amp;rsquo;t want there to be separate neighborhoods or, worse, ghettoes. The serendipity of discovering new people and information is what makes Twitter Twitter. My challenge to Twitter &lt;strong&gt;the company&lt;/strong&gt; is to get better educated on how PoC communities use their product and increase their influence on the overall product design. What better way than to employ more women, Blacks, Hispanics, Native Americans and LGBTQ engineers and product managers?&lt;/p&gt;

&lt;p&gt;These ideas are not mutually exclusive. We can work to get more kids interested in technology at a younger age &lt;strong&gt;and&lt;/strong&gt; increase the pipeline of qualified engineers to technology companies &lt;strong&gt;and&lt;/strong&gt; attack the socioeconomic barriers that create an uneven playing field &lt;strong&gt;and&lt;/strong&gt; identify and promote role models to help inspire the next generation of innovators. Doing any &lt;strong&gt;one&lt;/strong&gt; of these things is certainly necessary, but it&amp;rsquo;s not sufficient.&lt;/p&gt;

&lt;p&gt;I plan on doing my part by being more visible. I will blog more often and engage on social media even more. I will not just attend conferences, but submit proposals to speak at them. I will support efforts like &lt;a href=&quot;http://platform.org/&quot;&gt;Platform&lt;/a&gt; and &lt;a href=&quot;http://www.yeswecode.org/&quot;&gt;#YesWeCode&lt;/a&gt; in any way I can to address the other issues affecting the diversity in tech problem. Why? First, I don&amp;rsquo;t want people with a strong interest in technology to feel uncomfortable or unwanted in our industry. More importantly, I want that young person of color wearing a hoodie to be regarded as a possible innovator and not a threat.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Black In (Tech) America</title>
   <link href="http://working-code.com/2012/02/21/black-in-tech-america.html"/>
   <updated>2012-02-21T00:00:00-08:00</updated>
   <id>http://working-code.com/2012/02/21/black-in-tech-america</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; The question isn&amp;rsquo;t &lt;em&gt;&amp;ldquo;Why aren&amp;rsquo;t there more blacks (or other non-Indian/Asian minorities) in tech?&amp;rdquo;&lt;/em&gt; The question is &lt;em&gt;&amp;ldquo;Why are we still asking the wrong question?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;Black In America 4: The New Promised Land &amp;ndash; Silicon Valley&lt;/h1&gt;

&lt;p&gt;Let me start off by saving that I loved the CNN special, &lt;a href=&quot;http://money.cnn.com/technology/newme_incubator/&quot;&gt;Black In America 4: The New Promised Land &amp;ndash; Silicon Valley&lt;/a&gt;. A while back I had a short email exchange with &lt;a href=&quot;http://whydoeseverythingsuck.com&quot;&gt;Hank Williams&lt;/a&gt; and connected with him on LinkedIn. When I saw that he was one of the founders that would be part of the &lt;a href=&quot;http://www.newmeaccelerator.com/&quot;&gt;NewMe Accelerator&lt;/a&gt; program, I set a reminder to watch the show. I watched with great interest and it&amp;rsquo;s still on my DVR as I&amp;rsquo;ve watched it several times now. It was a great program and should be required watching for anyone in technology, no matter your race.&lt;/p&gt;

&lt;p&gt;That said, something was nagging me about all of the companies that were being profiled. With one or two exceptions, I found myself asking the same question:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Why do you need venture capital?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is an important question that kept surfacing as I followed the debates that followed.&lt;/p&gt;

&lt;h1&gt;Arrington&amp;rsquo;s Not A Racist&amp;hellip;He&amp;rsquo;s Just Dishonest&lt;/h1&gt;

&lt;p&gt;Black in America triggered a lot of debate in the tech community. The ever-volatile Michael Arrington started a bit of a controversy with his comments on the special and subsequent blog posts. Hank responded quite eloquently with &lt;a href=&quot;http://whydoeseverythingsuck.com/2011/11/arringtons-not-racist-whos-said-that.html&quot;&gt;a post&lt;/a&gt; that inspired this section header. I think it accurately reflects a very large part of the problem. Hank says,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;ldquo;So to conclude, no one is accusing Arrington of being a racist. But it&amp;rsquo;s clear he is (or at least his writing reflects him to be) incredibly insensitive to issues of race and privilege.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You see, there&amp;rsquo;s racism and then there&amp;rsquo;s &lt;strong&gt;RACISM&lt;/strong&gt;. A lot of what people are quick to call racism is usually attributable to ignorance and/or insensitivity. Believe me, I know the difference as I&amp;rsquo;ve experienced both. However, I think that people often mistake the former for the latter. True racism stems from hatred and fear and I&amp;rsquo;ve found that a lot of people who are labeled racists do not exhibit the qualities of hatemongers. They are merely ignorant.&lt;/p&gt;

&lt;p&gt;Let me tell you a bit about my background. First, if it isn&amp;rsquo;t obvious (or, you couldn&amp;rsquo;t bother to look at my avatar on Twitter or LinkedIn or half a dozen other places) I am a Black man.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Quick note: I never refer to myself as an &amp;ldquo;African-American&amp;rdquo;.  Personally, I think it&amp;rsquo;s a funny term as we ALL originally come from Africa, so how is this descriptive? It would be more accurate to call myself a &amp;ldquo;West Indian-American&amp;rdquo; since my parents are from Trinidad and Tobago, but even that&amp;rsquo;s wrong. I was born in Brooklyn, NY so I&amp;rsquo;m just an American.  And, I&amp;rsquo;m Black. Plus, for those of you who don&amp;rsquo;t know this already but REAL Africans actually dislike African-Americans. So, why would I self-identify with a group of people that wouldn&amp;rsquo;t accept me in the first place? But I digress.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My mom was a registered nurse and my dad was in construction management and trained as an architect. They both worked their asses off to ensure that I got a good education. I went to a Catholic grade school and junior high in the Canarsie section of Brooklyn, which was mostly an Italian neighborhood. Growing up, I was mostly surrounded by white kids. Our class size was fairly large, usually around 45 kids with a maximum of 6 of them being Black. And yes, my first encounters with racism occurred on the playground. Mom got called to the principal&amp;rsquo;s office almost once a week from the first grade through sixth until she finally said, &amp;ldquo;Stop calling me in here from work every week. I have a hard time thinking that my child is the only culprit in all this bad behavior.&amp;rdquo; Amazingly, I stopped getting sent to the principal&amp;rsquo;s office after that. By the time I graduated, I was an honors student and voted &lt;strong&gt;Most Likely To Succeed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I attended Brooklyn Technical High School, one of the three specialized high schools in NYC. When it came time to apply to colleges, I applied to a lot of great schools and got accepted. Carnegie Mellon, Columbia, Rochester Institute of Technology, Penn State, CalTech&amp;hellip;the list goes on. And, I pretty much got accepted to them all. However, I ended up passing on a lot of these schools because they made it clear that the reason I got accepted was the fact that I was Black. I was part of an &lt;em&gt;under-represented minority&lt;/em&gt;. Yes, a couple of the acceptance letters actually said that!&lt;/p&gt;

&lt;p&gt;I ended up at Polytechnic University (now part of NYU) in Brooklyn. Ironically, one of my high school pre-calculus teachers told my parents that I would never get accepted there and he would know as he was a professor there. So, on my first day of college was particularly sweet when I bumped into him in Rogers Hall. I walked up, tapped him on the shoulder, said &amp;ldquo;I&amp;rsquo;m here&amp;rdquo; and walked away.&lt;/p&gt;

&lt;p&gt;I did OK in college, but I was no genius. I aced most of my Computer Science classes (except the hardware ones) and skated by on everything else. I mostly wanted to code and socialize. Eventually, I ended up working in a research lab and switched to part-time status so that the job would pay for most of my classes (I had a partial scholarship, but I still wanted to reduce the burden on my parents and lessen the debt I would have after graduation).&lt;/p&gt;

&lt;p&gt;After graduation, I continued working in the research lab until the start of the dotcom boom. From interactive agencies to startups, I moved from being a technical lead to Director of Engineering. After a combination of being laid off and a personal tragedy, fate had me respond to a job posting for Adobe. My wife and I sold our home in NY and moved across the country to Seattle. Today, I&amp;rsquo;m a Sr. Engineering Manager at Adobe working on a &lt;a href=&quot;http://www.adobe.com/products/creativecloud.html&quot;&gt;pretty cool project&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Am I My Brother&amp;rsquo;s Keeper?&lt;/h1&gt;

&lt;p&gt;(&lt;em&gt;If you don&amp;rsquo;t instantly recognize this pop culture, not biblical, reference then stop reading this post now and go watch &lt;strong&gt;New Jack City&lt;/strong&gt;. Seriously.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t write all of the above just to give you a mini-biography. I&amp;rsquo;m just setting context. You see, while I have experienced more than my share of racism in my life I faced very little of it in my professional career. I&amp;rsquo;ve never been passed over for a promotion. In fact I was promoted, given raises and stock and moved into management (and I still code when I can). I&amp;rsquo;ve been a hiring manager for over 15 years now and managed engineers of many races, both men and women. In total, I&amp;rsquo;ve probably had about 100 people reporting to me throughout my career. Of that group, fewer than 10 were Black.&lt;/p&gt;

&lt;p&gt;Now, ask yourself why is that? Is it because I did not seek Black engineers out? Maybe. I didn&amp;rsquo;t explicitly say, &lt;em&gt;&amp;ldquo;Find me some brothers and sistas&amp;rdquo;&lt;/em&gt; to my recruiters. I didn&amp;rsquo;t camp out at Howard University. Why? Because color was never an issue. Talent was. I rarely lacked a large pool of potential hires at any of the companies I worked for in the past. The problem was that there were very few (if any) black people in the pool.&lt;/p&gt;

&lt;p&gt;More importantly, I ask myself whether I should have been working harder to recruit and hire Black developers? I am pretty convinced that the answer is &lt;em&gt;No&lt;/em&gt;. I know some might say that I need to &amp;ldquo;give back to the community&amp;rdquo;, but which community would that be? The Black community? My neighborhood? The tech community? The professional community?&lt;/p&gt;

&lt;p&gt;Not all Blacks have the same experiences, so the stereotypical expectations don&amp;rsquo;t always apply. When I&amp;rsquo;ve attended meetings or conferences for Black professionals, they always seemed to rub me the wrong way. They seemed to mostly perpetuate the &lt;em&gt;&amp;ldquo;We&amp;rsquo;re being held down&amp;rdquo;&lt;/em&gt; mentality of people who are still looking for reparations for slavery. While I am well aware of the social injustices that we&amp;rsquo;ve faced as a people, they are not a part of my &lt;strong&gt;identity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is just my opinion, but I think there may be a hint of truth in it. I think there is still a lingering bitterness and distrust of white people that is preventing Black people from achieving their goals. If you think you&amp;rsquo;re being held down by &lt;strong&gt;The Man&lt;/strong&gt;, then you are. It&amp;rsquo;s just that &lt;em&gt;&amp;ldquo;The Man&amp;rdquo;&lt;/em&gt; is &lt;strong&gt;you&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;You Can Hate Me Now&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m sure that there is a percentage of people that will call me a sellout, an Uncle Tom or some other derogatory term. Whatever. That would essentially be the same level of ignorance I referred to earlier with respect to white people that some think are racist. It&amp;rsquo;s ignorance, not racism.&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;d like is for us to address the real issues. I don&amp;rsquo;t think that my story is all that unique, nor should it be. Let&amp;rsquo;s look at what I think are the defining characteristics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Loving, caring parents at home&lt;/li&gt;
&lt;li&gt;Education always deemed important&lt;/li&gt;
&lt;li&gt;Letting the work speak for itself&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Ask yourself honestly, if more minority kids had these attributes growing up would they be better set up for success? If their parents focused on instilling these attributes I think that they would be doing them the biggest favor of all. Let&amp;rsquo;s stop living in the past. I don&amp;rsquo;t mean that we should forget history, but we should stop using history &lt;em&gt;as an excuse&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;No, I&amp;rsquo;m not a damn Republican.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h1&gt;Wrapping Up&lt;/h1&gt;

&lt;p&gt;At the beginning of this post, I said I wondered why so many of the NewMe founders were seeking venture capital. For what they were building, why not bootstrap? That would eliminate a lot of the VC &amp;ldquo;pattern matching&amp;rdquo;. Figure out how to charge money for your product or service and work your way up to a profitable business. Isn&amp;rsquo;t getting rejected by Sequoia or Kleiner Perkins another version of &lt;em&gt;&amp;ldquo;being held down by The Man&amp;rdquo;&lt;/em&gt;?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I was watching NBC&amp;rsquo;s &lt;a href=&quot;http://www.nbc.com/the-voice/&quot;&gt;The Voice&lt;/a&gt; while starting to write this. I think we need something like this for funding. Let&amp;rsquo;s come up with a way to pitch investors &amp;ldquo;blindly&amp;rdquo;. Maybe if investors can&amp;rsquo;t pattern match and have to judge a startup purely on the idea and proposed business model this might increase the odds of getting more minority-led companies funded. Just a thought&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m not chugging haterade. I wish Angela and Wayne nothing but the best with the NewMe Accelerator Program. I may even apply one day. I just grow weary of the constant Racism (or Sexism) in Tech memes. Let&amp;rsquo;s change the nature of the discourse. Talk to me about improving people&amp;rsquo;s notions of parenting and education. Bend my ear about self-sufficiency and independence. Tell me how I can help you start a business that will be long-lived and prosperous, as opposed to trying to win the venture capital lottery.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll get my undivided attention.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Join My Team!</title>
   <link href="http://working-code.com/2011/12/05/join-my-team.html"/>
   <updated>2011-12-05T00:00:00-08:00</updated>
   <id>http://working-code.com/2011/12/05/join-my-team</id>
   <content type="html">&lt;p&gt;At the &lt;a href=&quot;http://max.adobe.com&quot;&gt;Adobe MAX 2011 Conference&lt;/a&gt;, the project that my team and I have been working on for the past year was announced. The &lt;a href=&quot;http://www.adobe.com/products/creativecloud.html&quot;&gt;Adobe Creative Cloud&lt;/a&gt; is a new cloud service that is currently in beta and will be launching as a subscription-based service in 2012. Adobe Creative Cloud allows you to access your creative files from anywhere, view them on virtually any device and share or present them to anyone.&lt;/p&gt;

&lt;p&gt;Our team has been responsible for two key components of the service. The first is the &lt;strong&gt;Creative Cloud API&lt;/strong&gt; that provides a uniform interface to all of the capabilities of the Creative Cloud. Every client of the service uses this API, including &lt;a href=&quot;http://www.adobe.com/products/touchapps.html&quot;&gt;the Adobe Touch App family&lt;/a&gt; and the second component of the service my team is responsible for: &lt;a href=&quot;https://creative.adobe.com&quot;&gt;the Creative Cloud Web application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://creative.adobe.com&quot;&gt;The Web application&lt;/a&gt; is a Javascript application that uses &lt;a href=&quot;http://documentcloud.github.com/backbone/&quot;&gt;Backbone.js&lt;/a&gt; to provide a client-side MVC framework. It was built by two developers on the team who worked closely with our API team. Now, that the beta has launched we have a &lt;strong&gt;ton&lt;/strong&gt; of new features to build and deploy and are looking for two more great designer-developers to join the team.&lt;/p&gt;

&lt;p&gt;There are 7 people on the team right now that report directly to me. The team is split in two: the API team and the Web app team. Our team culture is mostly based on &lt;a href=&quot;http://www.gorowe.com/&quot;&gt;ROWE &amp;ndash; Results Only Work Environment&lt;/a&gt;. We treat you like an adult (I am the last person who will micro-manage &lt;strong&gt;anybody&lt;/strong&gt;) and expect that you want to do great work. We use &lt;a href=&quot;http://pivotaltracker.com&quot;&gt;Pivotal Tracker&lt;/a&gt; to prioritize and track our work and &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; at the core of our development workflow (soon, &lt;a href=&quot;http://enterprise.github.com&quot;&gt;GitHub Enterprise&lt;/a&gt;). And yes, we all code in &lt;a href=&quot;http://macromates.com&quot;&gt;TextMate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pretty much everyone on the team, myself included, works on &lt;a href=&quot;http://www.apple.com/macbookpro/&quot;&gt;Apple MacBook Pros&lt;/a&gt; and deploys to &lt;a href=&quot;http://aws.amazon.com&quot;&gt;Amazon Web Services&lt;/a&gt; EC2 instances running Ubuntu. We continuously deploy with the help of &lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; and treat our infrastructure as code thanks to &lt;a href=&quot;http://projects.puppetlabs.com/projects/puppet&quot;&gt;Puppet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of this is to say that we use current tools and practices to help our team build an awesome app quickly and stay productive. We spent time up front getting our toolchain and automation in place so that we could spend the rest of our time building a great service. While we occasionally have to go back and rework things, we see that as a good thing. If something is no longer working for us, &lt;em&gt;we change it&lt;/em&gt;. No sacred cows here.&lt;/p&gt;

&lt;p&gt;So, if you are a frontend engineer looking to be part of the next generation of creative tools and services from Adobe &lt;em&gt;come join my team!&lt;/em&gt; We&amp;rsquo;re all co-located in the Adobe Seattle office located in Fremont, The Center of the Universe. I have two positions open currently:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://adobe.taleo.net/careersection/2/jobdetail.ftl?lang=en&amp;amp;job=132706&quot;&gt;Computer Scientist &amp;ndash; Web Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://adobe.taleo.net/careersection/2/jobdetail.ftl?lang=en&amp;amp;job=132707&quot;&gt;Computer Scientist &amp;ndash; Web Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; You need to have some form of online portfolio of your previous work. It can be actual paid work for an employer or your own side projects, but you must have &lt;em&gt;something we can look at&lt;/em&gt; to even get called in for an interview.&lt;/p&gt;

&lt;p&gt;If we like your style, we&amp;rsquo;ll bring you in for an initial two-hour interview where you will work on a small project. We don&amp;rsquo;t necessarily expect you to complete the project. We just want to see how you approach it. If that goes well, we may bring you in for another interview to get a feel for whether or not you&amp;rsquo;d be a good fit for the team. Hopefully, you&amp;rsquo;ll be considering whether we&amp;rsquo;re a good fit for &lt;strong&gt;you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not trying to sell you on how great the Adobe Creative Cloud is or even how great Adobe is. I just know that after spending a year on this project, I&amp;rsquo;ve never been as engaged on a project as I have on this one. My team is awesome and the goals we&amp;rsquo;re trying to achieve are insane, but absolutely worthwhile. It&amp;rsquo;s rare when you get to work in a startup-like environment in a company as large as Adobe. And, when you have the ability to fundamentally change the culture there is no greater feeling.&lt;/p&gt;

&lt;p&gt;Plus, we have new members of the family! I&amp;rsquo;ve recently started working with the &lt;a href=&quot;http://typekit.com&quot;&gt;Typekit&lt;/a&gt; team and they are &lt;em&gt;awesome&lt;/em&gt;! I have yet to start working with the &lt;a href=&quot;http://nitobi.com/&quot;&gt;Nitobi&lt;/a&gt; team, but I can&amp;rsquo;t wait to see how we can integrate &lt;a href=&quot;https://build.phonegap.com/&quot;&gt;PhoneGap:Build&lt;/a&gt;. Then, things will start to get real!&lt;/p&gt;

&lt;p&gt;If this has piqued your interest, please apply using one of the links above or contact me via &lt;a href=&quot;http://twitter.com/kstewart&quot;&gt;Twitter&lt;/a&gt; or email me at kstewart at my company dot com.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get &lt;a href=&quot;https://creative.adobe.com&quot;&gt;creative&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Big Company Teams vs Small Company Teams</title>
   <link href="http://working-code.com/2011/09/03/big-company-teams-vs-small-company-teams.html"/>
   <updated>2011-09-03T00:00:00-07:00</updated>
   <id>http://working-code.com/2011/09/03/big-company-teams-vs-small-company-teams</id>
   <content type="html">&lt;p&gt;There are many common memes in the startup world. Always hire the best. Small teams are better than large teams. Fire problem employees quickly. Release early, release often. And so on&amp;hellip;&lt;/p&gt;

&lt;p&gt;Funny thing is, a lot of the people spouting these things have only worked in small companies and startups. A subset of them foolishly think that the same rules should apply for large companies. Maybe they should, but the real world has an obnoxious way of challenging your assumptions. It just laughs in your face. Allow me to introduce Stewart&amp;rsquo;s Second Law of Leading Teams (we&amp;rsquo;ll cover the First Law a little bit later):&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Understand That You Don&amp;rsquo;t Always Get To Pick Your Team&lt;/p&gt;&lt;/blockquote&gt;

&lt;h1&gt;First Draft Picks&lt;/h1&gt;

&lt;p&gt;When I first started in management, I was still in a senior development role. I read a lot of books and blog posts on management, specifically for software teams. Guys like Steve McConnell, Jim McCarthy and Tom DeMarco formed a lot of my early thinking. At the time, I was primarily developing for Windows so by the time I had to make my first hire I focused almost exclusively on technical skills. I followed a lot of the basic rules of interviewing and placed a lot of emphasis on the whiteboard coding sessions. This approach was sufficient and mostly successful (or so I thought).&lt;/p&gt;

&lt;p&gt;My next position was also a senior dev role, but pretty soon thereafter I was placed into the official position of Technical Director. I had been involved in making a couple of hires prior to that, but now growing the team was my &lt;em&gt;responsibility&lt;/em&gt;. At this time, the dotcom boom was just beginning and I was working for the interactive division of an ad agency. It was the stereotypical environment of that period: open space work layout with developers working in the same space with designers, producers and account managers. It was great place to work and I felt a need to help keep it that way. I wanted the people I hired to fit in and keep the cool vibe going. Without realizing it, I had started to focus on &lt;strong&gt;culture fit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After two years at the ad agency, I had the opportunity to build a team from the ground up at another interactive firm. During the time off I had before starting the new job, I sketched out my ideal team structure. Given my penchant for subversion I drafted out a structure of small &lt;em&gt;cabals&lt;/em&gt;, cross-functional teams of frontend and backend developers and information architects. I also added separate quality assurance and systems engineering teams. Although our technology stack was mostly Java on Linux/Solaris, I added a Microsoft cabal as well due to the needs of some of our clients. My primary goal was to have each cabal be less than 7 people and have them work on no more than 3 projects.&lt;/p&gt;

&lt;p&gt;During that period, companies were hiring like mad. I had to hire quickly, so I seeded the new team with people that I had worked with previously and who wanted to work with me again. I also interviewed people and brought a few more people on based on &lt;strong&gt;both&lt;/strong&gt; culture fit and technical skills. Over time, I realized I made a couple of bad hires, but I moved quickly to address those problems. All in all, my approach to team building had led to generally positive results:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Assess technical and communication skills&lt;/li&gt;
&lt;li&gt;Look for self-starters&lt;/li&gt;
&lt;li&gt;Identify culture fit&lt;/li&gt;
&lt;li&gt;If you make a bad hire or have inherited a team member that is not a good fit, &lt;strong&gt;get rid of them. Quickly!&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Over the course of my next couple of employers, my basic strategy continued to be successful in building teams. I was even starting to believe I was &lt;strong&gt;good&lt;/strong&gt; at building teams. Of course, I hadn&amp;rsquo;t really been challenged yet.&lt;/p&gt;

&lt;h1&gt;What Do You Mean I Can&amp;rsquo;t Hire A Team?!?&lt;/h1&gt;

&lt;p&gt;Seven years ago, I started working for my current &lt;a href=&quot;http://adobe.com&quot;&gt;employer&lt;/a&gt;. I was taking over a team from a manager who was moving back to India. The team was about 14 people split between San Jose, CA and Seattle, WA. I was moving from NY and chose to work out of the Seattle office; San Jose was too &lt;em&gt;clinical&lt;/em&gt; for me. Over the next three months, I applied a light touch in running the team while I was feeling them out. I learned who the really strong developers were, who thought they were stronger than they were and those who really needed to be doing something else. So, I set out to figure out the approved process for making the changes I wanted to make. That&amp;rsquo;s when I had my first encounter with the vaunted requisition, or &lt;strong&gt;req&lt;/strong&gt;. Or, to be more precise, my lack of an encounter because I didn&amp;rsquo;t have one.&lt;/p&gt;

&lt;p&gt;When I talked to my manager about the team and what I wanted to do, he just smiled with that &lt;em&gt;Oh, silly boy! Let me school you as to how this works.&amp;ldquo;&lt;/em&gt; look on his face. You see, large companies deal with hiring via reqs. In order to fill a position, you need to have an open req. How you get a req is usually a mystery, bordering on Cajun bayou voodoo. I still don&amp;rsquo;t really know how to get one. If someone quits on you, you &lt;strong&gt;might&lt;/strong&gt; get a replacement req, but don&amp;rsquo;t count on it! If you let someone go, well&amp;hellip;you&amp;rsquo;re taking a huge gamble there, partner! And, fill that req quick&amp;hellip;they disappear as fast as they appear.&lt;/p&gt;

&lt;p&gt;Speaking of letting people go, holy crap! For all the management training you&amp;rsquo;re forced to take about team building, you would think that your Human Resources department would understand the impact of having bad employees on the team for an extended period of time. Contractors are one thing and it was relatively easy for me to get rid of a couple of really bad ones. But, try and let a fulltime employee go. Although the general law of the land is &lt;strong&gt;at-will employment&lt;/strong&gt;, pretty much every company has a &lt;em&gt;performace plan&lt;/em&gt; process for &amp;ldquo;off-ramping&amp;rdquo; problem employees. On average, this process can take anywhere from 3-6 &lt;strong&gt;months&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;For those of us who know the damage that low-performing or problem employees can cause to the morale and effectiveness of the rest of the team, what do you do? The usual approaches tend to be:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;ldquo;Manage&amp;rdquo; them out&lt;/li&gt;
&lt;li&gt;Wait for a reorg and let &amp;ldquo;nature&amp;rdquo; handle things&lt;/li&gt;
&lt;li&gt;Give them side projects to get them off the critical path&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I&amp;rsquo;ve had to use all of these approaches at one point or another and it was never easy. The issue wasn&amp;rsquo;t so much that I had identified someone that needed to go, it was the time it took to &lt;strong&gt;get them gone&lt;/strong&gt;. All the while, the rest of the team got angry or resentful because they knew there was dead weight on the team. However, corporate policy gets in the way of taking decisive action.&lt;/p&gt;

&lt;p&gt;Up until this point, I had been used to having &lt;strong&gt;my own budget&lt;/strong&gt; so hiring and firing decisions ultimately rested with me. I had a set amount of money to use for the year, so if I blew it that was my problem. But, in the Big Company world, you&amp;rsquo;re lucky if you even know what your budget is. It&amp;rsquo;s more than likely that unless you are a Director or VP, you have no idea. Or, even if you do, you don&amp;rsquo;t have the authority to use it as you please. When it comes to hiring, someone much higher up the chain controls that and they do it via the req.&lt;/p&gt;

&lt;p&gt;Internal transfers fall under the open req rule as well. No req, no transfer. And while it is generally frowned upon for managers to try and hold onto their employees or block a transfer, it &lt;strong&gt;does&lt;/strong&gt; happen. A lot. Headcount, in the form of reqs, is one of the major coins of the realm and no one wants to lose anyone.&lt;/p&gt;

&lt;p&gt;Except&amp;hellip;when your management decides to reorg. This is the only time that I have seen reqs open up, but it&amp;rsquo;s still a mystery on how the distribution works. If you&amp;rsquo;re lucky, you&amp;rsquo;ll get a few reqs thrown your way to fill a gap that the execs think you have which is generally wrong but, you&amp;rsquo;d be stupid not to take the reqs! The other thing that happens in this process is by far the most damaging. They give you &lt;strong&gt;resources&lt;/strong&gt;. Not reqs, but people from other teams in the organization.&lt;/p&gt;

&lt;p&gt;Why is this damaging? They were &lt;em&gt;given&lt;/em&gt; to you, that&amp;rsquo;s why. You had absolutely no say in whether or not you &lt;strong&gt;wanted&lt;/strong&gt; the person. You probably had no opportunity to screen the person before they were put on your team. Your execs probably thought:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;Hey! We&amp;rsquo;re SuperMegaCorp. We only hire the best! The very fact that they work here means they&amp;rsquo;re good. Enjoy your new resources!&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Umm&amp;hellip;yeah.&lt;/p&gt;

&lt;h1&gt;Stewart&amp;rsquo;s First Law of Leading Teams&lt;/h1&gt;

&lt;p&gt;So, here you are with these new people on your team that you know next to nothing about because you had no hand in selecting them. It&amp;rsquo;s worse than having a brand new hire that&amp;rsquo;s an unknown quantity. In that case, at least you interviewed the person and had some sort of opinion that led you to hire them. But now, you have a complete mystery and the only thing you know is that they made it through the door previously.&lt;/p&gt;

&lt;p&gt;What many organizations fail to realize, especially for software teams, is that &lt;em&gt;people are not interchangeable!&lt;/em&gt; Yes, your new team member may be very smart but are they smart in the way that &lt;strong&gt;you&lt;/strong&gt; need them to be? Are they a specialist in an area that is completely unrelated to the skills needed for your project? If so, you have a 50-50 chance that they&amp;rsquo;ll be able to acquire the skills you need and become productive. Actually, I&amp;rsquo;m lying. Your chances are much lower than that. Much, much lower.&lt;/p&gt;

&lt;p&gt;In order for your new team members to be successful you, as the manager, need to have followed my First Law:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Identify Your Desired Team/Organizational Culture&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;This&lt;/strong&gt; is one of the only rules I&amp;rsquo;ve found that works for both big companies and small companies alike. If you work at a big company, you&amp;rsquo;ve probably been inundated with a lot of talk about your company&amp;rsquo;s culture. But, most cultures have &lt;strong&gt;sub-cultures&lt;/strong&gt;. That&amp;rsquo;s where you come in. Within the context of the larger organization, define the kind of team you&amp;rsquo;d ideally want to run. I always try to run my team like a poorly-funded startup. This helps to create a sense of urgency and efficiency in the way we do things.&lt;/p&gt;

&lt;p&gt;The thing to remember is that your new team members are probably as unhappy and wary as you are. They don&amp;rsquo;t know what kind of manager you might be; Dilbert&amp;rsquo;s Pointy-Haired Boss, Bill Lumbergh or a lunatic micro-managing empire builder. They are as afraid of what you will do to them as you are afraid of what they will do to your team and/or project.&lt;/p&gt;

&lt;h1&gt;The Third Law&lt;/h1&gt;

&lt;p&gt;Teams are formed in a variety of ways. You may have the luxury of picking every single member of your team and can be as discriminating as you want. In other cases, you may just be inheriting a fully-formed team (or a group of people who report to you on the org chart&amp;hellip;they may not actually be a team, yet). And, in other cases you have a hybrid situation; an existing team with the ability to supplement it with new hires. No matter which situation you find yourself in, Stewart&amp;rsquo;s Laws for Leading Teams have proven invaluable to me throughout my career:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Identify Your Desired Team/Organizational Culture&lt;/li&gt;
&lt;li&gt;Understand That You Don&amp;rsquo;t Always Get To Pick Your Team&lt;/li&gt;
&lt;li&gt;Communicate, Defend and Curate the Team/Organizational Culture&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;Communicate&lt;/strong&gt; to your team the basic principles of your culture. This has to go beyond just writing slides and holding a meeting. Your actions must reinforce the ideals. Make sure everyone understands what type of team you&amp;rsquo;re building and that they &lt;strong&gt;buy into the idea&lt;/strong&gt;. If there is no buy-in, there won&amp;rsquo;t be a team, much less a team culture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defend&lt;/strong&gt; your team&amp;rsquo;s culture against negative forces. There may be some misguided corporate initiatives/processes that conflicts with your team&amp;rsquo;s goals. Another team may be trying to convince you to do things &lt;em&gt;their&lt;/em&gt; way. Or, you may have one of those problem employees that either refuses to adapt or just wants to be an agitator. You know what to do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Curate&lt;/strong&gt; the culture by ensuring that the environment you create and processes you select support the team goals. You can&amp;rsquo;t identify and communicate an agile, high-performance culture (which implies a high degree of trust and discipline) and then go around micro-managing your team.&lt;/p&gt;

&lt;p&gt;By following these three laws, you stand a good chance of ending up with the team you want. The &lt;strong&gt;real&lt;/strong&gt; difference between small companies and large ones is the amount of time it may take for you to get the team you want and how long you&amp;rsquo;ll be able to hold onto them. Assuming you&amp;rsquo;ve managed to assemble your All-Star Team, you must now diligently follow Stewart&amp;rsquo;s Fourth Law of Leading Teams:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Get Out Of Their Way And Let Them Be Awesome&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Your job is to be the shit &lt;strong&gt;umbrella&lt;/strong&gt;, not the shit &lt;strong&gt;funnel&lt;/strong&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>WTF Is The Mobile Web?</title>
   <link href="http://working-code.com/2011/06/04/wtf-is-the-mobile-web.html"/>
   <updated>2011-06-04T00:00:00-07:00</updated>
   <id>http://working-code.com/2011/06/04/wtf-is-the-mobile-web</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR: Those who don&amp;rsquo;t know history are destined to repeat it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been pretty busy on my latest project, so I&amp;rsquo;ve only been able to
dip into Twitter here and there. Lately, I&amp;rsquo;ve seen a lot of people I
follow &lt;em&gt;waxing idiotic&lt;/em&gt; over whether or not they should be building
native, hybrid or Mobile Web applications. I like and respect a lot of
these people, but the fact that this is even a discussion topic makes me
shake my head in disgust. I pretty much expect this question from
developers, but when I see designers and entrepreneurs wasting their
time on this it annoys me no end. Let me spell it out for you:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Who Cares?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Seriously? More importantly, &lt;em&gt;do your customers care?&lt;/em&gt; THAT should be
your criteria. However, if you really need instruction in this area I&amp;rsquo;ll
be happy to assist you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If your customers care about the platform, &lt;strong&gt;build native&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you care about the platform, &lt;strong&gt;build native&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you are going for broad reach and your app fits the Web model,
&lt;strong&gt;build for the Web&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you built a Web application, but you or your customer need to
deploy it in an app store for some reason, either &lt;strong&gt;make a hybrid
application&lt;/strong&gt; using a tool like &lt;a href=&quot;http://www.phonegap.com/&quot;&gt;PhoneGap&lt;/a&gt; or
&lt;strong&gt;rewrite it as a native app&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;To be fair, I understand why designers and entrepreneurs can be tricked
into thinking that there is an important decision point here. It&amp;rsquo;s
because developers have an agenda that&amp;rsquo;s different from theirs.
Designers and entrepreneurs are focused on the user experience while
developers are focused on their own productivity, technical merit and
engaging in flamewars. I&amp;rsquo;m grossly stereotyping both camps, but I think
my points will still be valid.&lt;/p&gt;

&lt;p&gt;Most designers and entrepreneurs are technical enough to be dangerous.
However, they are usually &lt;strong&gt;not&lt;/strong&gt; technical enough to engage in a
prolonged technical debate with a developer. And, &lt;strong&gt;that&lt;/strong&gt; tends to be
their undoing.&lt;/p&gt;

&lt;h1&gt;The Developers' Fountain of Youth&lt;/h1&gt;

&lt;p&gt;Or, silver bullet or goose that laid the golden egg. Whatever you want
to call it. &lt;strong&gt;I&lt;/strong&gt; call it the &lt;em&gt;fool&amp;rsquo;s errand&lt;/em&gt; that every developer ends
up chasing&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The ultimate cross-platform development tool.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For those of us old enough to remember the early days of the Windows vs.
Mac debates, the current battles between Android and iOS seem&amp;hellip;quaint.
Let me drop some names on you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;zApp&lt;/li&gt;
&lt;li&gt;Wind/U&lt;/li&gt;
&lt;li&gt;InterViews&lt;/li&gt;
&lt;li&gt;Visual C++ 2.0 Cross-Platform Edition for Macintosh&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These were but &lt;strong&gt;some&lt;/strong&gt; of the tools that were sold that purported to
allow a developer to write cross-platform application code. They all
worked to varying degrees. They were expensive and had huge learning
curves. They either took a Least Common Denominator (LCD) or Greatest
Common Multiple (GCM) approach.&lt;/p&gt;

&lt;p&gt;They all failed.&lt;/p&gt;

&lt;p&gt;In the end, these tools only served two audiences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bean counters: looking to save money on costly developers for every
platform they needed to support&lt;/li&gt;
&lt;li&gt;Developers: looking to find a way to deal with the &lt;strong&gt;incredibly hard
work&lt;/strong&gt; of developing applications on multiple platforms&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Cross-platform development has always been and will always be incredibly
difficult, no matter what your toolset. Platforms are inherently
different. And people are attracted to those platforms because of those
differences. So, when developers try to homogenize platforms by using
cross-platform toolkits, they also alienate potential customers.&lt;/p&gt;

&lt;p&gt;Macintosh users may remember the hated Microsoft Word 6.0. There was a
high profile attempt to develop a cross-platform application using a
shared codebase. Unfortunately, while Microsoft successfully achieved
their goal Word 6.0 was a dog. It acted like a Windows application, just
running on the Mac. If Mac users wanted Windows, they&amp;rsquo;d have been running
Windows on some PC clone! Somehow, the Redmondtonians missed that little detail.&lt;/p&gt;

&lt;p&gt;Developers always attempted to save time and effort via cross-platform
development. To support both Windows and the Macintosh was more than an
issue of hardware and superficial UI differences. The differences ran
&lt;strong&gt;deep&lt;/strong&gt;. Different languages, toolsets, programming models, windowing
models, networking stacks&amp;hellip; the list went on and on. And for corporate
developers especially, they needed to get apps done quickly. For
commercial developers, their major bugaboo was support. Cross-platform
tools to the rescue.&lt;/p&gt;

&lt;p&gt;Except they weren&amp;rsquo;t. And people wanted their apps to behave &lt;em&gt;natively&lt;/em&gt;
on their platform of choice. It mattered. It still does.&lt;/p&gt;

&lt;h1&gt;Then, Along Came The Web&lt;/h1&gt;

&lt;p&gt;Tim Berners-Lee invented the World Wide Web. Marc Andreessen made NCSA
mosaic, which begat Netscape Navigator. And, a subsequent development
solved the cross-platform development issue once and for all.&lt;/p&gt;

&lt;p&gt;If you said &lt;em&gt;Ajax&lt;/em&gt;, you&amp;rsquo;d be wrong. It was the Common Gateway
Interface, or &lt;strong&gt;CGI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You see, at least for corporate developers, most applications were (and
still are) master-detail views on top of a database. Web browsers had
their own conventions that were simple and functional. As people started
to spend more of their time in browsers, the containing platform became
less of an issue for most people. Forms and CGI led to applications that
ran in the browser, mostly consistently.&lt;/p&gt;

&lt;p&gt;This was the true inflection point, though very few noticed. When Google
released GMail and Google Maps, the point was emphasized even more. Many
types of applications could be built on the Web platform instead of the
native one and users could be satisfied. Some apps would still benefit
from being native, either due to a necessarily complex user interface or
demanding CPU and I/O requirements. However, each new generation of
hardware would reduce the number of applications that fit those
criteria. Yet, no matter how capable Web applications have become some
users just &lt;strong&gt;prefer&lt;/strong&gt; native applications and how they &lt;em&gt;feel&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;Mobile Web, Mobile Context, Mobile First&amp;hellip;STFU&lt;/h1&gt;

&lt;p&gt;Seriously, shut up. Your ignorance is showing. Listening to all of these
wannabe pundits, intellectuals and &lt;em&gt;thought leaders&lt;/em&gt; is like listening
to Sarah Palin giving a history lesson about &lt;a href=&quot;http://www.youtube.com/watch?v=oS4C7bvHv2w&quot;&gt;Paul Revere&amp;rsquo;s ride&lt;/a&gt;. It&amp;rsquo;s embarrassing.&lt;/p&gt;

&lt;p&gt;The Web is an application on the Internet. Nowehere in the definition of
the Web is any restriction on the type of device or application that can
work with it. There is an application protocol, HyperText Transport
Protocol (HTTP). Using that protocol is the main prerequisite for
participating on the Web.&lt;/p&gt;

&lt;p&gt;If you want to be pedantic, you can also assert that to be on the Web
you must deal with documents and links. I&amp;rsquo;d even grant you that&amp;hellip;that
would be the damn definition of &lt;em&gt;the Web&lt;/em&gt;. A Web of interconnected
documents (or data). I&amp;rsquo;m not going to argue about One Web &amp;lsquo;cause that&amp;rsquo;s
a stupid argument that took a simple idea out of context. And prefixing
&amp;ldquo;Web&amp;rdquo; with modifiers like &lt;em&gt;One&lt;/em&gt;, &lt;em&gt;Social&lt;/em&gt;, &lt;em&gt;Semantic&lt;/em&gt; and &lt;em&gt;Mobile&lt;/em&gt; just shows that
you don&amp;rsquo;t understand the Web. (&lt;em&gt;even TBL backed off the Semantic Web and
went with Linked Data to describe what he was trying to achieve&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;I understand that the new generation of browsers have given you even
more powerful implementations of JavaScript and you&amp;rsquo;re finally realizing
how powerful that language truly is. It&amp;rsquo;s great that you can now use
CSS3 to declaratively do things that were once the province of animation
engines. And HTML5 is evolving into a markup language for applications
as well as documents.&lt;/p&gt;

&lt;p&gt;But, if you try to use Web technology to faithfully replicate &lt;strong&gt;native&lt;/strong&gt;
applications you are making &lt;em&gt;exactly the same mistake the cross-platform
toolkit vendors made&lt;/em&gt;. The Web is The Web is The Web. Period. Embrace
it. Design for it. Develop for it. Leverage its capabilities no
matter what the client device happens to be. But, respect it as its own
entity.&lt;/p&gt;

&lt;h1&gt;We&amp;rsquo;re All Lazy&lt;/h1&gt;

&lt;p&gt;When you say &lt;em&gt;Mobile Web&lt;/em&gt;, I hear &lt;em&gt;The Web&lt;/em&gt;. When you say &lt;em&gt;the Cloud&lt;/em&gt;, I
hear &lt;em&gt;the Internet&lt;/em&gt;. At the end of the day, most applications today are
Internet-enabled applications. We tend to use &lt;strong&gt;the Web&lt;/strong&gt; because HTTP
has pretty much become the de facto network protocol. Again, I&amp;rsquo;ll show
my age by name-dropping some more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FTP&lt;/li&gt;
&lt;li&gt;Gopher&lt;/li&gt;
&lt;li&gt;z39.50&lt;/li&gt;
&lt;li&gt;Kermit&lt;/li&gt;
&lt;li&gt;NNTP&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Heard of any of those? Did you use any of the clients back in the day?
If so, you know that HTTP eventually overtook them all as it provided
the primitives that could satisfy the functions of most of those other
protocols. But, there was a time when developers would actually
&lt;strong&gt;create&lt;/strong&gt; application protocols over TCP/IP. However, as the Web became
the preferred choice for users developers did the pragmatic thing and
built their applications atop HTTP. This allowed them to focus on the
value their application could provide instead of getting bogged down in
infrastructure.&lt;/p&gt;

&lt;p&gt;The unfortunate side effect of all of this is that developers rarely
venture outside of the constraints of the Web. How often have developers
opted to create a new protocol in order to power a new type of
application. Hardly ever. They tunnel their data over port 80 and bitch
about the results. Or, they bend over backwards trying to make HTML
scroll as smoothly as a UIScrollView. Madness.&lt;/p&gt;

&lt;h1&gt;Technology Supports User Experience, Not The Other Way Around&lt;/h1&gt;

&lt;p&gt;Native vs. hybrid vs. Web is masturbation for technologists. There&amp;rsquo;s no
polite way to say it. The problem you are trying to solve informs the
user experience you will try and create. That user experience will lend
itself to a particular technology solution. Stop letting developers
compromise user experience to satisfy their technical agenda. &lt;em&gt;I&amp;rsquo;m
telling you this as a developer!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Granted, there will always be some perfectly valid reason for engaging
in this debate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Availability of developers&lt;/li&gt;
&lt;li&gt;Cost of development&lt;/li&gt;
&lt;li&gt;Number of platforms&lt;/li&gt;
&lt;li&gt;Inability to predict the future&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thing is, all of the items above are outside your control. If they
prevent you from following the guidelines I provided at the beginning of
this essay then, I hate to say it, &lt;strong&gt;you&amp;rsquo;re screwed&lt;/strong&gt;. And, if you&amp;rsquo;re
that screwed, the argument is meaningless. You can&amp;rsquo;t execute so now
you&amp;rsquo;re just navel gazing.&lt;/p&gt;

&lt;p&gt;However, if you are actually in the position to develop an application
there is only one Golden Rule&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus on your users' needs, not your own.&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On Managing Software Projects</title>
   <link href="http://working-code.com/2011/03/06/on-managing-software-projects.html"/>
   <updated>2011-03-06T00:00:00-08:00</updated>
   <id>http://working-code.com/2011/03/06/on-managing-software-projects</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: There is no such thing as &lt;em&gt;managing a software project.&lt;/em&gt; &lt;strong&gt;Eliminate the management functions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every development manager has a routine that involves a set of different tools. For instance, most mornings I log in and do a scrub for new bugs in our proprietary bug tracking tool. For each of my projects, I look at the state of our ongoing feature development in our feature tracking tools. On one project, we are using an in-house Scrum tool. On the other, we use &lt;a href=&quot;http://pivotaltracker.com&quot;&gt;Pivotal Tracker&lt;/a&gt;. Multiple times during the day, I get email notifications with new git commit messages. I, of course, can ignore these if I want because I can also get the RSS feed for this. No matter the medium, I am interested in the actual content of the commit messages. I also have iChat and my mail client open all day long, since the bulk of my job is about communication. People have questions for me or ask questions of others that I know will open Pandora&amp;rsquo;s Box. So, I need to stay on top of those. I try to keep our wiki up to date, but occasionally I fall behind. Every few weeks I do some wiki gardening to keep the content fresh. Mostly, I use the wiki as an aggregation point to collect data from all the previous systems and make it consumable to all the various interested parties. That way when I am asked for information I can give them the answer and, more importantly, a URL.&lt;/p&gt;

&lt;p&gt;All of this is fine, but the thing that has historically driven me insane are the meetings. Not all meetings, of course. Just the inane, redundant and self-important status meetings that are often called by project managers. Often, those meetings are called to educate them (the project managers) about the current state of the project. The irritating aspect of this is that oftentimes it is the project managers that get involved in tool selection because &lt;strong&gt;they&lt;/strong&gt; are the ones that need to roll up status information in order to communicate to stakeholders. And yet, even when they get a seat at the table they remain unable to either understand or communicate accurately the state of the project.&lt;/p&gt;

&lt;p&gt;Software project management, both tooling and process, is &lt;strong&gt;fundamentally broken&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;One Size Does Not Fit All&lt;/h1&gt;

&lt;p&gt;First, let me establish the context. Here are the types of software projects, I am &lt;strong&gt;NOT&lt;/strong&gt; talking about in this post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In-house, internal applications&lt;/li&gt;
&lt;li&gt;Software developed by consultants/contractors for SMBs or enterprise customers&lt;/li&gt;
&lt;li&gt;Game development&lt;/li&gt;
&lt;li&gt;Embedded systems&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Instead, I will focus on commercial software projects intended for consumers and professionals. While it more directly applies to Web-based software, I contend that a lot of the points would also apply to desktop software assuming that one can let go of historical artifacts of the development process.&lt;/p&gt;

&lt;p&gt;Earlier, I mentioned that on one of my projects we used an in-house Scrum tool. I was asked to be a stakeholder during the development of this project. I made it very clear that I was against the project, but would give (mostly) constructive criticism. Why was I against the project? Two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There was an abundance of existing Scrum tools, Open Source and commercial, that either had all the features we needed or had APIs/plugins that we could use to extend and integrate with our other systems.&lt;/li&gt;
&lt;li&gt;One tool cannot work for both &lt;em&gt;development teams&lt;/em&gt; and &lt;em&gt;stakeholders&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Time and time again, internal tools teams would be formed to create a tool or a system that development teams would use in order to generate metrics which project/program managers would then utilize in their reporting. Things to note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Development teams almost never were the ones asking for these tools&lt;/li&gt;
&lt;li&gt;Project/program managers were almost &lt;strong&gt;always&lt;/strong&gt; the ones asking for these tools&lt;/li&gt;
&lt;li&gt;These projects were almost always unnecessarily complex, expensive and delivered late&lt;/li&gt;
&lt;li&gt;Many development teams would either not use the tool or get their project/program manager to do the data entry (&lt;em&gt;can you say self-reported data is useless?&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The constructive criticism I offered in the early stages of this tool&amp;rsquo;s development was to &lt;em&gt;stop trying to force status gathering tools down development teams' throats&lt;/em&gt;. All of these tools try to address two, distinctly different audiences. They target development teams who essentially need a prioritized task tracker, where tasks can be stories, features, issues, bugs, chores, cases, &amp;lt;&lt;em&gt;insert your terminology here&lt;/em&gt;&amp;gt;, etc. In addition, they target project managers by introducing features like work breakdown structures (WBS), estimating, standard reports, custom reports, reporting engines, etc.&lt;/p&gt;

&lt;p&gt;The problem with almost all of these tools is that there is a huge disconnect between the data that the development team works with on a daily basis and the information that a project manager is trying to collect and disseminate. So, these tools end up taking the same failed approach as &lt;a href=&quot;http://en.wikipedia.org/wiki/Knowledge_Management&quot;&gt;knowledge management systems&lt;/a&gt;. They attempt to change or add to a development team&amp;rsquo;s workflow without adding any benefit &lt;em&gt;for the development team&lt;/em&gt;. Without any real incentive, these systems fall into disuse or become yet another silo of unreliable project information.&lt;/p&gt;

&lt;p&gt;The concrete advice I gave was for project/program management to figure out the types of reports and graphs they wanted to create and then define the data that would support them. Since every team worked differently, it made no sense to get them to all use the same tool. However, if you told teams &amp;ldquo;&lt;em&gt;Use whatever tool you like, as long as you can export this data for us.&lt;/em&gt;&amp;rdquo; Essentially, project/program management needed a data warehouse so they could slice and dice metrics till they were blue in the face. Development teams probably generated the bulk of this data in their day to day work anyway, but it wasn&amp;rsquo;t getting captured in a form that was usable to stakeholders. Unfortunately, if teams are forced to use a tool that does nothing for them it doesn&amp;rsquo;t get used and the data is not generated or remains where it originated. If the data can be pushed from developers' existing toolchain into the data warehouse, project/program managers would be happy. If developers had to make minimal, if any, changes to their workflow and could remove mindless status meetings from their lives they would be happy. Win-win.&lt;/p&gt;

&lt;p&gt;So, why does the current situation still persist? Precisely because organizations still employ traditional project managers and create hierarchical organizational structures. This breeds a culture where a significant portion of the population is given the job of collecting and spreading information. The fact that this is probably better accomplished by well-designed software is irrelevant. Command and control is still the norm, unfortunately, in many software development shops. I suspect that this is due to a combination of project managers wanting to demonstrate value to the organization as well as a general lack of trust. The Agile movement has tried to address these issues, but I think that all they have done is create an environment in which consultants can peddle shiny, new &lt;strong&gt;Agile tools&lt;/strong&gt; to the project managers.&lt;/p&gt;

&lt;h1&gt;We&amp;rsquo;re Doing This Ass Backwards&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s start with one of the core problems in software project management: determining the current state of the project. I propose The Simplest Thing That Could Possibly Work for solving this problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Give everyone the URL for the latest known working version of the application. This application is continuously built and deployed.&lt;/li&gt;
&lt;li&gt;For desktop software, see previous step.
This may sound patronizing, but you&amp;rsquo;d be surprised by how often this isn&amp;rsquo;t done. However, one could follow these steps and still not communicate status effectively. So, let&amp;rsquo;s add a step:&lt;/li&gt;
&lt;li&gt;Conduct a regular (weekly or bi-weekly) demo meeting to show the latest features of the application.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;There is &lt;strong&gt;absolutely, positively no substitute for working software&lt;/strong&gt; when it comes to communicating status. Every other approach is more ambiguous, numeric scales, percentage complete, red-yellow-green and so forth are completely subjective. Now, there is ambiguity with working software as well. The team can say that a feature is done, but the demo can surface missing or misunderstood functionality. Still, &lt;strong&gt;that&lt;/strong&gt; communicates status more effectively than any scalar value in a status report.&lt;/p&gt;

&lt;p&gt;This incredibly simple system has &lt;strong&gt;one fatal flaw&lt;/strong&gt;. At least, it appears to be fatal flaw to project/program managers. This type of status does not convey whether or not the software will be ready &lt;em&gt;on schedule&lt;/em&gt;. I contend that &lt;strong&gt;Schedule-Driven Development&lt;/strong&gt; is the fatal flaw at the heart of most software projects. Even though it has pretty much been proven that it is difficult, if not impossible, to predict with sufficient precision when a software project will be done we keep using management methods based on that principle.&lt;/p&gt;

&lt;p&gt;Instead of driving towards a date, teams should drive towards a &lt;strong&gt;scope&lt;/strong&gt;. This is embodied in the practices of &lt;a href=&quot;http://oreilly.com/catalog/9780596517311&quot;&gt;Lean Software Development&lt;/a&gt; and &lt;a href=&quot;http://www.startuplessonslearned.com/2008/09/lean-startup.html&quot;&gt;Lean Startups&lt;/a&gt;. Essentially, you should be doing this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initially, define your Minimum Viable Product (MVP) and create your backlog&lt;/li&gt;
&lt;li&gt;Incrementally build and deploy the features for your MVP&lt;/li&gt;
&lt;li&gt;When you&amp;rsquo;ve implemented your last MVP feature, &lt;strong&gt;ship it!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Gather feedback and metrics from your MVP launch&lt;/li&gt;
&lt;li&gt;Add features to your backlog, refine and re-prioritize&lt;/li&gt;
&lt;li&gt;Implement your next set of features&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ship them!!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Go back to Step 4&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Now, of course, there are scenarios where the date is more important. However, that is more the exception than the rule these days. Unless you are targeting the holiday shopping season or tax season, how much does a date on the calendar determine your business success? Schedule-driven development is mostly historical due to the logistics of shipping boxed software. In a network economy, that is less of an issue minus a few outliers. Moving to Scope-Driven Development is a huge cultural shift and not all organizations will make the transition.&lt;/p&gt;

&lt;h1&gt;The Other Customer&lt;/h1&gt;

&lt;p&gt;Now, that I&amp;rsquo;ve beaten up on project/program management sufficiently (&lt;em&gt;actually, I could probably keep going on that subject for a while&lt;/em&gt;) let&amp;rsquo;s look at the other customers of software project management tools and processes. The development team.&lt;/p&gt;

&lt;p&gt;Aside from their editors or IDEs (or design tools&amp;hellip;designers are developers, too!), what tools are essential for the development team?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email (still. unfortunately.)&lt;/li&gt;
&lt;li&gt;Instant messenger&lt;/li&gt;
&lt;li&gt;Version Control&lt;/li&gt;
&lt;li&gt;Automated tools (e.g. continuous integration tools, monitoring systems, etc.)&lt;/li&gt;
&lt;li&gt;Bug/Issue Tracker&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Essentially, these are all &lt;em&gt;communication tools&lt;/em&gt;. All of these tools are needed because the &lt;em&gt;what&lt;/em&gt; and the &lt;em&gt;how&lt;/em&gt; of the communication varies and requires different solutions. That said, they all have the same flaw. Each tool maintains its own &lt;strong&gt;information silo&lt;/strong&gt;. The value to individual members of the team and the team as a whole is the ability to &lt;strong&gt;aggregate&lt;/strong&gt; and &lt;strong&gt;filter&lt;/strong&gt; the information in these various silos using a &lt;em&gt;single tool&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Why a single tool? Because as the number of tools that contain relevant information increases, the more difficult it is to get teams to adopt them. There are a handful of tools that a developer will keep running all day long. Those are the ones that are critical to their workflow. Some will always have the focus, while others will be in the background but always easily accessible. An example of this would be a developer&amp;rsquo;s editor and shell (or IDE) and IM client. The editor is the focal point as that&amp;rsquo;s where the code is manipulated and the shell is used to run auxiliary processes surrounding development. The IM client is there for asking quick questions to individuals or the team asynchronously and receiving notifications from automated processes.&lt;/p&gt;

&lt;p&gt;Small teams and startups have adopted group chat tools like &lt;a href=&quot;http://campfirenow.com/&quot;&gt;Campfire&lt;/a&gt; and &lt;a href=&quot;https://www.hipchat.com/&quot;&gt;HipChat&lt;/a&gt; as essential tools for their workflow. They offer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Realtime collaboration&lt;/li&gt;
&lt;li&gt;Persistent chat rooms&lt;/li&gt;
&lt;li&gt;Ad hoc file sharing&lt;/li&gt;
&lt;li&gt;Plug-ins/integration with external tools&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These group chat tools can replace email and generic IM for most teams, while acting as the aggregation/filter mechanism by acting as a sink for version control tools, other automated tools and your issue tracker. Still, these tools are intended for generic team collaboration. There is still room for a tool that is designed around the specific needs of a software development team.&lt;/p&gt;

&lt;h1&gt;Winning&lt;/h1&gt;

&lt;p&gt;In my opinion, traditional software project management has been dead for a while. The tools and processes have not kept up primarily because the incentives weren&amp;rsquo;t there. Large software companies try to adopt agile practices, but their very organizational structure and culture prevent real agility from taking hold. Thus, a tool vendor builds and sells the tools that will generate revenue, not change.&lt;/p&gt;

&lt;p&gt;The tool I want is designed for &lt;strong&gt;the development team&lt;/strong&gt;. It&amp;rsquo;s primary focus should be on the realtime collaboration interface. It should assume little about any individual&amp;rsquo;s or team&amp;rsquo;s workflow. This tool should have a powerful plugin/integration model so as new, powerful tools become available they can be seamlessly integrated into this new &lt;strong&gt;developer&amp;rsquo;s HUD (heads-up display)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;More importantly, the developer&amp;rsquo;s HUD can act as one of many sources for a team-wide data warehouse. The data that flows through it can be selectively funneled to the warehouse where stakeholders can retrieve their &lt;em&gt;status substitutes&lt;/em&gt; if they so desire. Ideally, they would get what they need from the regular demos but I&amp;rsquo;ll be pragmatic. Change don&amp;rsquo;t come easy.&lt;/p&gt;

&lt;p&gt;The data warehouse, though, can be useful for the team as well. Being able to perform analytics on team dynamics and behavior has value. But, it should be optional and possibly even serendipitous. No one wants a prescriptive knowledge management system, but an empirical one might be useful.&lt;/p&gt;

&lt;p&gt;I started this post describing my current workflow. It seems obvious to me how a more refined version of Campfire or HipChat could replace 3-5 of those tools. But, that&amp;rsquo;s just the easy part of the problem I want to solve.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do I change the culture at my company?&lt;/li&gt;
&lt;li&gt;How do I change the culture at other companies?&lt;/li&gt;
&lt;li&gt;How do I redefine or eliminate traditional software project management?&lt;/li&gt;
&lt;li&gt;How do I help teams effectively communicate and successfully build and launch software?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I may have just defined my next side project. Looks like a big one.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Frame(work) of Reference</title>
   <link href="http://working-code.com/2011/02/21/framework-of-reference.html"/>
   <updated>2011-02-21T00:00:00-08:00</updated>
   <id>http://working-code.com/2011/02/21/framework-of-reference</id>
   <content type="html">&lt;p&gt;A lot of people think that because I like Ruby I must do Web development using Ruby on Rails. They would be wrong. Actually, I tend to prefer &lt;a href=&quot;http://www.sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt;. What?!? I&amp;rsquo;m not on the bandwagon with everyone else? How could this be?&lt;/p&gt;

&lt;h1&gt;Microsoft Foundation Classes (MFC) vs ObjectWindows Library (OWL)&lt;/h1&gt;

&lt;p&gt;In the early nineties, I was writing code on the Microsoft Windows platform &lt;em&gt;(shock!)&lt;/em&gt;. I had previously been developing command line applications on DOS and Unix and was trying to learn Windows. My first glance at the Windows API invoked my gag reflex. They reminded me too much of X-Windows' needless complexity. Luckily, many vendors like Whitewater Group were trying to make object-oriented development tools for Windows, such as Actor. I was a budding OO enthusiast and liked C++, but there were few good tools for that language.&lt;/p&gt;

&lt;p&gt;Then, Microsoft C/C++ 7.0 came out with the Microsoft Foundation Classes (MFC), soon to be followed by Visual C++ 1.0. MFC looked to be the solution, a class library that encapsulated the Windows API. Unfortunately, MFC was a &lt;em&gt;thin wrapper&lt;/em&gt; around the Windows API. It was so thin, in fact, that I wondered why Microsoft bothered. It barely abstracted &lt;strong&gt;anything&lt;/strong&gt;. What was the point?&lt;/p&gt;

&lt;p&gt;Fortunately, Borland International came out with Borland C++ and the ObjectWindows Library (OWL). OWL had much better abstractions, in my opinion, than MFC. For instance, you could write something as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TBitmap bitmap = new TBitmap(&quot;path to bitmap file on disk&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;whereas MFC required half a page of code (at the time) to perform one of the most basic functions anyone working with graphics at the time needed to do.&lt;/p&gt;

&lt;p&gt;So, like most developers, I would evangelize my tool selection to all my co-workers. One of my colleagues, who would eventually become my mentor, would push back and tell me to learn MFC and more importantly, the Windows API. Our conversations would tend to go like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Me: OWL!
Him: MFC!
Me: OWL!
Him: Noob!
Me: Fight!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eventually, he won the argument (he was senior to me) and, of course, I was bummed. &lt;em&gt;OK, I was pissed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;One of our projects was an early entrant in the streaming media race, around the same time Real Networks came out. I was debugging some code for our control protocol when other team members starting reporting playback problems on Win95. Hours of frustrated debugging had us going into the MFC source code. The MFC source code took us down the Windows API route. A few support calls to Microsoft finally uncovered the problem, a discrepancy in the Windows Multimedia APIs between Windows 95 and Windows NT.&lt;/p&gt;

&lt;p&gt;This experience allowed me to finally understand the point my mentor had been trying to make. At some point, your problems become complex enough that you need to know how things work &lt;strong&gt;at the lowest levels&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;Web Frameworks&lt;/h1&gt;

&lt;p&gt;After that experience, I got pretty serious into Web development. I started with Active Server Pages (ASP) and VBScript since I was still a Microsoft guy at the time. Then, I switched to Java, Java Servlets and Java Server Pages (JSP) for quite some time. During this period, there were tons of frameworks popping up like Velocity, Freemarker and Struts. And, of course, when J2EE hit the scene people lost their damn minds.&lt;/p&gt;

&lt;p&gt;I, stubbornly, stuck to servlets and JSP with JDBC for accessing the database. Why? &amp;lsquo;Cause they &lt;strong&gt;worked&lt;/strong&gt;. The fundamental nature of the Web had not changed with these new frameworks. The HTTP request/response cycle had not changed. You were still getting a request on a socket with some environment variables and a body. You were still setting some headers and returning a body and a response code. When you needed data from the database, you still were generating a SQL statement that had to hit the database.&lt;/p&gt;

&lt;p&gt;Fast-forward several years and I was trying to decide between learning Python or Ruby. I had started poking around with Python, but due to all the talk about how awesome Rails was I started playing with it. Ruby was indeed a nice language, but Rails smelled like OWL to me. Nice abstractions, but hiding the bare metal too much.&lt;/p&gt;

&lt;p&gt;Not long after, people started talking about Merb. Merb tried to address the performance and modularity problems of Rails at the time. When the time came to select a framework for our Web service, we started prototyping in Rails but immediately switched to Merb. Merb was minimalist and modular (for a while). As Merb evolved, we hit a few frustrations with it as some core features kept changing. But, it eventually hit 1.0 and stabilized a little. Then, the Merb project decided to merge with Rails.&lt;/p&gt;

&lt;p&gt;That story is well-documented so I won&amp;rsquo;t rehash it here. However, I was concerned. Merb originally arose out of the inability to get certain things in Rails fixed. This would no longer be the case. However, how many of the features and opinions that we appreciated in Merb would survive the Rails transition?&lt;/p&gt;

&lt;p&gt;More importantly, how much was Merb helping us? A few of the frustrations we had were caused by &amp;ldquo;magic&amp;rdquo; that the Merb developers introduced to make the framework more friendly. Ironically, one of the things that the Merb team railed against (pun intended) was Rails extensive use of metaprogarmming &amp;ldquo;magic&amp;rdquo;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Frameworks are very good at generic tasks. They?re meant to be: they abstract away common difficulties. But as applications grow in scale, they need to get more and more domain specific to be able to deal with scale.
As your site grows, you start to feel a bit of pain, and need to replace some bits of the framework with domain specific bits. This usually isn?t too bad: most frameworks, Django included, are modular enough that you can easily swap out the more common non-scalable bits.
Then one day you become Twitter, and all hell breaks loose. You end up having to essentially ditch the framework and re-write everything, from scratch, in very very specific ways, just to deal with the crazy, mind-boggling amounts of traffic you?ve got.
Frameworks work incredibly well to get you off the ground quickly? and then usually fail miserably when faced with the specific needs of big sites.
Frameworks ought to gracefully fade away as you replace them, bit by bit, with domain-specific code. Right now, they don?t.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jacobian.org/writing/snakes-on-the-web/&quot;&gt;Jacob Kaplan-Moss, Snakes on the Web&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Enter Sinatra. Sinatra is a simple domain-specific language (DSL) for creating Web applications. It is a thin layer over the &lt;a href=&quot;http://rack.rubyforge.org/&quot;&gt;Rack&lt;/a&gt; specification. Rack, like WSGI in Python which inspired it, is essentially the Common Gateway Interface (CGI) done right. Rack encapsulates a CGI-like approach for interfacing Web servers with applications. Sinatra models a language that is pretty much HTTP. The DSL methods map to the standard HTTP methods and match against URL patterns. The code within the Ruby block executes when there is a match of the incoming HTTP request.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. No magic. A simple Ruby library that implements a DSL that is a thin wrapper for HTTP. You can actually read the code for Sinatra and Rack in an afternoon. Debugging is simpler as you can look at the URL for the part of your application that is misbehaving and pretty easily find the Ruby block that is executing code for that URL.&lt;/p&gt;

&lt;p&gt;Sinatra lacks some of the Model-View-Controller niceties that Rails provides. However, frameworks like &lt;a href=&quot;http://www.padrinorb.com/&quot;&gt;Padrino&lt;/a&gt; puts some of this functionality back while preserving the minimalist nature of Sinatra. This is accomplished through the application of &lt;strong&gt;Rack middleware&lt;/strong&gt;. Middleware are just Rack applications that can be chained together, like Unix pipes. Another model of simplicity.&lt;/p&gt;

&lt;p&gt;A lot of these opinions hold for &lt;strong&gt;object-relational mappers (ORMs)&lt;/strong&gt; as well. At the end of the day, the ORM is generating SQL. If it generates inefficient SQL (as ActiveRecord in Rails used to do) and you don&amp;rsquo;t know SQL, how can you address your problems? Try explaining to your users and/or customers that your site is down because you were afraid to learn a little SQL.&lt;/p&gt;

&lt;p&gt;HTTP and SQL are pretty much the &lt;strong&gt;true&lt;/strong&gt; foundations of Web application development. As are HTML, CSS and JavaScript. These are the most basic tools you need to have in your toolbox and you need to know them well. Once you do, you can then choose tools that eliminate some of the drudge work, but choose wisely! Your tools should help you &lt;em&gt;do&lt;/em&gt; the job, not &lt;strong&gt;be&lt;/strong&gt; the job.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>There IS an "I" in Team</title>
   <link href="http://working-code.com/2011/02/17/there-is-an-i-in-team.html"/>
   <updated>2011-02-17T00:00:00-08:00</updated>
   <id>http://working-code.com/2011/02/17/there-is-an-i-in-team</id>
   <content type="html">&lt;p&gt;A little over a week ago the team at &lt;a href=&quot;http://datagraph.org&quot;&gt;Datagraph&lt;/a&gt; launched &lt;a href=&quot;http://dydra.com&quot;&gt;Dydra&lt;/a&gt;, an RDF cloud service. I immediately congratulated &lt;a href=&quot;http://twitter.com/bendiken&quot;&gt;Arto&lt;/a&gt; via Twitter. You see, his small team launched exactly what I had been building at Adobe for a couple of years. In fact, that&amp;rsquo;s how I &amp;ldquo;met&amp;rdquo; Arto. We had been neck deep in the world of metadata and came across &lt;a href=&quot;http://rdf.rubyforge.org&quot;&gt;RDF.rb&lt;/a&gt;, a &lt;strong&gt;fantastic&lt;/strong&gt; Ruby library. One of my engineers, &lt;a href=&quot;http://twitter.com/seacycle&quot;&gt;John&lt;/a&gt; forked it and submitted a few patches to it as we were going to replace our existing Ruby RDF library with it. Since then, I&amp;rsquo;ve followed Datagraph&amp;rsquo;s work and GitHub projects even though they were in stealth mode. I suspected all along that they were building the same thing we were, but who cares? We&amp;rsquo;re not playing a zero-sum game here; there&amp;rsquo;s room for everyone at this party.&lt;/p&gt;

&lt;p&gt;While I was (and still am) completely excited and happy for Arto and crew, I was also a little annoyed. My team spent about 2 years building this service. So, did Datagraph. The only difference is &lt;em&gt;we were a year ahead of them&lt;/em&gt;. Looking through their site, we had pretty much all the same features they had at launch (plus one or two features they &lt;strong&gt;don&amp;rsquo;t&lt;/strong&gt; have). We had roughly the same size team as they did and our technology stacks were similar. The only difference? I worked at a large company. They didn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;This post details the history of my project and the lessons I learned. While this is mostly cathartic for me, I am hoping that others get some benefit from this war story.&lt;/p&gt;

&lt;h1&gt;&amp;ldquo;What Do We Work On Next?&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;This was the question that what was left of my team asked me after the train wreck that was our component of Creative Suite 3. THAT story will be the subject of a separate blog post. So here I was with only 2 engineers, John and &lt;a href=&quot;http://twitter.com/stevebalo&quot;&gt;Steve&lt;/a&gt; and not much to do. We helped fix bugs in Acrobat for a couple of months, but that was just busywork.&lt;/p&gt;

&lt;p&gt;I was tired of desktop software (again) and wanted to get back into Web applications and Web services. At the time, we were in Adobe&amp;rsquo;s Core Technology group. However, we were pretty much outcasts. That group prided itself on working on &amp;ldquo;high science&amp;rdquo; problems and we were just a bunch of generalists who liked to play with cutting edge technology. The CoreTech team mostly delivered C++ libraries for integration in the point products and Suites.&lt;/p&gt;

&lt;p&gt;Given that model, I proposed that CoreTech move into services. We should take our delivery model and apply it to services in addition to libraries. In fact, I suggested that we review our portfolio of components and see what made sense as a service. Since no one on my team was a graphics or text layout expert, we settled on metadata. We all understood what metadata was and how it could be applied. In the context of a Web service, we decided to build a multi-tenant metadata repository on top of Adobe&amp;rsquo;s &lt;a href=&quot;http://www.adobe.com/products/xmp&quot;&gt;Extensible Metadata Platform (XMP)&lt;/a&gt; libraries. As we were building atop XMP, we initially codenamed our service &lt;strong&gt;xmplary&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;&amp;ldquo;I Don&amp;rsquo;t Want To Wear A Beeper&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s what our VP said. He had worked at Real Networks and didn&amp;rsquo;t want to deal with servers and on-call rotations. Never mind the fact that the company was moving in this direction and that our organization was having a harder and harder time securing funding. My proposal was that we become an internal version of &lt;a href=&quot;http://aws.amazon.com&quot;&gt;Amazon Web Services&lt;/a&gt;, but providing Web services that leveraged Adobe&amp;rsquo;s intellectual property for use by Adobe teams and third-party developers.&lt;/p&gt;

&lt;p&gt;We basically got the go-ahead to prototype or &lt;em&gt;play-to-learn&lt;/em&gt;. Primarily, it was a decision made to shut us up, keep us busy and out of the way. That was fine by us. We moved up to the third floor of the Seattle office behind a conference room. Out of sight, out of mind.&lt;/p&gt;

&lt;p&gt;We started simple at first. Steve created a Ruby wrapper around the XMP library. John set up our infrastructure and wrote the low-level persistence code. I designed and wrote the initial API. We learned Ruby, RSpec, Git and a host of other technologies. It was great.&lt;/p&gt;

&lt;h1&gt;&amp;ldquo;You Need To Get A Customer&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;My manager told me that he had met with our VP who seemed to be going on the warpath and looking to kill all unfunded projects (the very ones he approved). Luckily, I had kept my ear to the ground and knew there was a project that needed the very service we were building. My plan was to approach them once we were further along. However, my survival instincts were kicking in and I guessed (correctly) that if I didn&amp;rsquo;t align with them &lt;strong&gt;now&lt;/strong&gt; there would be no &lt;em&gt;later&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I pitched the service to this team and the idea that we work together. The director running the project loved the idea. Unfortunately, we were brought on as virtual team members and were &amp;ldquo;forced&amp;rdquo; to give up our identity. Goodbye, xmplary.&lt;/p&gt;

&lt;p&gt;For the next few months, we continued to work on the service. We realized the limitations with using XMP as our canonical format and made the transition to Resource Description Format (RDF). XMP was based, erroneously, on the RDF/XML serialization format instead of the RDF data model. John worked to implement round-trip support for XMP to RDF. I revised the API accordingly and Steve started to build a Web application that would be the frontend for the service.&lt;/p&gt;

&lt;h1&gt;Our Data Is Very Meta&lt;/h1&gt;

&lt;p&gt;As we made the transition to RDF, we realized the value of our service was purely as infrastructure. We could only guess what kinds of applications could be built with it. Our primary focus was metadata search, particularly for rich media. Adobe&amp;rsquo;s tools are used for the majority of content creation and generate a ton of metadata. Most of that data gets discarded in the rendering process for final assets. Search engines like Google couldn&amp;rsquo;t index those assets without help.&lt;/p&gt;

&lt;p&gt;Our goal was to encourage content creators to preserve and enhance that metadata for use downstream. By creating better metadata editing facilities within the Suite that was linked to our cloud-based metadata repository, we would be able to offer a pipeline to search engines and offer metadata that would enrich their indexes (for a price of course). So, when you search for &lt;em&gt;Ezekiel 25:17&lt;/em&gt; you would get a video clip in your search results that would start playing at one of my favorite scenes from &lt;strong&gt;Pulp Fiction&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We also decided to focus primarily on our API. Inspired by &lt;a href=&quot;http://al3x.net&quot;&gt;Alex Payne&amp;rsquo;s&lt;/a&gt; work at Twitter, we saw that there was more value to be created by providing a simple but powerful API. In fact, our API was a &lt;strong&gt;meta-API&lt;/strong&gt;. RDF and the SPARQL query language was the foundation and we would provide support and tools for Adobe teams to build APIs that were wrappers around our RDF core. They would define their data and we would model it with RDF and create SPARQL queries that would map to their custom APIs. Over time, we would have added tools to make this a self-service operation.&lt;/p&gt;

&lt;h1&gt;If Three People Are Good, Thirty Must Be Better&lt;/h1&gt;

&lt;p&gt;It never ceases to amaze me that software companies tend to be the most unfamiliar with Brooks' Law (both the real version and the misquoted one). A constant refrain was &lt;em&gt;&amp;ldquo;We can&amp;rsquo;t build this with just 3 guys from CoreTech&amp;rdquo;&lt;/em&gt;. A funny statement considering the fact that that&amp;rsquo;s exactly what was happening. We just shook our heads and kept working.&lt;/p&gt;

&lt;p&gt;Around month 5, we were told that we were going to get &amp;ldquo;help&amp;rdquo; from one of our non-US teams. They had no familiarity with metadata or our technology choices. They were all good engineers, just inexperienced. While we mostly enjoyed working with them, we lost 3 months essentially training them when we could have been finishing features.&lt;/p&gt;

&lt;p&gt;Right about the time our stakeholders realized that the non-US team might not have been helping us move the ball forward, another US team just had their project cancelled. Surprise! &lt;strong&gt;THEY&lt;/strong&gt; got added to our project as well. By Christmas, we had an overall team of over 30 people and was incredibly management heavy. Our product vision was all over the place. We were going to solve every problem under the sun, including world hunger. It was a mess.&lt;/p&gt;

&lt;p&gt;With a bunch of new people, leaders needed to be identified. I was asked if I wanted to lead the overall engineering effort. I said &lt;strong&gt;no&lt;/strong&gt;. I suspected that the project would eventually get into trouble and since I was from an external, shared technology group I would be the obvious scapegoat. In fact, given the management involved on the stakeholder team I was &lt;em&gt;sure&lt;/em&gt; that would be the case. Instead, I said I would just focus on the core metadata repository and not the overall product. This was a mistake on my part and, ultimately, would contribute to the project&amp;rsquo;s failure.&lt;/p&gt;

&lt;h1&gt;&amp;ldquo;What Exactly Are We Building Again?&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;The next year was both exhilarating and frustrating. We cleaned up our API, added support for four different persistence engines, added Web hooks, supported OAuth, wrote tons of documentation and examples and evolved our continuous deployment infrastructure. We moved from Merb to Sinatra, Mongrel to Unicorn, ActiveMQ to beanstalk and RubyRDF to RDF.rb. On the engineering front, we were having a great time and always had working software that was ready to ship. We evangelized RDF internally, found some supporters and started to make some headway. As part of all of this, we re-asserted our identity separate from our client&amp;rsquo;s project. We codenamed our service Triad. RDF geeks will get the joke, as will Chinese gangsters.&lt;/p&gt;

&lt;p&gt;Unfortunately, our internal clients were frequently changing the message about which of the many problems we were trying to solve. With over 30 people on the &amp;ldquo;team&amp;rdquo;, everyone had a different idea as to what we were building. It didn&amp;rsquo;t help that &lt;em&gt;metadata&lt;/em&gt; was a particularly ambiguous term and could&amp;rsquo;ve have had vastly different meetings depending on who you were talking to at that moment in time. No one really knew what we were building. At one point, we were one of the most important projects in the company. At another point, we were a punchline.&lt;/p&gt;

&lt;p&gt;After multiple resets and changes in our Product Management, our clients &lt;strong&gt;finally&lt;/strong&gt; came around to what they believed to be the value proposition for our service. Metadata search. The domain area we had started with almost 2 years earlier. The feature that was powering part of another Adobe service that was launching with Creative Suite 5. All this time and energy wasted to settle back on the simple principle we started with all along. Metadata search.&lt;/p&gt;

&lt;p&gt;A month later, our client&amp;rsquo;s project was cancelled.&lt;/p&gt;

&lt;h1&gt;&amp;ldquo;We Come To Bury Triad, Not To Praise It&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;The project cancellation happened to coincide with a company &amp;ldquo;realignment&amp;rdquo; (layoffs). Luckily, we weren&amp;rsquo;t affected but we &lt;strong&gt;were&lt;/strong&gt; reorganized. We were still in CoreTech, but not in the emerging technologies team. We were back with the high science practitioners. No one was happy, especially since given the new reorg we were a lateral move away from a group that actually &lt;strong&gt;was&lt;/strong&gt; evolving into Adobe&amp;rsquo;s internal AWS. After much lobbying, I got what I asked for&amp;hellip;a move into this new services group. Without Steve.&lt;/p&gt;

&lt;p&gt;Yep, Steve (and 2 other developers I managed to snag along the way) were reassigned to other groups. John and I were transferred (that&amp;rsquo;s the polite way to put it) to the services team. I was now a &lt;strong&gt;Manager of One&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;John and I spent the next few months scoping out a new service we were asked to build. I had a month-long sabbatical coming up, so I was slightly checked out. OK, I was &lt;strong&gt;completely&lt;/strong&gt; checked out. After my sabbatical, I spent the next few months decommissioning Triad. It was painful, but necessary. We had no executive support to continue the project even though all we wanted to do at that point was release it on &lt;a href=&quot;http://labs.adobe.com&quot;&gt;Adobe Labs&lt;/a&gt; and get feedback from third-party developers on what they wanted to see from the service. By December 2010, Triad was no more.&lt;/p&gt;

&lt;h1&gt;&amp;ldquo;Dude, I&amp;rsquo;m Getting The Band Back Together&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;The silver lining to this story came in October 2010, though. I pretty much had one foot out the door when a colleague told me about an internal opportunity that seemed to too good to be true. A domain area that I actually was passionate about, a good team to work with that had a shipping service that I would take over and a promotion to Senior Engineering Manager. Two weeks of interviews and the position was mine.&lt;/p&gt;

&lt;p&gt;Two weeks after that, John joined the team.&lt;/p&gt;

&lt;p&gt;A month later, Steve did too.&lt;/p&gt;

&lt;p&gt;I am really lucky. And happy.&lt;/p&gt;

&lt;h1&gt;Intrapreneurship&lt;/h1&gt;

&lt;p&gt;Earlier, I said it was a mistake for me not to lead the overall engineering effort for my client&amp;rsquo;s project. Previous experience (that &lt;strong&gt;other&lt;/strong&gt; blog post I have to write) had made me gun shy about being the front man for Big, Hairy, Audacious Goals. While I had proven multiple times that I could assemble good teams, deliver working software that met requirements on time and under ridiculous conditions I often ended up drawing the short straw.&lt;/p&gt;

&lt;p&gt;The thing is, I was suppressing my strength. I &lt;strong&gt;am&lt;/strong&gt; an intrapreneur. I &lt;em&gt;like&lt;/em&gt; taking on huge challenges with small teams. I don&amp;rsquo;t care about the money or the titles. I&amp;rsquo;m in it for the glory.&lt;/p&gt;

&lt;p&gt;By not leading the whole project, I could not move the ball forward. I lacked the leverage and influence to make things happen. Some organizations are driven by titles and roles and if you don&amp;rsquo;t have them, your sphere of influence can be so small as to be non-existent. More importantly, I did not contribute in the way that would have most helped my team. I let my fears suppress my more useful attributes: tech lead, evangelist, bullshit artist.&lt;/p&gt;

&lt;p&gt;The break between Triad and my current project allowed me to gain some perspective. I rediscovered my passion for developing products and realized that I needed to be in the part of the organization that &lt;em&gt;did that&lt;/em&gt;. Shared technology is often necessary, but poorly executed in a lot of organizations.&lt;/p&gt;

&lt;p&gt;My strengths lie in taking a germ of an idea, blowing it up several orders of magnitude, assembling the talent and then &lt;strong&gt;pulling it off&lt;/strong&gt;. To some people, that may sound pretty arrogant. Maybe it is, maybe it isn&amp;rsquo;t. All I know is that I am not the type to &amp;ldquo;climb the corporate ladder&amp;rdquo;. I am definitely &lt;strong&gt;not&lt;/strong&gt; a 9-to-5 wage slave. I&amp;rsquo;m also not an entrepreneur&amp;hellip;yet. I&amp;rsquo;m a change agent. A radical. A revolutionary. A professional pain in the ass.&lt;/p&gt;

&lt;p&gt;There &lt;strong&gt;is&lt;/strong&gt; an &amp;ldquo;I&amp;rdquo; in team. The &amp;ldquo;I&amp;rdquo; is for intrapreneur.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Way I Want To Work</title>
   <link href="http://working-code.com/2010/09/26/the-way-i-want-to-work.html"/>
   <updated>2010-09-26T00:00:00-07:00</updated>
   <id>http://working-code.com/2010/09/26/the-way-i-want-to-work</id>
   <content type="html">&lt;p&gt;A number of factors inspired me to write this post. First, one of my top 3 pet peeves is when people &lt;strong&gt;force me to repeat myself.&lt;/strong&gt; &lt;em&gt;(yes, I am a software development manager&amp;hellip;the irony is NOT lost on me!)&lt;/em&gt; Over the past year, I&amp;rsquo;ve had a noticeable increase in the number of recruiters trying to get me to interview for some position or the other. Ignoring them didn&amp;rsquo;t seem to work; I&amp;rsquo;d just get more emails and phone calls. Every once in a while, I&amp;rsquo;d take the time to talk to one or two of them just to see what they were trying to sell me on. &lt;em&gt;I didn&amp;rsquo;t miss out on anything&amp;hellip;so far.&lt;/em&gt; I ended up replying to the emails with a &amp;ldquo;Thanks, but not interested. Here&amp;rsquo;s what I AM interested in and I will not compromise on these items&amp;rdquo; response. Ended up being &lt;strong&gt;much&lt;/strong&gt; more effective. So, if I wrote this up as a blog post I could send an even shorter response&amp;hellip;the URL.&lt;/p&gt;

&lt;p&gt;Another factor was the fact that I was on a 4-week sabbatical from work and had a little stay-cation. I had the opportunity to work on a side project with the folks at &lt;a href=&quot;http://pinchzoom.com&quot;&gt;pinch/zoom&lt;/a&gt;, a Web and mobile development shop in Seattle. While doing that I also ended up doing a talk at &lt;a href=&quot;http://www.iosdevcamp.org/&quot;&gt;iOS DevCamp Seattle&lt;/a&gt; on &lt;a href=&quot;http://www.slideshare.net/kstewart/introduct-5030740&quot;&gt;Apple&amp;rsquo;s iAd and mobile Web development&lt;/a&gt;. The change in environment, work style and product focus opened up the floodgates of introspectiveness.&lt;/p&gt;

&lt;p&gt;Finally, I recently started on a new team at the day job. My last few projects have been successful on the engineering side, but have been lacking in terms of impact. This, is turn, has affected my motivation and added to my introspectiveness. However, I am a &lt;strong&gt;firm&lt;/strong&gt; believer in the idea that &lt;em&gt;you&lt;/em&gt; are responsible for your career. If I want things to change, then I have to make that change real.&lt;/p&gt;

&lt;h1&gt;Inspiration&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.inc.com/&quot;&gt;Inc. Magazine&lt;/a&gt; has a great series called &lt;strong&gt;The Way I Work&lt;/strong&gt; featuring several entrepreneurs including &lt;a href=&quot;http://www.inc.com/magazine/20091101/the-way-i-work-jason-fried-of-37signals.html&quot;&gt;Jason Fried&lt;/a&gt; and &lt;a href=&quot;http://www.inc.com/magazine/20090601/the-way-i-work-matt-mullenweg.html&quot;&gt;Matt Mullenweg&lt;/a&gt;. This quote from Jason articulated a change in work style I made years ago&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We rarely have meetings. I hate them. They&amp;rsquo;re a huge waste of time, and they&amp;rsquo;re costly. It&amp;rsquo;s not one hour; it&amp;rsquo;s 10, because you pulled 10 people away from their real work. Plus, they chop your day into small bits, so you have only 20 minutes of free time here or 45 minutes there. Creative people need unstructured time to get in the zone. You can&amp;rsquo;t do that in 20 minutes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Large companies have a hard time adjusting to the idea of no meetings. I&amp;rsquo;ve watched them try with misguided attempts like &lt;em&gt;no meetings on Fridays&lt;/em&gt;. It&amp;rsquo;s kind of like people making New Year&amp;rsquo;s resolutions to lose weight. They give it a good go, but within a month or two they&amp;rsquo;ve fallen back into their bad habits.&lt;/p&gt;

&lt;h1&gt;The Way I Want To Work&lt;/h1&gt;

&lt;p&gt;Unlike the aforementioned articles, I am not describing how I currently go about my day-to-day responsibilities. Instead, I&amp;rsquo;m going to describe my ideal (&lt;em&gt;at this moment in time&lt;/em&gt;) state.&lt;/p&gt;

&lt;h2&gt;Small Company&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(where &lt;strong&gt;small&lt;/strong&gt; &amp;lt; 30)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For most of my career, I&amp;rsquo;ve worked at small companies. I made a conscious choice to work at a larger company (my &lt;a href=&quot;http://adobe.com&quot;&gt;current&lt;/a&gt; employer) so that I could actually get the experience. After almost 6 years, I think I have enough data.&lt;/p&gt;

&lt;p&gt;Large companies can simulate small, startup environments but it&amp;rsquo;s not their natural state. The problem boils down to &lt;strong&gt;communication&lt;/strong&gt;, which I outlined in a &lt;a href=&quot;http://working-code.com/2010/03/14/3-Is-The-Magic-Number.html&quot;&gt;previous post&lt;/a&gt;. It&amp;rsquo;s just &lt;em&gt;so much&lt;/em&gt; harder to communicate with so many people and, subsequently, harder to Get Things Done. People say there&amp;rsquo;s no such thing as &lt;strong&gt;over-communicating&lt;/strong&gt; but that&amp;rsquo;s a crock. If the overall value of the communication is low because the people you are forced to communicate with do not help you accomplish the task at hand, then you are over-communicating. Or, more simply &lt;em&gt;wasting time&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Product Company&lt;/h2&gt;

&lt;p&gt;Joel Spolsky has a great essay called &lt;a href=&quot;http://www.joelonsoftware.com/articles/FiveWorlds.html&quot;&gt;Five Worlds&lt;/a&gt; that attempts to define the different environments that software developers might work in. This categorization was intended to help developers better understand the target audience for various books, conferences and methodologies. But, it is also useful as a way to identify exactly what kind of work environment stimulates you. I&amp;rsquo;m definitely at home in the &lt;em&gt;commercial, Web-based software&lt;/em&gt; category.&lt;/p&gt;

&lt;p&gt;For me, companies like &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;http://posterous.com&quot;&gt;Posterous&lt;/a&gt; and &lt;a href=&quot;http://gowalla.com&quot;&gt;Gowalla&lt;/a&gt; that typify the environment I find most palatable. That said, there may be &lt;a href=&quot;http://amazon.com&quot;&gt;one&lt;/a&gt; or &lt;a href=&quot;http://apple.com&quot;&gt;two&lt;/a&gt; exceptions to my small company rule.&lt;/p&gt;

&lt;h2&gt;Virtual Company (or Virtual with Co-Location Option)&lt;/h2&gt;

&lt;p&gt;The nature of software development has shifted enough that while I still favor co-location, it&amp;rsquo;s not as necessary as it once was. In &lt;a href=&quot;http://www.inc.com/magazine/20090601/the-way-i-work-matt-mullenweg.html&quot;&gt;Matt&amp;rsquo;s article&lt;/a&gt;, he describes how &lt;a href=&quot;http://automattic.com&quot;&gt;Automattic&lt;/a&gt; works and they are completely virtual (with an available office for meetings).&lt;/p&gt;

&lt;p&gt;Besides hating my commute (&lt;em&gt;down to 2 hours a day from 4 hours once I moved out to Seattle&lt;/em&gt;), my role is less of a people manager and more of a technical lead. That&amp;rsquo;s not a bad thing. In fact, I prefer it and feel that is the present and future of software development management. In the type of environment I prefer, developers are self-motivated and driven. They don&amp;rsquo;t need hand-holding&amp;hellip;they need feedback. There are so many ways to provide that without having to be face-to-face 5 days a week.&lt;/p&gt;

&lt;p&gt;On my current project, it&amp;rsquo;s just me and one developer while I wait for the headcount fairy to arrive. We don&amp;rsquo;t need to have meetings. We have our &lt;a href=&quot;http://jabber.org&quot;&gt;Jabber&lt;/a&gt; clients open all day and can shoot quick messages to each other when necessary. Often, we go have coffee in the morning and discuss the project and what we&amp;rsquo;re going to do for the day. That&amp;rsquo;s about 20 minutes, which is essentially the time it takes us to walk to Caffe Ladro, get our drinks and walk back to the office. Then, we&amp;rsquo;re working until lunch. Sometimes, we discuss the project over lunch&amp;hellip;often, we&amp;rsquo;re just bitching about something or the other. And, twice a week he works from home.&lt;/p&gt;

&lt;p&gt;The point is, most of our actual communication is short and bursty. IM messages. Short emails. Coffee walks. Git commit messages. The face-to-face time satisfies a basic human need, but why does that have to be filled by &lt;em&gt;co-workers&lt;/em&gt;. I&amp;rsquo;m writing this in a coffee shop now and a bunch of people have come up to me to tell me how much they like my &lt;a href=&quot;http://twitter.com/kstewart/status/25625420129&quot;&gt;laptop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, if I don&amp;rsquo;t have to live where my company&amp;rsquo;s office is located in order to work then I can live &lt;strong&gt;anywhere&lt;/strong&gt;. I could see my team in person once a quarter instead of every single day because that&amp;rsquo;s probably about the right frequency. I think that is the &lt;strong&gt;real&lt;/strong&gt; definition of &lt;a href=&quot;http://en.wikipedia.org/wiki/Work%E2%80%93life_balance&quot;&gt;work-life balance.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Stuff That Matters&lt;/h2&gt;

&lt;p&gt;If you haven&amp;rsquo;t read Tim O'Reilly&amp;rsquo;s &lt;a href=&quot;http://radar.oreilly.com/2009/01/work-on-stuff-that-matters-fir.html&quot;&gt;Work on Stuff That Matters&lt;/a&gt;, please stop reading this post and go read it now!&lt;/p&gt;

&lt;p&gt;Done? No? I&amp;rsquo;m serious&amp;hellip;&lt;a href=&quot;http://radar.oreilly.com/2009/01/work-on-stuff-that-matters-fir.html&quot;&gt;go read it!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What matters most to me (and most good engineers I know) is making things people want to use. I often couple that with making things that help people create. Zed Shaw had a variation of this in &lt;a href=&quot;http://sheddingbikes.com/posts/1285436217.html&quot;&gt;Products for People Who Make Products for People&lt;/a&gt;. I cannot articulate it any better than Zed, so read that post too! &lt;em&gt;(oh, and why not &lt;a href=&quot;http://mongrel2.org/wiki?name=Donate&quot;&gt;donate&lt;/a&gt;&lt;/em&gt; to the &lt;a href=&quot;http://mongrel2.org/home&quot;&gt;Mongrel2&lt;/a&gt; project while you&amp;rsquo;re at it?)&lt;/p&gt;

&lt;p&gt;On the next priority rung, these things matter to me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Working closely with designers: cross-functional teams, not cross-functional management&lt;/li&gt;
&lt;li&gt;Work on my Mac with &lt;strong&gt;no&lt;/strong&gt; compromises (&lt;em&gt;no Microsoft Office or Exchange required&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Use Git and GitHub to collaborate with team&lt;/li&gt;
&lt;li&gt;Create Open Source by-products from day-to-day work (&lt;em&gt;you gotta give back!&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So, what does this all mean? Am I quitting my job to make this all happen? No. The first step was just to document all of this. I needed to know what I wanted out of life&amp;hellip;what&amp;rsquo;s going to make me happy. Mission Accomplished.&lt;/p&gt;

&lt;p&gt;The next step is to make subtle changes in my current environment to see if I can get what I want without complete disruption. That would be ideal.&lt;/p&gt;

&lt;p&gt;However, if that is unsuccessful then I&amp;rsquo;ll figure out a different set of next steps. That may include following Martin Fowler&amp;rsquo;s sage advice:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/articles/xp2000.html&quot;&gt;If you can&amp;rsquo;t change your organization, change your organization.&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Don't Hate the Playa, Hate the Game</title>
   <link href="http://working-code.com/2010/09/07/dont-hate-the-playa-hate-the-game.html"/>
   <updated>2010-09-07T00:00:00-07:00</updated>
   <id>http://working-code.com/2010/09/07/dont-hate-the-playa-hate-the-game</id>
   <content type="html">&lt;p&gt;Lately, I have been more inclined to use &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; or &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; in my day-to-day work than stalwarts such as &lt;a href=&quot;http://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt; or &lt;a href=&quot;http://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;. This is not due to cargo cult fanboyism, but the simple realization that the poorly-named NoSQL databases are the best tool for the job &lt;em&gt;for early stage, greenfield projects.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If anything, the folks clinging to their RDBMSes are &lt;strong&gt;more&lt;/strong&gt; guilty of treating every problem as a nail, thus they whip out their favorite hammer. Why is it that almost every Web framework assumes we want/need to persist our data in an RDBMS? Even the ones that support pluggable persistence models tend to favor relational databases, specifically MySQL and SQLite.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve already given &lt;a href=&quot;http://working-code.com/2010/05/18/lamp-is-dead-long-live-dylan.html&quot;&gt;my thoughts&lt;/a&gt; on this situation a bit. This time, I want to come at it from a different angle.&lt;/p&gt;

&lt;h1&gt;The Principle of Most Privilege&lt;/h1&gt;

&lt;p&gt;In a relational model, the assumption is that one not only &lt;strong&gt;knows&lt;/strong&gt; the shape of their data, but that it is relatively &lt;strong&gt;stable&lt;/strong&gt;. For transaction-oriented, business process style applications this is likely to be true. But, if you are trying to create something new then it is even more likely that you &lt;em&gt;have no idea&lt;/em&gt; what your data looks like which, by definition, means it is unstable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;THIS&lt;/strong&gt; is the actual value proposition of NoSQL databases. The ability to have a flexible schema early in development is a productivity gain. Right now, developers have to commit to a schema and deal with change via tools like &lt;a href=&quot;http://guides.rubyonrails.org/migrations.html&quot;&gt;migrations&lt;/a&gt;. While definitely an elegant solution to the problem, migrations solve the &lt;strong&gt;wrong&lt;/strong&gt; problem. Migrations hide the mechanics of altering and dropping tables to make working with an RDBMS &lt;em&gt;feel&lt;/em&gt; dynamic. That&amp;rsquo;s the problem. The relational model is the &lt;strong&gt;static typing&lt;/strong&gt; of persistence models.&lt;/p&gt;

&lt;p&gt;As opposed to attacking SQL, developers should articulate their desire to use the most flexible tools possible at the beginning of a project. The reasoning for this is simple&amp;hellip;in the beginning, &lt;strong&gt;you don&amp;rsquo;t know what you&amp;rsquo;re doing&lt;/strong&gt;. Software development is exploration and your chances for success are higher if you don&amp;rsquo;t have to spend all your time circumnavigating obstacles.&lt;/p&gt;

&lt;p&gt;For non-transactional applications (which includes the majority of Web applications), the need is simply to persist and retrieve data. As JSON steadily replaces XML as the preferred serialization format, having a persistence engine that deals with it natively is a boon. Almost every language imaginable has a JSON parser available and if you&amp;rsquo;re a Web developer you&amp;rsquo;re already using JavaScript.&lt;/p&gt;

&lt;p&gt;That said, there is one thing that seems weird to me. Why are all these Web developers always reaching for an &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;ORM&lt;/a&gt; to use with these NoSQL databases? First, the &lt;strong&gt;R&lt;/strong&gt; kinda tells you what problem is being addressed and we&amp;rsquo;re not in that world. Second, in NoSQL your data is essentially a serialized hash so what exactly are we &amp;ldquo;mapping&amp;rdquo;? Finally, why introduce another layer unless it is adding value?&lt;/p&gt;

&lt;p&gt;I think &lt;a href=&quot;http://twitter.com/jnunemaker&quot;&gt;John Nunemaker&lt;/a&gt; is The Man, but I don&amp;rsquo;t think most &lt;a href=&quot;http://mongomapper.com/&quot;&gt;MongoMapper&lt;/a&gt; users know &lt;strong&gt;why&lt;/strong&gt; they are using it. ORMs for NoSQL mostly bridge the learning gap in moving from an RDBMS to a NoSQL database if you&amp;rsquo;re using a framework like Rails where you spend most of your time fiddling with &lt;a href=&quot;http://ar.rubyonrails.org/&quot;&gt;ActiveRecord&lt;/a&gt;. However, there is a lot less &amp;ldquo;mapping&amp;rdquo; with NoSQL as opposed to &lt;em&gt;un-flattening&lt;/em&gt;. IMNSHO, I think developers would be better served using the raw drivers for NoSQL databases instead of investing time and energy in ORMs.&lt;/p&gt;

&lt;p&gt;Instead, I&amp;rsquo;d challenge developers to consider a different tool. More of a static analysis tool that could bring the benefits of fixed schemas to NoSQL &lt;strong&gt;after&lt;/strong&gt; you&amp;rsquo;ve solidified your data model. This tool may help indexing or making queries more efficient because now you know what your data looks like for the most part. It would be analogous to proposals for optional typing in languages such as JavaScript. This would, possibly, lead to the best of both worlds.&lt;/p&gt;

&lt;h1&gt;It Is A Poor Craftsman&amp;hellip;&lt;/h1&gt;

&lt;p&gt;Of course, developers can be wildly enthusiastic about their latest silver bullet. NoSQL is not a panacea. If you have a problem that is best solved with an RDBMS, then use one dammit! Or, if it doesn&amp;rsquo;t matter whether or not you use an RDBMS for the application but it would make your ops engineers' lives easier, then you should consider that.&lt;/p&gt;

&lt;p&gt;What always ends up happening, however, is that people make poor choices for their application then blame &lt;em&gt;the tools!&lt;/em&gt; This week, &lt;a href=&quot;http://techcrunch.com/2010/09/07/digg-struggles-vp-engineering-door/&quot;&gt;Digg fired&lt;/a&gt; their VP of Engineering for their continued failures with V4. &lt;a href=&quot;http://news.ycombinator.com/item?id=1669645&quot;&gt;Hacker News&lt;/a&gt; has been quite active with people armchair-quarterbacking the situation. Most are blaming the decision to use &lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Cassandra&lt;/a&gt;. I find this as amusing as when people were blaming Ruby on Rails for Twitter&amp;rsquo;s downtime woes.&lt;/p&gt;

&lt;p&gt;Digg&amp;rsquo;s issues &lt;strong&gt;might&lt;/strong&gt; have something to do with Cassandra, but there is no evidence of that yet. There &lt;strong&gt;IS&lt;/strong&gt; evidence of an immature engineering culture and poor planning. A wholesale re-engineering of their core architecture with no ability to revert to the previous version screams of amateur hour. If they at least phased in the new infrastructure under the old interface, Digg would have been able to isolate problems more effectively. By throwing the baby out with the bathwater, they&amp;rsquo;ll be firefighting for months instead of improving their product. Or, in this case, reach parity with the previous version. The worst part is that &lt;a href=&quot;http://techcrunch.com/2010/09/07/kevin-rose-responds-to-digg-criticism-on-diggnation-mostly-tells-users-to-chill/&quot;&gt;their founder was quick to blame the technology&lt;/a&gt;. You know the guy who was an intern on TechTV, drinks beer on Diggnation and is not an engineer?&lt;/p&gt;

&lt;p&gt;I think more developer should read &lt;a href=&quot;http://pragprog.com/titles/tpp/the-pragmatic-programmer&quot;&gt;The Pragmatic Programmer&lt;/a&gt;, especially the parts about choosing tools. Hopefully, this will lead to more of an awareness about &lt;strong&gt;how&lt;/strong&gt; to choose tools. Stop depending on &lt;em&gt;magic&lt;/em&gt; and tools that do everything (including &lt;strong&gt;thinking&lt;/strong&gt;) for you. I know it&amp;rsquo;s hard and all, but ummm&amp;hellip;.that&amp;rsquo;s why it&amp;rsquo;s considered &lt;em&gt;knowledge work&lt;/em&gt;. You need to have some knowledge to make it work. If you want easy, mindless work&amp;hellip;well, I can&amp;rsquo;t help you. Any suggestion I make would be stereotypical and demeaning to the people in those professions. Instead, I recommend you have some respect for &lt;strong&gt;your  profession, your craft&lt;/strong&gt; and use the tool that matters most. &lt;em&gt;Your brain.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Urban Planning</title>
   <link href="http://working-code.com/2010/08/30/urban-planning.html"/>
   <updated>2010-08-30T00:00:00-07:00</updated>
   <id>http://working-code.com/2010/08/30/urban-planning</id>
   <content type="html">&lt;blockquote&gt;&lt;p&gt;An organic build approach says plant a seed, watch it grow.  First, a sprout appears, with roots a stem and leaves.  The stem gets thicker, the roots grow deeper, and more leaves sprout. Branches grow. Flowers bud and fruit appears. When requirements change some pruning and grafting is required, but you don&amp;rsquo;t have to tear down the tree and plan a new one from scratch or start a new tree on the side. The tree will grow around power lines and rocks and other trees as needed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://walkingoncoals.blogspot.com/2010/08/growing-tree-versus-building-house.html&quot;&gt;Paul Boal, Growing a Tree versus Building a House&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The construction metaphor for software development has been around seemingly since the beginning of time. With the advent of agile, more organic memes have taken root (pun intended). As much as I identify with the idea of &lt;em&gt;growing software&lt;/em&gt;, we shouldn&amp;rsquo;t dismiss all aspects of the construction metaphor.&lt;/p&gt;

&lt;p&gt;As I&amp;rsquo;ve been working on my latest project, a multitenant Web application, the construction metaphor became evident. However, it was on a much larger scale than it&amp;rsquo;s usually applied. Most people who compare developing software to erecting buildings tend to scope the discussion to a single structure. In my not particularly original opinion, building Web applications is a lot like &lt;strong&gt;urban planning&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;To developers, the most conspicuous difference between Web-based and desktop software is that a Web-based application is not a single piece of code. It will be a collection of programs of different types rather than a single big binary. And so designing Web-based software is like designing a city rather than a building: as well as buildings you need roads, street signs, utilities, police and fire departments, and plans for both growth and various kinds of disasters.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://paulgraham.com/road.html&quot;&gt;Paul Graham, The Other Road Ahead&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Much of my design process has involved this sort of thinking. One of the first decisions was splitting up the main site/administrative application from the multitenant application. That decision led to the idea of deploying to 2 different clouds, Heroku (which sits atop Amazon&amp;rsquo;s EC2) and the Rackspace Cloud. This split affords a bit of fault tolerance as well as the ability to scale portions of the application independently. In the event of an outage on one cloud, it should be possible to redeploy to the other, thanks to the power of tools like &lt;a href=&quot;http://www.puppetlabs.com/&quot;&gt;Puppet&lt;/a&gt; and &lt;a href=&quot;http://opscode.com/chef/&quot;&gt;Chef&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A Web application without an API is a eunuch. So, I&amp;rsquo;ll be providing one. One school of thought is to build the API first and then make the Web app a client of the API. I favor this approach as it reflects the &lt;em&gt;eat your own dogfood&lt;/em&gt; mentality. The other school of thought is to build the API adjacent to the Web app, usually starting with a read-only version, then adding write capability. As the API is really for the application&amp;rsquo;s tenants, I am considering a hybrid approach: build the overall API infrastructure but only expose the read-only functionality initially. How am I going to do it? Job queues to the &lt;a href=&quot;http://github.com/defunkt/resque&quot;&gt;Resque&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Outsourcing is not just for call centers. It works for subsystems as well. I COULD set up &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; and &lt;a href=&quot;http://code.google.com/p/redis/&quot;&gt;Redis&lt;/a&gt; myself. Or, I could subcontract that work to &lt;a href=&quot;https://mongohq.com/home&quot;&gt;MongoHQ&lt;/a&gt; and &lt;a href=&quot;http://redistogo.com/&quot;&gt;Redis To Go&lt;/a&gt;, respectively. And, every city needs workers so I&amp;rsquo;m sure I&amp;rsquo;ll have at least half a dozen daemons running around autonomously taking care of sundry tasks.&lt;/p&gt;

&lt;p&gt;Blogs. Forums. Issue Trackers. Chat Systems. Each of these is like a small park or shared garden. Their placement can be integral to the overall experience you are trying to create. Your Web application is a living, vibrant city. Be the mayor.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Flip The Script</title>
   <link href="http://working-code.com/2010/07/19/flip-the-script.html"/>
   <updated>2010-07-19T00:00:00-07:00</updated>
   <id>http://working-code.com/2010/07/19/flip-the-script</id>
   <content type="html">&lt;p&gt;Last month, I had the pleasure of attending O'Reilly&amp;rsquo;s Velocity conference for the second year in a row. Truly awesome and inspiring sessions and people. The emphasis on culture and cooperation was a refreshing change from the usual corporate political mediocrity.&lt;/p&gt;

&lt;p&gt;Paul Hammond&amp;rsquo;s session, &lt;a href=&quot;http://www.paulhammond.org/2010/06/trunk/&quot;&gt;Always Ship Trunk&lt;/a&gt;, struck a chord in me as a developer. It ended with a question that I hope sparks a discussion deeper than this thread I found on &lt;a href=&quot;http://news.ycombinator.com/item?id=1463751&quot;&gt;Hacker News&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What would a revision control system built for supporting deployed web applications be like?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Huh? What could he mean? Just use Subversion, Git, Mercurial, Bazaar, Perforce, Visual SourceSafe&amp;hellip;OK, just kidding on that last one. You&amp;rsquo;d be better off using numbered folders on a Novell Netware file server than that heinous pile of shit Visual Source(Un)safe. &lt;em&gt;My recommendation: Use Git or Mercurial if you can, Subversion if you must.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Anyway, Paul correctly asserts that there are three kinds of software:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installed software (Commercial/Proprietary)&lt;/li&gt;
&lt;li&gt;Installed software (Open Source)&lt;/li&gt;
&lt;li&gt;Web applications (Software as a Service)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;and that Web applications are not like installed applications and that all existing revision control systems were built by people who build installed software. The implication being that the assumptions that drive the design of all version control systems do not take the deployment process of Web applications into account.&lt;/p&gt;

&lt;p&gt;In the world of shrinkwrapped software, it is common to have multiple versions &lt;em&gt;in the wild&lt;/em&gt; at the same time. You do a release, then possibly a minor update for small features and bug fixes, followed by another major release. All of these are independent versions. Then, you discover a security vulnerability and likely have to produce patches for all of these variants. This is one of the primary use cases for version control systems. The branch model is pretty much the only sane way to handle this scenario.&lt;/p&gt;

&lt;p&gt;With Web applications, new releases/upgrades happen only once. Older versions of code do not get redeployed. In Web operations, this is known as &lt;strong&gt;rolling forward&lt;/strong&gt; as in &lt;em&gt;&amp;ldquo;We don&amp;rsquo;t roll back to a previously known good version of the code. We make a fix and roll forward.&amp;rdquo;&lt;/em&gt; Given this model, managing &lt;strong&gt;versions&lt;/strong&gt; is less of an issue than managing releases. Thus, Paul recommends moving version management into the application itself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://code.flickr.com/blog/2009/12/02/flipping-out/&quot;&gt;Feature flipping&lt;/a&gt; is the common solution to in-application versioning. It essentially amounts to wrapping your code in &lt;strong&gt;if&lt;/strong&gt; blocks with feature flags as the conditionals. The scope of these flags can be environments, pools of servers and/or pools of users. While simple and powerful, the thought of littering my code with if-else statements makes me cringe. However, Paul points out that you have to be disciplined in periodically pruning these flags from your codebase.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/blog/677-how-we-deploy-new-features&quot;&gt;GitHub&lt;/a&gt; uses feature flipping as well and goes one step further by using &lt;a href=&quot;http://code.google.com/p/redis/&quot;&gt;Redis&lt;/a&gt; for configuration management. This is a much cleaner solution than having to manage and deploy a configuration file across all your servers. This also makes it easier to do things like dark launches and A/B tests given Redis' built-in ability to work with sets.&lt;/p&gt;

&lt;p&gt;By using feature flags, the only branch that really matters in your version control system is trunk (&lt;em&gt;master&lt;/em&gt; for the Git Squad). Paul summarizes it nicely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use branches for early development&lt;/li&gt;
&lt;li&gt;Merge branches into trunk&lt;/li&gt;
&lt;li&gt;Use flags for rollout of almost-finished code&lt;/li&gt;
&lt;li&gt;Always deploy trunk to every server on every deploy and manage versions through configuration&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&amp;rsquo;m not sure I have the answer to Paul&amp;rsquo;s question but I wonder if the beginning of the answer lies in configuration management? Tools like cfengine, Puppet and Chef already integrate with version control systems for deployment. Should merge operations generate feature flag definitions? Teams using distributed version control tend to already adopt the approach of creating &lt;em&gt;feature branches&lt;/em&gt; which they then merge back into the main branch. Maybe we can extend that operation to wrap the code created in the branch in conditionals as it gets merged back into the mainline, then export the flag definition into the configuration management system. Seems like an idea worth exploring further.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Oil and Water</title>
   <link href="http://working-code.com/2010/06/10/oil-and-water.html"/>
   <updated>2010-06-10T00:00:00-07:00</updated>
   <id>http://working-code.com/2010/06/10/oil-and-water</id>
   <content type="html">&lt;p&gt;Reality check time &amp;ndash; Open Source will &lt;strong&gt;never&lt;/strong&gt; produce insanely great products when it comes to &lt;em&gt;design&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wow, didn&amp;rsquo;t even ease into the flamebait this time&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at the evidence, shall we? For years, we&amp;rsquo;ve been hearing about the rise of the Linux desktop. The desktop that would be easy enough for your Mom or Grandma to use. &lt;em&gt;&amp;hellip;because the command line is too hard for women? Good luck with THAT sexist argument!&lt;/em&gt; Or, because Linux is Open Source it is automatically better, purer and easier? Suuurrrreeee&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;GNOME and KDE are the predominant Linux desktop environments. Know why some people prefer KDE over GNOME? Because it works more like Microsoft Windows. Yes, THAT Microsoft Windows&amp;hellip;the one that all the Open Source fanatics love to hate. Closed, proprietary, downright &lt;strong&gt;EVIL&lt;/strong&gt; Microsoft Windows. A popular Linux desktop environment that is essentially copying a closed, proprietary environment? Nah! Couldn&amp;rsquo;t be! &lt;em&gt;Except that every single Linux desktop app is essentially a clone of either a Windows or Macintosh application?&lt;/em&gt; Oh, and the component model on which GNOME is built? Inspired by Microsoft COM.&lt;/p&gt;

&lt;p&gt;In the late nineties, Eazel tried to make Linux &lt;a href=&quot;http://www.theregister.co.uk/2000/08/22/hertzfeld_spills_all_about_eazel/&quot;&gt;as easy to use as the Mac&lt;/a&gt;. They managed to get a file manager out before they &lt;a href=&quot;http://www.linux.com/archive/articles/9373&quot;&gt;shut their doors&lt;/a&gt;. &lt;a href=&quot;http://en.wikipedia.org/wiki/Ximian&quot;&gt;Ximian&lt;/a&gt; tried to do the same, then got bought by &lt;a href=&quot;http://www.theregister.co.uk/2003/08/04/novell_buys_ximian/&quot;&gt;Novell&lt;/a&gt;.
Canonical is (finally!) approaching Mac-like aesthetics with &lt;a href=&quot;http://lowendmac.com/ed/bgray/bg10/ubuntu-10.04-review.html&quot;&gt;Ubuntu 10.04 Lucid Lynx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, I love and support Open Source. However, one has to wonder if Open Source has so many advantages why has there been so little innovative, original design coming out of that community? Why do they just copy what has come before? One answer &lt;strong&gt;might&lt;/strong&gt; be:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;quot;Good artists copy. Great artists steal.&amp;quot;
&lt;a href=&quot;http://en.wikiquote.org/wiki/Art&quot;&gt;&amp;ndash; Pablo Picasso&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Except, no Open Source product currently stands out as an exemplar of &lt;strong&gt;great design&lt;/strong&gt;. So, the Open Source community is just copying. They need to steal.&lt;/p&gt;

&lt;p&gt;When it comes to infrastructure, things are a lot different. There are tons of examples of great code and creative uses of technology. Software that enables all of the wondrous services and tools we use on a daily basis. Hardware that used to fill a room that now fits in your pocket. Still, that is mostly the &lt;em&gt;function&lt;/em&gt;. &lt;strong&gt;Form&lt;/strong&gt; is just as critical a component and that is where I believe the Open Source community falls down.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;quot;To make a user-friendly system, the system must have conceptual integrity, which can only be achieved by separating architecture from implementation.&amp;quot;
&lt;a href=&quot;http://en.wikipedia.org/wiki/The_Mythical_Man-Month#Conceptual_integrity&quot;&gt;&amp;ndash; Frederick Brooks, The Mythical Man-Month&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Engineers tend to over-focus on the implementation; &lt;em&gt;what tool stack will we use, what&amp;rsquo;s the most efficient algorithm here, emacs or vim?&lt;/em&gt; All of these are critical issues (except the last one. The answer is simple&amp;hellip;&lt;strong&gt;vim&lt;/strong&gt;.) And, they often address conceptual integrity in terms of code modularity and loose coupling. But, they often punt on design. Or, copy badly.&lt;/p&gt;

&lt;p&gt;Google, frankly, has been getting worse at this. No question, they employ some of the finest minds in the world. However, I once thought they had an interesting, minimalist design aesthetic. Their search engine, while maximizing function, also maximized form by what they left out. They epitomized this most famous of sayings:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;quot;In anything at all, perfection is finally attained not when there is no longer anything to add, but when there is no longer anything to take away.&amp;quot;
&lt;a href=&quot;http://blog.gaiam.com/quotes/authors/antoine-de-saint-exupery/55029&quot;&gt;&amp;ndash; Antoine de Saint-Exupery&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;However, as Google has moved more into products, they seem to have fallen into copy mode. Google Apps looks more and more like Microsoft Office. Feature creep abounds. And today, they committed the most egregious of sins. They added a Microsoft Bing-like wallpaper feature to the main search page on &lt;a href=&quot;http://google.com&quot;&gt;google.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Compare Android to Apple&amp;rsquo;s iOS. Well, try anyway. Which version of Android? On which device? The stock Android UI or the (purportedly) far superior Sense UI from HTC?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This&lt;/strong&gt; is the critical error the Open Source community continues to make. They conflate providing choices with &lt;em&gt;making&lt;/em&gt; choices. All the current arguments against Apple are about &lt;strong&gt;choice&lt;/strong&gt;. &lt;em&gt;Users should be able to choose. They need their freedom. If I want to run Linux on my wristwatch, I should be able to even though there&amp;rsquo;s no damn good reason for doing so. Blah, blah, blah&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bullshit. Design is about making the most appropriate choices, so that your customers don&amp;rsquo;t have to &lt;em&gt;for the most common cases&lt;/em&gt;. It&amp;rsquo;s about providing great defaults and fewer settings, not settings for every friggin' feature you offer. Sure, I could buy an Android phone and tweak it to my heart&amp;rsquo;s delight. But, do I &lt;strong&gt;want&lt;/strong&gt; to? I have to think and decide all day long. Can&amp;rsquo;t I have one thing that doesn&amp;rsquo;t force me to twiddle with it needlessly just so I can use it?&lt;/p&gt;

&lt;p&gt;I want to love Open Source products, but I can&amp;rsquo;t&amp;hellip;yet. To me, Linux on the desktop has long been displaced by Mac OS X. If some vendor creates a laptop with the build quality of a MacBook Pro, installs a distro that allows it to wake up from sleeping immediately and has non-flaky wireless support then you can bet I&amp;rsquo;ll give it a try.&lt;/p&gt;

&lt;p&gt;And I believe that &lt;em&gt;someone&lt;/em&gt; out there can do it. They just need to &lt;strong&gt;steal&lt;/strong&gt; from The Master:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;quot;People think it&amp;rsquo;s this veneer &amp;mdash; that the designers are handed this box and told, &amp;lsquo;Make it look good!&amp;rsquo; That&amp;rsquo;s not what we think design is. It&amp;rsquo;s not just what it looks like and feels like. Design is how it works.&amp;quot;
&lt;a href=&quot;http://www.nytimes.com/2003/11/30/magazine/30IPOD.html&quot;&gt;&amp;ndash; Steve Jobs, 2003&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;At the 2010 Apple Worldwide Developers Conference, Steve showed a slide with street signs indicating the intersection of &lt;em&gt;Liberal Arts&lt;/em&gt; and &lt;em&gt;Technology&lt;/em&gt;. Apple &lt;strong&gt;lives&lt;/strong&gt; on this intersection. That is the lesson that the Open Source community needs to learn. The two are not mutually exclusive. They can work together harmoniously.&lt;/p&gt;

&lt;p&gt;Find a way to bring great designers into the community and learn to work with each other. I want there to be an Apple of Open Source. I want to be its customer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>LAMP Is Dead. Long Live...DyLAN?</title>
   <link href="http://working-code.com/2010/05/18/lamp-is-dead-long-live-dylan.html"/>
   <updated>2010-05-18T00:00:00-07:00</updated>
   <id>http://working-code.com/2010/05/18/lamp-is-dead-long-live-dylan</id>
   <content type="html">&lt;p&gt;I&amp;rsquo;m sure you think the title of this post is linkbait. Maybe it is, I have an ego like everyone else. However, I&amp;rsquo;ve been wondering lately&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is the LAMP stack &lt;strong&gt;THE&lt;/strong&gt; Web stack still?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at what we have today.&lt;/p&gt;

&lt;h1&gt;Linux&lt;/h1&gt;

&lt;p&gt;I will give credit to &lt;a href=&quot;http://stackoverflow.com&quot;&gt;Stack Overflow&lt;/a&gt; for pragmatically showcasing the &lt;a href=&quot;http://asp.net/mvc&quot;&gt;ASP.NET MVC&lt;/a&gt; Web stack. This site is one of many that invalidates the idea that Unix/Linux is the only choice for a server OS. Windows can do just fine, thank you.&lt;/p&gt;

&lt;p&gt;That said, the other Web stack components naturally lead many developers down the Open Source path and, inevitably, Linux. Sure, there are many still who think &lt;a href=&quot;http://freebsd.org&quot;&gt;FreeBSD&lt;/a&gt; is The One True Unix. Or, if you&amp;rsquo;re a &lt;a href=&quot;http://joyent.com&quot;&gt;Joyeur&lt;/a&gt; then &lt;a href=&quot;http://hub.opensolaris.org/bin/view/Main/&quot;&gt;OpenSolaris&lt;/a&gt; is the bee&amp;rsquo;s knees. Everyone else is on Linux.&lt;/p&gt;

&lt;h1&gt;Apache&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; is still King of The Mountain, but &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;Nginx&lt;/a&gt; is gaining ground. The more important thing to notice is that in the old days, your Web server was also your application server. Your language binding to the Web server was either &lt;em&gt;mod_perl&lt;/em&gt; or &lt;em&gt;mod_php&lt;/em&gt;. This is the primary reason the LAMP stack took off; most Web hosts ran Apache and by then mod_perl and mod_php were default installs.&lt;/p&gt;

&lt;p&gt;With the rise of other dynamic languages (see later section), Apache and Nginx have started to be used for more static content serving and as &lt;a href=&quot;http://httpd.apache.org/docs/2.0/mod/mod_proxy.html&quot;&gt;reverse HTTP proxies&lt;/a&gt; for passing requests to backend servers like &lt;a href=&quot;http://github.com/fauna/mongrel&quot;&gt;Mongrel&lt;/a&gt;, &lt;a href=&quot;http://code.macournoyer.com/thin/&quot;&gt;Thin&lt;/a&gt; or &lt;a href=&quot;http://unicorn.bogomips.org/&quot;&gt;Unicorn&lt;/a&gt; (familiar to Ruby developers).&lt;/p&gt;

&lt;p&gt;Apache is still widely used and is a robust option. If you know how to manage and configure it, you can make it do awesome things. Nginx is small and fast and has a more sane (to me and several others, at least) configuration syntax. Its number of modules is steadily increasing. In my opinion, Apache and Nginx are two sides of the same coin. &lt;a href=&quot;http://varnish-cache.org/&quot;&gt;Varnish&lt;/a&gt;, on the other hand, is in a league of its own.&lt;/p&gt;

&lt;h1&gt;MySQL&lt;/h1&gt;

&lt;p&gt;Ahh, MySQL. The workhorse. The incumbent. The hammer that makes every problem look like a nail.&lt;/p&gt;

&lt;p&gt;I jest&amp;hellip;somewhat. Many years ago, there was more diversity in the database world. But, the world was different then. The primary problem was transaction processing and relational databases handled that problem well. Combined with the pseudo-standardization of SQL, victory was &lt;em&gt;Oracle&amp;rsquo;s&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;But, in the early days of the Web people persisted their data to flat files or DBM files. I recall people writing CGI applications and worrying about file locking, which opened the door to using relational databases. &lt;a href=&quot;http://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;, &lt;a href=&quot;http://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&quot;http://www.oracle.com/&quot;&gt;Oracle&lt;/a&gt;, &lt;a href=&quot;http://www.sybase.com/&quot;&gt;Sybase&lt;/a&gt; and sometimes even &lt;a href=&quot;http://www.microsoft.com/sqlserver/&quot;&gt;SQL Server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, Web 2.0 &amp;ldquo;happened&amp;rdquo;. And Ajax. And Twitter. The script kiddies who didn&amp;rsquo;t actually understand how RDMSes worked started having &lt;strong&gt;scaling problems&lt;/strong&gt;. For some applications, scaling an RDBMS isn&amp;rsquo;t hard&amp;hellip;it&amp;rsquo;s &lt;em&gt;costly&lt;/em&gt;. So, if you&amp;rsquo;re a twenty-something with a hot new Web app and no real funding &lt;strong&gt;costly&lt;/strong&gt; is synonymous with &lt;strong&gt;hard&lt;/strong&gt; &lt;em&gt;(especially if you have no business model)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Enter &lt;strong&gt;NoSQL&lt;/strong&gt;. The new hammer. NoSQL&amp;rsquo;s claim to fame is &lt;em&gt;easier&lt;/em&gt; scalability via swapping &lt;a href=&quot;http://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt; properties for the &lt;a href=&quot;http://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;CAP theorem&lt;/a&gt;. Simply put, transactions and consistency are less important than availability and partition tolerance (distribution). Most developers end up using object-relational mappers to flatten out objects in order to serialize them to database tables. As APIs became more prevalent and people became disillusioned with XML as a format, developers moved to &lt;a href=&quot;http://www.json.org/&quot;&gt;JSON&lt;/a&gt;. When they looked at JSON, many saw the hash data structure they were already using in their code. Serialize hashes, huh? Old hat to the Perl developers out there. And Amazon S3 is essentially a big-assed distributed hash table in the cloud.&lt;/p&gt;

&lt;p&gt;MySQL is still around and will continue to be used due to familiarity. However, as more developers use less of the relational aspects the door is opening for a NoSQL replacement&amp;hellip;the MySQL of NoSQL if you will.&lt;/p&gt;

&lt;h1&gt;(Perl|Python|PHP)&lt;/h1&gt;

&lt;p&gt;As soon as Ruby on Rails hit the scene, the &lt;strong&gt;P&lt;/strong&gt; in LAMP grew a tail. Many who know me know that I think Perl is pure evil and PHP is an abomination. Before you start unfollowing me on Twitter, realize that even &lt;a href=&quot;http://lerdorf.com/bio.php&quot;&gt;Rasmus&lt;/a&gt; knows it&amp;rsquo;s kinda crappy. PHP is more XML bindings to C code than a language. Perl is a write-once, debug many collection of syntactic atrocities. Python is actually a language, and a nice one at that.&lt;/p&gt;

&lt;p&gt;As is Ruby, my current favorite. However, it doesn&amp;rsquo;t matter what the language is. The real value is the renaming of &lt;strong&gt;scripting languages&lt;/strong&gt; to &lt;em&gt;dynamic languages&lt;/em&gt;. This slight semantic adjustment ended up highlighting the productivity gains that were lost when everyone went stampeding to Java and C# (like I did). Essentially, a whole generation of developers never learned about &lt;a href=&quot;http://en.wikipedia.org/wiki/Read-eval-print_loop&quot;&gt;REPL&lt;/a&gt;. Luckily, the next generation rediscovered it and all the wonders it brings to bear. Static typing is almost a necessity for desktop applications, but for server-side stuff that is &lt;strong&gt;mostly&lt;/strong&gt; processing text, dynamic typing is hard to beat&amp;hellip;if not downright invaluable.&lt;/p&gt;

&lt;p&gt;This new (old) discovery has spawned a renaissance in programming languages. People are experimenting with a whole set of languages, especially functional ones. &lt;a href=&quot;http://www.paulgraham.com/icad.html&quot;&gt;Paul Graham&lt;/a&gt; would be proud; everyone is re(inventing|discovering) LISP. Who would have thought that &lt;strong&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/strong&gt; would be the new hotness in programming languages? &lt;em&gt;(&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;, by the way, is amazing!)&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;LAMP is dead (or at least in critical condition)&lt;/h1&gt;

&lt;p&gt;So, you&amp;rsquo;ve built your kick-ass Web 7.0 social media disintermediation geolocation application and subsequently get Dugg, Gruber'ed and Crunch'ed. Now, your sloppily coded and barely designed LAMP app is bursting at the scenes. You trek on over to &lt;a href=&quot;http://highscalability.com/&quot;&gt;High Scalability&lt;/a&gt; to search for your &lt;a href=&quot;http://www.virtualschool.edu/mon/SoftwareEngineering/BrooksNoSilverBullet.html&quot;&gt;Silver Bullet&lt;/a&gt;. Unfortunately, it&amp;rsquo;s not as easy as when you started slinging your PHP code. Should you use Hadoop or Cassandra? Everyone uses &lt;a href=&quot;http://memcached.org/&quot;&gt;memcached&lt;/a&gt;, but few tell you how to deal with cache invalidation. Is &lt;a href=&quot;http://1978th.net/tokyotyrant/&quot;&gt;Tokyo Tyrant&lt;/a&gt; really distributed, or does it just support easier replication?&lt;/p&gt;

&lt;p&gt;Thing is, it always comes down to understanding your problem and doing some careful and considered design. However, some trends have emerged in the evolution of the LAMP stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dynamic language&lt;/li&gt;
&lt;li&gt;Linux (still The King, baby!)&lt;/li&gt;
&lt;li&gt;Apache (or Nginx, but this makes my acronym work&amp;hellip;)&lt;/li&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;LAMP is dead. Long live &lt;strong&gt;DyLAN!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That is, if you still care about servers and all that mess. The &lt;strong&gt;&lt;em&gt;REAL&lt;/em&gt;&lt;/strong&gt; hotshots know to embrace Platform as a Service (Paas) or The Cloud. Get an account on &lt;a href=&quot;http://code.google.com/appengine/&quot;&gt;Google App Engine&lt;/a&gt;, &lt;a href=&quot;http://www.engineyard.com/&quot;&gt;Engine Yard&lt;/a&gt; or &lt;a href=&quot;http://heroku.com/&quot;&gt;Heroku&lt;/a&gt;. If you have to do more than:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;git push origin master&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;to deploy your app &lt;em&gt;you&amp;rsquo;re doing it wrong&lt;/em&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mostly Cloudy</title>
   <link href="http://working-code.com/2010/04/30/mostly-cloudy.html"/>
   <updated>2010-04-30T00:00:00-07:00</updated>
   <id>http://working-code.com/2010/04/30/mostly-cloudy</id>
   <content type="html">&lt;p&gt;In a &lt;a href=&quot;/2010/02/20/mobile-is-the-new-desktop.html&quot;&gt;previous post&lt;/a&gt;, I talked about my preference for developing for the Web as opposed to jumping on the native application bandwagon that is dominating mobile development these days. In this post, I&amp;rsquo;d like to go deeper on that topic.&lt;/p&gt;

&lt;p&gt;At my &lt;a href=&quot;http://adobe.com&quot;&gt;day job&lt;/a&gt;, I spend a good part of my day explaining services to people. Some may say that we don&amp;rsquo;t &lt;a href=&quot;http://www.mslater.com/2009/12/4/10-years-later-thoughts-on-phototablet-fotiva-adobe&quot;&gt;get the Web&lt;/a&gt; and there is probably some truth to that given &lt;a href=&quot;http://www.apple.com/hotnews/thoughts-on-flash/&quot;&gt;recent events&lt;/a&gt;. Yet, being inside the &lt;strike&gt;sausage&lt;/strike&gt; software factory has shown me that it is more a cultural issue; we rose to prominence during the Age of Software as a Product. Combine that with a specialist and generally long-tenured workforce, it is no surprise that we have difficulty adapting to the software as a service era.&lt;/p&gt;

&lt;p&gt;One major mind shift for people coming from a desktop application development perspective is the idea that &lt;em&gt;multi-user&lt;/em&gt; is the rule, not the exception. Also, the fact that since you no longer have the hassle of creating installers that have to deal with wildly varying system configurations, you have more flexibility in the choice of languages, libraries and applications you can use to build your service. You, the software developer, have a lot more freedom.&lt;/p&gt;

&lt;p&gt;Of course, there are tradeoffs. As opposed to worrying about the intricacies of your  widget toolkit, keeping your interface responsive and, of course, making it attractive and functional you have to deal with lower-level details. Concurrency. Latency. Throughput. Serialization. &lt;em&gt;This stuff is really cool, BTW.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I tend to call this &lt;strong&gt;the iceberg&lt;/strong&gt;. Most people see the part that penetrates the water&amp;rsquo;s surface, but never pay attention to the incredible mass that lurks below. Another analogy, soon to be relegated to the historical trash can, is the &lt;strong&gt;dial tone&lt;/strong&gt;. Do you ever stop to consider all the engineering that goes behind producing that pleasing tone that informs you that you can press a few buttons and connect with another human being? Of course you don&amp;rsquo;t! &lt;em&gt;You tweet, just like me. What the hell is a dial tone?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;http://blog.kevingoldsmith.com/&quot;&gt;co-worker&lt;/a&gt; and I were talking one day and he mentioned a former colleague of his who was a Unix geek before going to Microsoft for many years. When this guy left and went back to hacking Unix, he was (pleasantly) surprised how easy it was for him to jump back into things. Very little had changed in all that time. vi and emacs were still the dominant editors. More importantly, the programming model hadn&amp;rsquo;t changed. Write small programs that do one thing well and connect them via pipes.&lt;/p&gt;

&lt;p&gt;My friend and I pondered this. How, after all this time and with the rapid pace of technology, was Unix not only mostly the same but &lt;strong&gt;thriving&lt;/strong&gt;? My theory: cause its model works.&lt;/p&gt;

&lt;p&gt;Take concurrency. Hard-assed problem, no one will argue that. And, we have all learned the hard way that &lt;em&gt;threads suck&lt;/em&gt;. And while there are great new constructs like &lt;em&gt;actors&lt;/em&gt; and &lt;em&gt;software transactional memory&lt;/em&gt;, they are generally implemented in obscure and academic languages like Scala and Haskell (&lt;em&gt;here comes the hate mail!&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Or, you could fall back to the Unix process model. &lt;strong&gt;fork&lt;/strong&gt; and &lt;strong&gt;exec&lt;/strong&gt; still work well for a lot of cases. Building an asynchronous backend for a service requires long-running processes for message queues and daemon processes for pulling jobs and spinning up workers. This is Mom and apple pie for Unix wonks.&lt;/p&gt;

&lt;p&gt;Add to that the complexity of processing large amounts of data or responding in near realtime to requests from multiple clients. As great as the frameworks are that come out of Cupertino, they&amp;rsquo;re not going to wrap up that kind of stuff and make it easy for the Cocoa Touch crowd to deploy highly scalable services. If it happens at all, it will come out of &lt;a href=&quot;http://aws.amazon.com&quot;&gt;Seattle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can&amp;rsquo;t abstract everything. At some point, you have to know how things &lt;em&gt;work&lt;/em&gt;. Even with amazing cloud platforms like &lt;a href=&quot;http://aws.amazon.com/ec2/&quot;&gt;Amazon EC2&lt;/a&gt;, &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt; (&lt;em&gt;LOVE&lt;/em&gt; what these guys are doing!) and &lt;a href=&quot;http://engineyard.com&quot;&gt;Engine Yard&lt;/a&gt; you need to understand how things interact, how latency will impact you and how to orchestrate multiple cooperating services. You have to internalize that &lt;em&gt;failure happens, and you need to figure out how to deal with it because you can&amp;rsquo;t prevent it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, how does this relate to the new world of mobile development? Aside from games and a handful of other apps, how many apps do you use that are &lt;strong&gt;NOT&lt;/strong&gt; connected to some kind of service? All those location-aware, map intensive, real-time and messaging apps that you couldn&amp;rsquo;t live without are just the &lt;a href=&quot;http://en.wikipedia.org/wiki/Icebergs&quot;&gt;tips of the icebergs&lt;/a&gt;. The services that push data to these apps are amazingly intricate and complex. And like the ice below the surface, most people (including app developers) shy away from understanding how they are designed and implemented. They do realize, however, that they are necessary.&lt;/p&gt;

&lt;p&gt;HTTP will be with us for a while, and TCP/IP even longer. The Web may recede behind pay walls, but you&amp;rsquo;ll still use the Internet. Android may overtake iPhone OS or maybe Microsoft will come from behind again and convince people that Windows Phone 364 is for the &lt;em&gt;social network ready&lt;/em&gt; enterprise. Whatever. No matter the platform, the genie is out of the bottle. People expect to be online and connected to services no matter the device. Amazingly, services today can work with any kind of client that has a network library and a way to parse the data you receive (assuming you designed it correctly).&lt;/p&gt;

&lt;p&gt;There are a slew of hard problems to solve on the services side of the new software development landscape. Sure, the front end is what people see and respond to for the most part. But, in reality, people are attracted to the &lt;strong&gt;value&lt;/strong&gt; that a well-designed app and its corresponding service provide. While I can appreciate great visual and interaction design, I am not especially skilled at either. My creativity comes out in figuring out how to leverage things like &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;, &lt;a href=&quot;http://code.google.com/p/redis/&quot;&gt;Redis&lt;/a&gt;, &lt;a href=&quot;http://unicorn.bogomips.org/&quot;&gt;Unicorn&lt;/a&gt; and &lt;a href=&quot;http://kr.github.com/beanstalkd/&quot;&gt;beanstalkd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you made it this far, I recommend you read The State of the Internet Operating System, &lt;a href=&quot;http://radar.oreilly.com/2010/03/state-of-internet-operating-system.html&quot;&gt;Part I&lt;/a&gt; and &lt;a href=&quot;http://radar.oreilly.com/2010/04/handicapping-internet-platform-wars.html&quot;&gt;Part II&lt;/a&gt;. They don&amp;rsquo;t call Tim O'Reilly &lt;em&gt;The Prophet&lt;/em&gt; for nuthin'!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>3 Is The Magic Number</title>
   <link href="http://working-code.com/2010/03/14/3-Is-The-Magic-Number.html"/>
   <updated>2010-03-14T00:00:00-08:00</updated>
   <id>http://working-code.com/2010/03/14/3-Is-The-Magic-Number</id>
   <content type="html">&lt;p&gt;More or less. At least, when it comes to software development these days. That&amp;rsquo;s not to say it&amp;rsquo;s a hard and fast number, but it is the sweet spot in my experience. But, before people start raking me over the coals asking, &lt;em&gt;&amp;ldquo;Do you actually believe only 3 people could write something as complex as Photoshop?&amp;rdquo;&lt;/em&gt; let me set the context here and now &lt;em&gt;(Oh, and to answer the previous question, Yes)&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A large percentage of software development is in building Web applications and lately smaller, mobile applications for iPhones, Android devices and Blackberrys.&lt;/li&gt;
&lt;li&gt;There is a vibrant community of independent software developers that are building desktop applications with teams as small as &lt;strong&gt;1&lt;/strong&gt; and making a good living.&lt;/li&gt;
&lt;li&gt;The majority of large applications did not START as large applications. They were small applications that &lt;em&gt;GREW&lt;/em&gt; into large applications. And when they started, there were only a few developers (&lt;em&gt;even Photoshop!&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Rethinking Brooks&amp;rsquo;s Law&lt;/h4&gt;

&lt;p&gt;As often misquoted as &lt;a href=&quot;http://en.wikipedia.org/wiki/Brooks%27s_law&quot;&gt;Brooks&amp;rsquo;s Law&lt;/a&gt; is, the core tenet is still valid. The communication costs incurred by adding more people to a project can be crippling.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;ldquo;You won&amp;rsquo;t catch me advocating for &amp;lsquo;hard-working average programmers&amp;rsquo;. What I do believe is: you should stock your team with only rockstars, between 2 and 4 of them. I&amp;rsquo;ve worked on teams that only had 3 people. I&amp;rsquo;ve worked on teams with about 16. I was a consultant, I&amp;rsquo;ve worked on a lot of teams &amp;ndash; big and small. My experience was that the smaller teams were much more effective, every time.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Jay Fields, &lt;a href=&quot;http://blog.jayfields.com/2010/03/pairing-isnt-solution.html&quot;&gt;Pairing isn&amp;rsquo;t the Solution&lt;/a&gt; via &lt;a href=&quot;http://twitter.com/zedshaw/status/10356819700&quot;&gt;Zed Shaw&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The right way to think about Brooks&amp;rsquo;s Law is to pay more attention to how we form teams in the first place. Too many companies think of developers as interchangeable cogs and just throw people onto projects as if what they are working on and who they work with do not matter. &lt;strong&gt;NOTHING&lt;/strong&gt; could be farther from the truth.&lt;/p&gt;

&lt;h4&gt;Software Development is a Social Activity&lt;/h4&gt;

&lt;p&gt;Whether you are pair programming on some Java code, chatting in the #mongodb IRC channel on &lt;a href=&quot;http://freenode.net&quot;&gt;freenode&lt;/a&gt; or typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push github master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;writing code is a social activity. Developers need to talk to other developers, bounce ideas off each other or just show off. It&amp;rsquo;s a &lt;em&gt;craft&lt;/em&gt;. That&amp;rsquo;s why the whole idea of software craftsmanship holds so much appeal. We applied Industrial Revolution principles to knowledge work and that&amp;rsquo;s just insane. Unfortunately, many large companies still haven&amp;rsquo;t &lt;a href=&quot;http://www.entertonement.com/clips/pmrmbndcrh--Did-you-see-the-memo-about-thisOffice-Space-Gary-Cole-Bill-Lumbergh-&quot;&gt;gotten the memo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Large companies have introduced so much overhead to the process of delivering software it&amp;rsquo;s amazing any gets released at all. Much of this overhead is related to &lt;em&gt;managing communication between functional teams&lt;/em&gt;. Interesting&amp;hellip;&lt;/p&gt;

&lt;p&gt;Has any one considered WHY we even have functional teams? Why isn&amp;rsquo;t everyone involved on the project on one team? &lt;em&gt;Duh! Too many people.&lt;/em&gt; Why do we have so many people? &lt;em&gt;Because we need specialists, so we break them up into teams, give them managers and then add project managers to facilitate communication&amp;hellip;&lt;/em&gt; Which, of course, is absolutely necessary because we all know that engineers don&amp;rsquo;t have &lt;a href=&quot;http://www.break.com/usercontent/2008/4/Office-Space-I-have-people-skills-488721.html&quot;&gt;people skills&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Except that is a big, fat, honking &lt;strong&gt;LIE&lt;/strong&gt;. The real issue is that developers have to hold a ton of information in their heads and attain a high state of concentration. They understandably get a wee bit irritated every time they have to context switch to address the latest issue of &lt;strong&gt;The Institution&lt;/strong&gt;. Large teams introduce every possible detriment to a developer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Interruptions&lt;/li&gt;
&lt;li&gt;Unnecessary communication&lt;/li&gt;
&lt;li&gt;Low bandwidth communication&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;How can we turn this around? In my utopian vision of the future, software development teams are comprised of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Developers&lt;/li&gt;
&lt;li&gt;Designer&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When I say &lt;em&gt;developers&lt;/em&gt;, I am stating that these people fulfill the roles of developers, testers and operations people. If you had a development manager on the team before I hope s/he can code. Otherwise, we have no need for them.&lt;/p&gt;

&lt;p&gt;I also think there should be a &lt;strong&gt;SINGLE&lt;/strong&gt; designer on the team that is both the interaction and visual designer. This, in my mind, helps retain the conceptual integrity of the user experience design. I completely agree with &lt;a href=&quot;http://elliotjaystocks.com/blog/web-designers-who-cant-code/&quot;&gt;Elliot Jay Stocks&lt;/a&gt; that designers must be able to code in this day and age. More importantly, they should heed at least one part of Ryan Singer&amp;rsquo;s description of the &lt;a href=&quot;http://37signals.com/svn/posts/2135-podcast-episode-7-ryan-singer-on-the-37signals-design-process&quot;&gt;37signals design process&lt;/a&gt;&amp;hellip;work in the code. By writing HTML and CSS, checking templates into version control and running the software locally on their own machines during development designers will have a much more intimate relationship with the final product. In the process, it helps address that whole &lt;a href=&quot;http://www.adobe.com/resources/business/rich_internet_apps/workflow/&quot;&gt;designer/developer workflow&lt;/a&gt; thing.&lt;/p&gt;

&lt;h4&gt;But, That Doesn&amp;rsquo;t Scale&amp;#0153;&lt;/h4&gt;

&lt;p&gt;Of course it does, just not in the way you&amp;rsquo;ve been conditioned to think. Jason Fried gets it:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;ldquo;We&amp;rsquo;re going to start working in teams. A team is made of three people: One designer and two programmers. A system administrator will also assist the team when necessary. To start, we will have two dedicated teams plus one slack team. The slack team is available to help either team, or take on other stuff that inevitably comes up. In March we expect to have a third team dedicated to the products.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Jason Fried, &lt;a href=&quot;http://37signals.com/svn/posts/2099-2010-the-year-of-the-products-a-new-way-of-working&quot;&gt;2010: The year of the products + a new way of working&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Microsoft has/had a similar concept called feature teams. Amazon does the two-pizza team thing. It&amp;rsquo;s intrinsic to human nature to prefer small circles. Ever notice at a large party that everyone breaks off into small groups of 4-6 people to have a conversation? Why do you think that is? Seth Godin gives us a hint:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;ldquo;Handshakes. How many handshakes do you need to introduce three people? Only three. Ishita, meet Susan. Susan, meet Clay. Clay, meet Ishita. Four people need twice as many, six. And five people? Ten.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Seth Godin, &lt;a href=&quot;http://www.amazon.com/Linchpin-Are-Indispensable-Seth-Godin/dp/1591843162/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1268610473&amp;amp;sr=1-1&quot;&gt;Linchpin&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Who will talk to the customers, get their requirements, understand the market&amp;hellip;.?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You haven&amp;rsquo;t been following along, have you?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mobile Is The New Desktop</title>
   <link href="http://working-code.com/2010/02/20/mobile-is-the-new-desktop.html"/>
   <updated>2010-02-20T00:00:00-08:00</updated>
   <id>http://working-code.com/2010/02/20/mobile-is-the-new-desktop</id>
   <content type="html">&lt;p&gt;Given all the hubbub around the iPad and everyone wishing for the fall of my &lt;a href=&quot;http://adobe.com&quot;&gt;employer&amp;rsquo;s&lt;/a&gt; platform, I&amp;rsquo;ve been wondering how best to express my thoughts on the current state of affairs.&lt;/p&gt;

&lt;p&gt;Several years ago, I made the personal decision to focus on Web development. Primarily, building backend applications and Web services for browser-based clients. While I love working for Adobe, I am not really interested in Flash or AIR technically. That is probably due in part to the years I&amp;rsquo;d spent doing cross-platform development for Windows and Mac OS. Flash, in my opinion, is good in small doses. And AIR is mostly useful (to me at least) when used where people would have built a Visual Basic application 15 years ago. Even that is a weak argument as those people would build a Web application today.&lt;/p&gt;

&lt;p&gt;At the end of the day, I grew tired of trying to keep up with Microsoft&amp;rsquo;s technology du jour. I think Joel Spolsky&amp;rsquo;s essay &lt;a href=&quot;http://www.joelonsoftware.com/articles/APIWar.html&quot;&gt;How Microsoft Lost the API War&lt;/a&gt; sums up my feelings pretty nicely:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Outside developers, who were never particularly happy with the complexity of Windows development, have defected from the Microsoft platform &lt;em&gt;en-masse&lt;/em&gt; and are now developing for the web&amp;hellip;None of this bodes well for Microsoft and the profits it enjoyed thanks to its API power. The new API is HTML, and the new winners in the application development marketplace will be the people who can make HTML sing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And although at that time I came to favor the Mac as my platform of choice, I couldn&amp;rsquo;t bring myself to develop for it. I just had no desire to become a &lt;a href=&quot;http://www.tbray.org/ongoing/When/200x/2003/07/12/WebsThePlace&quot;&gt;sharecropper&lt;/a&gt;. Using a Mac as my personal computing platform, but developing for the Web using Unix/Linux as my server OS felt &lt;strong&gt;&lt;em&gt;right&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Last year, I attended Apple&amp;rsquo;s Worldwide Developer Conference. Although the bulk of the conference was about iPhone OS 3.0 and the bazillions of apps being developed, I mostly went to the Web/Safari tracks. All the work regarding HTML5 support seemed much more relevant. Web development was moving forward again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STILL&lt;/strong&gt;, everybody wanted to know how to build native iPhone apps so they could sell them in the App Store and become millionaires. Aside from games and a few other visually complex applications, I didn&amp;rsquo;t get it. Sure, the App Store solved some problems and was a great way to &lt;strong&gt;&lt;em&gt;maybe&lt;/em&gt;&lt;/strong&gt; get your app in front of millions of people. But, at what cost?&lt;/p&gt;

&lt;p&gt;Flash forward to today. There has been plenty of griping about the App Store review process. The sheer number of apps makes it difficult to find the gems in a sea of crap. Reviews are outdated and can potentially affect sales even though the stated issues may have already been addressed. Frankly, the majority of apps I see in the App Store could &lt;strong&gt;EASILY&lt;/strong&gt; have been webapps, including &lt;a href=&quot;http://ego-app.com&quot;&gt;some that friends of mine have made&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Android and Blackberry are no better. I have no desire to develop in Java again and if I did I would use it on the server like I used to. Palm actually appears to have gotten it right with webOS but, umm&amp;hellip;, nobody&amp;rsquo;s really buying those devices.&lt;/p&gt;

&lt;p&gt;I tried, unsuccessfully, to write an iPhone app. I&amp;rsquo;ll admit I bit off more than I could chew at first and my own disgust for IDEs and C/C++/Objective C got in the way. Considering Objective C and Cocoa Touch (or C# and MonoTouch) are the only real ways to build a native app for the iPhone I probably won&amp;rsquo;t be building native apps anytime soon, unless &lt;a href=&quot;http://macruby.org&quot;&gt;MacRuby&lt;/a&gt; adds iPhone support. No, I won&amp;rsquo;t use the &lt;a href=&quot;http://labs.adobe.com/technologies/flashcs5/appsfor_iphone/&quot;&gt;Flash iPhone Packager&lt;/a&gt;; see my position statement above.&lt;/p&gt;

&lt;p&gt;The iPhone (and now, the Droid and Nexus One and &lt;em&gt;insert next model smartphone here&lt;/em&gt;) and iPad are showing what the future holds. Mobile devices are the new personal computers. Their form factor combined with native apps, including desktop class Web browsers, make them the perfect devices for information consumption. Desktops and laptops will be relegated to mostly &lt;em&gt;content creation&lt;/em&gt; tasks. I can easily see my son&amp;rsquo;s first computer being a tablet of some sort. And, that&amp;rsquo;s great.&lt;/p&gt;

&lt;p&gt;As a developer, however, I STILL don&amp;rsquo;t want to get sucked into the &amp;ldquo;develop for our platform&amp;rdquo; crap that dominated the desktop era. I will readily concede that there is still a need for native applications. Heck, I still use them! I&amp;rsquo;m just not interested in &lt;em&gt;writing them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Many talk about &lt;strong&gt;software plus services&lt;/strong&gt; but this is usually just a way to position rich client technology. I believe in software that &lt;em&gt;complements&lt;/em&gt; services. iTunes is actually a good example of this, but the plethora of Twitter clients is an even better one. Twitter the Web service was valuable in and of itself, but by exposing a great API, clients could be built that made it even more valuable. I&amp;rsquo;m kinda partial to &lt;a href=&quot;http://www.atebits.com/tweetie-iphone/&quot;&gt;Tweetie&lt;/a&gt; myself.&lt;/p&gt;

&lt;p&gt;But, Tweetie 2 is not on Android and it may never be. I&amp;rsquo;m sure I could find a reasonable substitute as I am considering buying a Nexus One. But, as a developer myself, do I want to invest time in learning iPhone development AND Android development AND Blackberry development (and maybe even Palm development). &amp;lsquo;Cause it&amp;rsquo;s just not the learning curve involved, but dealing with all these damn App Stores that are cropping up. You know every time Apple does something competitors copy it&amp;hellip;badly. My head is hurting already!&lt;/p&gt;

&lt;p&gt;No, I&amp;rsquo;ll spend my time improving my Ruby and Javascript skills. Maybe I&amp;rsquo;ll pick up Erlang and Clojure to stretch my brain a bit. I&amp;rsquo;ll DEFINITELY learn HTML5 and CSS3. But, I&amp;rsquo;ll let others tackle developing native apps for all these mobile devices; I&amp;rsquo;m sure I&amp;rsquo;ll even buy a few.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sticking with The Web.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>API Design is Interaction Design</title>
   <link href="http://working-code.com/2009/06/10/api-design-is-interaction-design.html"/>
   <updated>2009-06-10T00:00:00-07:00</updated>
   <id>http://working-code.com/2009/06/10/api-design-is-interaction-design</id>
   <content type="html">&lt;p&gt;For the past few weeks, I have been working with my team on refining the &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for our Web service. While there will be some new additions in order to meet requirements for applications that will build upon the &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;, many of the changes are refinements. Early adopters and our own experience has provided a treasure trove of information that has guided the development of the latest version.&lt;/p&gt;
&lt;p&gt;From the very beginning, I chose a &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; Oriented Architecture (&lt;span class=&quot;caps&quot;&gt;ROA&lt;/span&gt;) for the service. To me, this just seemed obvious. I&amp;#8217;ve followed the development of &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;RPC&lt;/span&gt; and &lt;span class=&quot;caps&quot;&gt;SOAP&lt;/span&gt; for years. For awhile, &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;RPC&lt;/span&gt; seemed pretty cool and simple to me especially when compared to the mess that is &lt;span class=&quot;caps&quot;&gt;SOAP&lt;/span&gt; (which evolved into &lt;strong&gt;&lt;em&gt;WS-Death Star&lt;/em&gt;&lt;/strong&gt;). However, in practice I always ended up sending some simple, Plain Ol&amp;#8217; &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; over &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;. For the majority of cases, &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; and URIs covered the functionality I needed sufficiently.&lt;/p&gt;
&lt;p&gt;As &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; became a more prevalent meme, I got a copy of &lt;a href=&quot;http://www.amazon.com/RESTful-Web-Services-Leonard-Richardson/dp/0596529260/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1244646726&amp;amp;sr=8-1&quot;&gt;RESTful Web Services&lt;/a&gt; and read it cover-to-cover. I recommend this book to &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;ANYONE&lt;/span&gt;&lt;/strong&gt; building Web applications. It put what was common practice for me into context and really illustrated what &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; and &lt;span class=&quot;caps&quot;&gt;ROA&lt;/span&gt; are really about and what tradeoffs need to be made in every application.&lt;/p&gt;
&lt;p&gt;One part of the book that really stood out for me were the sections on &lt;strong&gt;resource design&lt;/strong&gt;. Instead of the highly procedural &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;RPC&lt;/span&gt; or my own custom-coded &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; schemas in my &lt;span class=&quot;caps&quot;&gt;POX&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; implementations, &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; made me think more about the actual objects, or resources, that I wanted to interact with over the network. Doing this forced me to think harder about naming and behaviors (whether or not they mapped cleanly to &lt;span class=&quot;caps&quot;&gt;GET&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;PUT&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;HEAD&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;DELETE&lt;/span&gt; and, of course, &lt;span class=&quot;caps&quot;&gt;POST&lt;/span&gt;). For error conditions, there was almost always an &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; status code that would work for us. And, &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; headers were incredibly useful in dealing with metadata.&lt;/p&gt;
&lt;p&gt;So, on my first pass with our &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; I attempted to adhere to RESTful principles. After identifying my resources, I spent even more time thinking about &lt;strong&gt;representations&lt;/strong&gt;, the content types and schemas for the data my service would consume and produce. Many of my early assumptions changed quickly as I worked through this process (and again as we started working on the latest version) For instance, I once considered &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; a safe, de facto format to support in an &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. Then, along came &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;. When, I looked at some of my earlier representations I saw almost an order or magnitude difference in the size of an &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; response compared to its &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; counterpart &lt;em&gt;for exactly the same data!&lt;/em&gt; Now, in many cases, &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; is a requirement. However, if you have the ability to define exactly which representations you will support, think long and hard about when to use &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;. Given the proliferation of libraries in almost every conceivable language, &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; is almost as de facto a choice as &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; and has even more practical benefits although there are also downsides, like potential security vulnerabilities. As in everything else, one should pick the tools that help solve the problem at hand.&lt;/p&gt;
&lt;p&gt;The first versions of our &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; worked fine. The true test was seeing the number of people who just went to our documentation page and started coding against it. Generally, we received fewer than half a dozen questions via email before they were able to productively use the service. That&amp;#8217;s a huge win! We also ate our own dog food by prototyping clients for the service using:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;curl&lt;/li&gt;
	&lt;li&gt;Ruby (using &lt;a href=&quot;http://merbivore.com&quot;&gt;Merb&lt;/a&gt; as our framework)&lt;/li&gt;
	&lt;li&gt;Flash (ActionScript 3 and the Flex framework)&lt;/li&gt;
	&lt;li&gt;Adobe &lt;span class=&quot;caps&quot;&gt;AIR&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the clients worked well, with the minor exception of Flash. Unfortunately, Flash has some limitations with respect to things like:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; response codes other than 200&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;PUT&lt;/span&gt; and &lt;span class=&quot;caps&quot;&gt;DELETE&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;Custom &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; headers&lt;/li&gt;
	&lt;li&gt;Using the User-Agent to identify the Flash Player&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Surprisingly, Adobe &lt;span class=&quot;caps&quot;&gt;AIR&lt;/span&gt; works just fine with our &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. Here, we had a nicely defined &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; but needed to make it work with Flash. The thought of either creating a separate &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; or moving to a least common delimiter approach for everyone was not appealing. However, there was actually a simple solution. If we added a prefix to all our &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; endpoints, we would know that the client was the Flash Player. In our Web service code, we wrote a proxy that would extract input from the request and then call the &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; directly. When the &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; code generated a response, the proxy would repackage it appropriately for the player:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Always generate a 200 response&lt;/li&gt;
	&lt;li&gt;In the response body, use an &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; document to house:
	&lt;ul&gt;
		&lt;li&gt;The actual &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; response code&lt;/li&gt;
		&lt;li&gt;Standard and custom headers&lt;/li&gt;
		&lt;li&gt;Response body from the &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The beauty of this approach is that it is fairly generic. As we add new endpoints, the proxy does not need to be changed. The Web frameworks router just tries to match everything after the prefix against our existing RESTful routes. If we have a match, then the proxy calls that &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. Otherwise, we return an error. Simple. So, how is this interaction design? Well, developers are users, right? For the most part, we try every new &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; by using &lt;strong&gt;curl&lt;/strong&gt; or these days, &lt;a href=&quot;http://rest-client.heroku.com/rdoc/&quot;&gt;rest-client&lt;/a&gt;. If the &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; seems too cumbersome using either of these tools, then we&amp;#8217;ve probably done something really wrong. And, we did. There were a few APIs that were a little unwieldy or confusing due to the naming, so we focused on them a lot for the latest version. Deprecation can be a good thing.&lt;/p&gt;
&lt;p&gt;As developers, we use tons of APIs from various sources. Some are good, some not so good. &lt;a href=&quot;http://al3x.net&quot;&gt;Alex Payne&lt;/a&gt;, the &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; Lead at &lt;a href=&quot;http://twitter.com&quot;&gt;Twitter&lt;/a&gt; gave a great presentation the &lt;a href=&quot;http://www.slideshare.net/al3x/the-interaction-design-of-apis&quot;&gt;interaction design of APIs&lt;/a&gt;. I almost didn&amp;#8217;t write this blog post because Alex&amp;#8217;s presentation was so spot on. But, I think it is a topic that may not get the attention it deserves so I&amp;#8217;ll throw my hat in the ring. In our &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;, we leverage an internal user authentication service as opposed to rolling our own. This service had an &amp;#8220;&lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&amp;#8221; that was essentially a Plain Ol&amp;#8217; &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; over &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; endpoint that called into their Java code. Not really RESTful, but generally workable. The problem was that their &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; did not have feature parity with their Java and ActionScript APIs. We were told that this would be addressed with the next version of the &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; and there would be a new &amp;#8220;&lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&amp;#8221;. Great!&lt;/p&gt;
&lt;p&gt;Well, maybe not so great. The user authentication service was growing to meet the needs of multiple clients and, like us, did not want to rewrite their code to address their non-primary clients. Their approach was to use a proxy approach as well that generated interfaces from their Java class and method definitions. See where this is going yet?&lt;/p&gt;
&lt;p&gt;The &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; generated from the class and method definitions was approximately &lt;strong&gt;an order of magnitude&lt;/strong&gt; larger than the previous &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;. Sure, we got feature parity but good luck trying to figure out how to &lt;span class=&quot;caps&quot;&gt;USE&lt;/span&gt; the &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. I had to have at least 5 browser tabs open and look through JavaDocs to figure out how to create an account! I know, I know&amp;#8230; once we get it done it&amp;#8217;s done&amp;#8230;or is it? What happens when they change method names or parameter lists? Alex defines &amp;#8220;The &lt;strong&gt;Humane&lt;/strong&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&amp;#8221; as:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Explorable&lt;/li&gt;
	&lt;li&gt;Predictable&lt;/li&gt;
	&lt;li&gt;Consistent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This user authentication &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; is not humane currently. I suspect that this is rooted in its implementation. It is a Java-based Web service and there are tons of tools and APIs that can turn Java objects into Web services. Unfortunately, the services generated are best consumed by &lt;em&gt;other Java applications and services&lt;/em&gt;. My team uses &lt;a href=&quot;http://danube.com/scrumworks/pro&quot;&gt;ScrumWorks Pro&lt;/a&gt; for our agile planning and task tracking. It too has one of these Java-generated Web service APIs which I just find inscrutable. I&amp;#8217;ve seen similar things in the .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; world as well. On the Web, Web service clients can be as simple as curl or as complex as a desktop Windows or Mac application like iTunes. Every programming language/tool has its own idioms, but they all have one thing in common: they likely have one or more libraries for communicating via &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;And that is the interaction design advice I&amp;#8217;d like to impart. Recently, there have been a proliferation of projects that help you build applications and services with nothing more than &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;, Javascript/&lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; and general RESTful principles. &lt;a href=&quot;http://getcloudkit.com&quot;&gt;CloudKit&lt;/a&gt; bills itself as an &lt;strong&gt;&lt;em&gt;Open Web &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; Appliance&lt;/em&gt;&lt;/strong&gt;. Once you&amp;#8217;ve downloaded and installed the Ruby gem, you can expose a resource and immediately interact with it using curl. Awesome! And then there is CouchDB, which is getting a ton of attention and for good reason. Jacob Kaplan-Moss, one of the creators of Django, said this of CouchDB in a blog post called &lt;a href=&quot;http://jacobian.org/writing/of-the-web/&quot;&gt;Of the Web&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let me tell you something: Django may be built for the Web, but CouchDB is built of the Web. I&amp;#8217;ve never seen software that so completely embraces the philosophies behind &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;. CouchDB makes Django look old-school in the same way that Django makes &lt;span class=&quot;caps&quot;&gt;ASP&lt;/span&gt; look outdated. Let me try to explain what I&amp;#8217;m talking about. You want an &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; without having to write a line of code? It&amp;#8217;s called curl, and it ships with your MacBook. And just look at how simple the APIs are in your favorite language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are building a Web application or service, strive to make it &lt;strong&gt;Of the Web&lt;/strong&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Web Development vs. Software Development</title>
   <link href="http://working-code.com/2009/04/13/webdev-vs-swdev.html"/>
   <updated>2009-04-13T00:00:00-07:00</updated>
   <id>http://working-code.com/2009/04/13/webdev-vs-swdev</id>
   <content type="html">&lt;p&gt;From Eric S. Raymond, &lt;em&gt;The Art of Unix Programming, Chapter 11: The Web Browser as a Universal Front End&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For a large class of applications, it makes increasing sense not to write a custom &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; front end at all, but rather to press Web browsers into service in that role. This approach has many advantages. The most obvious is that you don&amp;#8217;t have to write procedural &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; code &amp;#8211; instead, you can describe the &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; you want in languages (&lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; and JavaScript) that are specialized for it. This avoids a lot of expensive and complex single-purpose coding and often more than halves the total project effort. Another is that it makes your application instantly Internet-ready; the front end may be on the same host as the back end, or may be a thousand miles away. Yet another is that all the minor presentation details of the application (such as fonts and color) are no longer your back end&amp;#8217;s problem, and indeed can be customized by users to their own tastes through mechanisms like browser preferences and cascading style sheets. Finally, the uniform elements of the Web interface substantially ease the user&amp;#8217;s learning task.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For most of my career, there has been endless, tedious debate over the nature of software development. Is it math, science, engineering or craft? Well, having gone to an &lt;a href=&quot;http://poly.edu&quot;&gt;engineering school&lt;/a&gt; to study computer science and in the process take a &lt;span class=&quot;caps&quot;&gt;TON&lt;/span&gt; of math, science and engineering courses I can tell you that the majority of what people call software development is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Craft&quot;&gt;craft&lt;/a&gt; and we should stop obsessing over that fact.&lt;/p&gt;
&lt;p&gt;I have been a self-professed &lt;strong&gt;computer science bigot&lt;/strong&gt; for a long time. I tended to make a distinction between people who had degrees in computer science (or at least studied the foundation stuff) and self taught developers. You know, a caste system. The high priesthood vs. the unwashed masses. And, in the dotcom days, that bias was reinforced when I saw the &amp;#8220;designs&amp;#8221; created by the Perl and &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; hackers. I have never, and probably will never, write a line of Perl in my life. Of course, some think that Ruby is the new Perl so I may have just lied! :-)&lt;/p&gt;
&lt;p&gt;However, after a few years writing Active Server Pages applications with VBScript and then moving back to a more comfortable language in Java with servlets, JavaServer Pages and &lt;span class=&quot;caps&quot;&gt;JDBC&lt;/span&gt; my perspective slowly changed. Sure, I wrote model-view-controller (&lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt;) code in classic &lt;span class=&quot;caps&quot;&gt;ASP&lt;/span&gt; just as I did in Java. But, I learned many things by working closely with Web designers. I gained greater appreciation for aesthetics, user experience and &lt;a href=&quot;http://www.cooper.com/insights/books/#inmates&quot;&gt;interaction design&lt;/a&gt; as I built more Web applications. While my stomach churned over some of the hackish code I saw, I realized their true beauty&amp;#8230; they worked and provided value for their users.&lt;/p&gt;
&lt;p&gt;Most computer science programs unwittingly reinforce this foolish caste system mentality from the 60s and 70s because faculty see themselves as divorced from the trivialities of &lt;em&gt;pragmatism, usefulness and real-world scenarios&lt;/em&gt; because they are teaching theory and not practice. Some institutes of higher learning have at least acknowledged the need for a separate track in &lt;strong&gt;software engineering&lt;/strong&gt; that focuses more on what practicing developers need to know: version control, debugging, cross-functional collaboration, etc. However, the very term &lt;em&gt;software engineering&lt;/em&gt; still conveys the wrong sentiment that what we do is equivalent to electrical, aerospace or chemical engineering. It, emphatically, is not.&lt;/p&gt;
&lt;p&gt;Going off on a tangent for a moment, I used to feel the same way about &lt;strong&gt;game developers&lt;/strong&gt;. I used to read Game Developer magazine, especially their Postmortem column, for years and marveled at how little these people seemed to know about basic development principles like object-oriented design. Yet, like Web developers they made products that people paid good money for and enjoyed using. Who cares then if few of them knew how to write a class that properly demonstrated &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;encapsulation, inheritance and polymorphism&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Perhaps, the differences could better be described as &lt;em&gt;web &lt;strong&gt;design&lt;/strong&gt; vs. web &lt;strong&gt;development&lt;/strong&gt;&lt;/em&gt;? Unfortunately, this too is a false dichotomy. Web design without development often leads to brochureware. Or, some Web designers fool themselves into thinking that what they are doing is not creating code. I&amp;#8217;ve seen some self-professed designers churn out some awesome Javascript and &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; or Python yet they don&amp;#8217;t believe that they are developing software (even as they check their code into their Subversion repository&amp;#8230;)&lt;/p&gt;
&lt;p&gt;I may be in the minority here, but I actually believe that Apple did the &lt;span class=&quot;caps&quot;&gt;WRONG&lt;/span&gt; thing with the iPhone &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt;. I think they should have stuck to their guns and &lt;span class=&quot;caps&quot;&gt;NOT&lt;/span&gt; come out with a way to build native applications for the iPhone. (Brief pause as multiple people pick their jaws up from the floor.) That&amp;#8217;s right, I said it. I would have been much more impressed if they stuck to the idea that Web applications &lt;span class=&quot;caps&quot;&gt;ARE&lt;/span&gt; applications and can be used across multiple device contexts. Apple could have exposed more of the iPhone&amp;#8217;s features as Javascript objects that developers could utilize in their &amp;#8220;Web&amp;#8221; applications. By caving to the pressure to provide a &amp;#8220;real&amp;#8221; &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt; Apple has continued to perpetuate the caste system. Granted, the iPhone is such a compelling device that many &amp;#8220;Web developers&amp;#8221; grumbled but grudgingly started to learn Objective C and Cocoa in order to build applications for it&amp;#8230;&lt;/p&gt;
&lt;p&gt;Wait. &lt;strong&gt;Web developers&lt;/strong&gt; learned a language like Objective C that you compile down to a binary in order to deploy on a device? Isn&amp;#8217;t that the domain of &lt;em&gt;software developers&lt;/em&gt;?!? The false dichotomy breaks down! There is no &lt;em&gt;us vs. them&lt;/em&gt; or &lt;em&gt;hacking vs. engineering&lt;/em&gt;. There are only the people who like to tirelessly debate false dichotomies:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;vim vs. Emacs&lt;/li&gt;
	&lt;li&gt;Tabs vs. spaces&lt;/li&gt;
	&lt;li&gt;Python vs. Ruby&lt;/li&gt;
	&lt;li&gt;Microsoft vs. everyone else&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and those of us who care about our craft enough to focus on building beautiful things that people love to use.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seven Things</title>
   <link href="http://working-code.com/2009/01/25/seven-things.html"/>
   <updated>2009-01-25T00:00:00-08:00</updated>
   <id>http://working-code.com/2009/01/25/seven-things</id>
   <content type="html">&lt;p&gt;Damn you, &lt;a href=&quot;http://flinglog.com&quot;&gt;Brian!&lt;/a&gt; for tagging me with this meme. But, since it is currently snowing (again?!?!) here in the Seattle area, I figured I needed a diversion. So here goes&amp;#8230;&lt;/p&gt;
&lt;h2&gt;One&lt;/h2&gt;
&lt;p&gt;I was born left-handed. My parents are from the West Indies and apparently, being left-handed was considered &lt;span class=&quot;caps&quot;&gt;BAD&lt;/span&gt;. So, at a very young age whenever my Mom saw me doing something with my left hand, she would say &amp;#8220;Use your right hand!&amp;#8221;. My wife told me she thought I was left-handed when she met me because I tended to do things with that hand. Ironically, both my son and our new President are left-handed. I&amp;#8217;ve also learned that lefties tend to be more creative and possibly smarter. See what you&amp;#8217;ve done to me, Mom?&lt;/p&gt;
&lt;h2&gt;Two&lt;/h2&gt;
&lt;p&gt;I met my wife on a blind date. I was at a party where I met up with some mutual friends. After hours of drinking and talking, one of the girls remarked, &amp;#8220;I can&amp;#8217;t believe you don&amp;#8217;t have a girlfriend. You have to meet our friend, Donna.&amp;#8221; Oh great. Since she wasn&amp;#8217;t there and all the girls that were were&amp;#8230;hot, then this must be the ugly one. :-) A few weeks pass by and a friend of mine calls me up one night, saying &amp;#8220;Hey, remember that girl that those girls wanted you to meet?&amp;#8221; Me: &amp;#8220;Yeah&amp;#8230;?&amp;#8221; Friend: &amp;#8220;Here she is.&amp;#8221; (click)&lt;/p&gt;
&lt;p&gt;One tentative conversation led to a first date. It could have been disastrous since I was late driving out to the boondocks of Long Island after spending the day helping a friend move. She was annoyed and I was tired. However, a good Italian meal and a bad movie made things better. A couple of more dates led to a vacation in Jamaica and the rest, as they say, is history.&lt;/p&gt;
&lt;h2&gt;Three&lt;/h2&gt;
&lt;p&gt;I used to be very good at math. I was an honors student all through grade school and most of high school. My math skills declined (and my social skills improved) by the time I hit college and took my first calculus course. I suspect the cause of the change may have been either:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;My mostly Japanese-speaking professor&lt;/li&gt;
	&lt;li&gt;My complete disinterest in anything other than my Computer Science courses&lt;/li&gt;
	&lt;li&gt;Girls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, my math skills seem to be stuck at intermediate algebra.&lt;/p&gt;
&lt;h2&gt;Four&lt;/h2&gt;
&lt;p&gt;I love comic books and comic book movies. While I no longer collect them, I do have a pretty big collection in my garage. Batman and Iron Man are my all-time favorites. Superman is a punk (he turned down Wonder Woman&amp;#8217;s advances in one issue!! What?!?!) So, when the live action Iron Man movie came out in 2008 as well as Dark Knight, I could have died happy and complete.&lt;/p&gt;
&lt;h2&gt;Five&lt;/h2&gt;
&lt;p&gt;I am technology agnostic. I&amp;#8217;ve tried lots of different computing platforms. The first computer I ever used was an Apple II and the first one I owned was an Apple IIc. I&amp;#8217;ve had and developed for PCs running &lt;span class=&quot;caps&quot;&gt;DOS&lt;/span&gt;, Windows (3.1 &amp;#8211; XP, including NT and 2000). I have worked on numerous workstations running SunOS, &lt;span class=&quot;caps&quot;&gt;AIX&lt;/span&gt;, HP/UX and Irix. I tried owning a Linux workstation running Red Hat, but it frustrated me no end as a desktop. I might try again soon, as Ubuntu looks promising. Now, I am primarily a Mac user as it hits all the right notes for me.&lt;/p&gt;
&lt;p&gt;Note to all Microsoft-bashers: Stop it! It&amp;#8217;s not necessary. And the people that work there are not all bad; in fact, they&amp;#8217;re mostly good people trying to do the right thing in a large corporation. If you don&amp;#8217;t like Microsoft&amp;#8217;s products or behavior, just vote with your dollars! That&amp;#8217;s what really sends the message.&lt;/p&gt;
&lt;h2&gt;Six&lt;/h2&gt;
&lt;p&gt;My perfect vacation involves a week on an island (generally in the Caribbean) at some sort of all-inclusive resort. My days should consist of deciding whether to swim in the pool or the ocean first, enjoying great meals and getting to catch up on a ton of reading. One day can be allocated to some sort of touristy activity. But, just &lt;span class=&quot;caps&quot;&gt;ONE&lt;/span&gt; day.&lt;/p&gt;
&lt;h2&gt;Seven&lt;/h2&gt;
&lt;p&gt;It is better to work for me than with me. At least, that&amp;#8217;s what my co-workers say. I fiercely protect my team so that they can focus on doing great things. And, I have trouble managing up but I am trying to get better at that. However, at the end of the day I am an engineer and logic rules my world. My measure of success is building (or helping people build) great products.&lt;/p&gt;
&lt;h2&gt;Tag! You&amp;#8217;re it!&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.happymasochist.com/&quot;&gt;D. Keith Robinson&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://nickfinck.com/&quot;&gt;Nick Finck&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://jeffcroft.com&quot;&gt;Jeff Croft&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://navelgaze.org/&quot;&gt;Jim Hong&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.kevingoldsmith.com/&quot;&gt;Kevin Goldsmith&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://seantconrad.com&quot;&gt;Sean Conrad&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://garrettmurray.net&quot;&gt;Garrett Murray&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Is Agile or Lean Enough?</title>
   <link href="http://working-code.com/2009/01/03/is-agile-or-lean-enough.html"/>
   <updated>2009-01-03T00:00:00-08:00</updated>
   <id>http://working-code.com/2009/01/03/is-agile-or-lean-enough</id>
   <content type="html">&lt;p&gt;At the end of the year, I tend to reflect on the progress my team has made and what directions we should take in the new year. Actually, I think about this all the time. However, since the company shuts down I have extra time to be introspective. This year given the snowstorms in Seattle, I&amp;#8217;ve had even more time.&lt;/p&gt;
&lt;p&gt;Generally, I have been a proponent of agile techniques. They&amp;#8217;re basically codifications of common sense best practices. For the past few years, I&amp;#8217;ve been particularly attracted to Scrum for managing my development projects. While the basics are pretty easy, Scrum (like most agile methodologies) actually requires a lot of discipline. So, my team and I spent a lot of time increasing our discipline and paying attention to the issues that Scrum surfaced in our development process.&lt;/p&gt;
&lt;p&gt;While that approach definitely delivered some benefits, I constantly felt like there were huge gaps in what agile in general and Scrum in particular were bringing to the table. A recent blog post by James Shore, &lt;a href=&quot;http://jamesshore.com/Blog/The-Decline-and-Fall-of-Agile.html&quot;&gt;The Decline and Fall of Agile&lt;/a&gt;, captured some of my concerns:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It says that the team should be cross-functional and recommends co-locating the team in a shared workspace. It says the team should deliver a valuable, shippable product at the end of every Sprint, and that the team should self-organize, discover impediments, and remove them.&lt;br /&gt;
Oh, and it also has a few mechanical things about a monthly Sprint and daily Scrum. Trivial stuff compared to the rest. But guess which part people adopt? That&amp;#8217;s right&amp;#8212;Sprints and Scrums. Rapid cycles, but none of the good stuff that makes rapid cycles sustainable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Taking part in many agile discussions at work as well as practicing it on my project, I recognized this as one of the bigger problems. As much as my team and I may want to work in an agile fashion, there were other factors conspiring against us. Co-location was the biggest one and getting a fully cross-functional team in place is not always possible. Shore also states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;#8217;s human nature to only do the stuff that&amp;#8217;s familiar and fun, and that&amp;#8217;s what has happened with Agile. People look at agile methods as a chinese menu of practices, choose the few that look cool, and ditch the rest. Unfortunately, the parts they leave out are the parts that make Agile work. Scrum makes it worse by ignoring important (but hard) agile engineering practices, and the Scrum Alliance makes it worse still with their armies of trainers some good, some not issuing dubious &amp;#8220;ScrumMaster&amp;#8221; certificates to people who demonstrated competence in connecting butt to chair for two days.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ll be honest, our company offered Scrum training with Ken Schwaber and I took it (Hey, it was &lt;span class=&quot;caps&quot;&gt;FREE&lt;/span&gt;!) And yes, I am now a Certified Scrum Master. And what enlightenment did I receive from this training. Not a whole heckuva lot. In fact, at the conclusion of this training I painfully recalled an enjoyable post from Steve Yegge, &lt;a href=&quot;http://steve-yegge.blogspot.com/2006/09/good-agile-bad-agile_27.html&quot;&gt;Good Agile, Bad Agile&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Up until maybe a year ago, I had a pretty one-dimensional view of so-called &amp;#8220;Agile&amp;#8221; programming, namely that it&amp;#8217;s an idiotic fad-diet of a marketing scam making the rounds as yet another technological virus implanting itself in naive programmers who&amp;#8217;ve never read &amp;#8220;No Silver Bullet&amp;#8221;, the kinds of programmers who buy extended warranties and self-help books and believe their bosses genuinely care about them as people, the kinds of programmers who attend conferences to make friends and who don&amp;#8217;t know how to avoid eye contact with leaflet-waving fanatics in airports and who believe writing shit on index cards will suddenly make software development easier.&lt;br /&gt;
You know. Chumps. That&amp;#8217;s the word I&amp;#8217;m looking for. My bad-cholesterol view was that Agile Methodologies are for chumps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And if you have taken this particular Scrum course and recall the &amp;#8220;secret handshake&amp;#8221; at the end, the &lt;strong&gt;chump&lt;/strong&gt; title probably seems like a better name for the certification you received. Sure, there were a few useful bits in terms of clarifying a few ambiguous parts of the standard Scrum literature. However, the course offered no practical help with day-to-day development issues. Specifically, the disconnect from one or more development practices that pair up well with Scrum as Shore notes.&lt;/p&gt;
&lt;p&gt;So, reflecting on the past year I see two fundamental issues with our adoption of agile practices. The first is the lack of top-down adoption of agile in our company. While there are many teams adopting agile (specifically Scrum), there is still the cross-functional gap. That leads to a lot of wasted time spent context switching between Scrum and the &amp;#8220;traditional&amp;#8221; development process. I&amp;#8217;ve witnessed a lot of teams say that they&amp;#8217;re &lt;em&gt;doing Scrum&lt;/em&gt; but they&amp;#8217;re just re-labeling portions of the legacy process with terms they learned from Scrum. More &lt;strong&gt;fragile&lt;/strong&gt; than agile. It seems as if there is not an organizational drive towards continuous improvement that is driven from the top, then it is easy to regress to past behavioral patterns. In &lt;a href=&quot;http://www.amazon.com/Scaling-Lean-Agile-Development-Organizational/dp/0321480961/ref=wl_it_dp?ie=UTF8&amp;amp;coliid=I2EDC0NTF1H01X&amp;amp;colid=1HKQWRT70OE52&quot;&gt;Scaling Lean and Agile Development&lt;/a&gt;, Craig Larman summarizes this nicely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are better ways to build large systems than with many developers in many places. Rather, build a small group of great developers and other talents that can work together in teams, pay them well, and keep them together in one place with product management or whoever acts as the voice of the customer.&lt;br /&gt;
But of course you are &lt;em&gt;still&lt;/em&gt; going to do large, multisite, or offshore development. This is because your existing system is already structured that way, or because in the case of large groups there is the mindset that &amp;#8220;big systems need lots of people.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;THAT&amp;#8217;S what our current situation feels like. And that&amp;#8217;s not something that can be addressed from the bottom up alone.&lt;/p&gt;
&lt;p&gt;And my second issue? Exactly what Shore mentioned:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scrum makes it worse by ignoring important (but hard) agile engineering practices&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scrum does not prescribe any development practice to use alongside it. That&amp;#8217;s OK, but one would think that by now the Scrum practitioners would have strong recommendations based on real-world experience. The common wisdom is Extreme Programming (XP), but I have several issues with XP. It seems to be even more of a take-it-all-or-leave-it-all religion than Scrum is. And XP doesn&amp;#8217;t work for all teams. And most agile processes over-focus on the development team, but gloss over the other cross-functional team members.&lt;/p&gt;
&lt;p&gt;Now that the Scrum backlash is in full swing, people are starting to embrace Lean. What they fail to realize is that Scrum is just the gateway drug to Lean. Scrum is not a pure pull system, which is what you would have once you Got Lean. After reading Corey Ladas&amp;#8217; &lt;a href=&quot;http://leansoftwareengineering.com/ksse/scrum-ban/&quot;&gt;blog post&lt;/a&gt; and &lt;a href=&quot;http://www.lulu.com/content/3864767&quot;&gt;book&lt;/a&gt; some of the ideas resonated with me. But, this was only because I had years before been a fan of the Theory of Constraints and Eliyahu Goldratt&amp;#8217;s books (sidebar: his books are great due to his ability to communicate dry, academic topics via engaging novels). And again, the pragmatic issues around cross-functional product development processes are still largely ignored.&lt;/p&gt;
&lt;p&gt;So, in 2009, how will I evolve my team&amp;#8217;s processes? We&amp;#8217;ll probably continue with Scrum or even &amp;#8220;evolve&amp;#8221; towards Lean. But our focus will be on sharpening our engineering practices. We&amp;#8217;ve been pretty good about constant communication and unit testing, but we can probably tighten up our feature designs and code reviews. It&amp;#8217;s all about balance.&lt;/p&gt;</content>
 </entry>
 
 
</feed>