<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Mark Daggett's Blog]]></title>
  <link href="http://heavysixer.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://heavysixer.github.com/"/>
  <updated>2013-12-02T07:29:38-06:00</updated>
  <id>http://heavysixer.github.com/</id>
  <author>
    <name><![CDATA[Mark Daggett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Protip: hash.slice]]></title>
    <link href="http://heavysixer.github.com/blog/2012/03/26/rails-protip-hash-dot-slice/"/>
    <updated>2012-03-26T11:09:00-05:00</updated>
    <id>http://heavysixer.github.com/blog/2012/03/26/rails-protip-hash-dot-slice</id>
    <content type="html"><![CDATA[<p>Rails has hidden gems just waiting to be discovered. I will demonstrate the use of <em>Hash.slice</em>, which is one of the core extensions of ActiveSupport.</p>

<p>Here is an example of how <em>Hash.slice</em> can clean up a controller, take this existing code for example:
<code>ruby
def index
  @users = User.paginate({ :page =&gt; params[:page].present? ? params[:page].to_i : 1, :per_page =&gt; params[:per_page].present? ? params[:per_page].to_i : 12 })
end
</code></p>

<p>With <em>Hash.slice</em> we can shorten it to:
<code>ruby
def index
  @users = User.paginate({ :page =&gt; 1, :per_page =&gt; 12 }.merge(params.slice(:page, :per_page)))
end
</code></p>

<p><em>Hash.slice</em> is that it is very forgiving. The method only returns the attributes if they exist. In our example we are assured all conditions will be met because the default values will only be overwritten if <em>Hash.slice</em> returns them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enterprise Quality Login Validation For Rails 3]]></title>
    <link href="http://heavysixer.github.com/blog/2012/03/23/enterprise-quality-login-validation-for-rails-3/"/>
    <updated>2012-03-23T09:33:00-05:00</updated>
    <id>http://heavysixer.github.com/blog/2012/03/23/enterprise-quality-login-validation-for-rails-3</id>
    <content type="html"><![CDATA[<p>In the world of enterprise software development sometimes you need to be a little more thorough with your validations than you would for other types of clients. Here is a simple yet effective login validator that passes the typical forms of penetration testing you will find in the enterprise world.</p>

<p>``` ruby
class LoginFormatValidator &lt; ActiveModel::EachValidator
  def validate_each(object, attribute, value)</p>

<pre><code>if value.present?
  unless value.gsub(" ",'') == value
    object.errors[attribute] &lt;&lt; (options[:message] || "cannot contain any whitespace")
  end
  if [value[0], value[-1]].any?{ |x| x == "." }
    object.errors[attribute] &lt;&lt; (options[:message] || "cannot contain a period at the start or end")
  end
  unless value =~ /[a-zA-Z]/
    object.errors[attribute] &lt;&lt; (options[:message] || "must contain at least one letter")
  end
  unless value =~ /[0-9]/
    object.errors[attribute] &lt;&lt; (options[:message] || "must contain at least one number")
  end
  unless value =~ /[_\-.]/
    object.errors[attribute] &lt;&lt; (options[:message] || "must contain at least one these special characters \"-_.\"")
  end
  unless value =~ /^[a-zA-Z0-9_\-.]+$/
    object.errors[attribute] &lt;&lt; (options[:message] || "can only contain letters number and special these special characters \"-_.\"")
  end
end
</code></pre>

<p>  end
end
```</p>

<p>You can use it this way:
<code>ruby
validates :login, :presence =&gt; true, :login_format =&gt; true, :uniqueness =&gt; { :case_sensitive =&gt; false }, :length =&gt; { :maximum =&gt; 64, :minimum =&gt; 6 }
</code></p>

<p>Here are some specs to prove it works:</p>

<p>``` ruby
it "should only allow letters numbers and spaces in the name attribute" do
  ['foo', 'foo bar baz', 'foo 123 - bar baz'].each do |n|</p>

<pre><code>@user.name = n
@user.save
@user.errors[:name].should be_empty
</code></pre>

<p>  end
  @user.name = '<script>alert("test");</script>'
  @user.save
  @user.errors[:name].first.should == "is invalid"
end</p>

<p>it "should not allow you to change an email for an existing record" do
  @user.email = "test@test.com"
  @user.save
  @user.errors[:email].first.should == "cannot be changed once assigned"
end</p>

<p>it "should be case insenitive" do
  @user2 = Factory.build(:user)
  @user2.login = @user.login.capitalize
  @user2.save
  @user2.errors[:login].first.should == "has already been taken"
end</p>

<p>it "should be at least 6 characters and no more than 64 characters" do
  @user2 = Factory.build(:user, :login => 'a1_')
  @user2.save
  @user2.errors[:login].first.should == "is too short (minimum is 6 characters)"
  @user2.login = 'Pneumonoultramicroscopicsilicovolcanoconiosis1_is_a_very_long_word'
  @user2.save
  @user2.errors[:login].first.should == "is too long (maximum is 64 characters)"
end</p>

<p>it "should ensure the name is a mix of alpha chars (A-Z or a-z), numeric chars (0-9), and special characters (- _ .)" do
  @user2 = Factory.build(:user, :login => '1----.----1')
  @user2.save
  @user2.errors[:login].first.should == "must contain at least one letter"
  @user2.login = "a------------------a"
  @user2.save
  @user2.errors[:login].first.should == "must contain at least one number"
  @user2.login ="abc12345676789"
  @user2.save
  @user2.errors[:login].first.should == "must contain at least one these special characters \"-_.\""
end</p>

<p>it "should ensure the special character '.' is not used at the beginning and end" do
  @user = Factory.build(:user, :login => '.Admin_f00')
  @user.save
  @user.errors[:login].first.should == "cannot contain a period at the start or end"
  @user = Factory.build(:user, :login => 'Admin_f00.')
  @user.save
  @user.errors[:login].first.should == "cannot contain a period at the start or end"
end</p>

<p>it "should not allow white space or \ / \" [ ] : | &lt; > + = ; , ? * @" do
  @user = Factory.build(:user)
  @user.login = "user _1"
  @user.save
  @user.errors[:login].first.should == "cannot contain any whitespace"
  ["\", '/', '"', '[', ']', ':', '|', '&lt;', '>', '+', '=', ';', ',', '?', '*', '@', "'"].each do |char|</p>

<pre><code>@user.login = "user_1" &lt;&lt; char
@user.save
@user.errors[:login].first.should == "can only contain letters number and special these special characters \"-_.\""
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Rails 3 Validator for Unchangeable Attributes]]></title>
    <link href="http://heavysixer.github.com/blog/2012/03/23/simple-rails-3-validator-for-unchangeable-attributes/"/>
    <updated>2012-03-23T09:23:00-05:00</updated>
    <id>http://heavysixer.github.com/blog/2012/03/23/simple-rails-3-validator-for-unchangeable-attributes</id>
    <content type="html"><![CDATA[<p>Here is a simple Rails validator that you can use to ensure an attribute of a model cannot be changed once it has been assigned a value.</p>

<p>``` ruby
class UnchangeableValidator &lt; ActiveModel::EachValidator
  def validate_each(object, attribute, value)</p>

<pre><code>if !object.new_record? &amp;&amp; value.present?
  original = object.class.send(:where, "id = #{object.id}").select("id, #{attribute.to_s}").first
  if original.send(attribute) != value
    object.errors[attribute] &lt;&lt; (options[:message] || "cannot be changed once assigned")
  end
end
</code></pre>

<p>  end
end
```</p>

<p>You can use it this way:
<code>ruby
validates :email, :unchangeable =&gt; true, :presence =&gt; true
</code></p>

<p>Here are some specs to prove it works:</p>

<p><code>ruby
it "should not allow you to change an email for an existing record" do
  @user.email = "test@test.com"
  @user.save
  @user.errors[:email].first.should == "cannot be changed once assigned"
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing ActsAsModerated]]></title>
    <link href="http://heavysixer.github.com/blog/2011/12/16/introducing-acts-as-moderated/"/>
    <updated>2011-12-16T09:06:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2011/12/16/introducing-acts-as-moderated</id>
    <content type="html"><![CDATA[<p>Periodically sites that incorporate user generated content need a way to moderate the incoming stream before publishing it to the site. Typically this is accomplished by putting the content in a queue and allowing moderators to explicitly accept or reject content. I needed such functionality for a site I was working on so I wrote the "ActsAsModerated" plugin which allows specific columns of a model to be audited by a moderator at some later point.</p>

<p>ActsAsModerated is good for:</p>

<ul>
<li>spot-checking user generated content</li>
<li>being notified when new content is created</li>
<li>tracking changes within a record</li>
<li>spam checking</li>
</ul>


<p>Moreover, this plugin allows for custom callbacks and validations around the moderation event. This flexibility gives developers the ability to augment the moderation flow by stacking custom rules as needed. For example, a developer write code to assign a reputation score to a user and increment that score for every non-spam contribution they make. This would mean that you could auto approve any content that is made by a user above a certain score, thereby reducing the workload on moderators. I have been using this plugin for over a year on a very high-volume site and it has held up quite well, and so I thought I'd share it with the rest of the Ruby on Rails community.</p>

<h3>Download &amp; Install</h3>

<p>For those with ADD you can find acts_as_moderated here:
<a href="https://github.com/heavysixer/acts_as_moderated">https://github.com/heavysixer/acts_as_moderated</a></p>

<h3>Setup</h3>

<p>Create the moderated_records table like so:</p>

<p>``` ruby</p>

<pre><code>create_table "moderation_records", :force =&gt; true do |t|
  t.integer  "recordable_id"
  t.string   "recordable_type"
  t.integer  "state_id",             :default =&gt; 0
  t.integer  "decision_id",          :default =&gt; 0
  t.boolean  "flagged",              :default =&gt; false
  t.integer  "moderator_id"
  t.string   "reason"
  t.datetime "created_at"
  t.datetime "updated_at"
  t.text     "inspected_attributes"
  t.boolean  "rejected",             :default =&gt; false
end

add_index "moderation_records", ["decision_id"], :name =&gt; "index_moderation_records_on_decision_id"
add_index "moderation_records", ["flagged"], :name =&gt; "index_moderation_records_on_flagged"
add_index "moderation_records", ["moderator_id"], :name =&gt; "index_moderation_records_on_moderator_id"
add_index "moderation_records", ["recordable_id", "recordable_type"], :name =&gt; "index_moderation_records_on_recordable_id_and_recordable_type"
add_index "moderation_records", ["rejected"], :name =&gt; "index_moderation_records_on_rejected"
add_index "moderation_records", ["state_id"], :name =&gt; "index_moderation_records_on_state_id"
</code></pre>

<p>```</p>

<h3>Usage</h3>

<p>ActsAsModerated has two integration points. The first is within the model(s) to be moderated, which can be done like so:</p>

<p>``` ruby</p>

<pre><code>class Comment &lt; ActiveRecord::Base
  acts_as_moderated :body
end
</code></pre>

<p>```</p>

<p>The second integration point is the class that acts as the moderator. Typically this is some user or account class. The idea is that behind this integration point is to create an audit trail for decisions made by the moderator if you ever need to watch the watcher.</p>

<p>``` ruby
  class Account &lt; ActiveRecord::Base</p>

<pre><code>acts_as_moderator
</code></pre>

<p>  end
```</p>

<p>The plugin also supports an <strong>after_moderation</strong> callback on the record being moderated, which you can use to take action based on what the moderator did. For example:</p>

<ul>
<li>Delete the record if it is inappropriate or spam</li>
<li>Email the content creator that their content has been approved / denied</li>
</ul>


<p>There are several dynamically created methods added to every acts_as_moderated class which moderators can use as a shortcut for making decisions. For example where <strong>@moderator</strong> is an object with <strong>acts_as_moderator</strong> applied:</p>

<p><code>ruby
  @comment.marked_spam_by_moderator(@moderator)
  @comment.marked_scam_by_moderator(@moderator, :reason =&gt; 'this is obviously a scam, please delete.')
</code></p>

<h3>Default Ordering, Callbacks &amp; Flagging</h3>

<p>The ModerationRecord class has a <strong>named_scope</strong> called <em>queue</em>, which will return records sorted oldest to newest. However, if you flag a record it will be returned first regardless of its age relative to unflagged records. This is useful if you want to ensure that moderators see potentially dangerous records first. A good way to flag a record is using the <strong>after_moderated</strong> callback for example:</p>

<p>``` ruby</p>

<pre><code>class Comment &lt; ActiveRecord::Base
  acts_as_moderated :body

  def after_moderated(moderation_record)
    moderation_record.flag! if body =~ /viagra/i
  end
end
</code></pre>

<p>```</p>

<p>The moderation record will attempt to make callbacks on the model being moderated after a record is first created <strong>after_moderation</strong> and when a moderator rejects a record <strong>after_rejection</strong> here is an example of what they might do:</p>

<p>``` ruby</p>

<pre><code>class Story &lt; ActiveRecord::Base
  acts_as_moderated :body

  def after_moderated(moderation_record)
    update_attribute(:moderated, true)
  end

  def after_rejection(moderation_record)
    update_attribute(:rejected, true)
  end
end
</code></pre>

<p>```</p>

<h3>Skipping moderation</h3>

<p>The moderation plugin adds an <strong>attr_accessor</strong> called <strong>skip_moderation</strong>, which when set to true will prevent a moderation
record from being created for that instance of a save. This is useful if you need to create records programmatically, which
don't need to be moderated initially but will need to be moderated at some later point. For example:</p>

<p><code>ruby
  @story = ModeratedStory.create #creates a moderation record
  @story = ModeratedStory.create(:skip_moderation =&gt; true) #does not create a moderation record
</code></p>

<p>A word to the wise however, since this <strong>attr_accessor</strong> prevents records from being moderated you will want to protect it from
<em>mass_assignment</em> in your model.</p>

<h4>Known Bugs</h4>

<p>Presently if you use the <strong>:always_moderate</strong> flag on a STI model it will produce a never-ending series of record updates.
I'll keep working on this bug, in the meantime please do investigate!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transactions In Rails]]></title>
    <link href="http://heavysixer.github.com/blog/2011/12/01/transactions-in-rails/"/>
    <updated>2011-12-01T11:39:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2011/12/01/transactions-in-rails</id>
    <content type="html"><![CDATA[<p>Recently I was tasked to write tests for the transactions of an existing application. This gave me the opportunity to learn more about the codebase, while also improving the test coverage. Generally, most of the transaction code looked fine. However, there were some instances where transactions were used incorrectly or inefficiently. I assumed this is just because of a misunderstanding of how transactions work within Rails, and so I thought i?d take some time and give an overview of the common errors I found and some best practices for using transactions in Rails.</p>

<p>Let me also state at the beginning that most of these examples are not my own, they come directly from the Rails source, which give example usages of applying transactions RTFM FTW.</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html">http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html</a></p>

<h3>Reasons for transactions</h3>

<p>We use transactions as a protective wrapper around SQL statements to ensure changes to the database only occur when all actions succeed together. Transaction help the developer enforce data integrity within the application. The canonical example of transactions is the banking method where funds are withdrawn from one account and deposited into the next. If either of these steps fail, then the entire process should be reset. This example can be described in code this way:</p>

<p><code>ruby
ActiveRecord::Base.transaction do
  david.withdrawal(100)
  mary.deposit(100)
end
</code></p>

<p>In Rails transactions are available as class and instance methods for all ActiveRecord models. This means either of these approaches are equally valid:</p>

<p>``` ruby
Client.transaction do
  @client.users.create!
  @user.clients(true).first.destroy!
  Product.first.destroy!
end</p>

<p>@client.transaction do
  @client.users.create!
  @user.clients(true).first.destroy!
  Product.first.destroy!
end
```</p>

<p>You may also notice that there are several different model classes referenced in these transactions. It is perfectly fine to mix model types inside a single transaction block. This is because the transaction is bound to the database connection not the model instance.
As a rule, transactions are only needed when changes to multiple records must succeed as a single unit. Additionally, Rails already wraps the #save and #destroy methods in a transaction, therefore a transaction is never needed when updating a single record.</p>

<h3>Transaction Rollback Triggers</h3>

<p>Transactions reset the state of records through a process called a rollback. In Rails, rollbacks are only triggered by an exception. This is a crucial point to understand; I saw several transaction blocks that would never rollback because the containing code could not throw an exception. Here I have slightly modified our banking example from before:</p>

<p><code>ruby
ActiveRecord::Base.transaction do
  david.update_attribute(:amount, david.amount -100)
  mary.update_attribute(:amount, 100)
end
</code></p>

<p>In Rails <em>#update_attribute</em> is designed not to throw an exception when an update fails. It returns false, and for this reason you should ensure that the methods used throw an exception upon failure. A better way to write the previous example would be:</p>

<p><code>ruby
ActiveRecord::Base.transaction do
  david.update_attributes!(:amount =&gt; -100)
  mary.update_attributes!(:amount =&gt; 100)
end
</code></p>

<p>Note: The bang modifier (!) is a rails convention for a method which will throw an exception upon failure.</p>

<p>I also saw examples in the code where records were found inside of transactions using magic finders <em>#find_by</em><some attribute><em>. By design magic finders will return nil when no record is returned. This is in contrast to the normal </em>#find_ method which throws an <strong>ActiveRecord::RecordNotFound</strong> exception. Consider this example:</p>

<p>``` ruby
ActiveRecord::Base.transaction do
  david = User.find_by_name("david")
  if(david.id != john.id)</p>

<pre><code>john.update_attributes!(:amount =&gt; -100) 
mary.update_attributes!(:amount =&gt; 100)
</code></pre>

<p>  end
end
```</p>

<p>Do you see the logic error? The nil object will have an id attribute and it will mask the fact that the desired record was not returned. While this doesn?t cause an error in the transaction it will still lead to a loss of data integrity, because the application is updating where it shouldn?t. Remember a transaction defines a block of code which must succeed as an atomic unit. This means we should raise an exception when a logical dependency like this is not met. Here is how the code should be written:</p>

<p>``` ruby
ActiveRecord::Base.transaction do
  david = User.find_by_name("david")
  raise ActiveRecord::RecordNotFound if david.nil?
  if(david.id != john.id)</p>

<pre><code>john.update_attributes!(:amount =&gt; -100) 
mary.update_attributes!(:amount =&gt; 100)
</code></pre>

<p>  end
end
```</p>

<p>When the exception occurs it will be raised outside of the transaction block after the rollback has completed. Your application code must be ready to catch this exception as it bubbles up through the application stack.</p>

<p>It is also possible to invalidate a transaction without raising an exception that will propagate upwards by using <strong>ActiveRecord::Rollback</strong>. This special exception allows you to invalidate a transaction and reset the database records without needing to rescue elsewhere in your code.</p>

<h3>When To Use Nested Transactions</h3>

<p>One of the common mistakes I saw in the codebase is the misuse or overuse of nested transactions. When you nest a transaction inside another transaction this has the effect of making the child transaction a part of the parent. This can have surprising results, take this example from the Rails API documentation:</p>

<p>``` ruby
User.transaction do
  User.create(:username => 'Kotori')
  User.transaction do</p>

<pre><code>User.create(:username =&gt; 'Nemu')
raise ActiveRecord::Rollback
</code></pre>

<p>  end
end
```</p>

<p>As mentioned previously <strong>ActiveRecord::Rollback</strong> does not propagate outside of the containing transaction block and so the parent transaction does not receive the exception nested inside the child. Since the contents of the child transaction are lumped into the parent transaction both records are created! I find it easier to think of nested transactions like the child who dumps its contents into the parent container, leaving the child transaction empty.</p>

<p>To ensure a rollback is received by the parent transaction you must add the <em>:requires_new => true</em>. option to the child transaction. Again using the example from Rails source you would trigger a parent?s Rollback like this:</p>

<p>``` ruby
User.transaction do
  User.create(:username => 'Kotori')
  User.transaction(:requires_new => true) do</p>

<pre><code>User.create(:username =&gt; 'Nemu')
raise ActiveRecord::Rollback
</code></pre>

<p>  end
end
```</p>

<p>A transaction only acts upon the current database connection. If your application writes to multiple databases at once you will need to wrap the method inside a nested transaction. For example:</p>

<p>``` ruby
Client.transaction do
  Product.transaction do</p>

<pre><code>product.buy(@quantity)
client.update_attributes!(:sales_count =&gt; @sales_count + 1)
</code></pre>

<p>  end
end
```</p>

<h3>Callback around Transactions</h3>

<p>As mentioned previously <em>#save</em> and <em>#destroy</em> are wrapped inside a transaction. This means that callbacks like <em>#after_save</em> is still part of the active transaction which might still be rolled back! Therefore if you want code to execute that is guaranteed to execute outside of the transaction use one of the transaction specific callbacks like <em>#after_commit</em> or <em>#after_rollback</em>.</p>

<h3>Transaction Gotchas</h3>

<p>Do not catch an <strong>ActiveRecord::RecordInvalid</strong> exception inside a transaction because the this exception invalidates the transaction on some databases like Postgres. Once the transaction has been invalidated you must restart it from the beginning for it to work correctly.</p>

<p>When testing rollbacks or transaction related callbacks that happen after rollback you will want to turn off transactional_fixtures which are on by default in most test frameworks.</p>

<h3>Common Anti-patterns To Avoid</h3>

<ol>
<li>Using a transaction when only a single record is updated</li>
<li>Needlessly nesting transactions</li>
<li>Transactions that contain code, which won?t cause a rollback</li>
<li>Use of transactions in a controller</li>
</ol>

]]></content>
  </entry>
  
</feed>
