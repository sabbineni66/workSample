<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Dave Rapin]]></title>
  <link href="http://rapind.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://rapind.github.com/"/>
  <updated>2015-10-17T13:08:35-04:00</updated>
  <id>http://rapind.github.com/</id>
  <author>
    <name><![CDATA[Dave Rapin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meteor and React - Part 1]]></title>
    <link href="http://rapind.github.com/blog/2015/10/15/meteor-with-reactjs/"/>
    <updated>2015-10-15T00:00:00-04:00</updated>
    <id>http://rapind.github.com/blog/2015/10/15/meteor-with-reactjs</id>
    <content type="html"><![CDATA[<p>This is part one of a series of posts that go through creating a new web app with Meteor and React.</p>

<h2>Prerequisites</h2>

<ol>
<li><a href="https://www.meteor.com/install">Meteor</a></li>
<li><a href="https://nodejs.org/en/">Nodejs</a></li>
<li>OSX, Linux, or Cygwin.</li>
</ol>


<h2>Why Metor?</h2>

<p>We're always on the lookout for new methodologies in the web stack, and Meteor is one we've been keeping an eye on for a while.
Here's what we like about it:</p>

<ul>
<li>Nodejs on the server performs significantly better than some other dynamic stacks like Ruby on Rails.</li>
<li>Websockets consume significantly less bandwidth than REST since there is no need to send HTTP headers every time.</li>
<li>No need to constantly customize APIs (also something GraphQL would solve).</li>
<li>Responding to data changes is straightforward via pub / sub. With React this is even easier.</li>
<li>Updating data is straightforward via Meteor methods.</li>
</ul>


<h2>Why React</h2>

<p>We love React for it's simplicity and always use it for our web UIs.
Declaritive UI programming is where it's at.</p>

<p>Code next to Markup was a bad idea right?
Not really.
As it turns out, having your UI code in your views when they are small (components) makes a ton of sense.</p>

<p>Don't take our word for it though.
<a href="https://facebook.github.io/react/docs/getting-started.html">Give it a whirl for yourself</a>
There's a decent chance you'll agree.</p>

<h2>The Project Requirements</h2>

<p>We're going to step through building a Hot or Not style of application tailored to sports plays.</p>

<p>The three main components are:</p>

<h4>Submit a Play</h4>

<p>User should be able to submit a new play. The play will have a title, description, and Youtube URL.</p>

<h4>Vote on Plays</h4>

<p>User should be able to see two plays and vote for one of them.</p>

<p>Once user has voted for a play, they will be replaced with two new plays that they can then vote on.</p>

<p>There is no limit to the number of plays the user can vote on, however the user may not vote on the same play more than once.</p>

<h4>Leaderboard</h4>

<p>User should see a list of top ten plays with the most votes, ordered by number of votes descending.
This list will update in real time as votes are added.</p>

<h2>Getting Started</h2>

<p>Create our project:</p>

<pre><code>meteor create tehgosu
</code></pre>

<p>This creates a basic Meteor application that we can run right away:</p>

<pre><code>cd tehgosu
meteor
</code></pre>

<p>Then visit <a href="http://localhost:3000">http://localhost:3000</a></p>

<h3>React and CoffeeScript</h3>

<p>Before we can start working on any views, we need to install React since that's what we'll be using instead of Blaze.</p>

<p>Adding libraries to Meteor is super simple:</p>

<pre><code>meteor add react
</code></pre>

<p>We personally prefer CoffeeScript over JavaScript due to the readability of significant whitespace.
There's a popular opinion at the moment that CoffeeScript is obsolete now that we have ES6 and Babel.
I disagree because I think browsers will eventually support <a href="https://brendaneich.com/2015/06/from-asm-js-to-webassembly/">WebAssembly</a>.
Once they do we'll see even more JavaScript alternatives.</p>

<pre><code>meteor add coffeescript
</code></pre>

<p>Now we'll need to do some standard tweaks in order to have React and CoffeeScript play nice without excessive amounts of syntax.
First we'll create a lib folder and add a component.coffee library to it.</p>

<pre><code>mkdir lib
touch lib/component.coffee
</code></pre>

<p>In component.coffee we're going to add a function that we'll be calling instead of React.createClass</p>

<p>```coffeescript
@Component =
  create: (spec) -></p>

<pre><code>React.createFactory React.createClass(spec)
</code></pre>

<p>```</p>

<p>Notice the <strong>@</strong> symbol used to declare our Component object?
CoffeeScript places our code in a closure so as not to pollute the global namespace.
In Meteor we need to attach our object to the global namespace using <strong>this</strong> (@ = this.).
This is a little counter intuitive compared to CommonJS style requires, and maybe some day we'll have a better alternative.</p>

<p>For now <strong>@Component</strong> makes our object accessible throughout the application.</p>

<p>Now we can create a React component in CoffeeScript like so:</p>

<p>```coffeescript
TestComponent = Component.create
  render: -></p>

<pre><code>div className: 'test-component',
  'Test Component'
</code></pre>

<p>```</p>

<p>The equivalent in JSX without our library would look like this:</p>

<p>```javascript
TestComponent = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;div class="test-component"&gt;
    Test Component
  &lt;/div&gt;
);
</code></pre>

<p>  }
});
```</p>

<h3>Project Structure</h3>

<p>Now is as good a time as any to setup our basic structure for the application.
Meteor has a convention where any code that's placed within a directory named <strong>client</strong> will only run on the client.
And naturally code in a directory named <strong>server</strong> will only run on the server.</p>

<p>We want the following directories under the root of the project:</p>

<ul>
<li>lib: Common library functions. These are loaded before the other directories.</li>
<li>client: Code that should only be run on the client (browser).</li>
<li>server: Code that should only be run on the server.</li>
<li><p>public: Only served to the public. We'll put our robots.txt and images in here.</p>

<p>  mkdir lib client server public</p></li>
</ul>


<p>Let's remove the initial files that meteor created. We don't need them.</p>

<pre><code>rm tehgosu.*
</code></pre>

<h3>Time to Write Some Code</h3>

<p>Create a new HTML file in the client directory.
Since we're using React for our views, this will be the only HTML file we need.</p>

<pre><code>vi client/index.html
</code></pre>

<p>In this HTML file we just need a div element which react will replace once it's loaded.</p>

<p>```html
<head>
  <title>Teh Gosu</title>
</head></p>

<p><body>
  <div id="app">Loading...</div>
</body>
```</p>

<p>Now we need to attach our React views.
Create a new CoffeeScript file in the client directory.</p>

<pre><code>vi client/index.coffee
</code></pre>

<p>In this CoffeeScript file we load up our React views and attache them to the DOM.</p>

<p>```coffeescript
Meteor.startup ->
  React.render(</p>

<pre><code>App({}),
document.getElementById 'app'
</code></pre>

<p>  )
```</p>

<p>We're referencing an object called <strong>App</strong> within the Render method, so we need to build that.
Create a new CoffeeScript file in the client directory for it.</p>

<pre><code>vi client/app.coffee
</code></pre>

<p>Our new app.coffee is going to hold our top level React component code.</p>

<p>```coffeescript
{ h1 } = React.DOM</p>

<p>@App = Component.create
  render: -></p>

<pre><code>h1 {},
  'Teh Gosu!'
</code></pre>

<p>```</p>

<p>We're keeping it simple. All we're doing is rendering an h1 tag with the text <strong>Teh Gosu!</strong>.
Notice the <strong>@</strong> symbol prefix to the App declaration.
Again this is because of CoffeeScript's automatic closure and the fact that Meteor needs the object to be on <strong>this</strong> to be accessible outside the file.</p>

<p>At this point we should have a working React + Meteor application. Run the server with:</p>

<pre><code>meteor
</code></pre>

<p>Then visit <a href="http://localhost:3000">http://localhost:3000</a></p>

<p>You should see <strong>Teh Gosu!</strong>.</p>

<p>Your directory structure should be:</p>

<pre><code>client
  app.coffee
  index.coffee
  index.html
lib
  component.coffee
server
public
</code></pre>

<p>This concludes part one of our Meteor + React series.
In part two we'll add some data and the match view.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CoffeeScript with ReactJS]]></title>
    <link href="http://rapind.github.com/blog/2015/02/03/reactjs-with-coffeescript/"/>
    <updated>2015-02-03T09:23:00-05:00</updated>
    <id>http://rapind.github.com/blog/2015/02/03/reactjs-with-coffeescript</id>
    <content type="html"><![CDATA[<p>Lately I've been using ReactJS a lot to build rich user experiences on the web, and it's been absolutely great. A huge improvement over AngularJS in my humble opinion.</p></p>

<p>The only ugly spot with ReactJS is JSX. I can see the appeal of using declarative HTML in templates for readability, but having switched to HAML (and Slim and Jade) long ago, writing HTML feels like a step backwards.</p>

<p>Luckily, using CoffeScript for my ReactJS components and eschewing JSX entirely, we can accomplish a syntax that's very similar to HAML / Slim / Jade. If you're not a fan of CofeeScript, HAML variants, or significant whitespace, there's little chance I'll be able to convince you otherwise. However if you are a fan of any of those, then it's worth checking out.</p>

<p>This is the HTML we'll be converting.</p>

<p>```html</p>

<div class="jumbotron">
  <div class="container">
    <h1>Hello, world!</h1>
    <p>
      <a class="btn btn-primary btn-lg" href="#" role="button">Learn more ?</a>
    </p>
  </div>
</div>


<p>```</p>

<p>Converting it to Javascript using ReactJS looks like this. It's pretty verbose.</p>

<p>```javascript
var Jumbotron = React.createClass({
  render: function() {</p>

<pre><code>return (
  React.createElement('div', {className: "jumbotron"},
    React.createElement('div', {className: "container"},
      React.createElement('h1', {},
        React.createElement('p', {}, 
          React.createElement('a', { className: "btn btn-primary btn-lg", href: "#", role: "button" }, "Learn more ?")
        )
      )
    )
  )
);
</code></pre>

<p>  }
});
```</p>

<p>Here's the JSX version. Quite an improvement I think, but it mixes HTML and Javascript together and that seems a bit messy and most likely throws off your editor's syntax highlighting.</p>

<p>```javascript
var Jumbotron = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;div className="jumbotron"&gt;
    &lt;div className="container"&gt;
      &lt;h1&gt;Hello, world!&lt;/h1&gt;
      &lt;p&gt;
        &lt;a className="btn btn-primary btn-lg" href="#" role="button"&gt;Learn more ?&lt;/a&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
);
</code></pre>

<p>  }
});
```</p>

<p>Finally, here's the CoffeeScript version of the component. At least as succinct as the JSX version, and no mixed syntax or editor issues.</p>

<p>```coffeescript
{ div, h1, p, a } = React.DOM</p>

<p>Jumbotron = React.createClass
  render: -></p>

<pre><code>div className: "jumbotron",
  div className: "container",
    h1 {}, "Hello World"
      p {},
        a
          className: "btn btn-primary btn-lg"
          href: "#"
          role: "button"
          "Learn more ?"
</code></pre>

<p>```</p>

<p>For the sake of completeness, here's a CJSX version (CoffeeScript + JSX). Even more succinct, however again we're mixing HTML with our CoffeeScript, making it a bit messy and giving you editor issues.</p>

<p>```coffeescript
Jumbotron = React.createClass
  render: -></p>

<pre><code>&lt;div className="jumbotron"&gt;
  &lt;div className="container"&gt;
    &lt;h1&gt;Hello, world!&lt;/h1&gt;
    &lt;p&gt;
      &lt;a className="btn btn-primary btn-lg" href="#" role="button"&gt;Learn more ?&lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>```</p>

<p>If you do opt for the straight CoffeeScript route, then there are a few gotchas to keep in mind. If you've been using CoffeeScript for a while, then they're pretty obvious, but can cause grief for newcomers.</p>

<h4>Gotcha 1: Optional Curly Braces</h4>

<p>CoffeeScript allows you to omit Curly braces on hashes. This can cause readability issues for the next person who comes along to read your code.</p>

<p>```coffeescript
{ div, h1, p, a } = React.DOM</p>

<p>Jumbotron = React.createClass
  render: -></p>

<pre><code>div { className: "jumbotron" },
  div { className: "container" },
    h1 {}, "Hello World"
      p {},
        a {
          className: "btn btn-primary btn-lg"
          href: "#"
          role: "button"
          "Learn more ?" }
</code></pre>

<p>```</p>

<h4>Gotcha 2: Commas and New lines</h4>

<p>CoffeeScript allows you to omit commas between hash assignments and opt instead for indented new lines. Again this can cause readability issues, especially when combined with Gotcha #1 above.</p>

<p>```coffeescript
{ div, h1, p, a } = React.DOM</p>

<p>Jumbotron = React.createClass
  render: -></p>

<pre><code>div
  className: "jumbotron",
  div
    className: "container",
    h1
      {}
      "Hello World"
      p
        {}
        a
          className: "btn btn-primary btn-lg"
          href: "#"
          role: "button"
          "Learn more ?"
</code></pre>

<p>```</p>

<p>Ultimately if you are going to use CoffeeScript for your ReactJS components instead of JSX then it's probably a good idea to agree upon some conventions with your team on when braces and commas are used. My preference has been to use braces for single line hash assignments, and I'm considering enforcing braces for multiple line attribute assignments w/ React to better separate them from the next element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Programming Remotely on a VPS]]></title>
    <link href="http://rapind.github.com/blog/2013/07/04/pair-programming-remotely-vps/"/>
    <updated>2013-07-04T07:44:00-04:00</updated>
    <id>http://rapind.github.com/blog/2013/07/04/pair-programming-remotely-vps</id>
    <content type="html"><![CDATA[<p class="hang">At Pair Shaped we firmly believe that pair working is the future (and the present). However a good part of our team works remotely and this can be a real challenge.</p>


<p>While remote pairing solutions are becoming increasingly popular, as a coder it's hard to beat the Vim + Tmux combination. It's simple, fast, and there's no client OS or application dependencies.</p>

<p>In this post we take you through all of the steps to setup an amazing remote pairing environment using an affordable cloud server (VPS). What this will allow you and your team to do:</p>

<ol>
<li>Securely share persistent tmux (shell) sessions on a linux box on the cloud.</li>
<li>Watch each other code.</li>
<li>Take turns coding.</li>
<li>Rotate between different persistent pairing sessions with multiple team members all within the same server.</li>
</ol>


<p>I highly recommend adding voice to the mix whether it's Skype, Google Voice, or a SIP provider.</p>

<p>For starters, we'll need a linux box in the cloud. For the server we're going to go <a href="https://www.digitalocean.com">Digital Ocean</a> since it is one of the most affordable options at the time of this post. However, the steps are essentially the same with other hosts like <a href="https://www.linode.com/">Linode</a> and <a href="http://aws.amazon.com/ec2/">EC2</a>, so definitely check them out too.</p>

<div class="videoWrapper">
  <iframe width="420" height="315" src="http://rapind.github.com//www.youtube.com/embed/aU7W4O9a61o" frameborder="0" allowfullscreen></iframe>
</div>


<p>Sign up for an account at Digital Ocean and then create a 512MB droplet running <em>Ubuntu 12.04 x32</em>. If you're not sure about the hostname option, a good choice would be something like <em>pair.yourcompanydomain.com</em>. Make sure you chose a region that's close to you and your team to minimize latency.</p>

<p>At this end of this tutorial you can shut you droplet down if you aren't going to use it, and it'll only end up costing you a few cents.</p>

<p>Once you've created the droplet, you should receive an email from Digital Ocean with your new boxe's IP address and credentials. For the rest of this post I'll use a fictional IP. Just substitute the IP you were given as needed.</p>

<p>Open up a terminal if you don't already have one up and follow along with these commands to setup and install the basics.</p>

<h2>Basic Server Setup</h2>

<pre><code># Log into your droplet and enter the provided password when prompted.
ssh root@198.199.xx.x

# Update the system. This will take a little while to complete.
aptitude update
aptitude safe-upgrade

# Install essential build tools, git, tmux, vim, and fail2ban.
aptitude install build-essential git tmux vim fail2ban

# For more details on configuration options for fail2ban start here:
# https://www.digitalocean.com/community/articles/how-to-protect-ssh-with-fail2ban-on-ubuntu-12-04
</code></pre>

<p>Next we'll need to setup user accounts for our pair. You can of course setup as many users as you want and run multiple tmux sessions, but that's the topic of a future post.</p>

<p>Follow along with these commands, substituting your preferred usernames for "dave" and "dayton".</p>

<h2>Create Your Pairs</h2>

<pre><code># Create the wheel group
groupadd wheel
visudo
# Add the following line to the bottom of the file
%wheel ALL=(ALL) ALL
# Save and quit. (:wq)

# Create our pair users
# You'll want to substitude your own usernames for dave and dayton
adduser dave
adduser dayton

# Add them to the wheel group
usermod -a -G wheel dave
usermod -a -G wheel dayton
</code></pre>

<p>Now that we have your users setup with full rights (this is something you may want to change down the road), we can disable the root account and instead use a pair account.</p>

<h2>Secure the Server</h2>

<pre><code># Copy your shh key to the server
scp ~/.ssh/id_rsa.pub dave@198.199.xx.x:

# Login to your account
ssh dave@198.199.xx.x

# Enable ssh access using your rsa key
mkdir .ssh
mv id_rsa.pub .ssh/authorized_keys

# Now you should be able to ssh to the server using your key. Go ahead and try it. 
exit
ssh dave@198.199.xx.x
# If you have to enter a password, something went wrong. Try these steps again.

# Edit the sshd config
sudo vi /etc/ssh/sshd_config
# Disable root login
PermitRootLogin no
# Save and quit. (:wq)

# Reload ssh
sudo reload ssh
</code></pre>

<p>Now we have a fairly secure server with our pair accounts using password-less access and it's time to setup the pairing environment. We're going to use <a href="https://github.com/zolrath/wemux">wemux</a> which is backed by tmux to manage the sessions.</p>

<h2>Wemux Installation</h2>

<pre><code># Install wemux
sudo git clone git://github.com/zolrath/wemux.git /usr/local/share/wemux
sudo ln -s /usr/local/share/wemux/wemux /usr/local/bin/wemux
sudo cp /usr/local/share/wemux/wemux.conf.example /usr/local/etc/wemux.conf

# Change the host_list value to your pair usernames
sudo vim /usr/local/etc/wemux.conf
host_list=(dave dayton)
# Save and quit (:wq)
</code></pre>

<p>You are now the proud owner of a remote pairing environment.</p>

<h2>Start pairing</h2>

<p>It's time to take it for a spin and make sure everything's copasetic.</p>

<pre><code># Launch a shared tmux session.
wemux
</code></pre>

<p>You should now be running in a shared tmux session. One of your other accounts (pair2, etc.) can login and use the same command to join your session.</p>

<p>You will definitely want to checkout the <a href="https://github.com/zolrath/wemux">wemux documentation</a> for all of the configuration options.</p>
]]></content>
  </entry>
  
</feed>
