<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Enterprise Software | Mark Daggett's Blog]]></title>
  <link href="http://heavysixer.github.com/blog/categories/enterprise-software/atom.xml" rel="self"/>
  <link href="http://heavysixer.github.com/"/>
  <updated>2013-12-02T07:29:38-06:00</updated>
  <id>http://heavysixer.github.com/</id>
  <author>
    <name><![CDATA[Mark Daggett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enterprise Quality Login Validation For Rails 3]]></title>
    <link href="http://heavysixer.github.com/blog/2012/03/23/enterprise-quality-login-validation-for-rails-3/"/>
    <updated>2012-03-23T09:33:00-05:00</updated>
    <id>http://heavysixer.github.com/blog/2012/03/23/enterprise-quality-login-validation-for-rails-3</id>
    <content type="html"><![CDATA[<p>In the world of enterprise software development sometimes you need to be a little more thorough with your validations than you would for other types of clients. Here is a simple yet effective login validator that passes the typical forms of penetration testing you will find in the enterprise world.</p>

<p>``` ruby
class LoginFormatValidator &lt; ActiveModel::EachValidator
  def validate_each(object, attribute, value)</p>

<pre><code>if value.present?
  unless value.gsub(" ",'') == value
    object.errors[attribute] &lt;&lt; (options[:message] || "cannot contain any whitespace")
  end
  if [value[0], value[-1]].any?{ |x| x == "." }
    object.errors[attribute] &lt;&lt; (options[:message] || "cannot contain a period at the start or end")
  end
  unless value =~ /[a-zA-Z]/
    object.errors[attribute] &lt;&lt; (options[:message] || "must contain at least one letter")
  end
  unless value =~ /[0-9]/
    object.errors[attribute] &lt;&lt; (options[:message] || "must contain at least one number")
  end
  unless value =~ /[_\-.]/
    object.errors[attribute] &lt;&lt; (options[:message] || "must contain at least one these special characters \"-_.\"")
  end
  unless value =~ /^[a-zA-Z0-9_\-.]+$/
    object.errors[attribute] &lt;&lt; (options[:message] || "can only contain letters number and special these special characters \"-_.\"")
  end
end
</code></pre>

<p>  end
end
```</p>

<p>You can use it this way:
<code>ruby
validates :login, :presence =&gt; true, :login_format =&gt; true, :uniqueness =&gt; { :case_sensitive =&gt; false }, :length =&gt; { :maximum =&gt; 64, :minimum =&gt; 6 }
</code></p>

<p>Here are some specs to prove it works:</p>

<p>``` ruby
it "should only allow letters numbers and spaces in the name attribute" do
  ['foo', 'foo bar baz', 'foo 123 - bar baz'].each do |n|</p>

<pre><code>@user.name = n
@user.save
@user.errors[:name].should be_empty
</code></pre>

<p>  end
  @user.name = '<script>alert("test");</script>'
  @user.save
  @user.errors[:name].first.should == "is invalid"
end</p>

<p>it "should not allow you to change an email for an existing record" do
  @user.email = "test@test.com"
  @user.save
  @user.errors[:email].first.should == "cannot be changed once assigned"
end</p>

<p>it "should be case insenitive" do
  @user2 = Factory.build(:user)
  @user2.login = @user.login.capitalize
  @user2.save
  @user2.errors[:login].first.should == "has already been taken"
end</p>

<p>it "should be at least 6 characters and no more than 64 characters" do
  @user2 = Factory.build(:user, :login => 'a1_')
  @user2.save
  @user2.errors[:login].first.should == "is too short (minimum is 6 characters)"
  @user2.login = 'Pneumonoultramicroscopicsilicovolcanoconiosis1_is_a_very_long_word'
  @user2.save
  @user2.errors[:login].first.should == "is too long (maximum is 64 characters)"
end</p>

<p>it "should ensure the name is a mix of alpha chars (A-Z or a-z), numeric chars (0-9), and special characters (- _ .)" do
  @user2 = Factory.build(:user, :login => '1----.----1')
  @user2.save
  @user2.errors[:login].first.should == "must contain at least one letter"
  @user2.login = "a------------------a"
  @user2.save
  @user2.errors[:login].first.should == "must contain at least one number"
  @user2.login ="abc12345676789"
  @user2.save
  @user2.errors[:login].first.should == "must contain at least one these special characters \"-_.\""
end</p>

<p>it "should ensure the special character '.' is not used at the beginning and end" do
  @user = Factory.build(:user, :login => '.Admin_f00')
  @user.save
  @user.errors[:login].first.should == "cannot contain a period at the start or end"
  @user = Factory.build(:user, :login => 'Admin_f00.')
  @user.save
  @user.errors[:login].first.should == "cannot contain a period at the start or end"
end</p>

<p>it "should not allow white space or \ / \" [ ] : | &lt; > + = ; , ? * @" do
  @user = Factory.build(:user)
  @user.login = "user _1"
  @user.save
  @user.errors[:login].first.should == "cannot contain any whitespace"
  ["\", '/', '"', '[', ']', ':', '|', '&lt;', '>', '+', '=', ';', ',', '?', '*', '@', "'"].each do |char|</p>

<pre><code>@user.login = "user_1" &lt;&lt; char
@user.save
@user.errors[:login].first.should == "can only contain letters number and special these special characters \"-_.\""
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
</feed>
