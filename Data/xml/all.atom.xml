<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>michael jones | dev blog</title><link href="http://michaeljones.github.io/blog/" rel="alternate"></link><link href="http://michaeljones.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>http://michaeljones.github.io/blog/</id><updated>2015-05-31T00:00:00+12:00</updated><entry><title>Idea: Maintain projects as a community through a bot that responds to voting on pull requests &amp; issues</title><link href="http://michaeljones.github.io/blog/posts/2015/05/31/idea-maintain-projects-as-a-community-through-a-bot-that-responds-to-voting-on-pull-requests-issues/" rel="alternate"></link><updated>2015-05-31T00:00:00+12:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2015-05-31:blog/posts/2015/05/31/idea-maintain-projects-as-a-community-through-a-bot-that-responds-to-voting-on-pull-requests-issues/</id><summary type="html">&lt;div class="section" id="problem"&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Some Github projects suffer from being abandoned by their maintainers for many
different and completely understandable reasons. This can even happen to quite
popular projects as there is often no clear mechanism for someone else taking
over without the current maintainer actively engaging.&lt;/p&gt;
&lt;p&gt;This can be very frustrating for the users of the projects and those who submit
issues &amp;amp; pull requests. Forking is of course an option but what stops that fork
dying and how to do you figure out which fork to use?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="proposed-solution"&gt;
&lt;h2&gt;Proposed Solution&lt;/h2&gt;
&lt;p&gt;We create a Github account which is run by a bot. You can request that the bot
forks any other repository on Github. You can then submit pull requests to the
bot's repository and users can vote on whether or not that pull request is
accepted. Votes are made through a clear syntax in pull request comments and the
bot performs the merge if the vote is successful.&lt;/p&gt;
&lt;p&gt;The bot should also have accounts with packaging repositories, like npm &amp;amp; PyPI,
and users can create votes around tagging certain commits and releasing those
tags to the packaging repositories as new versions of the software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strengths-of-the-solution"&gt;
&lt;h2&gt;Strengths of the Solution&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The vote driven nature allows development to continue as users come and go
from the project without needing to find new maintainers and new forks each
time.&lt;/li&gt;
&lt;li&gt;Users could vote other users, including possibly the original project auther,
into a maintainer role (a registered contributor on the project) to allow more
direct contribution to the project.&lt;/li&gt;
&lt;li&gt;If successful on a large scale, users would know to look for the
'community-bot' fork of a project as the best place to find a more maintained
version of the software.&lt;/li&gt;
&lt;li&gt;You could potentially build a network of trust between projects &amp;amp; users. If I
make good contributions to a project, I might be gain some trust towards
contributing to a related project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="problems-with-the-solution"&gt;
&lt;h2&gt;Problems with the Solution&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Who gets a vote? Maybe people who had contributed in some way to the original
repository before it was forked by the bot? But you would need a way for more
to get involved in the project.&lt;/li&gt;
&lt;li&gt;Do you have to wait for a critical mass of interested voters? What if one
person needs an abandoned project, can they use this approach if no one else
gets involved? Is that even an issue?&lt;/li&gt;
&lt;li&gt;The original maintainer would have to give the bot permissions to release to
the project on PyPI or npm otherwise you'd have to release a npm package
called 'package-x' as 'community-package-x' or some such approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="questions"&gt;
&lt;h2&gt;Questions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Has this been done before?&lt;/li&gt;
&lt;li&gt;Are there any more obvious problems?&lt;/li&gt;
&lt;li&gt;Are there any solutions to the problems? Does anyone know any approaches that
allow you to build trusted networks of people like this? I assume it is
generally a well studied area.&lt;/li&gt;
&lt;li&gt;Any other thoughts? Good idea? Crazy idea?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="motivation"&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;You see references to abandoned projects quite a bit but most recently it has
been &lt;a class="reference external" href="https://github.com/maraujop/django-crispy-forms"&gt;django-crispy-forms&lt;/a&gt;, a
very popular but currently largely unmaintained project, which has got me
thinking about this issue.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="github"></category></entry><entry><title>Source Control: Live in the Past</title><link href="http://michaeljones.github.io/blog/posts/2015/03/28/source-control-live-in-the-past/" rel="alternate"></link><updated>2015-03-28T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2015-03-28:blog/posts/2015/03/28/source-control-live-in-the-past/</id><summary type="html">&lt;p&gt;I am going to propose that there are two broad ways of using source control and
that developers generally fall into one camp or the other. The two ways are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Viewing source control as a kind of back up mechanism like making regular
copies of your project. Useful in case you screw up your current code base as
you can to go back and recover a reasonable state of the code.&lt;/p&gt;
&lt;p&gt;What is important about these back ups is that they exist and that the latest
one is recent enough that restoring from it isn't going to be a massive pain.&lt;/p&gt;
&lt;p&gt;This view is living in the present.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Viewing source control as the story of your project with a feeling that the
whole story is required for full understanding. The major events and the minor
details of the past are important if not quite as important as the current
state of the code.&lt;/p&gt;
&lt;p&gt;This view is living in the past.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I identify more with the second view and sometimes struggle when working with
developers from the first group.&lt;/p&gt;
&lt;div class="section" id="symptoms-of-living-in-the-present"&gt;
&lt;h2&gt;Symptoms of Living in the Present&lt;/h2&gt;
&lt;p&gt;These are the symptoms I see of living in the present in a source control sense:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Weak commit messages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you only really value the current state of your code base then commit
messages have no meaning. Why carefully document the last back up you made?
Back up services don't do that. They timestamp the back ups so that you know
which is the latest. Backups should be automatic and in the background. Don't
ask me for a commit message.&lt;/p&gt;
&lt;p&gt;And this shows in commit messages from these developers. They become cursory
and dismissive. Sometimes only one word or a few, sometimes only referencing
a ticket with no further explanation &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Commiting commented out code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the commit history is out of the picture then it isn't a safe place for
code that might be useful some day. Best not delete the code, but instead
comment it out so that it is available for future developers &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Commiting debug code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the current state of the code base is all that matters then the diff with
the previous state is not relevant. You've made your changes and it works so
commit them and move on.&lt;/p&gt;
&lt;p&gt;It can lead to you commiting print statements and debug code as you don't
check over the diff you are creating in your commit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Messy branching history&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Again, if history doesn't matter then why pay any attention to how you are
interacting with it. Pull the latest code and run whatever commands you have
to to get to a point where you can push you code back. What matters is your
code and the changes you've made not what else you might have pulled in.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="personal-experience"&gt;
&lt;h2&gt;Personal Experience&lt;/h2&gt;
&lt;p&gt;I used to work in the present as it were. For at least a year or so, I worked
with centralised source control systems and didn't pay much attention to the
history of the project. I was new to the tools and was learning my way around
the core commands and I didn't get far beyond &lt;tt class="docutils literal"&gt;update&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;commit&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I think that a strong influence was the lack of easy branching centralised
version control systems. If you're never branching then &lt;tt class="docutils literal"&gt;update&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;commit&lt;/tt&gt; might be all you really need to know. The cutting edge of the project
development is a point, not an 'edge' at all. You only have to be aware of that
one state because that is the only place where development was going on. The
&lt;tt class="docutils literal"&gt;update&lt;/tt&gt; command got you the latest changes and &lt;tt class="docutils literal"&gt;commit&lt;/tt&gt; sent yours back.&lt;/p&gt;
&lt;p&gt;The world changed a little for me when shifting to git. First the easy branching
meant numerous local branches for different features &amp;amp; bug fixes which called
for better visualisation. A single thread of development doesn't need to be
visualised but in multiple threads everything is relative. You know the changes
you've made but when and where? How are they going to be combined again? I began
to rely on &lt;tt class="docutils literal"&gt;gitk&lt;/tt&gt; as a quick and simple viewer for the state of my repository.
I used it to track my branches but what it showed me was the history. There it
was laid out before me; an extra dimension that I hadn't looked at before.&lt;/p&gt;
&lt;p&gt;Suddenly your collorators' changes aren't just a bump to &lt;tt class="docutils literal"&gt;update&lt;/tt&gt; over, they
are visible individual commits with diffs &amp;amp; messages. A timeline of progress and
reason which can be read and understood.&lt;/p&gt;
&lt;p&gt;Only if they don't have terrible commit messages. You start looking at diffs and
wanting to know why those changes are being made. Diffs rarely make much sense
without context and those messages provide a change to understand and to learn.&lt;/p&gt;
&lt;p&gt;So now I live in the past. Gitk is my home.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="symptoms-of-living-in-the-past"&gt;
&lt;h2&gt;Symptoms of Living in the Past&lt;/h2&gt;
&lt;p&gt;I'll attempt to provide a little balance. Obviously I feel there are good
symptoms of living in the past. Namely the opposite of those I've listed above,
clean history, cleaner commits and better commit messages, but there is a bad
one as well.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Endlessly massaging commits&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I love git's interactive rebase command because it allows me to develop
without thinking of a clean history and then clean it up afterwards. My
coding doesn't lose momentum to worrying about modular commits with good
messages and my co-workers don't suffer because I can clean up my mess before
they see it.&lt;/p&gt;
&lt;p&gt;Unfortunately, if I'm not careful I can end up cleaning up for a long time.
Once the code is working I can then be stuck rebasing and writing clean
commits for up to an hour in the rare worst case scenario. Such bulky history
editing can sometimes introduce bugs if there are conflicts during rebasing
that are resolved with due care and attention.&lt;/p&gt;
&lt;p&gt;This is a price I'm willing to pay on these occaisions but it is a price none
the less.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Consider your development practices. Do you think in terms of your project
history? Do your commits leave a trail that your collaborators can easily
follow? Or are they out of sight and out of mind?&lt;/p&gt;
&lt;p&gt;Consider finding a program like gitk and keeping it open as much as possible.
When you pull in work from your colleagues have a glance through and see if you
can follow their steps and understand what they've done and why they've done it.&lt;/p&gt;
&lt;p&gt;When writing commits messages, consider keeping the current diff to hand and
making sure that your commit message explains why you are making these changes
in a way which covers everything you can see in the diff.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;My personal experience with this kind of thinking is my memory of my
early confused days working with RCS. For commit messages in RCS you had to
enter a '.' on a new line to finish the message. I approached this as 'you
have to enter a dot on a new line to make it go away.' It was like learning
the key I had to press to get past this thing that was blocking my progress.
The purpose of the step didn't cross my mind.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;p class="first"&gt;I am a little sympathetic towards this though I don't agree with it as a
practice. If I see some code that needs to be improved in some way I don't
scan the entire history of that part of the code in source control to see
possible past attempts that might need to be resurrected.&lt;/p&gt;
&lt;p class="last"&gt;That said, I think the middle ground here is to leave a comment documenting
previous approaches so that future developers know to look back if they
decide something similar is needed once more.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="git"></category></entry><entry><title>Django, Selenium &amp; Timeouts</title><link href="http://michaeljones.github.io/blog/posts/2015/02/02/django-selenium-timeouts/" rel="alternate"></link><updated>2015-02-02T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2015-02-02:blog/posts/2015/02/02/django-selenium-timeouts/</id><summary type="html">&lt;p&gt;My Selenium tests in my Django testsuite have been failing from intermittent
timeouts. Nothing repeatable which makes debugging it an nightmare. I am not
wise in the ways of Selenium so Google &amp;amp; Stackoverflow were my tools but they
failed me this time.&lt;/p&gt;
&lt;p&gt;The timeouts occur at the start of a test when running the first &lt;tt class="docutils literal"&gt;get&lt;/tt&gt; on the
starting URL. The correct page would load but no further commands would have any
effect and it would just hang there before the tests timed out.&lt;/p&gt;
&lt;p&gt;After much head scratching and attempts at adding waits &amp;amp; delays, I've finally
settled on this. I use the &lt;tt class="docutils literal"&gt;open&lt;/tt&gt; method below for these calls now and in the
case of a timeout it kills the process and starts again. To my great relief it
seems to be working:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LiveServerTestCase&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.webdriver&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CustomWebDriver&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SeleniumTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LiveServerTestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CustomWebDriver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Open helper with brutal management of socket.timeout exceptions&lt;/span&gt;
&lt;span class="sd"&gt;        that can arise from the selenium driver. We catch them, kill the&lt;/span&gt;
&lt;span class="sd"&gt;        browser, restart everything and try again.&lt;/span&gt;

&lt;span class="sd"&gt;        Should be ok as there is no relevant state in the browser itself at&lt;/span&gt;
&lt;span class="sd"&gt;        the point of page load.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;live_server_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;socket.timeout - caught &amp;amp; suppressed. Restarting.&amp;quot;&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CustomWebDriver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

                &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;raise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="django"></category><category term="selenium"></category></entry><entry><title>Vim, Git &amp; Line Endings</title><link href="http://michaeljones.github.io/blog/posts/2015/01/08/vim-git-line-endings/" rel="alternate"></link><updated>2015-01-08T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2015-01-08:blog/posts/2015/01/08/vim-git-line-endings/</id><summary type="html">&lt;p&gt;I currently work on a team using both Unix &amp;amp; Windows platforms for developing a
Python &amp;amp; Django codebase. I work in Ubuntu and today made changes to a file
which was created by the Windows developer on our team. With a tighter process
this wouldn't be a problem, but the set up is pretty loose in this respect and I
ended up in the zone of line ending despair. 'Line ending hell' seems to strong
a term.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The issue ended up being that some files in the codebase have CRLF (Windows)
style line endings and some don't. Not great.&lt;/p&gt;
&lt;p&gt;And it seems that &lt;tt class="docutils literal"&gt;git&lt;/tt&gt; converts all line endings to LF (Unix) when staging
and committing files.&lt;/p&gt;
&lt;p&gt;When vim is set to &lt;tt class="docutils literal"&gt;fileformats=unix,dos&lt;/tt&gt;, it is open to both styles of line
endings and silently preserves whatever is in the file without showing you. As
do most modern editors I imagine.&lt;/p&gt;
&lt;p&gt;So vim handles the CRLF file transparently, but when you &lt;tt class="docutils literal"&gt;git add &lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/tt&gt; the
changes into the index git converts all CRLFs to LFs and then shows you that
your working copy, which still has the CRLFs, has changes against your index,
which only has LFs. This appears a little confusing if you didn't realise your
file had Windows line endings to begin with.&lt;/p&gt;
&lt;p&gt;My trouble is that the team generally uses Mercurial (I use git-remote-hg) and
Mercurial never attempts to convert line endings so in our codebase all CRLF
files &amp;amp; LF files just get passed around happily and everyone's editors silently
deal with whatever they are given.&lt;/p&gt;
&lt;p&gt;I respect Mercurial's choice as if you perform CRLF to LF conversion on a binary
file then you'll corrupt it and these tools cannot figure out text from binary
files with 100% accurary. I respect git's because in cross-platform teams like
this one you kind of want to settle on a particular line ending as a convention
instead of having different files with different conventions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;The answer should be to establish a convention within the team. My answer, as
I'm pretty new and don't want to rock the boat, is to tell git to mimic
Mercurial and just ignore all line endings. This can be achieved with a
&lt;tt class="docutils literal"&gt;.gitattributes&lt;/tt&gt; file and the following lines:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*.py -text
*.html -text
*.css -text
&lt;/pre&gt;
&lt;p&gt;Repeated for as many text file types as you have. The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-text&lt;/span&gt;&lt;/tt&gt; value tells git
not to apply any kind of text processing to it when adding, committing or
checking out. The difference between &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-text&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;binary&lt;/tt&gt; in this context,
which is another option, is that &lt;tt class="docutils literal"&gt;binary&lt;/tt&gt; also prevents git from attempting to
show you a diff of the file at any point with the usual commands that normally
would.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="and-then-whitespace"&gt;
&lt;h2&gt;And then Whitespace&lt;/h2&gt;
&lt;p&gt;If you use &lt;tt class="docutils literal"&gt;apply.whitespace=fix&lt;/tt&gt; to make sure your &lt;tt class="docutils literal"&gt;git add &lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/tt&gt; code
changes are sanitized for whitespace then you still have a problem. We haven't
told git to respect the line endings in the file, we've just told it to ignore
them. So it is still thinking in terms of LFs and when it see some line ending
with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
... my_variable;&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;
&lt;/pre&gt;
&lt;p&gt;It sees the &lt;tt class="docutils literal"&gt;CR&lt;/tt&gt; as trailing whitespace before the line ending. So we have to
use the:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
core.whitespace=cr-at-eol
&lt;/pre&gt;
&lt;p&gt;config option which is a special setting to instruct git not to view &lt;tt class="docutils literal"&gt;CR&lt;/tt&gt;
characters as trailing whitespace. &lt;tt class="docutils literal"&gt;core.whitespace&lt;/tt&gt; can take a comma
separated list of different values so make sure you check yours before adding
that additional value.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="git"></category><category term="vim"></category></entry><entry><title>Nix &amp; Yesod</title><link href="http://michaeljones.github.io/blog/posts/2014/10/26/nix-yesod/" rel="alternate"></link><updated>2014-10-26T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2014-10-26:blog/posts/2014/10/26/nix-yesod/</id><summary type="html">&lt;p&gt;I've spent the day messing around with the Nix package manager and trying to get
a basic Yesod project up a running.&lt;/p&gt;
&lt;p&gt;I very much like what I've managed to understand but it is early days and not
everything is clear. So for those attempting similar things I thought I would
share the &lt;tt class="docutils literal"&gt;default.nix&lt;/tt&gt; file contents that I ended up with. Set up a folder
with this and run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nix-shell&lt;/span&gt;&lt;/tt&gt; and you should be able to run &lt;tt class="docutils literal"&gt;yesod init&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;yesod devel&lt;/tt&gt; in the resulting environment.&lt;/p&gt;
&lt;p&gt;No promises though as I've no idea what I'm doing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{ haskellPackages ? (import &amp;lt;nixpkgs&amp;gt; {}).haskellPackages }:

let inherit (haskellPackages);

in with haskellPackages; cabal.mkDerivation (self: {
  pname = &amp;quot;project-name&amp;quot;;
  version = &amp;quot;0.0.1&amp;quot;;
  src = ./.;
  buildDepends = with haskellPackages; [
    yesod yesodStatic yesodTest
    yesodBin
    hjsmin persistentSqlite hspec
    ];
})
&lt;/pre&gt;
&lt;p&gt;Update: Tweaked to support &lt;tt class="docutils literal"&gt;yesod test&lt;/tt&gt; as well.&lt;/p&gt;
</summary><category term="nix"></category><category term="haskell"></category><category term="yesod"></category></entry><entry><title>Watch Out for Python's HasAttr &amp; AttributeError</title><link href="http://michaeljones.github.io/blog/posts/2014/09/21/watch-out-for-pythons-hasattr-attributeerror/" rel="alternate"></link><updated>2014-09-21T00:00:00+12:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2014-09-21:blog/posts/2014/09/21/watch-out-for-pythons-hasattr-attributeerror/</id><summary type="html">&lt;p&gt;I was recently trying to contribute to the &lt;a class="reference external" href="https://github.com/asaglimbeni/django-datetime-widget"&gt;django-datetime-widget&lt;/a&gt; repository
and encountered an issue with my changes not working but no error being reported
from Django or Python.&lt;/p&gt;
&lt;p&gt;I was working on the widget's &lt;tt class="docutils literal"&gt;_media&lt;/tt&gt; method which is converted to a
read-only &lt;tt class="docutils literal"&gt;media&lt;/tt&gt; property. Django is meant to use the value of the &lt;tt class="docutils literal"&gt;media&lt;/tt&gt;
attribute on a widget class to help include any additional CSS, images &amp;amp;
Javascript files into the final web page template that uses the widget.&lt;/p&gt;
&lt;p&gt;In order to test for the presence of the &lt;tt class="docutils literal"&gt;media&lt;/tt&gt; attribute, Django uses the
following code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
try:
    base = sup_cls.media
except AttributeError:
    base = Media()
&lt;/pre&gt;
&lt;p&gt;It tries to access the attribute and if it receives an &lt;tt class="docutils literal"&gt;AttributeError&lt;/tt&gt; then
it uses the replacement value &lt;tt class="docutils literal"&gt;Media()&lt;/tt&gt; instead. This is reasonable for basic
attributes on classes, but when combined with Python properties which can allow
attribute access to result in complex method calls then there is room for
trouble.&lt;/p&gt;
&lt;p&gt;My issue was that in my &lt;tt class="docutils literal"&gt;_media&lt;/tt&gt; implementation I had made a mistake that was
resulting in an &lt;tt class="docutils literal"&gt;AttributeError&lt;/tt&gt; being raised. And the trouble was that this
was being silently caught by Django which was intepretting it as there not being
a &lt;tt class="docutils literal"&gt;media&lt;/tt&gt; attribute at all and so I was neither seeing the error or my
expected includes in the final rendered HTML.&lt;/p&gt;
&lt;div class="section" id="my-proposed-solution"&gt;
&lt;h2&gt;My Proposed Solution&lt;/h2&gt;
&lt;p&gt;Hoping to make the world a better place, I headed over to the Django-users
mailing and posted that maybe we could approach this differently. I thought that
maybe the following implementation would avoid this issue:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if hasattr(sup_cls, 'media'):
    base = sup_cls.media
else:
    base = Media()
&lt;/pre&gt;
&lt;p&gt;I thought that using the &lt;tt class="docutils literal"&gt;hasattr&lt;/tt&gt; check instead of waiting for an exception
to be raised would avoid this issue. I assumed that all that &lt;tt class="docutils literal"&gt;hasattr&lt;/tt&gt; did was
to check if the object in question had a particular attribute. Crazy right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem-with-my-solution"&gt;
&lt;h2&gt;The Problem with my Solution&lt;/h2&gt;
&lt;p&gt;It turns out this does not work. The kind people on the list educated me in
the ways of &lt;tt class="docutils literal"&gt;hasattr&lt;/tt&gt; and why this approach doesn't help. I had been foolish
enough not to test my proposed solution and it turns out that the documentation
covers why it won't actually work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
hasattr(object, name) -&amp;gt; bool

Return whether the object has an attribute with the given name.
(This is done by calling getattr(object, name) and catching exceptions.)
&lt;/pre&gt;
&lt;p&gt;There it is: &lt;tt class="docutils literal"&gt;hasattr&lt;/tt&gt; is implemented in terms of calling &lt;tt class="docutils literal"&gt;getattr&lt;/tt&gt; and
catching all exceptions. So it would fail on my buggy implementation of
&lt;tt class="docutils literal"&gt;_media&lt;/tt&gt; in just the same way that the current test does.&lt;/p&gt;
&lt;p&gt;Damn shame really, as it is incredibly confusing to have no results and no
feedback.&lt;/p&gt;
&lt;p&gt;Fortunately, Python 3 fixes this issue apparently and Python 2 is stuck with the
current functionality for backwards compatibility.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Install Pip on a Fresh Setup</title><link href="http://michaeljones.github.io/blog/posts/2014/09/09/install-pip-on-a-fresh-setup/" rel="alternate"></link><updated>2014-09-09T00:00:00+12:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2014-09-09:blog/posts/2014/09/09/install-pip-on-a-fresh-setup/</id><summary type="html">&lt;p&gt;I've recently switch to a fresh Linux machine and needed to begin setting up my
standard environment. Part of the set up is creating some Python virtual
environments from which to runs various helpers scripts that I like to have
access to.&lt;/p&gt;
&lt;p&gt;However, my fresh machine does not have &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; installed on it and as I never
want to &lt;tt class="docutils literal"&gt;pip install&lt;/tt&gt; modules to my &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; area, I'd rather keep it that
way &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So we need to install &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; on a clean set up. The pip installion
documentation shows that they provide a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;get-pip.py&lt;/span&gt;&lt;/tt&gt; script for exactly this
situation.&lt;/p&gt;
&lt;p&gt;The only trouble is that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;get-pip.py&lt;/span&gt;&lt;/tt&gt; seems to want to install into &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt;
by default, which is understandable but not what I am after.&lt;/p&gt;
&lt;p&gt;Further to this, I have had no luck with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--install-option&lt;/span&gt;&lt;/tt&gt; flag that is
advertised by &lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;get-pip.py&lt;/span&gt; &lt;span class="pre"&gt;-h&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;What does work though is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python get-pip.py --user
&lt;/pre&gt;
&lt;p&gt;Which adopts the Python &lt;em&gt;user scheme&lt;/em&gt; for installations which on Linux installs
to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local&lt;/span&gt;&lt;/tt&gt; by default. You can check the install location with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -c &amp;quot;import site; print site.USER_BASE&amp;quot;
&lt;/pre&gt;
&lt;p&gt;The base directory for the &lt;em&gt;user scheme&lt;/em&gt; can be controlled with the
&lt;tt class="docutils literal"&gt;PYTHONUSERBASE&lt;/tt&gt; environment variable so we can create a temporary install of
pip with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PYTHONUSERBASE=/tmp/python2.x python get-pip.py --user
&lt;/pre&gt;
&lt;p&gt;You can then install &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PYTHONUSERBASE=/tmp/python2.x /tmp/python2.x/bin/pip install --user virtualenv
&lt;/pre&gt;
&lt;p&gt;Then you can create a proper virtualenv with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PYTHONPATH=/tmp/python2.x/lib/python2.7/site-packages /tmp/python2.x/bin/virtualenv ~/myvirtualenv
&lt;/pre&gt;
&lt;p&gt;And then you have something to work with.&lt;/p&gt;
&lt;p&gt;Having written all this out, maybe there is an easier way. But until I figure
that out, I have this for reference.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If I do not have &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; installed at the system level then I can only
run &lt;tt class="docutils literal"&gt;pip install&lt;/tt&gt; from inside virtualenvs which is nice and contained and so
there is a little less to worry about.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="python"></category><category term="pip"></category></entry><entry><title>Remove Chunks from Your Last Commit</title><link href="http://michaeljones.github.io/blog/posts/2014/09/09/remove-chunks-from-your-last-commit/" rel="alternate"></link><updated>2014-09-09T00:00:00+12:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2014-09-09:blog/posts/2014/09/09/remove-chunks-from-your-last-commit/</id><summary type="html">&lt;p&gt;I tend to use &lt;tt class="docutils literal"&gt;git add &lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/tt&gt; most of the time as I enjoy the granular control
over what I am commiting and it allows me to accummulate additional changes, as
I work, confident that I can commit them separately for a pleasing history.&lt;/p&gt;
&lt;p&gt;Sometimes, however, I am not concentrating and I either do a straight &lt;tt class="docutils literal"&gt;git
commit&lt;/tt&gt; when I think I can get away with it but can't, or I do &lt;tt class="docutils literal"&gt;git add &lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/tt&gt;
and accept the wrong thing before commiting. Either way, I end up with a commit
that has some changes, or chunks, in it that I don't want.&lt;/p&gt;
&lt;p&gt;Up until recently, I have been doing a &lt;tt class="docutils literal"&gt;git reset HEAD^&lt;/tt&gt; to completely undo
the commit and start again. This is a bit of a pain and feels somewhat
ponderous.&lt;/p&gt;
&lt;p&gt;I would rather generate a pair of patches: one which removes the chunks for the
last commit and one which adds them as a new commit. This can be awkwardly
managed by dancing around with &lt;tt class="docutils literal"&gt;git revert&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;git reset&lt;/tt&gt;, but I have just
realised it can be more cleanly achieved with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git reset -p HEAD^
&lt;/pre&gt;
&lt;p&gt;Then selecting the chunks you want to revert. This perfectly creates staged
changes that undo the chunks and unstaged changes which redo them. You can
then:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git commit --amend
&lt;/pre&gt;
&lt;p&gt;To commit the staged chunks that remove the targetted changes from the previous
commit and then:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git commit -a
&lt;/pre&gt;
&lt;p&gt;To commit the removed changes as a new separate commit. Or if they should be
split over multiple commits, use &lt;tt class="docutils literal"&gt;git commit &lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/tt&gt; otherwise you'll be back
to square one.&lt;/p&gt;
</summary><category term="git"></category></entry><entry><title>Django CSRF React Component</title><link href="http://michaeljones.github.io/blog/posts/2014/06/08/django-csrf-react-component/" rel="alternate"></link><updated>2014-06-08T00:00:00+12:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2014-06-08:blog/posts/2014/06/08/django-csrf-react-component/</id><summary type="html">&lt;p&gt;I've been doing some web development recently and getting in to &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; and
&lt;a class="reference external" href="http://facebook.github.io/react/"&gt;Facebook's React&lt;/a&gt; framework.&lt;/p&gt;
&lt;p&gt;When creating forms in React for submission to a Django app you need to include
the &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/"&gt;Django CSRF token&lt;/a&gt; for Django's form processing. A simple way to do this
is to wrap it up as a reusable React component. Like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;react&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;DjangoCSRFToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClass&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;csrfToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;csrf_token&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;csrfmiddlewaretoken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DjangoCSRFToken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DjangoCSRFToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Retrieving the actual CRSF token is done here with help of the &lt;a class="reference external" href="https://github.com/noirbizarre/django.js"&gt;Django.js&lt;/a&gt;
helper.  However from the &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax"&gt;Django docs&lt;/a&gt; you can do it with &lt;a class="reference external" href="http://jquery.com"&gt;jQuery&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// using jQuery&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cookieValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="c1"&gt;// Does this cookie string begin with the name we want?&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;cookieValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                  &lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cookieValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;csrftoken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;csrftoken&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or with the &lt;a class="reference external" href="http://plugins.jquery.com/cookie/"&gt;jQuery cookie plugin&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;csrftoken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;csrftoken&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then save the final component code into a new node module and use it in your
browser javascript with &lt;a class="reference external" href="http://browserify.org/"&gt;Browserify&lt;/a&gt; like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
return (
       &amp;lt;form method='post' action={this.props.acceptUrl}&amp;gt;
         &amp;lt;DjangoCSRFToken /&amp;gt;
         &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;edit_id&amp;quot; value={edit.id} /&amp;gt;
         &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;accept&amp;quot; value=&amp;quot;Accept&amp;quot; /&amp;gt;
       &amp;lt;/form
       );
&lt;/pre&gt;
</summary><category term="django"></category><category term="react"></category></entry><entry><title>Video: Developers, Entrepreneurs and Depression</title><link href="http://michaeljones.github.io/blog/posts/2013/12/12/video-developers-entrepreneurs-and-depression/" rel="alternate"></link><updated>2013-12-12T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-12-12:blog/posts/2013/12/12/video-developers-entrepreneurs-and-depression/</id><summary type="html">&lt;p&gt;An excellent talk about going through and dealing with mental illness in the
form of Type II Bipolar and ADHD. I don't feel that I have had to deal with
these issues myself nor am I aware of any close friends going through it but I
am guilty of not understanding it well. Greg Baugues opens up the door a little
to allow me begin to see and understand what it might be to deal with these
conditions.&lt;/p&gt;
&lt;p&gt;He has given the talk a number of times as detailed and linked to on his
&lt;a class="reference external" href="http://blog.baugues.com/speaking"&gt;speaking page&lt;/a&gt;.&lt;/p&gt;
</summary></entry><entry><title>Journal - Day 27</title><link href="http://michaeljones.github.io/blog/posts/2013/12/09/journal-day-27/" rel="alternate"></link><updated>2013-12-09T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-12-09:blog/posts/2013/12/09/journal-day-27/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Triage issues in the Breathe github project. Figure out what is outstanding
and what is fixed but neglected.&lt;/li&gt;
&lt;li&gt;Read chapter 10 of Real World Haskell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Triaged.&lt;/li&gt;
&lt;li&gt;Read.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Video Round Up</title><link href="http://michaeljones.github.io/blog/posts/2013/12/09/video-round-up/" rel="alternate"></link><updated>2013-12-09T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-12-09:blog/posts/2013/12/09/video-round-up/</id><summary type="html">&lt;p&gt;I've watched a few videos and listened to a few podcasts recently which deserve
a mention but which I failed to integrate into the journal entries. Mostly from
the &lt;a class="reference external" href="http://functionaltalks.org"&gt;functionaltalks.org&lt;/a&gt; site.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://functionaltalks.org/2013/06/10/brian-osullivan-running-a-startup-on-haskell/"&gt;Running a Startup on Haskell&lt;/a&gt; - Brian O'Sullivan&lt;/p&gt;
&lt;blockquote&gt;
An entertaining and quite casual talk taking an overview of the decisions
made in using Haskell for a startup. Not technical, I didn't have the slides
up and didn't feel like I missed anything.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://functionaltalks.org/2013/07/03/katie-miller-superhero-monads/"&gt;Superhero monads&lt;/a&gt; - Katie Miller&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A look into Monads with attempts to illustrate their structure and use in
particular situations, mostly the &lt;tt class="docutils literal"&gt;Maybe&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;List&lt;/tt&gt; monads. Includes
reference code in Haskell and Java.&lt;/p&gt;
&lt;p&gt;It is interesting to see the Java implementations both for how much more
succinct the Haskell code is but also simply to show that it is possible to
use the idea of monads in other languages and to get a feel for what that
looks like.&lt;/p&gt;
&lt;p&gt;A good talk which happily provides another reference for learning monads and their potential.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://functionaltalks.org/2013/06/24/brian-mckenna-roy-rescuing-javascript-from-itself/"&gt;Roy: rescuing JavaScript from itself&lt;/a&gt; - Brian McKenna&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A short but interesting talk of a function language which compiles down to
Javascript and attempts to tackle some of the short comings in the target
language.&lt;/p&gt;
&lt;p&gt;An impressive collection of features insprired by functional languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://functionaltalks.org/2013/07/21/wilkes-joiner-functional-reactive-programming/"&gt;Functional Reactive Programming&lt;/a&gt; - Wilkes Joiner&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A short introduction to FRP which doesn't necessarily have the time to do it
justice but is still an interesting watch. I've little experience with GUIs
and the kinds of event driven problems that the presenter demostrates solving
but the he makes a good case for the advertised approach being simple,
understandable and a great deal clearer that nested callbacks.&lt;/p&gt;
&lt;p&gt;I've no idea how it compares to other solutions to &amp;quot;callback hell&amp;quot; but it
seems to be backed by a number of big players.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.haskellcast.com/episode/004-simon-marlow-on-parallelism-and-concurrency/"&gt;Simon Marlow on Parallelism and Concurrency&lt;/a&gt; - Haskell Cast&lt;/p&gt;
&lt;blockquote&gt;
Podcast with Simon Marlow; covering his move to Facebook and his work on the
free book on Parallelism and Concurrency in Haskell.&lt;/blockquote&gt;
</summary></entry><entry><title>Journal - Day 26</title><link href="http://michaeljones.github.io/blog/posts/2013/12/05/journal-day-26/" rel="alternate"></link><updated>2013-12-05T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-12-05:blog/posts/2013/12/05/journal-day-26/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read chapter 9 of Real World Haskell.&lt;/li&gt;
&lt;li&gt;Figure out how to replace the text in Group widget in the Jump interface once
we have information back from the Github API.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Read chapter 9 of Real World Haskell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Did not get around to actually querying the Github API but created functions
for formatting the information panel in the Jump UI which are ready to take
the Github data.&lt;/p&gt;
&lt;p&gt;Involved my first attempt to right something in the wild in the Maybe monad.
I've done a lot in the IO Monad but I don't really understand the role of bind
in that situation. Took a while to get a feel for it and how best to express
the functions and whether they should know about the Maybe Monad or be lifted
into it.&lt;/p&gt;
&lt;p&gt;It also became a lesson in knowing when you want to recover from errors and
when you want to just let the Nothing state of the Maybe propagate. I feel
like my situation had places where bind was not the best choice and something
which took a Nothing and propagated a default value would be preferable. Still
interesting to experiment with it and feel how seemlessly it fits in to the
Haskell experience.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 25</title><link href="http://michaeljones.github.io/blog/posts/2013/12/04/journal-day-25/" rel="alternate"></link><updated>2013-12-04T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-12-04:blog/posts/2013/12/04/journal-day-25/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 8 of Real World Haskell and read chapter 9.&lt;/li&gt;
&lt;li&gt;Try to figure out how to have a panel in a vty-ui interface in which the
content can easily be changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Busy day so only finished chapter 8.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Discovered that vty-ui has a group concept for parts of the UI which need to
switch between different widgets. Unfortunately the API involves the Group
structure being parametrised on its contents so you can have a Group with
different types of widgets in different pages within it.&lt;/p&gt;
&lt;p&gt;Fortunately the FormattedText type in vty-ui will most likely prove
sufficient for displaying some basic information.&lt;/p&gt;
&lt;p&gt;In an attempt to see how one might deal with the situation in Haskell I came
across &lt;a class="reference external" href="http://www.haskell.org/haskellwiki/Existential_type"&gt;Existential Types&lt;/a&gt; which seems like they would do the job and there
is even a &lt;a class="reference external" href="http://lukepalmer.wordpress.com/2010/01/24/haskell-antipattern-existential-typeclass/"&gt;blog post&lt;/a&gt; referencing them in vty-ui but I can't see any trace in
the current API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 24</title><link href="http://michaeljones.github.io/blog/posts/2013/12/03/journal-day-24/" rel="alternate"></link><updated>2013-12-03T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-12-03:blog/posts/2013/12/03/journal-day-24/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read chapter 8 of Real World Haskell.&lt;/li&gt;
&lt;li&gt;Refactor &lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; program source code to introduce modules.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read half of chapter 8.&lt;/li&gt;
&lt;li&gt;Refactored source code to split separate concerns into modules. This reduces
the import clutter at the top of the &lt;tt class="docutils literal"&gt;Main.hs&lt;/tt&gt; and makes things a little
more manageable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 23</title><link href="http://michaeljones.github.io/blog/posts/2013/12/02/journal-day-23/" rel="alternate"></link><updated>2013-12-02T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-12-02:blog/posts/2013/12/02/journal-day-23/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read chapter 6 of Real World Haskell.&lt;/li&gt;
&lt;li&gt;Attempt to debug why issue query with github hackage package is failing.&lt;/li&gt;
&lt;li&gt;Attempt to install Autodesk Maya 2014 on Ubuntu 13.04.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Read chapter 6 and chapter 7.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Not exactly sure why the github package query was failing but grabbing the
latest source for the package from github and using that instead seemed to
resolve the issue. Adding source to a cabal sandbox can be done with the
following steps:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# In sandbox
$ mkdir source-packages
$ cd source-packages
$ git clone https://github.com/fpco/github.git
$ cd ..
$ cabal sandbox add-source source-packages/github
$ cabal install --dependencies-only
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Failed to get around to install Maya 2014.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 22</title><link href="http://michaeljones.github.io/blog/posts/2013/11/29/journal-day-22/" rel="alternate"></link><updated>2013-11-29T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-11-29:blog/posts/2013/11/29/journal-day-22/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 4 and read chapter 5 of Real World Haskell.&lt;/li&gt;
&lt;li&gt;Investigate HTTP libraries in Haskell for requesting information from the
Github Rest API.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Read chapters 4 &amp;amp; 5.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Looked into using the &lt;a class="reference external" href="http://hackage.haskell.org/package/HTTP"&gt;HTTP&lt;/a&gt; Haskell library but that doesn't handle HTTPs
which is required for Github's API. Looked into &lt;a class="reference external" href="http://hackage.haskell.org/package/http-conduit"&gt;http-conduit&lt;/a&gt; which handles
HTTPs but the &lt;a class="reference external" href="http://hackage.haskell.org/package/http-conduit-1.9.5.2/docs/Network-HTTP-Conduit.html#v:simpleHttp"&gt;simpleHttp&lt;/a&gt; function in that fails with only
&lt;tt class="docutils literal"&gt;InternalIOException&lt;/tt&gt; which doesn't help much.&lt;/p&gt;
&lt;p&gt;Ended up trying to use the &lt;a class="reference external" href="http://hackage.haskell.org/package/github"&gt;github&lt;/a&gt; package from Hackage which handles the HTTP
requests for you but that seems to be tripping over the content of what is
returned so needs more investigation to understand what is going on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 21</title><link href="http://michaeljones.github.io/blog/posts/2013/11/28/journal-day-21/" rel="alternate"></link><updated>2013-11-28T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-11-28:blog/posts/2013/11/28/journal-day-21/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 3 and read chapters 4 &amp;amp; 5 of Real World Haskell.&lt;/li&gt;
&lt;li&gt;Investigate adding Github issues and pull requests information to project
browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished chapter 3 and half of chapter 4. I forgot how long they are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Started initial investigations in github issues api. Primarily by looking
through the &lt;a class="reference external" href="http://developer.github.com/v3/issues"&gt;developer documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Watched a talk called &lt;a class="reference external" href="http://www.infoq.com/presentations/8-lines-code-refactoring"&gt;8 Lines of Code&lt;/a&gt; which focussed on arguing against the
use of layers of magic in Java code when the end goals can be achieved with
sensible refactorings of the original code. A convincing argument arching over
some concepts I am familiar with and pushing things a little further. I am a
bit of fan of factories but can see the logic here of replacing them with
lambdas where possible.&lt;/p&gt;
&lt;p&gt;Factories, as I use them, are normally to bundle up some state and provide an
interface for creating objects which need that state. Factory classes are the
go to tool for this in languages which don't provide currying, closures or
first class functions. In languages like C++98, objects are more composable
than functions so it makes sense to make a lot of things into objects as
composability is a key tool in handling complexity in a growing system. As
such I use instances of Factory classes for managing object creation and other
concepts. The talk's speaker argues that a Factory is an anti-pattern
primarily based on the amount of boiler plate you have to churn out for one in
C++ or particular Java. The preference for using closures or partially
function application is based on the reward of stripping out this boiler plate
whilst maintaining much the same functionality.&lt;/p&gt;
&lt;p&gt;The only downside I can see involves wondering how these closures appear in
stacktraces when things go wrong. Factories do provide a certain documentation
of intent in that scenario. Balancing that is my experience knowing I've
written quite a few nearly pointless factories in my time and stripping them
away in favour of a single line function application where possible is a
tempting prospect.&lt;/p&gt;
&lt;p&gt;A similar theme is taken up by Jack Diederich in his &lt;a class="reference external" href="https://www.youtube.com/watch?v=o9pEzgHorH0"&gt;Stop Writing Classes&lt;/a&gt;
talk where he rails against single method classes which can be replaced by
closures and partial application. He is quite invested in this approach as the
author of the functools module in the Python standard library. Personally, I
think he takes some of the examples to extreme and loses the shape and self
documenting nature that classes can bring to code in a quest for maximum reuse
and minimal line counts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Listened to the &lt;a class="reference external" href="http://mostlyerlang.com"&gt;Mostly Erlang&lt;/a&gt; podcast on &lt;a class="reference external" href="http://mostlyerlang.com/2013/11/27/023-yesod-and-fp-complete/"&gt;Yesod and FP Complete&lt;/a&gt;. It
provides an interesting overview of the motivation behind Yesod and FP
Complete along with some general Haskell banter. Excellent for general
knowledge and building up a bigger picture of Haskell.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 20</title><link href="http://michaeljones.github.io/blog/posts/2013/11/27/journal-day-20/" rel="alternate"></link><updated>2013-11-27T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-11-27:blog/posts/2013/11/27/journal-day-20/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Review work on &lt;a class="reference external" href="http://github.com/michaeljones/breathe"&gt;Breathe&lt;/a&gt; from yesterday, merge results into master.&lt;/li&gt;
&lt;li&gt;Review first chapter of &lt;a class="reference external" href="http://book.realworldhaskell.org/read/"&gt;Real World Haskell&lt;/a&gt; and read the next.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Merged &lt;a class="reference external" href="http://github.com/michaeljones/breathe"&gt;Breathe&lt;/a&gt; changes with a few additional clean ups into master and
pushed.&lt;/li&gt;
&lt;li&gt;Read first and second chapter of &lt;a class="reference external" href="http://book.realworldhaskell.org/read/"&gt;Real World Haskell&lt;/a&gt; and some of chapter 3.&lt;/li&gt;
&lt;li&gt;Watched &lt;a class="reference external" href="https://www.youtube.com/watch?v=u404SLJj7ig"&gt;Code Rush&lt;/a&gt; documentary on Youtube. An interesting slice of history
though I found it some what of a tease to the lack of detail on the technical
side which left me with questions but it has an understandable focus for its
intended audience and subject.&lt;/li&gt;
&lt;li&gt;Came across &lt;a class="reference external" href="http://hello.processing.org/editor/"&gt;Hello Processing&lt;/a&gt; which looks pretty cool as an introduction to
programming or at least I enjoyed the presentation of the first section.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Video: Simple Made Easy</title><link href="http://michaeljones.github.io/blog/posts/2013/11/24/video-simple-made-easy/" rel="alternate"></link><updated>2013-11-24T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-11-24:blog/posts/2013/11/24/video-simple-made-easy/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.infoq.com/presentations/Simple-Made-Easy"&gt;A talk&lt;/a&gt; from &lt;a class="reference external" href="http://thechangelog.com/rich-hickeys-greatest-hits/"&gt;Rich Hickey's Greatest Hits&lt;/a&gt; in which he tries to define a
difference between easy and simple and the importance of the latter. He
highlights various elements of a programmer's toolkit which promote simplicity
within your code base.&lt;/p&gt;
&lt;p&gt;It is definitely in favour of functional programming approaches, in particular
aspects of Clojure, unsurprisingly, and Haskell. Certainly makes me want to try
to pick up Clojure after Haskell.&lt;/p&gt;
&lt;div class="section" id="queues"&gt;
&lt;h2&gt;Queues&lt;/h2&gt;
&lt;p&gt;A particular 'Ah-ha' moment for me is where he emphasises the use of queues to
decouple two parts of a system. He recommends them over having part &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; call
directly into part &lt;tt class="docutils literal"&gt;B&lt;/tt&gt;. Whilst he does not go into detail on the concept, I
assume you have part &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; pushing items on to the queue and part &lt;tt class="docutils literal"&gt;B&lt;/tt&gt; reading
out of the queue to find its next workload.&lt;/p&gt;
&lt;p&gt;This is new to me as an idea but his phrasing: &amp;quot;if you're not doing this, start
doing it now&amp;quot;, reminds of the exactly what I resort to when I try to convey
aspects of programming that I consider important. Some ideas grow on you to seem
so critical that you just want people to embrace them now and learn the
importance for themselves through their own experience.&lt;/p&gt;
&lt;p&gt;That said, there is a huge amount to take away from this talk. The simple vs
easy division puts words to feeling I've had for a while and what frustrates me
in subtle ways about the way some people program.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="haskell"></category></entry><entry><title>Haskell's Sandbox &amp; Python's Virtualenv</title><link href="http://michaeljones.github.io/blog/posts/2013/11/21/haskells-sandbox-pythons-virtualenv/" rel="alternate"></link><updated>2013-11-21T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-11-21:blog/posts/2013/11/21/haskells-sandbox-pythons-virtualenv/</id><summary type="html">&lt;p&gt;Cabal's sandboxes for Haskell provide an excellent way to contain the
dependencies of a project and help to resolve clashes with other projects you
might have on the system.&lt;/p&gt;
&lt;p&gt;They work brilliantly with libraries which are automatically picked up by
&lt;tt class="docutils literal"&gt;cabal build&lt;/tt&gt; but they lack decent support for the executables which can some
with Haskell packages such as &lt;a class="reference external" href="http://hackage.haskell.org/package/hlint"&gt;hlint&lt;/a&gt; and &lt;a class="reference external" href="http://hackage.haskell.org/package/scan"&gt;scan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enter Python's &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Python ecosystem has a similar sandbox tool called virtualenv which is used
for managing dependencies in a isolated manner on a per-project basis.
Fortunately, virtualenv has solved the executables issue by creating shell
scripts to be sourced when using the virtual environment which configure the
user's shell/environment appropriately.&lt;/p&gt;
&lt;p&gt;Both Cabal Sandboxes and Python virtualenv have a similar &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; inspired
layout including a &lt;tt class="docutils literal"&gt;bin&lt;/tt&gt; directory for the executables so we can use the setup
scripts from the virtualenv to put the sandbox executable directory in our
environment if we make our sandbox into a virtualenv directory as well.&lt;/p&gt;
&lt;p&gt;Fortunately, this is pretty easy. To create a sandbox folder with a specific
name, we use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--sandbox&lt;/span&gt;&lt;/tt&gt; flag. For example, to create a sandbox called
&lt;tt class="docutils literal"&gt;projectenv&lt;/tt&gt; we run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal sandbox init --sandbox=projectenv
&lt;/pre&gt;
&lt;p&gt;And then to overlay a Python virtualenv setup over this directory we run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ virtualenv projectenv
&lt;/pre&gt;
&lt;p&gt;Simple as that.&lt;/p&gt;
&lt;p&gt;Now, when we install hlint:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal install hlint
&lt;/pre&gt;
&lt;p&gt;And initialise our Python virtualenv:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ source projectenv/bin/activate
&lt;/pre&gt;
&lt;p&gt;Then we get our sandbox hlint on the path:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ which hlint
/home/user/code/project/projectenv/bin/hlint
&lt;/pre&gt;
&lt;p&gt;Done!&lt;/p&gt;
</summary><category term="haskell"></category></entry><entry><title>Generating a Broken UTF-8 File</title><link href="http://michaeljones.github.io/blog/posts/2013/11/01/generating-a-broken-utf-8-file/" rel="alternate"></link><updated>2013-11-01T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-11-01:blog/posts/2013/11/01/generating-a-broken-utf-8-file/</id><summary type="html">&lt;div class="section" id="backstory"&gt;
&lt;h2&gt;Backstory&lt;/h2&gt;
&lt;p&gt;Occasionally when looking after &lt;a class="reference external" href="https://github.com/michaeljones/breathe"&gt;Breathe&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/michaeljones/sphinx-to-github"&gt;Sphinx-to-Github&lt;/a&gt; I get bug reports
associated with unicode handling errors. Awkwardly, I do not have a huge amount of
experience with unicode.&lt;/p&gt;
&lt;p&gt;Still, I'm keen that these plugins handle unicode properly or at least provide
reasonable error messages when things go wrong. However it is not completely
obvious how to generate invalid files to test these issues.&lt;/p&gt;
&lt;p&gt;After a recent bug, I dug a little deeper into how to do this. There might be
much better ways but this is the path I took.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="required-information"&gt;
&lt;h2&gt;Required Information&lt;/h2&gt;
&lt;p&gt;A little googling revealed this &lt;a class="reference external" href="http://stackoverflow.com/questions/13241244/example-of-a-broken-unicode-text"&gt;stackoverflow question&lt;/a&gt; which points to the
Wikipedia &lt;a class="reference external" href="http://en.wikipedia.org/wiki/UTF-8"&gt;UTF-8&lt;/a&gt; page which has a section on &lt;a class="reference external" href="http://en.wikipedia.org/wiki/UTF-8#Invalid%5Fbyte%5Fsequences"&gt;invalid codes&lt;/a&gt; for a UTF-8 page.&lt;/p&gt;
&lt;p&gt;The page also has a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/UTF-8#Codepage%5Flayout"&gt;table&lt;/a&gt; of UTF-8 values and includes red boxes for the invalid
charater codes. I don't fully follow the table but underneath it points out that
the first two invalid codes are: &lt;tt class="docutils literal"&gt;C0&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;C1&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preparing-the-file"&gt;
&lt;h2&gt;Preparing the File&lt;/h2&gt;
&lt;p&gt;So armed with this information what can we do? Let's prepare a basic file to
work with. I'm interest in having a test case for &lt;a class="reference external" href="https://github.com/michaeljones/breathe"&gt;Breathe&lt;/a&gt; so I want some source
code with some invalid characters:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/*! \brief This is a test . */
class Test {}
&lt;/pre&gt;
&lt;p&gt;This is a very basic C++ class and a doxygen comment. We leave a placeholder
&lt;tt class="docutils literal"&gt;.&lt;/tt&gt; in there for us to replace with invalid data. This should be saved as
UTF-8 from your favourite text editor. You can do this from &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:set fileencoding=utf8
:w unicodefile.cpp
&lt;/pre&gt;
&lt;p&gt;Just to check that this reads fine into Python, we can run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python -c &amp;quot;import codecs; codecs.open('unicodefile.cpp', 'r', 'utf-8').readlines()
&lt;/pre&gt;
&lt;p&gt;And it executes withouth issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="breaking-the-file"&gt;
&lt;h2&gt;Breaking the file&lt;/h2&gt;
&lt;p&gt;Now you want to open this file in a hex editor. After a little googling, I've
installed &lt;a class="reference external" href="http://www.kde.org/applications/utilities/okteta"&gt;Okteta&lt;/a&gt; on my Ubuntu machine as it is easily available. Opening the
file, you get a view like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
2F 2A 21 20  5C 62 72 69  65 66 20 54  68 69 73 20 | /*! \brief This
69 73 20 61  20 74 65 73  74 20 2E 20  2A 2F 0A 63 | is a test . */.c
6C 61 73 73  20 54 65 73  74 20 7B 7D  0A          | lass Test {}.
&lt;/pre&gt;
&lt;p&gt;This is the hexadecimal layout of the bytes in our file on the left and the
ASCII interpretation of these values on the right. The ASCII representation
actually shows new lines as &lt;tt class="docutils literal"&gt;.&lt;/tt&gt; characters which makes it harder to see quite
what is going on but the placeholder &lt;tt class="docutils literal"&gt;.&lt;/tt&gt; we added is relatively clearly
visible as the one immediately after the word &lt;tt class="docutils literal"&gt;test&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If we highlight that placeholder &lt;tt class="docutils literal"&gt;.&lt;/tt&gt;, then the program highlights the &lt;tt class="docutils literal"&gt;2E&lt;/tt&gt;
entry in the third block of the second line of the left hand hexadecimal
representation. If we want to add our invalid data we can select the &lt;tt class="docutils literal"&gt;2E&lt;/tt&gt; and
enter one of the invalid values from the Wikipedia article, eg. &lt;tt class="docutils literal"&gt;C0&lt;/tt&gt;. Do this
and save it as &lt;tt class="docutils literal"&gt;brokenfile.cpp&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now if we run our test on this file, we get:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python -c &amp;quot;import codecs; codecs.open('brokenfile.cpp', 'r', 'utf-8').readlines()&amp;quot;
Traceback (most recent call last):
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;/home/mike/root/projects/profile/source/python-2.7.4/lib/python2.7/codecs.py&amp;quot;, line 679, in readlines
    return self.reader.readlines(sizehint)
  File &amp;quot;/home/mike/root/projects/profile/source/python-2.7.4/lib/python2.7/codecs.py&amp;quot;, line 588, in readlines
    data = self.read()
  File &amp;quot;/home/mike/root/projects/profile/source/python-2.7.4/lib/python2.7/codecs.py&amp;quot;, line 477, in read
    newchars, decodedbytes = self.decode(data, self.errors)
UnicodeDecodeError: 'utf8' codec can't decode byte 0xc0 in position 26: invalid start byte
&lt;/pre&gt;
&lt;p&gt;Yay, it's broken and will act as a good test case for checking that our code can
handle invalid input and provide useful error messages.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="unicode"></category></entry><entry><title>Journal - Day 19</title><link href="http://michaeljones.github.io/blog/posts/2013/10/31/journal-day-19/" rel="alternate"></link><updated>2013-10-31T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-31:blog/posts/2013/10/31/journal-day-19/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Review work on &lt;a class="reference external" href="http://github.com/michaeljones/breathe"&gt;Breathe&lt;/a&gt; from yesterday, merge results into master and do a new
PyPI release.&lt;/li&gt;
&lt;li&gt;Read the first two chapters of Real World Haskell.&lt;/li&gt;
&lt;li&gt;Do some test exploratory coding with the IORef type in Haskell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Released &lt;a class="reference external" href="http://github.com/michaeljones/breathe"&gt;Breathe&lt;/a&gt; 1.1.0 on &lt;a class="reference external" href="https://pypi.python.org/pypi/breathe"&gt;PyPI&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Read the introduction and first chapter of &lt;a class="reference external" href="http://book.realworldhaskell.org/read/"&gt;Real World Haskell&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Written a basic example of working with the &lt;a class="reference external" href="http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-IORef.html"&gt;IORef&lt;/a&gt; type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.IORef&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;

    &lt;span class="c1"&gt;-- Create a new IORef for handling a mutable number&lt;/span&gt;
    &lt;span class="n"&gt;intioref&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newIORef&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="c1"&gt;-- Read the number&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readIORef&lt;/span&gt; &lt;span class="n"&gt;intioref&lt;/span&gt;

    &lt;span class="c1"&gt;-- Print the number&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

    &lt;span class="c1"&gt;-- Increment the number in place&lt;/span&gt;
    &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeIORef&lt;/span&gt; &lt;span class="n"&gt;intioref&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

    &lt;span class="c1"&gt;-- Prin the number&lt;/span&gt;
    &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readIORef&lt;/span&gt; &lt;span class="n"&gt;intioref&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;

    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I need to dig some more to attempt to understand what is actually going on and
the best way to think about it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Wrote a simple &lt;a class="reference external" href="https://github.com/Everzen/RigControls/pull/4"&gt;undo stack&lt;/a&gt; for the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 18</title><link href="http://michaeljones.github.io/blog/posts/2013/10/30/journal-day-18/" rel="alternate"></link><updated>2013-10-30T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-30:blog/posts/2013/10/30/journal-day-18/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Properly explore the idea of directives for &lt;a class="reference external" href="http://github.com/michaeljones/breathe"&gt;Breathe&lt;/a&gt; which automatically
handle the doxygen generation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Rewrote the doxygenindex directive in Breathe to add a custom &lt;tt class="docutils literal"&gt;DoxygenNode&lt;/tt&gt;
to the docutils document which is then picked up and processed by a custom
Transform operation.&lt;/p&gt;
&lt;p&gt;It was then possible to add an autodoxygenindex directive which output a
&lt;tt class="docutils literal"&gt;DoxygenAutoNode&lt;/tt&gt; which could be processed, doxygen xml could be generated
to a temporary folder and then the node would be replaced with an
appropriately configured &lt;tt class="docutils literal"&gt;DoxygenNode&lt;/tt&gt; to fit with the standard processing.&lt;/p&gt;
&lt;p&gt;The transforms are quite easy to work with and a really rather excellent part
of the docutils infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>A Beginner's Encounter with a Haskell Library</title><link href="http://michaeljones.github.io/blog/posts/2013/10/29/a-beginners-encounter-with-a-haskell-library/" rel="alternate"></link><updated>2013-10-29T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-29:blog/posts/2013/10/29/a-beginners-encounter-with-a-haskell-library/</id><summary type="html">&lt;p&gt;I am new to Haskell and as a programming exercise I am attempting to rewrite my
&lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; utility program which I use to switch between common directories in my
shell.&lt;/p&gt;
&lt;p&gt;It is currently written in Python and uses the curses library to provide a
terminal user interface for selecting a directory from a list which is then
written to a file. The program works with an alias which tends changes directory
into the contents of that file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
alias c='$HOME/bin/jump-wrapper; cd `cat /tmp/jump.tmp`'
&lt;/pre&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jump-wrapper&lt;/span&gt;&lt;/tt&gt; sources the appropriate Python virtualenv and then runs
the actual Python script.&lt;/p&gt;
&lt;p&gt;The current Python version is a &amp;quot;good enough&amp;quot; implementation with no real error
detection or fault tolerance. It doesn't really have to be tolerant as I control
the input and the simplicity of the script makes it easy to debug.&lt;/p&gt;
&lt;p&gt;It feels like a good test project for Haskell as it involves a simple UI and
reading data from a &lt;a class="reference external" href="http://yaml.org"&gt;yaml&lt;/a&gt; file which is used for configuration.&lt;/p&gt;
&lt;div class="section" id="the-interface"&gt;
&lt;h2&gt;The Interface&lt;/h2&gt;
&lt;p&gt;For the interface, after some googling, I've opted for the &lt;a class="reference external" href="http://hackage.haskell.org/package/vty"&gt;vty&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="http://hackage.haskell.org/package/vty-ui"&gt;vty-ui&lt;/a&gt;
modules, mostly the latter, though that is built on the former.&lt;/p&gt;
&lt;p&gt;The vty-ui library has excellent &lt;a class="reference external" href="http://jtdaugherty.github.io/vty-ui/manuals/vty-ui-users-manual-1.6.pdf"&gt;documentation&lt;/a&gt; and so after working through
their example and reading a little more I have a basic program which present two
options in a list in a terminal UI and allows me to exit from it all with &lt;tt class="docutils literal"&gt;q&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.Widgets.All&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.Attributes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;def_attr&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.LLInput&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;KASCII&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;System.Exit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;exitSuccess&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Text&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;

    &lt;span class="c1"&gt;-- Create new list&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newList&lt;/span&gt; &lt;span class="n"&gt;def_attr&lt;/span&gt;

    &lt;span class="c1"&gt;-- Populate options&lt;/span&gt;
    &lt;span class="n"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;centered&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

    &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newFocusGroup&lt;/span&gt;
    &lt;span class="n"&gt;addToFocusGroup&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newCollection&lt;/span&gt;
    &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;addToCollection&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;

    &lt;span class="c1"&gt;-- Focus group event handlers&lt;/span&gt;
    &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;onKeyPressed&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;

    &lt;span class="n"&gt;runUi&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;defaultContext&lt;/span&gt;

&lt;span class="c1"&gt;-- Callback for exiting via &amp;#39;q&amp;#39;&lt;/span&gt;
&lt;span class="nf"&gt;exit&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;KASCII&lt;/span&gt; &lt;span class="n"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;shutdownUi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;exitSuccess&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;         &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most of this is not fabulously interesting but is included for completeness. The
relevant section here is really this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- Create new list&lt;/span&gt;
&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newList&lt;/span&gt; &lt;span class="n"&gt;def_attr&lt;/span&gt;

&lt;span class="c1"&gt;-- Populate options&lt;/span&gt;
&lt;span class="nf"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is where we create the list and populate it with the options. This is the
part that we're interested in for this article. The plan is to replace it with
code which will read a yaml file and dynamically populate the list based on the
contents of the file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-file"&gt;
&lt;h2&gt;The File&lt;/h2&gt;
&lt;p&gt;The yaml config file looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- - [sph, /home/mike/root/projects/sph]
- - [alembic-fs, /home/mike/root/projects/alembic-fs]
- - [profile, /home/mike/root/projects/profile]
  - [blog, /home/mike/root/projects/profile/blog]
- - [lastcontact, /home/mike/root/projects/lastcontact]
- - [rigcontrols, /home/mike/root/projects/rigcontrols]
- - [blog, /home/mike/root/projects/profile/source]
- - [jump-hs, /home/mike/root/projects/jump-hs]
- - [breathe, /home/mike/root/projects/sphinx/breathe]
- - [dojo, /home/mike/root/projects/dojo]
- - [taglist, /home/mike/root/projects/taglist]
- - [git.pde, /home/mike/root/projects/presentations/git]
&lt;/pre&gt;
&lt;p&gt;It is a list of list of lists in which:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Top Level&lt;/strong&gt; is a list of the projects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Second Level&lt;/strong&gt; is a list of sub targets within those projects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Third Level&lt;/strong&gt; is a pair of &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;directory&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; is
displayed in the user interface and the directory is what should eventually be
written to the output file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-start"&gt;
&lt;h2&gt;A Start&lt;/h2&gt;
&lt;p&gt;Let's google &amp;quot;haskell yaml&amp;quot;. Sweet, a &lt;a class="reference external" href="http://stackoverflow.com/questions/13059806/reading-yaml-in-haskell"&gt;Reading Yaml in Haskell&lt;/a&gt; question on
stackoverflow comes up first, though nothing else on the first two pages looks
like anything more than package references without further documentation. The
top answer to the question recommends the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; and &lt;a class="reference external" href="http://hackage.haskell.org/package/HsSyck"&gt;HsSyck&lt;/a&gt; modules with a slight
preference towards the former.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reading-the-yaml-data"&gt;
&lt;h2&gt;Reading the Yaml Data&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml-0.8.5.1/docs/Data-Yaml.html"&gt;yaml module docs&lt;/a&gt; are pretty thin for a beginner which is why I'm writing
this piece. At this stage in my Haskell journey I can't see any obvious places
to start.&lt;/p&gt;
&lt;p&gt;From an imperative programming perspective, I would generally expect to provide
a file path, a stream or a string to some kind of function and get back a data
structure which containers all the information from the yaml file. This is might
not be suitable for incredibly large files but then yaml tends to be used for
the configuration file end of the spectrum rather than large data sets.&lt;/p&gt;
&lt;p&gt;Checking through the functions shows &lt;tt class="docutils literal"&gt;decodeFile&lt;/tt&gt; to take a file path and
return some kind of data in an IO action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;decodeFile&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;FromJSON&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;FilePath&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, reasonable starting point. Let's add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Yaml&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To the import section and add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;results&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decodeFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;jumprc&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To the top of the &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; do-block just to try it out.&lt;/p&gt;
&lt;p&gt;In hindsight, I can see that those people reading along, and wondering exactly
what I thought the compiler was going to do with that &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; in the type
signature, were correct to be confused. However, as my naive self still learning
the language I was armed with nothing more than this error message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src/Main.hs:16:16:
    No instance for (Y.FromJSON a0)
      arising from a use of `Y.decodeFile'
    In a stmt of a 'do' block: results &amp;lt;- Y.decodeFile &amp;quot;jumprc&amp;quot;
    In the expression:
      do { results &amp;lt;- Y.decodeFile &amp;quot;jumprc&amp;quot;;
&lt;/pre&gt;
&lt;p&gt;Which frankly isn't that useful to me even now that I know the answer. I think
it is basically trying to say &amp;quot;I'm trying to compile this and I'm left holding
this &lt;tt class="docutils literal"&gt;Y.FromJSON a0&lt;/tt&gt; thing and I've no idea what to do with it.&amp;quot; The &lt;tt class="docutils literal"&gt;a0&lt;/tt&gt; is
perhaps some kind of clue that it doesn't have enough information to figure out
all the types as there certainly isn't an &lt;tt class="docutils literal"&gt;a0&lt;/tt&gt; type declared in my program.&lt;/p&gt;
&lt;p&gt;Ok, so that type signature above? That is going to take &lt;tt class="docutils literal"&gt;FilePath&lt;/tt&gt; and return
something with an specified type &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; which is an instance of the typeclass
&lt;tt class="docutils literal"&gt;FromJSON&lt;/tt&gt;.  I'm still pretty clueless but yaml module docs have a &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt;
data type which is instance of the &lt;tt class="docutils literal"&gt;FromJSON&lt;/tt&gt; typeclass so we try that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;results&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decodeFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;jumprc&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works. Sweet. What can we do with it? I've no idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="digging-into-the-yaml-data"&gt;
&lt;h2&gt;Digging into the Yaml Data&lt;/h2&gt;
&lt;p&gt;I've never drilled into a Haskell data structure before. No even really sure
what it looks like. Let's simply the input data a bit and print it. New input
data in the yaml file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- - [sph, /home/mike/root/projects/sph]
- - [profile, /home/mike/root/projects/profile]
  - [blog, /home/mike/root/projects/profile/blog]
&lt;/pre&gt;
&lt;p&gt;Print statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Just (Array (fromList [Array (fromList [Array (fromList [String &amp;quot;sph&amp;quot;,String
&amp;quot;/home/mike/root/projects/sph&amp;quot;])]),Array (fromList [Array (fromList [String
&amp;quot;profile&amp;quot;,String &amp;quot;/home/mike/root/projects/profile&amp;quot;]),Array (fromList [String
&amp;quot;blog&amp;quot;,String &amp;quot;/home/mike/root/projects/profile/blog&amp;quot;])])]))
&lt;/pre&gt;
&lt;p&gt;Not exactly readable but it gives us a start. First up it is wrapped in a
&lt;tt class="docutils literal"&gt;Maybe&lt;/tt&gt; which we should be expecting as we asked for it as &lt;tt class="docutils literal"&gt;IO ( Maybe
Y.Value )&lt;/tt&gt; and then unwrapped the IO action with the &lt;tt class="docutils literal"&gt;&amp;lt;-&lt;/tt&gt; in the do-block.
Inspecting the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml-0.8.5.1/docs/Data-Yaml.html#t:Value"&gt;docs&lt;/a&gt; we can see that the &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt; data type as several
different constructor types include &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; which as a single piece of data
which is a &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; of more yaml &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt; data. We can see from the Vector
docs that it is an instance of the &lt;tt class="docutils literal"&gt;Functor&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Foldable&lt;/tt&gt; typeclasses
along with many others which means we can do various map and fold operations
over it.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;fromList&lt;/tt&gt; is &lt;a class="reference external" href="http://hackage.haskell.org/package/vector-0.10.9.1/docs/Data-Vector.html#v:fromList"&gt;documented&lt;/a&gt; as a conversion function between a list and a
&lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;fromList&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I've yet to figure out how or why &lt;tt class="docutils literal"&gt;show&lt;/tt&gt;, which is what &lt;tt class="docutils literal"&gt;print&lt;/tt&gt; uses,
would choose to represent a &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; as &lt;tt class="docutils literal"&gt;fromList &lt;span class="pre"&gt;[...]&lt;/span&gt;&lt;/tt&gt; but it isn't
unreasonable.&lt;/p&gt;
&lt;p&gt;Ok, so baby steps. We can remove the &lt;tt class="docutils literal"&gt;Maybe&lt;/tt&gt; wrapper by writing a function and
pattern matching against the contents. So we change our code to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;results&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decodeFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;jumprc&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;        &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we get everything inside the &lt;tt class="docutils literal"&gt;Just&lt;/tt&gt; as expected:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Array (fromList [Array (fromList [Array (fromList [String &amp;quot;sph&amp;quot;,String
&amp;quot;/home/mike/root/projects/sph&amp;quot;])]),Array (fromList [Array (fromList [String
&amp;quot;profile&amp;quot;,String &amp;quot;/home/mike/root/projects/profile&amp;quot;]),Array (fromList [String
&amp;quot;blog&amp;quot;,String &amp;quot;/home/mike/root/projects/profile/blog&amp;quot;])])])
&lt;/pre&gt;
&lt;p&gt;Makes sense. Well what if we aim to print each entry in the top array on a new
line. We can change to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;        &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then implement &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt;. We could try something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterall, we read above that the &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; is a functor is we can map over it.
However, on compiling it complains about the return type of the second
definition of &lt;tt class="docutils literal"&gt;process&lt;/tt&gt;, but that's weird as we're sure that's correct. We're
just using &lt;tt class="docutils literal"&gt;return&lt;/tt&gt; to create a minimal &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt; action with no interesting
content. So really, we're screwing up the signature of the first definition and
then the compiler is telling us that the second definition doesn't match the
first. But we want the first definition to match the second and we know what
that is so we add a type signature to tell the compiler what is meant to be
going on:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code-block:: haskell
&lt;/pre&gt;
&lt;blockquote&gt;
process :: Maybe a -&amp;gt; IO ()
process (Just v) = processTop v
process _        = return ()&lt;/blockquote&gt;
&lt;p&gt;Excellent, now it is telling us something we want to know:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src/Main.hs:16:20:
    Couldn't match type `IO ()' with `()'
    Expected type: IO ()
      Actual type: IO (IO ())
    In the return type of a call of `processTop'
    In the expression: processTop v
&lt;/pre&gt;
&lt;p&gt;I am not entirely sure what this means but I am going to avoid finding out for
the moment as that is a lot of &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt;'s in a part of the code which could well
be pure. We're much better return a string array from &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt; and
printing it in our &lt;tt class="docutils literal"&gt;process&lt;/tt&gt; function than pushing our non-pure &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt; code
further and further into the call stack.&lt;/p&gt;
&lt;p&gt;So we change our &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt; to a dummy implementation which returns a string
array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;line one&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;line two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And change &lt;tt class="docutils literal"&gt;process&lt;/tt&gt; to print out the result by mapping &lt;tt class="docutils literal"&gt;putStrLn&lt;/tt&gt; over the
result of &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt;. We use &lt;tt class="docutils literal"&gt;mapM_&lt;/tt&gt; as it applies a function of type &lt;tt class="docutils literal"&gt;a
&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; m b&lt;/tt&gt; over a &lt;tt class="docutils literal"&gt;[a]&lt;/tt&gt; and returns a simple empty &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt; action which will
print out all the lines we want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;        &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great, so now we have &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt; which is nice and pure and now it just
needs to actually work, y'know, rather than ignoring its inputs.&lt;/p&gt;
&lt;p&gt;A reasonable first step would be to pattern match against the &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt;
constructor of the &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt; date type as we're currently only passing a
&lt;tt class="docutils literal"&gt;Value&lt;/tt&gt;. That will give as the actual array to play with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we want to convert the data, &lt;tt class="docutils literal"&gt;a&lt;/tt&gt;, in that &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; to a list and map
&lt;tt class="docutils literal"&gt;show&lt;/tt&gt; over it to convert each entry to a representative string. We saw
earlier that the data in the &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; is a &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; so we grab the
appropriate module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Vector&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And use the &lt;tt class="docutils literal"&gt;toList&lt;/tt&gt; method to convert it. Then we are free to &lt;tt class="docutils literal"&gt;map&lt;/tt&gt;
&lt;tt class="docutils literal"&gt;show&lt;/tt&gt; over the result so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we run this, we get:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Array (fromList [Array (fromList [String &amp;quot;sph&amp;quot;,String &amp;quot;/home/mike/roo...
Array (fromList [Array (fromList [String &amp;quot;profile&amp;quot;,String &amp;quot;/home/mike...
&lt;/pre&gt;
&lt;p&gt;ie. one line per item in our top list. Progress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="digging-further"&gt;
&lt;h2&gt;Digging Further&lt;/h2&gt;
&lt;p&gt;We're getting a bit of a hang of this, so now we should start figuring out what
we actually want to get back from this function. What would make our lives
easier for setting up this list?&lt;/p&gt;
&lt;p&gt;It would seem reasonable to aim for a list of pairs where the pairs of the
&lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;directory&lt;/tt&gt; parts of the Yaml file. We would then be able to
iterate over this list and add pairs into our interface.&lt;/p&gt;
&lt;p&gt;So we want to reduce our hierachy down to a single list of pairs. It seems
reasonable that we could use a &lt;tt class="docutils literal"&gt;fold&lt;/tt&gt; to achieve this with the accumulator
being a new list which we add the pairs to.&lt;/p&gt;
&lt;p&gt;To make things a little more readable we add some nicer types for the components
of our pairs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Name&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can then change &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt; to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;processGroup&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which extracts the &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; value from the array as before and folds over
it using the &lt;tt class="docutils literal"&gt;processGroup&lt;/tt&gt; function with an empty list as an accumulator.
Ultimately it aims to return a list of &lt;tt class="docutils literal"&gt;Name&lt;/tt&gt;-&lt;tt class="docutils literal"&gt;Directory&lt;/tt&gt; pairs as stated in
the new type signature.&lt;/p&gt;
&lt;p&gt;We use &lt;tt class="docutils literal"&gt;V.foldl&lt;/tt&gt; rather than &lt;tt class="docutils literal"&gt;foldl&lt;/tt&gt; as this needs to operate on a &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt;
rather than a list. I am not sure what the &lt;tt class="docutils literal"&gt;fmap&lt;/tt&gt; equivalent of &lt;tt class="docutils literal"&gt;foldl&lt;/tt&gt; is,
ie. a &lt;tt class="docutils literal"&gt;foldl&lt;/tt&gt; function that can be applied to any instance of the &lt;tt class="docutils literal"&gt;Foldable&lt;/tt&gt;
typeclass.&lt;/p&gt;
&lt;p&gt;So, &lt;tt class="docutils literal"&gt;processGroup&lt;/tt&gt;? That kind of sits in the middle and doesn't do much more
than repeat the &lt;tt class="docutils literal"&gt;foldl&lt;/tt&gt; on bottom level of our hierarchy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processGroup&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processGroup&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;processPair&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We pass the &lt;tt class="docutils literal"&gt;xs&lt;/tt&gt; list from the argument through to the fold so that we
continue to add to the same list. Otherwise we extract the &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; data from
the &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; as standard and all is good.&lt;/p&gt;
&lt;p&gt;Then &lt;tt class="docutils literal"&gt;processPair&lt;/tt&gt; does something a little more interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processPair&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processPair&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We extract the &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; data, then use &lt;tt class="docutils literal"&gt;V.toList&lt;/tt&gt; to convert the &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt;
to a standard list, and use a &lt;tt class="docutils literal"&gt;case&lt;/tt&gt; statement to pattern match against the
contents accounting for the situation where it is a two element list each being
a &lt;tt class="docutils literal"&gt;Y.String&lt;/tt&gt; value. In that case, we unpack the values into tuple which is
prepended to our results list.&lt;/p&gt;
&lt;p&gt;We're now returning a &lt;tt class="docutils literal"&gt;[(Name,Directory)]&lt;/tt&gt; which was can't map &lt;tt class="docutils literal"&gt;putStrLn&lt;/tt&gt;
over in our first &lt;tt class="docutils literal"&gt;process&lt;/tt&gt; function as &lt;tt class="docutils literal"&gt;putStrLn&lt;/tt&gt; expects a &lt;tt class="docutils literal"&gt;String&lt;/tt&gt;. So
we can change that to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;        &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add run it and we get:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(&amp;quot;blog&amp;quot;,&amp;quot;/home/mike/root/projects/profile/blog&amp;quot;)
(&amp;quot;profile&amp;quot;,&amp;quot;/home/mike/root/projects/profile&amp;quot;)
(&amp;quot;sph&amp;quot;,&amp;quot;/home/mike/root/projects/sph&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;Done! A list of tuples, each with the data we're interested in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-to-the-interface"&gt;
&lt;h2&gt;Adding to the Interface&lt;/h2&gt;
&lt;p&gt;So now we're in a good place to add these entries to our UI list. We want to
replace the following hardcoded section with something which will add the
results from processing the yaml data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First we change &lt;tt class="docutils literal"&gt;process&lt;/tt&gt; so that it no longer attempts to print out the
results and just returns them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means it does little more than extract the data from the &lt;tt class="docutils literal"&gt;Maybe&lt;/tt&gt; and pass
it to &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt; to be processed.&lt;/p&gt;
&lt;p&gt;We then create a binding for our processed list of pairs in our &lt;tt class="docutils literal"&gt;main&lt;/tt&gt;
do-block for easy reading:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we want to add each pair in this list to our UI list. We know that the
line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Produces some kind of &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt;, probably empty as we're not attempting to use the
result. So if we're going to map over our pairs list, which seems reasonable to
handle each result, then we're going to want to &lt;tt class="docutils literal"&gt;mapM_&lt;/tt&gt; as we did before so
that we collect these &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt; actions together properly and then ignore their
return.&lt;/p&gt;
&lt;p&gt;So we can:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;span class="nf"&gt;mapM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addPairsToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;addPairsToList&lt;/tt&gt; is curried with the UI list widget to make it available
during the mapping. We implement &lt;tt class="docutils literal"&gt;addPairsToList&lt;/tt&gt; as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;addPairsToList&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Widget&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt; &lt;span class="kt"&gt;FormattedText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;addPairsToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which is a fairly direct resuse of the &lt;tt class="docutils literal"&gt;addToList&lt;/tt&gt; usage we had before which
came from the vty-ui documentation. We pattern match the input to get the
&lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;directory&lt;/tt&gt; from the pair and use them in their appropriate
locations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finished"&gt;
&lt;h2&gt;Finished&lt;/h2&gt;
&lt;p&gt;Well, not really. Further works needs to be done to write the list choice into a
file when the user selects it and to allow vim style &lt;tt class="docutils literal"&gt;j/k&lt;/tt&gt; navigation of the
list for my old habits. And it would be polite to add some error checking as
this is pretty much devoid of it. Still, we've done the yaml bit which is what
we came here to do. The final code as we have written it so far looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.Widgets.All&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.Attributes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;def_attr&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.LLInput&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;KASCII&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;System.Exit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;exitSuccess&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Text&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Yaml&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Vector&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Name&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;

&lt;span class="nf"&gt;processPair&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processPair&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;

&lt;span class="nf"&gt;processGroup&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processGroup&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;processPair&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;processGroup&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;

&lt;span class="nf"&gt;addPairsToList&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Widget&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt; &lt;span class="kt"&gt;FormattedText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;addPairsToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;

    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decodeFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;jumprc&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;-- Create new list&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newList&lt;/span&gt; &lt;span class="n"&gt;def_attr&lt;/span&gt;

    &lt;span class="c1"&gt;-- -- Populate options&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
    &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addPairsToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt;

    &lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;centered&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

    &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newFocusGroup&lt;/span&gt;
    &lt;span class="n"&gt;addToFocusGroup&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newCollection&lt;/span&gt;
    &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;addToCollection&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;

    &lt;span class="c1"&gt;-- Focus group event handlers&lt;/span&gt;
    &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;onKeyPressed&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;

    &lt;span class="n"&gt;runUi&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;defaultContext&lt;/span&gt;

&lt;span class="c1"&gt;-- Callback for exiting via &amp;#39;q&amp;#39;&lt;/span&gt;
&lt;span class="nf"&gt;exit&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;KASCII&lt;/span&gt; &lt;span class="n"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;shutdownUi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;exitSuccess&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;         &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope this meandering ramble of a post has been useful. It has cleared up some
issues for me and I hope it will help some people in the early stages of their
Haskell journey to see something broken down like this.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="haskell"></category></entry><entry><title>Journal - Day 17</title><link href="http://michaeljones.github.io/blog/posts/2013/10/29/journal-day-17/" rel="alternate"></link><updated>2013-10-29T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-29:blog/posts/2013/10/29/journal-day-17/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue with Yaml library example and article.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished Yaml library example and article though rapidly learnt how foolishly
simple it was after further examination of the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; module. The &lt;tt class="docutils literal"&gt;FromJSON&lt;/tt&gt;
functionality exposed by it is really rather fantastic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Listened to &lt;a class="reference external" href="http://www.haskellcast.com/episode/003-simon-peyton-jones-on-ghc/"&gt;Haskell Cast 3&lt;/a&gt; with Simon Peyton Jones. Parts are over my head,
but most is interesting and well layed out for the average programmer
listener.&lt;/p&gt;
&lt;p&gt;Includes some fascinating information about improving the national curriculum
in the UK to include computer science education from a young age. My school
experience included &lt;abbr&gt;ICT &amp;lt;Information Communcations Techology&amp;gt;&lt;/abbr&gt; which
really just meant basic use of Word, Excel and Access. Not completely basic
but very much end user level rather than understanding the machine and how to
program it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 16</title><link href="http://michaeljones.github.io/blog/posts/2013/10/28/journal-day-16/" rel="alternate"></link><updated>2013-10-28T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-28:blog/posts/2013/10/28/journal-day-16/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Begin documenting and working through the issues I am encountering with using
the Haskell yaml library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An still-in-progress article chronicling my flounding attempts as a beginner
Haskell programmer. I am hopeful that it will be useful to others are my stage
of development. If not, it is certainly useful to me.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>End of Week 3</title><link href="http://michaeljones.github.io/blog/posts/2013/10/27/end-of-week-3/" rel="alternate"></link><updated>2013-10-27T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-27:blog/posts/2013/10/27/end-of-week-3/</id><summary type="html">&lt;div class="section" id="weekend"&gt;
&lt;h2&gt;Weekend&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Watched &lt;a class="reference external" href="http://yow.eventer.com/events/1004/talks/1054"&gt;Escape From the Ivory Tower&lt;/a&gt; presentation by Simon Peyton Jones. It
is an approachable easy-listening style talk which gives the history of the
development of Haskell and the goals of the language. No prior knowledge of
the language required though, as always, it helps.&lt;/li&gt;
&lt;li&gt;Wrote a &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/27/setting-up-a-haskell-project/"&gt;blog post&lt;/a&gt; about stumbling through a Haskell Project set up. The
content is perhaps better covered on the &lt;a class="reference external" href="http://www.haskell.org/haskellwiki/How_to_write_a_Haskell_program"&gt;Haskell Wiki&lt;/a&gt; though I found that too
late.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-in-review"&gt;
&lt;h2&gt;Week in Review&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Definitely making progress with Haskell but still nowhere near comfortable
with it. Clueless on how to begin most tasks but at least I can slowly battle
my way towards something. Work needs to continue both via exercising the
knowledge I have and also by moving on to other tutorials. &lt;a class="reference external" href="http://book.realworldhaskell.org/"&gt;Real World
Haskell&lt;/a&gt;
&amp;amp; &lt;a class="reference external" href="https://www.fpcomplete.com/school/haskell-fast-hard"&gt;Learn Haskell Hard &amp;amp; Fast&lt;/a&gt; might be reasonable guides for this stage,
especially the former&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Improved the performance of &lt;a class="reference external" href="https://github.com/EverZen/RigControls"&gt;RigControls&lt;/a&gt; and began to toy with the idea of
tests but, as with any unfamiliar codebase which isn't designed for testing,
there isn't an easy starting place. Might need more effort than first hoped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Fixed an issue with &lt;a class="reference external" href="https://github.com/michaeljones/sphinx-to-github"&gt;Sphinx-to-Github&lt;/a&gt; regarding unicode handling. Gave me some
motivation to read up on unicode a little more and the best practices
surrounding it and its use in Python. Lessons learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Data is &lt;em&gt;decoded&lt;/em&gt; from a particular character-set into unicode point data and
&lt;em&gt;encoded&lt;/em&gt; the other way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You have to write files with a particular encoding. You don't write unicode
point data to a file, or rather you do, but in one of any number of
character-sets. There isn't a default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You can't find out the encoding of a file unless it has a Byte Order Mark
(BOM) which tells you. In which case, you need to worry about removing that
BOM and not interpreting it as text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ideally you should know the encoding of the files you are trying to read, if
you don't you're basicall left trying to guess. UTF-8 is a good first guess.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You should try to decode as soon as possible so that you're handling
proper unicode strings in your code rather than ASCII with potentially
invalid bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Python 2.x attempts to read all files as ASCII by default which is the
source of some head aches with Python 2.x and unicode.&lt;/p&gt;
&lt;p&gt;You can convert either by decoding the string that you have read or by
reading via &lt;tt class="docutils literal"&gt;codecs.open&lt;/tt&gt; which provides an option for the encoding as an
argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Python 3.x defaults to reading files at UTF-8 by default and all standard
strings or unicode by default with the &lt;tt class="docutils literal"&gt;bytestring&lt;/tt&gt; type there to handle
encoded data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;UTF-8 is best for content which is going to be largely ASCII.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;UTF-16 is best for some languages or purposes where the majority of the
characters fits into 2 bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;UTF-32 is best for the rest. It is also the fastest to deal with as all
characters takes the same amount of memory so indexing into the data is
clean and obvious, however it takes up 4 times as much space as UTF-8 for
ASCII characters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Setting Up a Haskell Project</title><link href="http://michaeljones.github.io/blog/posts/2013/10/27/setting-up-a-haskell-project/" rel="alternate"></link><updated>2013-10-27T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-27:blog/posts/2013/10/27/setting-up-a-haskell-project/</id><summary type="html">&lt;p&gt;This is an attempt to share the my initial discoveries on how to set up a
Haskell project. My plan was to create a small project for an executable written
in Haskell and I didn't have the first idea where to start.&lt;/p&gt;
&lt;p&gt;I am new to the language and the ecosystem and this article wanders through my
discovery process. Skip straight to the &lt;a class="reference internal" href="#review"&gt;review&lt;/a&gt; for a summary.&lt;/p&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;This is well covered in the Haskell Wiki on &lt;a class="reference external" href="http://www.haskell.org/haskellwiki/How_to_write_a_Haskell_program"&gt;How to write a Haskell program&lt;/a&gt;. I
had not found that guide at the time of working through this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-on-ubuntu-13-04"&gt;
&lt;h2&gt;Working on Ubuntu 13.04&lt;/h2&gt;
&lt;p&gt;Following some best practices advice, I wanted to get the &lt;a class="reference external" href="http://www.haskell.org/platform/"&gt;Haskell Platform&lt;/a&gt; to
act as a starting point for development. However for reasons that I do not fully
understand, Ubuntu 13.04 does not have a version of the Haskell platform (it
seems to be related to the version of ghc they decided to ship with.)&lt;/p&gt;
&lt;p&gt;Follow &lt;a class="reference external" href="http://askubuntu.com/a/316465"&gt;these&lt;/a&gt; instructions will get you a working copy of the Haskell Platform
along with the appropriate version of ghc. It takes a while to compile though!
I've installed these into the following directories:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$TOOLS/apps/ghc/ghc-7.6.3
$TOOLS/apps/haskell-platform/haskell-platform-2013.2.0.0
&lt;/pre&gt;
&lt;p&gt;For some value of &lt;tt class="docutils literal"&gt;$TOOLS&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-libraries"&gt;
&lt;h2&gt;Getting Libraries&lt;/h2&gt;
&lt;p&gt;With that going and in my environment, I made a new project directory for my
&lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; program:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir $WORK/jump
&lt;/pre&gt;
&lt;p&gt;My project is going to need a terminal interface and some googling comes up with
&lt;a class="reference external" href="http://hackage.haskell.org/package/vty"&gt;vty&lt;/a&gt; which appears to be some kind of ncurses equivalent for Haskell. So I try:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal install vty
&lt;/pre&gt;
&lt;p&gt;Which tells me to run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal update
&lt;/pre&gt;
&lt;p&gt;Which tells me that there is a new cabal-install package available that I should
update to. I initially install this to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$TOOLS/apps/haskell-packages/cabal-1.18.0.2
&lt;/pre&gt;
&lt;p&gt;Using:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cabal install --prefix=$TOOLS/apps/haskell-packages/cabal-1.18.0.2 cabal-install
&lt;/pre&gt;
&lt;p&gt;As I really like subfoldering things but this soon looks like it'll be too
awkward to manage in my immature set up as each package has its own libraries
and executables which means a lot of paths to figure out unless they are all
grouped together.&lt;/p&gt;
&lt;p&gt;So I install it straight to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$TOOLS/apps/haskell-packages
&lt;/pre&gt;
&lt;p&gt;This seems to work though the central install location bothers me in the same
way that any centralised collection of dependencies would. Something is going to
conflict at some point. What I really want is some kind of equivalent to
Python's &lt;a class="reference external" href="http://www.virtualenv.org"&gt;virtualenv&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ahhh-sandboxes"&gt;
&lt;h2&gt;Ahhh Sandboxes&lt;/h2&gt;
&lt;p&gt;Some googling thankfully finds cabal sandboxes which are very much what I am
looking forward. &lt;a class="reference external" href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html"&gt;This page&lt;/a&gt; is particularly helpful.&lt;/p&gt;
&lt;p&gt;So I follow the instructions and run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd $WORK/jump
$ cabal sandbox init
&lt;/pre&gt;
&lt;p&gt;This seems promising. A &lt;tt class="docutils literal"&gt;cabal install vty&lt;/tt&gt; now installs into this local
sandbox set up and I don't have to worry about shared collections of
dependencies anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compiling"&gt;
&lt;h2&gt;Compiling&lt;/h2&gt;
&lt;p&gt;Great, I'm ready to start coding. I make a a trivial &lt;tt class="docutils literal"&gt;Main.hs&lt;/tt&gt; file which
pulls in a &lt;a class="reference external" href="http://hackage.haskell.org/package/vty-ui"&gt;vty-ui&lt;/a&gt; module (it turns out the &lt;tt class="docutils literal"&gt;vty&lt;/tt&gt; is pretty low level and
vty-ui provide more friendly widgets for building interfaces.)&lt;/p&gt;
&lt;p&gt;So let's compile:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ghc --make Main.hs
&lt;/pre&gt;
&lt;p&gt;I haven't read up on the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--make&lt;/span&gt;&lt;/tt&gt; flag but it seems like the thing to do.
Anyway, this doesn't work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Main.hs:2:8:
    Could not find module `Graphics.Vty.Widgets.All'
    Use -v to see a list of the files searched for.
&lt;/pre&gt;
&lt;p&gt;No trouble, I've played around with toy &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; compiles before. I believe there
is a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-package&lt;/span&gt;&lt;/tt&gt; flag to provide paths to packages. Cool. Where is the package?
I run &lt;tt class="docutils literal"&gt;find&lt;/tt&gt; in the sandbox and get a lot of paths like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/vty-ui-1.6/Graphics/Vty/Widgets/All.hi
&lt;/pre&gt;
&lt;p&gt;My &lt;span class="strike"&gt;spidey&lt;/span&gt; programmer sense is tingling; I've not compiled much in
Haskell but that doesn't look like something to add to a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-package&lt;/span&gt;&lt;/tt&gt; flag. Too
much specific data in there. Just a hunch but I start looking around for
alternatives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cabal-build"&gt;
&lt;h2&gt;Cabal Build&lt;/h2&gt;
&lt;p&gt;I couldn't see much else to help with &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; and it seemed that we were
pretty neck deep in this sandbox so on reviewing the &lt;a class="reference external" href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html"&gt;sandbox guide&lt;/a&gt; from
earlier I saw the use of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal build
&lt;/pre&gt;
&lt;p&gt;Worth a crack, right? Well, yes, but this was the response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
cabal: No cabal file found.
Please create a package description file &amp;lt;pkgname&amp;gt;.cabal
&lt;/pre&gt;
&lt;p&gt;Ok, we need some kind of configuration file. No idea what goes in it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ touch jump.cabal
$ cabal build
&lt;/pre&gt;
&lt;p&gt;Progress:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
Resolving dependencies...
cabal: Using 'build-type: Custom' but there is no Setup.hs or Setup.lhs
script.
&lt;/pre&gt;
&lt;p&gt;Ok, lets have a look at the &lt;a class="reference external" href="https://github.com/coreyoconnor/vty"&gt;vty project&lt;/a&gt; on Github and see what they are
doing. They've got some kind of &lt;tt class="docutils literal"&gt;Setup.lhs&lt;/tt&gt; file with this in it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/usr/bin/env runhaskell
&amp;gt; import Distribution.Simple
&amp;gt; main = defaultMain
&lt;/pre&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; project I've been keeping an eye on has something similar. Ok:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat &amp;lt;&amp;lt; ENDCAT &amp;gt; Test.lhs
#!/usr/bin/env runhaskell
&amp;gt; import Distribution.Simple
&amp;gt; main = defaultMain
ENDCAT
$ cabal build
&lt;/pre&gt;
&lt;p&gt;And:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
Resolving dependencies...
[1 of 1] Compiling Main             ( Setup.lhs, dist/setup/Main.o )
Linking ./dist/setup/setup ...
Configuring ...
setup: No 'name' field.

No 'version' field.

No executables and no library found. Nothing to do.
&lt;/pre&gt;
&lt;p&gt;Ok. Expecting some kind of &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;version&lt;/tt&gt; fields. This is starting to
seem like progress so I look at the vty project &lt;tt class="docutils literal"&gt;vty.cabal&lt;/tt&gt; file and we see a
simple key value set up:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
name:    jump
version: 0.0.0
&lt;/pre&gt;
&lt;p&gt;Vim highlights this which is always a good sign:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal build
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
Resolving dependencies...
Configuring jump-0.0.0...
setup: No executables and no library found. Nothing to do.
&lt;/pre&gt;
&lt;p&gt;More cross referencing with github, this time the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; project and we add:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
executable jump
    main-is: Main.hs
&lt;/pre&gt;
&lt;p&gt;Now we're on to something. We've got a few more warnings but finally some
compile errors! Things are happening. Playing around shows that we need to add:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cabal-version:   &amp;gt;= 1.2
build-type:      Simple
&lt;/pre&gt;
&lt;p&gt;To silence the warnings. A guess-and-test shows that we no longer need the
&lt;tt class="docutils literal"&gt;Setup.lhs&lt;/tt&gt; file now that we have &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;build-type&lt;/span&gt;&lt;/tt&gt; set to &lt;tt class="docutils literal"&gt;Simple&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dependency-management"&gt;
&lt;h2&gt;Dependency Management&lt;/h2&gt;
&lt;p&gt;So those compile errors? They are actually pretty damned cool if you ask me. The
first one sets the tone:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Main.hs:1:1:
    Could not find module `Prelude'
    It is a member of the hidden package `base'.
    Perhaps you need to add `base' to the build-depends in your .cabal file.
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Prelude&lt;/tt&gt; is the essentially default, built-in functionality in Haskell. All
the functions that you're going to be using all the time so they are just there.
This is included by default in programs if you do a &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; invocation from the
command line or if you use &lt;tt class="docutils literal"&gt;ghci&lt;/tt&gt; but here we're being asked to explicitly
declare the dependency.&lt;/p&gt;
&lt;p&gt;Dependencies are a nightmare if they aren't managed properly so I am in favour
of this. Additionally it allows this &lt;tt class="docutils literal"&gt;base&lt;/tt&gt; package to changes its contents as
it versions up and projects can declare the version range they require to
operate.&lt;/p&gt;
&lt;p&gt;So the next addition is to add the build dependencies to the &lt;tt class="docutils literal"&gt;executable&lt;/tt&gt;
section:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
executable jump
    main-is: src/Main.hs
    build-depends: base &amp;gt;= 4 &amp;amp;&amp;amp; &amp;lt; 5
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;4&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;5&lt;/tt&gt; range is stoten from the &lt;tt class="docutils literal"&gt;yaml&lt;/tt&gt; project. This gets extended
in the typical prefixed comma style for further dependencies as the project
grows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
executable jump
    main-is: src/Main.hs
    build-depends: base &amp;gt;= 4 &amp;amp;&amp;amp; &amp;lt; 5
                 , vty-ui == 1.6
                 , vty == 4.7.3
                 , yaml == 0.8.5.1
                 , vector == 0.10.9.1
                 , text == 0.11.3.1
&lt;/pre&gt;
&lt;p&gt;Each time you need a new dependency you can &lt;tt class="docutils literal"&gt;cabal install&lt;/tt&gt; it into your
sandbox and then the &lt;tt class="docutils literal"&gt;cabal build&lt;/tt&gt; command will make sure you have it properly
specified in your &lt;tt class="docutils literal"&gt;.cabal&lt;/tt&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-review"&gt;
&lt;span id="review"&gt;&lt;/span&gt;&lt;h2&gt;In Review&lt;/h2&gt;
&lt;p&gt;If I wanted an introduction to Haskell project setup, coming from a C++ &amp;amp; Python
background, I would want something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Cabal sandboxes provide a virtualenv style enviroment for project development.
Your project root directory becomes your sandbox.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Your project &lt;tt class="docutils literal"&gt;.cabal&lt;/tt&gt; file acts a little like a C++ project's &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;.
It also has some flavours of a Python project's &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A simple set up thankfully only requires a simple configuration file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Running &lt;tt class="docutils literal"&gt;cabal build&lt;/tt&gt; is roughly the equivalent of running &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; for a
C++ project and the cabal sandox/build set up is much easier to manage than a
Makefile with paths to all the libraries &amp;amp; headers you require for C++. It is
more of a build system than a Makefile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Build dependencies have to be explicitly declared or else &lt;tt class="docutils literal"&gt;cabal build&lt;/tt&gt;
won't compile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Your final &lt;tt class="docutils literal"&gt;.cabal&lt;/tt&gt; file for a simple single file executable project will
look a little like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
name:            jump
version:         0.0.0
cabal-version:   &amp;gt;= 1.8
build-type:      Simple

executable jump
    main-is: src/Main.hs
    build-depends: base &amp;gt;= 4 &amp;amp;&amp;amp; &amp;lt; 5
                 , vty-ui == 1.6
                 , vty == 4.7.3
                 , yaml == 0.8.5.1
                 , vector == 0.10.9.1
                 , text == 0.11.3.1
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="haskell cabal"></category></entry><entry><title>Journal - Day 15</title><link href="http://michaeljones.github.io/blog/posts/2013/10/25/journal-day-15/" rel="alternate"></link><updated>2013-10-25T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-25:blog/posts/2013/10/25/journal-day-15/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue my quest to parse Yaml in Haskell. Or rather, use the data returned
from the Yaml parser library I'm using (&lt;a class="reference external" href="http://hackage.haskell.org/package/yaml-0.8.5"&gt;yaml&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;Try to write at least one test for &lt;a class="reference external" href="http://github.com/EverZen/RigControls"&gt;RigControls&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continued exploration of the Yaml library but without much success. Determined
that perhaps it would be productive to journal my failings and hopefully
eventual success at using this library. Sadly this decision came after a
little progress so I will have to try to reproduce those first steps in an
appropriately clueless way.&lt;/li&gt;
&lt;li&gt;Failed to write any tests. Dammit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 14</title><link href="http://michaeljones.github.io/blog/posts/2013/10/24/journal-day-14/" rel="alternate"></link><updated>2013-10-24T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-24:blog/posts/2013/10/24/journal-day-14/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue working on vty-ui example to at least emulate the functionality of my
&lt;a class="reference external" href="https://github.com/michaeljones/dotfiles/blob/master/bin/jump"&gt;jump&lt;/a&gt; helper script.&lt;/li&gt;
&lt;li&gt;Set up basic testsuite for the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project.&lt;/li&gt;
&lt;li&gt;Improve &amp;amp; update information on michaeljones.github.io.&lt;/li&gt;
&lt;li&gt;Grab the source code for &lt;a class="reference external" href="https://github.com/gibiansky/IHaskell"&gt;IHaskell&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;More work on the Jump project including starting to look at the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; package
for reading my jump config file. As a beginner, I am finding it a struggle to
start with new packages when they don't have a tutorial section. The tests
only get you so far. A simple start guide would not go amiss.&lt;/p&gt;
&lt;p&gt;Perhaps this will improve with experience. Perhaps Haskell APIs have a
structure which I am not familiar enough with yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Installed &lt;a class="reference external" href="http://nose2.readthedocs.org/en/latest/index.html"&gt;nose2&lt;/a&gt; to the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; virtualenv I have and wrote a trivial
test to test that it was working.&lt;/p&gt;
&lt;p&gt;Required getting PyQt4 working in the virtualenv which, for me, involved
directly copying the system installed packages as recommended in this
stackoverflow &lt;a class="reference external" href="http://stackoverflow.com/questions/1961997/is-it-possible-to-add-pyqt4-pyside-packages-on-a-virtualenv-sandbox"&gt;response&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Investigated Unicode best practices in response to a sphinx-to-github &lt;a class="reference external" href="https://github.com/michaeljones/sphinx-to-github/pull/7"&gt;ticket&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Updated my development copy of michaeljones.github.io to include more
information for potential future employers. To act as more of a CV.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Did not grab the souce code for &lt;a class="reference external" href="https://github.com/gibiansky/IHaskell"&gt;IHaskell&lt;/a&gt;. Might give up on that one for the
moment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 13</title><link href="http://michaeljones.github.io/blog/posts/2013/10/23/journal-day-13/" rel="alternate"></link><updated>2013-10-23T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-23:blog/posts/2013/10/23/journal-day-13/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Improve &amp;amp; update information on michaeljones.github.io.&lt;/li&gt;
&lt;li&gt;Grab the source code for &lt;a class="reference external" href="http://gibiansky.github.io/IHaskell/"&gt;IHaskell&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Experiment with the &lt;a class="reference external" href="http://hackage.haskell.org/package/vty-ui"&gt;vty-ui&lt;/a&gt; library&lt;/li&gt;
&lt;li&gt;Read the final chapter of Learn You a Haskell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Did not update michaeljones.github.io.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Did not grab the source for &lt;a class="reference external" href="http://gibiansky.github.io/IHaskell/"&gt;IHaskell&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I read the final chapter of Learn You a Haskell which is introducing the idea
of Zippers. It doesn't really wrap up the tutorial with any kind of conclusion
which makes it feel like there might be more to come. The FAQ also promises a
set of accompanying exercises at some point but I think it might have been
promising that for a while.&lt;/p&gt;
&lt;p&gt;Still by far the best Haskell tutorial I've come across.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Read the majority of the documentation for the &lt;a class="reference external" href="http://hackage.haskell.org/package/vty-ui"&gt;vty-ui&lt;/a&gt; library and built a
basic &lt;abbr&gt;TUI &amp;lt;Text User Interface&amp;gt;&lt;/abbr&gt; application which uses the List
functionality from vty-ui. Quite exciting to be writing something new,
interpreting compile errors and getting things to work. Still early days but
feels great to be coding.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Watched a talk on &lt;a class="reference external" href="http://www.infoq.com/presentations/io-functional-side-effects"&gt;Purely Functional I/O&lt;/a&gt; which covers the pure nature of
Haskell and introducing some pure ideas into Scala. It is a solid presentation
which gently covered some very interesting ideas. Again, I wonder how people
are meant to watch it without a basic understanding of Haskell but maybe it is
fine. A couple of &lt;em&gt;Ah-Ha!&lt;/em&gt; moments for me: firstly his three stage code
refactoring example, going from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cafe&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;buyCoffee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CreditCard&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Coffee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Coffee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nc"&gt;Payments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cup&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where the payment mechanism is hard coded through a singleton which means
limited modularity and difficulty in testing as you can't substitute a mock
payments system. To:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cafe&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;buyCoffee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CreditCard&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Payments&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Coffee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Coffee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cup&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where the payments mechanism is an explicit dependency of the method and has
to be injected, which allows for greater modularity, but still isn't as
flexible as it could be as you cannot easily combine payments. To:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cafe&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;buyCoffee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CreditCard&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Coffee&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Charge&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Coffee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cup&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Charge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In which the &lt;tt class="docutils literal"&gt;buyCoffee&lt;/tt&gt; mechanism is only responsible for returning a
&lt;tt class="docutils literal"&gt;Charge&lt;/tt&gt; object which can be separately processed and combined if desired
before the final payment is done.&lt;/p&gt;
&lt;p&gt;I'm very used to the second set of code from a writing code to test as covered
in &lt;a class="reference external" href="http://misko.hevery.com/"&gt;Mi?ko Hevery's&lt;/a&gt; &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLBDAB2BA83BB6588E"&gt;Clean Code&lt;/a&gt; Google Tech Talks, but the third set
feels like it might just be another step forward and something well worth
taking on board. The pure functional angle here is that the method only
creates new objects it doesn't change any state but the pay offs are perhaps
larger than I would associate with that simple statement.&lt;/p&gt;
&lt;p&gt;The second &lt;em&gt;Ah-Ha!&lt;/em&gt; moment was hearing again how Haskell handles IO code and
side-effects. I felt my understanding click a step deeper with this talk.
Mostly his focus on the fact that IO is possible in a pure way and that is
whilst Haskell has functions that perform IO and therefore have side-effects,
they are never executed by the programmers code. Rather, the programmer has
pure code which passes these IO performing functions around as data and then
Haskell runtime, whatever is managing the execution of &lt;tt class="docutils literal"&gt;main&lt;/tt&gt;, ultimately
executes them and passes their results back into the pure code as part of the
evaluation of the program.&lt;/p&gt;
&lt;p&gt;He emphasises that pure code is referentially transparent which means that
every time you run a function with the same arguments it returns the same
results. Haskell perhaps can be viewed as running pure functions which return
functions which will do side-effecting actions, but as long as we're only
talking about returning functions that, if run, would have side-effects, rather
than actually running those functions ourselves then we are still pure. The
functions are data that we're passing around which can be done in a manner
oblivious to their underlying impure nature.&lt;/p&gt;
&lt;p&gt;To keep a track of what is going on we label these functions with the IO type
but that is little more than a convention aided by the type system. IO doesn't
bestow magical powers on the functions.&lt;/p&gt;
&lt;p&gt;This all may or may not be wrong but it is my current understanding.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 12</title><link href="http://michaeljones.github.io/blog/posts/2013/10/22/journal-day-12/" rel="alternate"></link><updated>2013-10-22T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-22:blog/posts/2013/10/22/journal-day-12/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read &lt;a class="reference external" href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html"&gt;cabal sandbox post&lt;/a&gt; and set up a sandbox area for my Haskell dev
project. Cabal sandboxes are meant to mimic the Python virtualenv
functionality.&lt;/li&gt;
&lt;li&gt;Take a closer look at the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project and try to improve the curve
performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read the cabal sandbox post and set up a basic sandbox area.&lt;/li&gt;
&lt;li&gt;Talked through some changes to the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project with my brother.
Conferring on coding style and some subtleties of Python.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Everzen/RigControls/pull/3"&gt;Improved curve performance&lt;/a&gt; in &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; by switching to a recalculate on
demand rather than recalculate on change strategy.&lt;/li&gt;
&lt;li&gt;Read the first page of the &lt;a class="reference external" href="https://www.fpcomplete.com/school/haskell-fast-hard/haskell-fast-hard-part-1"&gt;Learn Haskell Hard &amp;amp; Fast&lt;/a&gt; tutorial. In
comparison to LYAH, it feels like it is going at a lightning pace and lacks
the thoroughness required, however it might round out in future sections. It
is certainly tempting to try to write a Haskell tutorial which explicitly
skips over particular details early on in order to get to more practical
examples. It will be interesting to see if this tutorial takes that approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 11</title><link href="http://michaeljones.github.io/blog/posts/2013/10/21/journal-day-11/" rel="alternate"></link><updated>2013-10-21T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-21:blog/posts/2013/10/21/journal-day-11/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read through chapter 13 of Learn You a Haskell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read through the chapter of Learn You a Haskell. This is the first chapter
where I'm beginning to feel unsure of how solid my understanding has been so
far. It all just about holds together but I'm aware of how little practical
application I've attempted with the knowledge so far.&lt;/li&gt;
&lt;li&gt;Found a new &lt;a class="reference external" href="http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/#introduction"&gt;Haskell tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Refactored use of &lt;tt class="docutils literal"&gt;eval&lt;/tt&gt; in the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project to use a dictorionary
based factory instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>End of Week 2</title><link href="http://michaeljones.github.io/blog/posts/2013/10/20/end-of-week-2/" rel="alternate"></link><updated>2013-10-20T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-20:blog/posts/2013/10/20/end-of-week-2/</id><summary type="html">&lt;div class="section" id="weekend"&gt;
&lt;h2&gt;Weekend&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decided to start looking at the &lt;a class="reference external" href="https://github.com/coreyoconnor/vty"&gt;Vty&lt;/a&gt; module for Haskell based on the
half-remembered fact that the &lt;a class="reference external" href="https://github.com/yi-editor/yi"&gt;Yi text editor&lt;/a&gt; uses it for its terminal
front end.&lt;/li&gt;
&lt;li&gt;Talked through my changes to &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; with my brother.&lt;/li&gt;
&lt;li&gt;Found a &lt;a class="reference external" href="http://www.haskell.org/haskellwiki/All_About_Monads"&gt;monad tutorial&lt;/a&gt; on the Haskell wiki.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-in-review"&gt;
&lt;h2&gt;Week in Review&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;My attitude towards learning Haskell has shifted as I begin to understand a
little of its scope. Initial frustration at the helplessness I felt at not
being able to get anything done has been replaced with an understanding that
Haskell is not trivial to dive into and a little patience goes a long way.&lt;/p&gt;
&lt;p&gt;In particular the Learn You a Haskell guide feels particularly brilliantly
laid out and paced. The concepts are built up gradually in a very manageable
way and, whilst I am finding it hard to think of interesting programs to write
with the knowledge I have, there is a definite sense of progress which is
enough to keep the enthusiasm going.&lt;/p&gt;
&lt;p&gt;That said, my attempt at the weekend to pick up and write even the most basic
program using the &lt;a class="reference external" href="https://github.com/coreyoconnor/vty"&gt;Vty&lt;/a&gt; module was an education in the different between theory
and practice. It is one thing to read a guide book and quite another to find
your way. Still, a little foolish googling and a few stackoverflow questions
later and I am starting to see a little clearer.&lt;/p&gt;
&lt;p&gt;A key issue was that the Vty module does not come with how-to style
documentation [1] and going from the careful breaks downs of the Learn You a
Haskell guide to the currently-still-alien pages of the library documentation
on Haddock was a rather large step. Concepts that I had read about were now
being presented with unfamiliar content and without the careful reminders
needed to take it all on board. Still, progress was made, even if in the most
basic sense and I am a little better equipped than before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Getting into the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project is still primarily reminding me how
little indepth experience I have with Qt. It is also curious to dive into an
existing code base with the intention of cleaning it up some what. Nice to
have the permission but a fresh lesson in how difficult it can be to tackle a
new and relatively undocumented code base.&lt;/p&gt;
&lt;p&gt;Possible refactoring would be aided by have test cases but I still have
trouble understanding how to best tackle those in a GUI application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Whilst I am curious to attempt to contribute to a large project like Libre
Office, or perhaps 0ad, I am finding it a little daunting and easily telling
myself that there is no rush with other commitments at the moment. I think
that it fair. I'd be a fool to take on too much and fail to make significant
progress in any direction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Supporting incoming user requests on Breathe continues to be of interest. It
feels productive to keep pushing it forward a little and to try to keep
updates clean and useful. I still lack the motivation to take a crack at some
larger issues and reports whilst I have other things to focus on but I am
tempted to at least start working through the back log a little rather than
only picking up new tickets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;It is possibly too low level for that with the &lt;a class="reference external" href="http://jtdaugherty.github.io/vty-ui/"&gt;Vty-UI&lt;/a&gt; library filling
need for a widget library on top of the core Vty module.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 10</title><link href="http://michaeljones.github.io/blog/posts/2013/10/18/journal-day-10/" rel="alternate"></link><updated>2013-10-18T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-18:blog/posts/2013/10/18/journal-day-10/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read through chapter 12 of Learn You a Haskell. Starting on the big scary
&amp;quot;monads&amp;quot;&lt;/li&gt;
&lt;li&gt;Grab the 0ad source code from &lt;a class="reference external" href="https://github.com/0ad/0ad"&gt;github&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Investigate the &lt;a class="reference external" href="http://librelist.com/browser//breathe/2013/10/17/doxygenclass-+-members-fails/"&gt;issue&lt;/a&gt; reported on the Breathe mailing list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished chapter 12. Monads do not seem very scary when explained well. Of
course, I might not have understood them at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I grabbed the 0ad source code. The git repository is over a gigabyte of data.
It is vaguely alarming. I haven't tried to compile it yet but spent a little
time scanning over the directories to get a feel for the complexity. It is
impressively larger than anything I've dealt with before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Managed to get a fix out for the reported issue in Breathe will a little back
and forth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Watch a &lt;a class="reference external" href="https://www.youtube.com/watch?v=b9FagOVqxmI"&gt;Google TechTalk&lt;/a&gt; on Haskell. A brief introduction by &lt;a class="reference external" href="https://github.com/mzero"&gt;mzero&lt;/a&gt; which is
really quite a whirlwind tour. I don't think I would recommend it as an
introduction but it settled in very nicely to the stage of learning I'm at as
a quick reinforcement of ideas that I have seen so far.&lt;/p&gt;
&lt;p&gt;I think the time required to properly explain the various common abstractions
in Haskell makes it enormously hard to do a deep and meaningful
no-prior-knowledge-required talk about the language.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Discovering Virtualenv</title><link href="http://michaeljones.github.io/blog/posts/2013/10/17/discovering-virtualenv/" rel="alternate"></link><updated>2013-10-17T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-17:blog/posts/2013/10/17/discovering-virtualenv/</id><summary type="html">&lt;p&gt;I've used Python for around 8 years now. It is the main scripting language of
the visual effects industry so it gets used for all kinds of glue between other
programs and for interfaces for tools.&lt;/p&gt;
&lt;p&gt;In this role, I've never had to set up a server or do a deployment of a some
kind of complete unit and so whilst I have been aware of &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt; I've never
seen the need for it in my life.&lt;/p&gt;
&lt;p&gt;Of course, being a Python programmer, I've wanted to pull in third-party
libraries and it rarely seems appropriate, and is sometimes impossible, to
install them into the central &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; area on the machine. So a while ago, I
adopted the convention of maintaining a &lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt; folder in which I kept a
mini &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; hierarchy with my various required bits of software.&lt;/p&gt;
&lt;p&gt;This works because &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/"&gt;pip&lt;/a&gt; and &lt;a class="reference external" href="http://pythonhosted.org/distribute/easy_install.html"&gt;easy_install&lt;/a&gt; take some form of &lt;tt class="docutils literal"&gt;prefix&lt;/tt&gt; arguments
to allow for targeted installs. &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; requires the slightly less than obvious
use of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;install-option&lt;/span&gt;&lt;/tt&gt; flag like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install --install-option=&amp;quot;--prefix=$HOME/local&amp;quot; &amp;lt;module name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;But it is something you can get used to.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;$HOME/local/bin&lt;/tt&gt; and corresponding Python module install location are
then added to my &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; respectively in my &lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt; and
all is well. Kind of.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;This works pretty well. It is manageable. But the point where it started to fall
apart for me is when I wanted multiple versions of the same Python module
installed. This pretty much works. Python bootstraps tend to specify the exact
version they want via &lt;tt class="docutils literal"&gt;pkg_resources&lt;/tt&gt; and some installs provide bootstrap
scripts with different suffixes for the different versions so we can pick and
choose to some degree.&lt;/p&gt;
&lt;p&gt;The issue is that some modules, or tools, like &lt;a class="reference external" href="http://sphinx-doc.org"&gt;Sphinx&lt;/a&gt; provide a boostrapped
executable without a suffix or at least one which is called without the suffix
by standard workflow tools (like the Makefile that Sphinx generates.) The
trouble encountered here is that the module version that the executable ends up
being from the last version of Sphinx that you installed.&lt;/p&gt;
&lt;p&gt;This is fine in the usual update track of simply replacing the last version with
something newer and shinier, however it fails if you ever want to go back to the
last version. This is relevant in two ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;If you want to test a new alpha/beta release whilst still being able to go
back to stable.&lt;/li&gt;
&lt;li&gt;If you want to test a module under Python 3 whilst still being able to go
back to Python 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Fortunately other people have encountered this issue and written &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt;.
The design seems to be that instead of a single centralised install location for
all your Python modules, you create as many individual install locations as you
need for the different requirements of your projects.&lt;/p&gt;
&lt;p&gt;This might be one location per project, or a shared location for some projects
with common settings and other locations for more specific ones. How to do this?
Virtualenv makes it pretty easy. Once it is installed, just run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
virtualenv &amp;lt;location name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
virtualenv python-2.7.4
&lt;/pre&gt;
&lt;p&gt;And it will create a small &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; style hierarchy in a folder called
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-2.7.4&lt;/span&gt;&lt;/tt&gt; in your current directory. I haven't come up with a better
naming convention than the Python version yet but really it should be dictated
by the requirements of the project.&lt;/p&gt;
&lt;p&gt;Virtualenv creates the hierarchy, installs a copy of the current Python
interpreter that you are using, the standard library, as well as &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;easy_install&lt;/tt&gt; and sets up some scripts which can be sourced to add the
hierarchy to your environment. From there you source the environment
scripts as so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
source python-2.7.4/bin/activate
&lt;/pre&gt;
&lt;p&gt;And then you're ready to go.&lt;/p&gt;
&lt;p&gt;The presence of &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; in this new location makes it fantastically easy to install new
modules to that virtual environment. The &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; script will put that
&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; executable on your &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; and invocations of it will install modules
to your new environment.&lt;/p&gt;
&lt;p&gt;So then, whenever you have a project with a particular set of requirements,
create a new virtualenv location, source the script, &lt;tt class="docutils literal"&gt;pip install&lt;/tt&gt; your
requirements and away you go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="minor-issues"&gt;
&lt;h2&gt;Minor Issues&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; scripts do not attempt to set or change your &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt;.  I
found this confusing at first but the new install of Python is already hardcoded
to check its local &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;site-packages&lt;/span&gt;&lt;/tt&gt; directory and everything is installed in
there so the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; is not required.&lt;/p&gt;
&lt;p&gt;This complicated things when transitioning from my previous set up to using more
virtualenv locations as my &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; was still set to my &lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt;
install which would be preferentially picked up over the modules in the
virtualenv which rather defeated the point.&lt;/p&gt;
&lt;p&gt;This is fixable by no longer setting a &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; in my &lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt; but then
my small workflow scripts started failing as they wanted to find modules in
&lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt; and that was no longer exposed. My approach to solving this is
simply to create some additional virtual environments under &lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt;
which represent a useful grab-bag of modules for these scripts and then write
a shell wrapper to source the virtual environment &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; script and then
run the original Python file.&lt;/p&gt;
&lt;p&gt;So my, previously Python, &lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; script has now become a shell script which
looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/sh

# Source the appropriate virtualenv
. /home/mike/local/python/python-2.7.4/bin/activate

jump-impl
&lt;/pre&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jump-impl&lt;/span&gt;&lt;/tt&gt; contains the contents of the original &lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; script and
happily finds the &lt;tt class="docutils literal"&gt;yaml&lt;/tt&gt; module that I've installed to the virtual environment
in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/home/mike/local/python/python-2.7.4&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Journal - Day 9</title><link href="http://michaeljones.github.io/blog/posts/2013/10/17/journal-day-9/" rel="alternate"></link><updated>2013-10-17T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-17:blog/posts/2013/10/17/journal-day-9/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 11 of Learn You a Haskell.&lt;/li&gt;
&lt;li&gt;Write a blog post about virtual env.&lt;/li&gt;
&lt;li&gt;Grab source code for 0ad from &lt;a class="reference external" href="https://github.com/0ad/0ad"&gt;github&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Investigate Breathe ticket &lt;a class="reference external" href="https://github.com/michaeljones/breathe/issues/70"&gt;#70&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished chapter 11. Tackling Applicative Functors and Monoids. I am beginning
to get the feeling that Haskell is not a complex language but there are a lot
of best practices and design patterns, like Applicative Functors and Monoids,
that they have built on top of base language which are all required for
understanding the programs out there.&lt;/p&gt;
&lt;p&gt;It is like having to learn C++ and the whole &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Design_Patterns"&gt;Gang of Four&lt;/a&gt; before starting
on a C++ project. Sort of. It is harder, I think, as the C++ syntax is
relatively minimal in some ways so you'd be able to understand a lot of the
design patterns without learning them from reference. You might not know
exactly why they are done but you could see what is happening. I feel like
that is harder in Haskell but only because the abstractions they build up are
in some ways more complex and in some ways expressed more tersely which makes
them less approachable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Wrote &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/17/discovering-virtualenv/"&gt;this blog post&lt;/a&gt; about virtual env. Part of me is appalled by the idea,
I know how late I am to the virtual env game and none of this should be new
news, however part of me understands that sometimes random blogs posts can be
useful to the people who stumble across them and they are always helpful to
their writer so I'm trying to embrace that style of thought.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Failed to grab the source code for 0ad. I did however play it for a bit and
managed not to get slaughtered by the first wave of attack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Failed to investigate Breathe ticket #70.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Forked and started some refactoring work on &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;rigcontrols&lt;/a&gt;. Trying to get a feel
for the code base and the best direction forward for it. It is revealing my
lack of familiarity with Qt though I have worked with quite a few basic Qt
interfaces.&lt;/p&gt;
&lt;p&gt;The interface is currently Qt 4.8 based. I would be enthusiastic to port it to
Qt 5 purely out of interest but I don't think that is going to happen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 8</title><link href="http://michaeljones.github.io/blog/posts/2013/10/16/journal-day-8/" rel="alternate"></link><updated>2013-10-16T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-16:blog/posts/2013/10/16/journal-day-8/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 9 of Learn You a Haskell and start on chapter 10.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finished chapter 9, read chapter 10 and starter on chapter 11.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What can I say, it was a sunny day.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 7</title><link href="http://michaeljones.github.io/blog/posts/2013/10/15/journal-day-7/" rel="alternate"></link><updated>2013-10-15T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-15:blog/posts/2013/10/15/journal-day-7/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 8 and read chapter 9 of Learn You a Haskell.&lt;/li&gt;
&lt;li&gt;Figure out how to do something basic with the Yaml library.&lt;/li&gt;
&lt;li&gt;Finish work on image support in Breathe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finished chapter 8 and read half of chapter 9. They are really long chapter, I
swear.&lt;/li&gt;
&lt;li&gt;I did not yet figure out some basics with Yaml library but editing one of the
examples given in LYAH allowed me to feel a little more confident about my
progress with the language.&lt;/li&gt;
&lt;li&gt;Finished up the image support and closed the ticket. The user has further use
cases but admits that they are non-standard.&lt;/li&gt;
&lt;li&gt;Also played a little bit of 0ad and looked through the contribution pages. I
have no idea why they are still on svn but they do at least have a github
&lt;a class="reference external" href="https://github.com/0ad/0ad"&gt;mirror&lt;/a&gt;. I got beaten pretty hard by the AI and did a panic-quit rather than
watch my town go down in flames.&lt;/li&gt;
&lt;li&gt;Watched a &lt;a class="reference external" href="http://channel9.msdn.com/Blogs/Charles/Alexandrescu-Bright-Meijer-Moran-Pure-versus-Native-and-much-more"&gt;discussion&lt;/a&gt; on D &amp;amp; Haskell and their development and ecosystems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 6</title><link href="http://michaeljones.github.io/blog/posts/2013/10/14/journal-day-6/" rel="alternate"></link><updated>2013-10-14T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-14:blog/posts/2013/10/14/journal-day-6/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 6 and read chapter 7 from Learn You a Haskell.&lt;/li&gt;
&lt;li&gt;Look into supporting the image syntax from Doxygen in Breathe. &lt;a class="reference external" href="https://github.com/michaeljones/breathe/issues/67"&gt;Ticket&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Compile a program which reads a yaml file using the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; library in Haskell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished chapter 6, read chapter 7 and half of chapter 8. It is a really good
book.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Made a first pass at supporting image syntax in Breathe. Pushed changes for
review by user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Compiled a program which pulls in the Yaml package but I have not figured out
how to use it yet. I did learn about the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-package&lt;/span&gt;&lt;/tt&gt; flag for &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; though
which is a step:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ghc -package yaml blah.hs
&lt;/pre&gt;
&lt;p&gt;Then you can do:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import qualified Data.Yaml as Y
&lt;/pre&gt;
&lt;p&gt;In your actual program.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Links</title><link href="http://michaeljones.github.io/blog/posts/2013/10/14/links/" rel="alternate"></link><updated>2013-10-14T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-14:blog/posts/2013/10/14/links/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hackflow.com/blog/2013/10/13/functional-python-made-easy/"&gt;Funcy&lt;/a&gt; Python module for functional programming made easy. &lt;a class="reference external" href="https://news.ycombinator.com/item?id=6542224"&gt;Discussion&lt;/a&gt; on
Hacker News.&lt;/li&gt;
&lt;li&gt;New &lt;a class="reference external" href="http://sourceforge.net/p/cppcheck/news/2013/10/cppcheck-162/"&gt;CppCheck&lt;/a&gt; release. I only used it briefly at work but it is open source
and does static analysis of your C++ code to help point out potential issues.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>End of Week 1</title><link href="http://michaeljones.github.io/blog/posts/2013/10/13/end-of-week-1/" rel="alternate"></link><updated>2013-10-13T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-13:blog/posts/2013/10/13/end-of-week-1/</id><summary type="html">&lt;div class="section" id="weekend"&gt;
&lt;h2&gt;Weekend&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Worked through chapter 5 and half of chapter 6 of Learn You a Haskell.&lt;/li&gt;
&lt;li&gt;Installed ghc-7.6.3 and haskell-platform-2013.2.0.0 using &lt;a class="reference external" href="http://askubuntu.com/questions/286764/how-to-install-haskell-platform-for-ubuntu-13-04/316465#316465"&gt;these&lt;/a&gt; instructions
as Ubuntu seems to have made some potentially odd choices for the version of
ghc they shipped on 13.04 so there isn't a packaged haskell-platform available
for it.&lt;/li&gt;
&lt;li&gt;Began to look at &lt;a class="reference external" href="http://cppreference.com"&gt;cppreference.com&lt;/a&gt; to see if there is anything I could
contribution to the community driven project.&lt;/li&gt;
&lt;li&gt;Downloaded &lt;a class="reference external" href="http://play0ad.com/"&gt;0ad&lt;/a&gt; from Ubuntu repositories with the intention of checking it out
as an open source game.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-in-review"&gt;
&lt;h2&gt;Week in Review&lt;/h2&gt;
&lt;p&gt;I had such grand plans moving into this period of personal work. This first week
has been an education in the realities of it all. Mostly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;It is lonely to work from home all day. I am not an enormously social creature
but I certainly miss having colleagues around.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Learning Haskell takes a long time. Coming from imperative programming
languages, it feels like starting again. This is what people say so it
should not have been surprising but I guess I'm not used to feeling
unproductive in a programming environment.&lt;/p&gt;
&lt;p&gt;That said, this is the third time I've tried to read through Haskell tutorials
and work through some issues and it is beginning to feel a little more
familiar, a little less alien. Completing basic tasks in the pure functional
side of things is new feeling easy which is a start. IO and more complex
programs still await.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;As mentioned &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/10/journal-day-4/"&gt;previously&lt;/a&gt;, the guide I have followed for learning Haskell this
week included more complex problems focussed on simple parts of the language
than I feel I would like. I would rather be learning more about the language
on simpler problems. I feel that if I'm trying to learn a language but
spending significant time trying to understand the actual problem rather than
its solution then I am focussing on the wrongs things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;It is rewarding to engage with people on open source projects. It is fair to
expect certain amount of effort on this part as well. Supporting open source
projects is not customer service as much as guide collaboration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="wishlist"&gt;
&lt;h2&gt;Wishlist&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;More simple problems to tackle in Haskell. I think this is potentially
difficult without introducing IO, but I would argue that it might make sense
to introduce some very basic, even unexplained, IO in order to be able to
tackle some more problems with the rest of the language.&lt;/li&gt;
&lt;li&gt;I find myself wanting a Haskell style guide. It is hard to know, as a
beginner, when to use &lt;tt class="docutils literal"&gt;where&lt;/tt&gt; vs &lt;tt class="docutils literal"&gt;let .. in&lt;/tt&gt;, when to declare another
independent function vs using &lt;tt class="docutils literal"&gt;where&lt;/tt&gt;, etc., and how many function calls can
be put in a row before it is deemed unreadable and other mechanisms, like local
bindings, should be introduced to improve readability.&lt;/li&gt;
&lt;li&gt;More talks on basic Haskell and introductions to the language. Simon
Peyton-Jones' talks were great but initial googling is no uncovering any more.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 5</title><link href="http://michaeljones.github.io/blog/posts/2013/10/11/journal-day-5/" rel="alternate"></link><updated>2013-10-11T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-11:blog/posts/2013/10/11/journal-day-5/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read first 6 chapters of Learn You a Haskell for Great Good.&lt;/li&gt;
&lt;li&gt;Further investigate quickstart issue for Breathe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read the first 4 chapters of Learn You a Haskell.&lt;/li&gt;
&lt;li&gt;Pushed a fix for a possible KeyError in the project handling code for Breathe.&lt;/li&gt;
&lt;li&gt;Took a cursory look at contributing to the Libre Office project. Their
&lt;a class="reference external" href="http://www.libreoffice.org/developers/"&gt;developers&lt;/a&gt; page is the place to start with their &lt;a class="reference external" href="https://wiki.documentfoundation.org/Easy_Hacks"&gt;easy hacks&lt;/a&gt; page being an
early target, I imagine. I have no particular love for the Libre Office project,
but a great deal of respect as I have used it often.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 4</title><link href="http://michaeljones.github.io/blog/posts/2013/10/10/journal-day-4/" rel="alternate"></link><updated>2013-10-10T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-10:blog/posts/2013/10/10/journal-day-4/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Work through the &lt;strong&gt;#31&lt;/strong&gt; to &lt;strong&gt;#41&lt;/strong&gt; Haskell problems.&lt;/li&gt;
&lt;li&gt;Read first 6 chapters of Learn You a Haskell for Great Good.&lt;/li&gt;
&lt;li&gt;Fix issue reported in the Breathe quick-start documentation.&lt;/li&gt;
&lt;li&gt;Look into curses development in Haskell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;I spent a long time looking at Haskell problem &lt;strong&gt;#27&lt;/strong&gt; and then went on to
other things. I think it is an interesting problem and I should be able to do
it, however it is beginning to frustrate me for other reasons.&lt;/p&gt;
&lt;p&gt;The issue is my approach: I'm treating this list of problems as a good
introduction to Haskell but it isn't really. It is a set of interesting
problems of growing difficulty which can be solved with Haskell if you want.
The issue is that they aren't designed to introduce you to different parts of
the language and in particular they start asking complex problems which simple
parts of the language instead of simple problems with increasingly complex
parts of the language. I'm not learning Haskell here; I'm learning parts of
mathematics instead. An excellent destination but not where I'm going.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://stackoverflow.com/a/1016986"&gt;stackoverflow post&lt;/a&gt; which suggests
these problems alse suggests the &lt;a class="reference external" href="http://projecteuler.net/"&gt;Project Euler&lt;/a&gt;
problems another source to work through but they suffer from exactly the same
issues.&lt;/p&gt;
&lt;p&gt;Perhaps the average person interested in Haskell has a mathematical background
and so these problems, which really aren't that hard, are more bread and
butter to them. For me, I'm going to have to find another path. Perhaps
focussing on Learn You a Haskell and then trying to replace some of my
various workflow helper scripts with Haskell versions as a test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ironically, I did not get around to reading the Learn You a Haskell chapters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I could not reproduce the issue with the Breathe quickstart documentation,
though more investigation might uncover it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I did not look into curses development.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I did go to the gym, tour the New Zealand parliament, have a singing lesson and
have drinks with friends. Some days have other ideas than coding.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 3</title><link href="http://michaeljones.github.io/blog/posts/2013/10/09/journal-day-3/" rel="alternate"></link><updated>2013-10-09T09:01:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-09:blog/posts/2013/10/09/journal-day-3/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue &lt;strong&gt;99 Haskell Problems&lt;/strong&gt; and reach #25.&lt;/li&gt;
&lt;li&gt;Finish up work for Breathe ticket &lt;strong&gt;#65&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Listen to &lt;strong&gt;A Taste of Haskell - Part 2&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reached Haskell Problem #26 but only by skipping the ones involving random
numbers which I did at the recommendations of this post.&lt;/li&gt;
&lt;li&gt;Finished up &lt;strong&gt;#65&lt;/strong&gt; on Breathe which turned out to be easier than expected. I
still do not understand the constructors for the docutils node classes.&lt;/li&gt;
&lt;li&gt;Watched the second part of &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/07/video-taste-of-haskell-part-2/"&gt;A Taste of Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Also watched an &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/09/video-rust-infoq/"&gt;introductory talk&lt;/a&gt; on Rust.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="todo"&gt;
&lt;h2&gt;Todo&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Email docutils list for explanation of constructors.&lt;/li&gt;
&lt;li&gt;Extend folder navigation script to source python virtualenv where desirable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Video: Rust - InfoQ</title><link href="http://michaeljones.github.io/blog/posts/2013/10/09/video-rust-infoq/" rel="alternate"></link><updated>2013-10-09T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-09:blog/posts/2013/10/09/video-rust-infoq/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.infoq.com/presentations/Rust"&gt;Short talk&lt;/a&gt; about the Rust
programming language from Mozilla. Excellent broad overview of the language
which gives a feel for what inspired it and what it is trying to achieve.&lt;/p&gt;
&lt;p&gt;To a C++ programmer that is growing frustrated with the growing complexity of
the language, Rust feels like it is a good thing.&lt;/p&gt;
&lt;p&gt;References the following blogs for more information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://smallcultfollowing.com/babysteps/"&gt;Baby Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pcwalton.github.com"&gt;pcwalton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="rust"></category></entry><entry><title>Journal - Day 2</title><link href="http://michaeljones.github.io/blog/posts/2013/10/08/journal-day-2/" rel="alternate"></link><updated>2013-10-08T10:01:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-08:blog/posts/2013/10/08/journal-day-2/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue 99 Haskell Problems and reach no. 20.&lt;/li&gt;
&lt;li&gt;Chase up support tickets #65 &amp;amp; #66 on Breathe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Reached problem no. 17. Definitely learning a bit more about haskell whilst
still only juggling lists in various ways. I would kill for some easily
approachable code that did some real work but all in good time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ticket #66 remains inactive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ticket #65 resulted in more work than anticipated as the problem is
non-standard. Potential for interesting work for fixing it but it took a while
to get back into the Breathe set up which I have neglected for a while.&lt;/p&gt;
&lt;p&gt;Getting to play around with virtualenv a little more though which is something
I've been late in picking up.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Video: Taste of Haskell - Part 1</title><link href="http://michaeljones.github.io/blog/posts/2013/10/07/video-taste-of-haskell-part-1/" rel="alternate"></link><updated>2013-10-07T19:01:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-07:blog/posts/2013/10/07/video-taste-of-haskell-part-1/</id><summary type="html">&lt;p&gt;An &lt;a class="reference external" href="http://blip.tv/oreilly-open-source-convention/oscon-2007-simon-peyton-jones-a-taste-of-haskell-part-i-329701"&gt;OSCON 2007 talk&lt;/a&gt;
introducing Haskell to imperative programmers by Simon Peyton Jones.&lt;/p&gt;
&lt;p&gt;I like his pacing and attitude and I think there is a reasonable amount to be
learnt despite the fact that the slides are not provided on the site or
displayed in the video. I am sure they can be tracked down.&lt;/p&gt;
&lt;p&gt;I can't tell at the moment how much I understood purely from the quality of the
talk and how much from the previous efforts I've made to get to grips with
Haskell.&lt;/p&gt;
</summary><category term="haskell"></category></entry><entry><title>Journal - Day 1</title><link href="http://michaeljones.github.io/blog/posts/2013/10/07/journal-day-1/" rel="alternate"></link><updated>2013-10-07T15:01:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-07:blog/posts/2013/10/07/journal-day-1/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;I have managed to get this &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; based blog
up. I choose Pelican because a simple google unearthed &lt;a class="reference external" href="http://pydanny.com/choosing-a-new-python-based-blog-engine.html"&gt;this&lt;/a&gt; from
pydanny with a comment from Kenneth Reitz and that is enough of an endorsement
for me.&lt;/p&gt;
&lt;p&gt;Plus I like rst.&lt;/p&gt;
&lt;p&gt;Things, like URLs, might chop and change for a bit whilst I figure this out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Done the first 7 of the 99 Haskell Problems with a combination of half
forgotten memories and referring to &lt;a class="reference external" href="http://learnyouahaskell.com/"&gt;Learn You a Haskell&lt;/a&gt;. My efforts are stumbling and awkward and
nothing works first time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I watched &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/07/video-taste-of-haskell-part-1/"&gt;Simon Peyton-Jones - A Taste of Haskell Part I&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Beginning</title><link href="http://michaeljones.github.io/blog/posts/2013/10/07/beginning/" rel="alternate"></link><updated>2013-10-07T13:46:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-07:blog/posts/2013/10/07/beginning/</id><summary type="html">&lt;p&gt;I am embarking on some time for some personal projects and this blog is designed
to mark my progress and keep on track. I am currently far from clear about what
to work on but I have a few loose ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Experiment with the &lt;a class="reference external" href="http://www.rust-lang.org/"&gt;Rust&lt;/a&gt; language and get a
feel for how to compares with C++.&lt;/p&gt;
&lt;p&gt;I am keen to pursue Rust as I have a reasonable and growing amount of
experience with C++ and would love to see a replacement with equal power but
less cruft.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Explore &lt;a class="reference external" href="http://clojure.org/"&gt;Clojure&lt;/a&gt; as a lisp and a language on the JVM.&lt;/p&gt;
&lt;p&gt;I have been watching some of Rich Hickey's Greatest Hits and still yearn for
that moment of enlightenment which legend suggests is brought on by
understanding lisp.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Become familiar with Haskell and work through the &lt;a class="reference external" href="http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems"&gt;99 Haskell problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More and more the functional approaches to coding intrigue me and feel like
the correct way forward. What can be more functional than Haskell?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Continue to support &lt;a class="reference external" href="https://github.com/michaeljones/breathe"&gt;Breathe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My Sphinx-Doxygen bridge project which has a small community of users and a
low but steady stream of requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Push forward with development on build and environment system prototype built
on &lt;a class="reference external" href="martine.github.io/ninja"&gt;Ninja&lt;/a&gt; and inspired by &lt;a class="reference external" href="https://github.com/nerdvegas/rez"&gt;Rez&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A prototype built at my last place of work seemed to have curious potential to
it. I'd like to push it to the point where it succeeds or breaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Explore programming with audio.&lt;/p&gt;
&lt;p&gt;I have a few musical outlets in my life and I find myself increasingly
interested in how it is represented in data and how malleable it might be in
that form.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Help with my brother's &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;Rig Controls&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;It has promise and a family connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Improve my knowledge of Open GL &amp;amp; SDL.&lt;/p&gt;
&lt;p&gt;I have been in graphics for too long without getting to grips with either.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Video: Taste of Haskell - Part 2</title><link href="http://michaeljones.github.io/blog/posts/2013/10/07/video-taste-of-haskell-part-2/" rel="alternate"></link><updated>2013-10-07T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-07:blog/posts/2013/10/07/video-taste-of-haskell-part-2/</id><summary type="html">&lt;p&gt;Second half of the Simon Peyton-Jones' introduction to Haskell. If I was not
convinced before, I am now; this is a really excellent talk to give you some
background to Haskell and some pleasantly gentle steps towards understanding it.&lt;/p&gt;
&lt;p&gt;Provides examples of pure functions and combining them with code that needs to
do the IO before going on to discuss the wider Haskell community.&lt;/p&gt;
&lt;p&gt;I really love his presentation manner. It is quite disarming.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blip.tv/oreilly-open-source-convention/oscon-2007-simon-peyton-jones-a-taste-of-haskell-part-ii-330372"&gt;Talk&lt;/a&gt;
and &lt;a class="reference external" href="http://research.microsoft.com/en-us/um/people/simonpj/papers/haskell-tutorial/"&gt;slides&lt;/a&gt;
(required as the video does not show them.)&lt;/p&gt;
</summary><category term="haskell"></category></entry></feed>