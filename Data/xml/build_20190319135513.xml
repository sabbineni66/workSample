<?xml version="1.0" encoding="utf-8" ?>
<project name="SkunkWorks" default="package" basedir="." >
	<!--
	     Find it here: http://sourceforge.net/projects/sadun-util/
	     put it in your ANT_HOME/lib
	 -->
	<taskdef name="pack" classname="org.sadun.util.ant.Pack">
    <classpath>
      <pathelement location="lib/pack.jar"/>
    </classpath>
  </taskdef>

  <description>SkunkWorks Ant Build Script</description>
  <loadproperties srcFile="robot.properties"/>
  <property name="addsource" value="true" />
  <property name="build.version" value="1.6" />

  <property name="jardir" value="build/dist" />
  <property name="srcdir" value="src/main" />
  <property name="bindir" value="build/classes" />

  <property name="test.home" value="src/test" />
  <property name="reports.dir" value="build/reports" />
  <property name="test.classes" value="build/testclasses" />

  <!-- Comment this out if you don't want to use the Eclipse Compiler for Java -->
  <!-- <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/> -->

  <!-- Load version number from robot properties file -->
  <property file="${srcdir}/${robot.classpath}/${robot.name}.properties" />
  <property name="robocode.jar" location="lib/robocode.jar" />

  <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
  <!-- !!!!!!!!!!!!!!!  NO CONFIGURATION BEYOND THIS POINT  !!!!!!!!!!!!!!!!!!!! -->
  <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->

  <target name="clean">
    <delete includeemptydirs="true">
      <fileset dir="${bindir}" includes="**/*"/>
      <fileset dir="${jardir}" includes="**/*"/>
    </delete>
	<delete dir="${reports.dir}" quiet="true"/>
	<delete dir="${test.classes}" quiet="true"/>
  </target>

  <!-- Compile the source java to class files -->
  <target name="compile">
    <echo>Compiling ${robot.name}</echo>
    <!-- Delete all the current files so we can recompile with our compiler. -->
    <delete>
      <fileset dir="${basedir}" includes="**/*.class"/>
    </delete>

    <!-- Compile with no debugging info -->
    <javac srcdir="${srcdir}" destdir="${bindir}" includeAntRuntime="no" encoding="UTF-8"
      target="${build.version}" source="${build.version}" debug="off">
      <classpath>
        <pathelement path="${basedir}"/>
        <pathelement location="${robocode.jar}"/>
      </classpath>
    </javac>
  </target>

  <!-- Package the robot for upload. -->
  <target name="package" depends="test">
    <tstamp>
      <format property="LONGSTAMP" pattern="yyyyMMdd-HHmm" locale="en"/>
    </tstamp>

    <!-- Setup directories and filenames -->
    <mkdir dir="${jardir}"/>
    <property name="backup.file" location="${jardir}/${robot.classname}_${robot.version}_${LONGSTAMP}.jar" />
    <property name="release.file" location="${jardir}/${robot.classname}_${robot.version}.jar" />
    <property name="tmp.file" location="${jardir}/~${robot.version}.jar" />

    <!-- delete older copies of your files -->
    <delete file="${backup.file}" failonerror="false" />
    <delete file="${release.file}" failonerror="false" />

    <!-- jar takes all your java and class files and packs them togeather -->
    <jar duplicate="add" basedir="${srcdir}" destfile="${backup.file}" compress="true">
      <include name="**/*.java" />
      <include name="**/*.properties" />
    </jar>
    <jar duplicate="add" basedir="${bindir}" destfile="${backup.file}" update="true" compress="true">
      <include name="**/*.class" />
    </jar>

    <!-- "pack" task selects only the minimal set of classes needed to run the bot.
       This can also be done with the "classfileset" task from ant-contrib -->
    <!-- http://sadun-util.sourceforge.net/pack.html -->
    <pack classes="${robot.classname}" targetjar="${tmp.file}" excludepkg="java,javax,sun,robocode">
      <classpath path="${bindir}" />
      <classpath location="${robocode.jar}" />
      <!-- A bit of magic so we don't have to type out our property files.
           Bonus, it includes those in the data folder aswell. -->
      <additionalfileset dir="${srcdir}">
        <filename name="**/*.properties" />
      </additionalfileset>
    </pack>

    <antcall target="includeSource" />

    <!-- Cleanup your unneeded tmp jar -->
    <delete file="${tmp.file}" failonerror="false" />
  </target>

  <!-- Include source in release jar. -->
  <target name="includeSource" if="${addsource}">
    <echo>Adding source to output jar.</echo>
    <jar duplicate="add" basedir="${srcdir}" destfile="${tmp.file}" update="true" compress="true">
      <include name="**/*.java" />
      <include name="**/*.properties" />
    </jar>
  </target>

  <target name="test" depends="compile">
    <mkdir dir="${test.classes}" />
    <mkdir dir="${reports.dir}" />
    <mkdir dir="${reports.dir}/raw" />
    <mkdir dir="${reports.dir}/html" />

    <!-- First, compile the tests -->
    <javac srcdir="${test.home}" destdir="${test.classes}" includeAntRuntime="no" encoding="UTF-8"
      target="${build.version}" source="${build.version}" debug="off" >
      <classpath path="${bindir}" />
      <classpath>
        <!-- The location of the JUnit version that you want to use -->
        <pathelement location="lib/junit-4.8.1.jar" />
      </classpath>
    </javac>

    <!-- Then, run them -->
    <junit printsummary="yes" showoutput="yes" failureproperty="junit.failure">
      <classpath path="${bindir}" />
      <classpath path="${test.classes}" />
      <classpath>
        <!-- The location of the JUnit version that you want to use -->
        <pathelement location="lib/junit-4.11.jar" />
        <pathelement location="lib/ant-junit.jar"/>
      </classpath>

      <batchtest fork="no" todir="${reports.dir}/raw/">
        <formatter type="xml" usefile="true" />
        <fileset dir="${test.home}">
          <include name="**/*.java" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${reports.dir}/html">
      <fileset dir="${reports.dir}/raw">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${reports.dir}/html" />
    </junitreport>
    <fail if="junit.failure" message="Unit test(s) failed. See Junit reports for details." />
  </target>

</project>
