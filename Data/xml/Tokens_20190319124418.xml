<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
 <Token>
  <TokenIdentifier>
   <Name>GType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GType</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A numerical value which represents the unique identifier of a registered
type.</Abstract>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FUNDAMENTAL</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-FUNDAMENTAL:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type which is the ancestor of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;.
Fundamental types are types that serve as ultimate bases for the derived types, 
thus they are the roots of distinct inheritance hierarchies.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_FUNDAMENTAL(type) (g_type_fundamental (type))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FUNDAMENTAL_MAX</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-FUNDAMENTAL-MAX:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">An integer constant that represents the number of identifiers reserved
for types that are assigned at compile-time.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_FUNDAMENTAL_MAX (255 &amp;lt;
    &amp;lt;
    G_TYPE_FUNDAMENTAL_SHIFT)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_MAKE_FUNDAMENTAL</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-MAKE-FUNDAMENTAL:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Get the type ID for the fundamental type number &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/em&gt;.
Use &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-fundamental-next&quot; title=&quot;g_type_fundamental_next ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_fundamental_next()&lt;/code&gt;&lt;/a&gt; instead of this macro to create new fundamental 
types.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_MAKE_FUNDAMENTAL(x) ((GType) ((x) &amp;lt;
    &amp;lt;
    G_TYPE_FUNDAMENTAL_SHIFT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_ABSTRACT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-IS-ABSTRACT:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is an abstract type.  An abstract type can not be
instantiated and is normally used as an abstract base class for
derived classes.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_ABSTRACT(type) (g_type_test_flags ((type), G_TYPE_FLAG_ABSTRACT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_DERIVED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-IS-DERIVED:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is derived (or in object-oriented terminology:
inherited) from another type (this holds true for all non-fundamental
types).</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_DERIVED(type) ((type) &amp;gt;
    G_TYPE_FUNDAMENTAL_MAX)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_FUNDAMENTAL</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-IS-FUNDAMENTAL:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is a fundamental type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_FUNDAMENTAL(type) ((type) &amp;lt;
    = G_TYPE_FUNDAMENTAL_MAX)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_VALUE_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-IS-VALUE-TYPE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is a value type and can be used with &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#g-value-init&quot; title=&quot;g_value_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_init()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_VALUE_TYPE(type) (g_type_check_is_value_type (type))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_HAS_VALUE_TABLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-HAS-VALUE-TABLE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; has a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeValueTable&quot; title=&quot;GTypeValueTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeValueTable&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_HAS_VALUE_TABLE(type) (g_type_value_table_peek (type) != NULL)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_CLASSED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-IS-CLASSED:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is a classed type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_CLASSED(type) (g_type_test_flags ((type), G_TYPE_FLAG_CLASSED))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_INSTANTIATABLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-IS-INSTANTIATABLE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; can be instantiated.  Instantiation is the
process of creating an instance (object) of this type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_INSTANTIATABLE(type) (g_type_test_flags ((type), G_TYPE_FLAG_INSTANTIATABLE))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_DERIVABLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-IS-DERIVABLE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is a derivable type.  A derivable type can
be used as the base class of a flat (single-level) class hierarchy.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_DERIVABLE(type) (g_type_test_flags ((type), G_TYPE_FLAG_DERIVABLE))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_DEEP_DERIVABLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-IS-DEEP-DERIVABLE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is a deep derivable type.  A deep derivable type
can be used as the base class of a deep (multi-level) class hierarchy.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_DEEP_DERIVABLE(type) (g_type_test_flags ((type), G_TYPE_FLAG_DEEP_DERIVABLE))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_INTERFACE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-IS-INTERFACE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is an interface type.
An interface type provides a pure API, the implementation
of which is provided by another type (which is then said to conform
to the interface).  GLib interfaces are somewhat analogous to Java
interfaces and C++ classes containing only pure virtual functions, 
with the difference that GType interfaces are not derivable (but see
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-interface-add-prerequisite&quot; title=&quot;g_type_interface_add_prerequisite ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_interface_add_prerequisite()&lt;/code&gt;&lt;/a&gt; for an alternative).</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_INTERFACE(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_INTERFACE)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeInterface</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeInterface</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">An opaque structure used as the base of all interface types.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GTypeInterface;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeInstance</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeInstance</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">An opaque structure used as the base of all type instances.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GTypeInstance;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeClass</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeClass</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">An opaque structure used as the base of all classes.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GTypeClass;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeInfo</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeInfo</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">This structure is used to provide the type system with the information
required to initialize and destruct (finalize) a type's class and
its instances.
The initialized structure is passed to the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-register-static&quot; title=&quot;g_type_register_static ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_register_static()&lt;/code&gt;&lt;/a&gt; function
(or is copied into the provided &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInfo&quot; title=&quot;GTypeInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInfo&lt;/span&gt;&lt;/a&gt; structure in the
&lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html#g-type-plugin-complete-type-info&quot; title=&quot;g_type_plugin_complete_type_info ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_plugin_complete_type_info()&lt;/code&gt;&lt;/a&gt;). The type system will perform a deep
copy of this structure, so its memory does not need to be persistent
across invocation of &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-register-static&quot; title=&quot;g_type_register_static ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_register_static()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    guint16 class_size;
    GBaseInitFunc base_init;
    GBaseFinalizeFunc base_finalize;
    GClassInitFunc class_init;
    GClassFinalizeFunc class_finalize;
    gconstpointer class_data;
    guint16 instance_size;
    guint16 n_preallocs;
    GInstanceInitFunc instance_init;
    const GTypeValueTable *value_table;
} GTypeInfo;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeFundamentalInfo</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeFundamentalInfo</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A structure that provides information to the type system which is
used specifically for managing fundamental types.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GTypeFundamentalFlags type_flags;
} GTypeFundamentalInfo;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GInterfaceInfo</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GInterfaceInfo</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A structure that provides information to the type system which is
used specifically for managing interface types.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GInterfaceInitFunc interface_init;
    GInterfaceFinalizeFunc interface_finalize;
    gpointer interface_data;
} GInterfaceInfo;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeValueTable</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeValueTable</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeValueTable&quot; title=&quot;GTypeValueTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeValueTable&lt;/span&gt;&lt;/a&gt; provides the functions required by the &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; implementation,
to serve as a container for values of a type.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    void (*value_init) (GValue *value);
    void (*value_free) (GValue *value);
    void (*value_copy) (const GValue *src_value, GValue *dest_value);
    gpointer (*value_peek_pointer) (const GValue *value);
    gchar *collect_format;
    gchar* (*collect_value) (GValue *value, guint n_collect_values, GTypeCValue *collect_values, guint collect_flags);
    gchar *lcopy_format;
    gchar* (*lcopy_value) (const GValue *value, guint n_collect_values, GTypeCValue *collect_values, guint collect_flags);
} GTypeValueTable;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FROM_INSTANCE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-FROM-INSTANCE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Get the type identifier from a given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/em&gt; structure. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_FROM_INSTANCE(instance) (G_TYPE_FROM_CLASS (((GTypeInstance*) (instance))-&amp;gt;
    g_class))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FROM_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-FROM-CLASS:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Get the type identifier from a given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/em&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_FROM_CLASS(g_class) (((GTypeClass*) (g_class))-&amp;gt;
    g_type)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FROM_INTERFACE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-FROM-INTERFACE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Get the type identifier from a given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interface&lt;/code&gt;&lt;/em&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_FROM_INTERFACE(g_iface) (((GTypeInterface*) (g_iface))-&amp;gt;
    g_type)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_INSTANCE_GET_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-INSTANCE-GET-CLASS:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Get the class structure of a given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/em&gt;, casted
to a specified ancestor type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_type&lt;/code&gt;&lt;/em&gt; of the instance.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_INSTANCE_GET_CLASS(instance, g_type, c_type) (_G_TYPE_IGC ((instance), (g_type), c_type))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_INSTANCE_GET_INTERFACE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-INSTANCE-GET-INTERFACE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Get the interface structure for interface &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_type&lt;/code&gt;&lt;/em&gt; of a given &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_INSTANCE_GET_INTERFACE(instance, g_type, c_type) (_G_TYPE_IGI ((instance), (g_type), c_type))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_INSTANCE_GET_PRIVATE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-INSTANCE-GET-PRIVATE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Gets the private structure for a particular type.
The private structure must have been registered in the
class_init function with &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-class-add-private&quot; title=&quot;g_type_class_add_private ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_class_add_private()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_INSTANCE_GET_PRIVATE(instance, g_type, c_type) ((c_type*) g_type_instance_get_private ((GTypeInstance*) (instance), (g_type)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_CHECK_INSTANCE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-CHECK-INSTANCE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/em&gt; is a valid &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInstance&quot; title=&quot;GTypeInstance&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInstance&lt;/span&gt;&lt;/a&gt; structure,
otherwise issues a warning and returns &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#FALSE:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_CHECK_INSTANCE(instance) (_G_TYPE_CHI ((GTypeInstance*) (instance)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_CHECK_INSTANCE_CAST</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-CHECK-INSTANCE-CAST:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks that &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/em&gt; is an instance of the type identified by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_type&lt;/code&gt;&lt;/em&gt;
and issues a warning if this is not the case. Returns &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/em&gt; casted 
to a pointer to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;c_type&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_CHECK_INSTANCE_CAST(instance, g_type, c_type) (_G_TYPE_CIC ((instance), (g_type), c_type))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_CHECK_INSTANCE_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-CHECK-INSTANCE-TYPE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/em&gt; is an instance of the type identified by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_type&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_CHECK_INSTANCE_TYPE(instance, g_type) (_G_TYPE_CIT ((instance), (g_type)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_CHECK_CLASS_CAST</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-CHECK-CLASS-CAST:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks that &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_class&lt;/code&gt;&lt;/em&gt; is a class structure of the type identified by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_type&lt;/code&gt;&lt;/em&gt;
and issues a warning if this is not the case. Returns &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_class&lt;/code&gt;&lt;/em&gt; casted 
to a pointer to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;c_type&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_CHECK_CLASS_CAST(g_class, g_type, c_type) (_G_TYPE_CCC ((g_class), (g_type), c_type))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_CHECK_CLASS_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-CHECK-CLASS-TYPE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_class&lt;/code&gt;&lt;/em&gt; is a class structure of the type identified by 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_type&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_CHECK_CLASS_TYPE(g_class, g_type) (_G_TYPE_CCT ((g_class), (g_type)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_CHECK_VALUE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-CHECK-VALUE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; has been initialized to hold values
of a value type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_CHECK_VALUE(value) (_G_TYPE_CHV ((value)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_CHECK_VALUE_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-CHECK-VALUE-TYPE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; has been initialized to hold values
of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_type&lt;/code&gt;&lt;/em&gt;. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_CHECK_VALUE_TYPE(value, g_type) (_G_TYPE_CVH ((value), (g_type)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FLAG_RESERVED_ID_BIT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-FLAG-RESERVED-ID-BIT:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A bit in the type number that's supposed to be left untouched.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_FLAG_RESERVED_ID_BIT ((GType) (1 &amp;lt;
    &amp;lt;
    0))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-init</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Prior to any use of the type system, &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-init&quot; title=&quot;g_type_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_init()&lt;/code&gt;&lt;/a&gt; has to be called
to initialize the type system and assorted other code portions
(such as the various fundamental type implementations or the signal
system).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_init (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_DEBUG_NONE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeDebugFlags</Anchor>
  <NodeRef refid="104"/>
  <Declaration type="html">&lt;pre&gt;G_TYPE_DEBUG_NONE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTypeDebugFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_DEBUG_OBJECTS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeDebugFlags</Anchor>
  <NodeRef refid="104"/>
  <Declaration type="html">&lt;pre&gt;G_TYPE_DEBUG_OBJECTS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTypeDebugFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_DEBUG_SIGNALS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeDebugFlags</Anchor>
  <NodeRef refid="104"/>
  <Declaration type="html">&lt;pre&gt;G_TYPE_DEBUG_SIGNALS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTypeDebugFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_DEBUG_MASK</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeDebugFlags</Anchor>
  <NodeRef refid="104"/>
  <Declaration type="html">&lt;pre&gt;G_TYPE_DEBUG_MASK&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTypeDebugFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeDebugFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeDebugFlags</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The &lt;span class=&quot;type&quot;&gt;GTypeDebugFlags&lt;/span&gt; enumeration values can be passed to
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-init-with-debug-flags&quot; title=&quot;g_type_init_with_debug_flags ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_init_with_debug_flags()&lt;/code&gt;&lt;/a&gt; to trigger debugging messages during runtime.
Note that the messages can also be triggered by setting the
&lt;code class=&quot;envar&quot;&gt;GOBJECT_DEBUG&lt;/code&gt; environment variable to a ':'-separated list of 
&quot;objects&quot; and &quot;signals&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum  {
    G_TYPE_DEBUG_NONE = 0,
    G_TYPE_DEBUG_OBJECTS = 1 &amp;lt;&amp;lt; 0,
    G_TYPE_DEBUG_SIGNALS = 1 &amp;lt;&amp;lt; 1,
    G_TYPE_DEBUG_MASK = 0x03 
} GTypeDebugFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_init_with_debug_flags</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-init-with-debug-flags</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Similar to &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-init&quot; title=&quot;g_type_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_init()&lt;/code&gt;&lt;/a&gt;, but additionally sets debug flags.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_init_with_debug_flags (
    &lt;a class=&quot;gobject-Type-Information.html#GTypeDebugFlags&quot; href=&quot;enum GTypeDebugFlags&quot; title=&gt;GTypeDebugFlags&lt;/a&gt; debug_flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-name</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Get the unique name that is assigned to a type ID.  Note that this
function (like all other GType API) cannot cope with invalid type
IDs. &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INVALID:CAPS&quot; title=&quot;G_TYPE_INVALID&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_INVALID&lt;/code&gt;&lt;/a&gt; may be passed to this function, as may be any
other validly registered type ID, but randomized type IDs should
not be passed in and will most likely lead to a crash.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt;* g_type_name (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_qname</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-qname</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Get the corresponding quark of the type IDs name.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;GQuark&lt;/a&gt; g_type_qname (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_from_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-from-name</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Lookup the type ID from a given type name, returning 0 if no type
has been registered under this name (this is the preferred method
to find out by name whether a specific type has been registered
yet).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; g_type_from_name (
    const &lt;a href= &gt;gchar&lt;/a&gt; *name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_parent</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-parent</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Return the direct parent type of the passed in type.  If the passed
in type has no parent, i.e. is a fundamental type, 0 is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type_parent (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_depth</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-depth</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the length of the ancestry of the passed in type. This
includes the type itself, so that e.g. a fundamental type has depth 1.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; g_type_depth (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_next_base</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-next-base</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Given a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;leaf_type&lt;/code&gt;&lt;/em&gt; and a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;root_type&lt;/code&gt;&lt;/em&gt; which is contained in its
anchestry, return the type that &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;root_type&lt;/code&gt;&lt;/em&gt; is the immediate parent
of.  In other words, this function determines the type that is
derived directly from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;root_type&lt;/code&gt;&lt;/em&gt; which is also a base class of
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;leaf_type&lt;/code&gt;&lt;/em&gt;.  Given a root type and a leaf type, this function can
be used to determine the types and order in which the leaf type is
descended from the root type.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type_next_base (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; leaf_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; root_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_is_a</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-is-a</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;is_a_type&lt;/code&gt;&lt;/em&gt; is a derivable type, check whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is a
descendant of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;is_a_type&lt;/code&gt;&lt;/em&gt;.  If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;is_a_type&lt;/code&gt;&lt;/em&gt; is an interface, check
whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; conforms to it.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_type_is_a (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; is_a_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_class_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-class-ref</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Increments the reference count of the class structure belonging to
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;. This function will demand-create the class if it doesn't
exist already.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_type_class_ref (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_class_peek</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-class-peek</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">This function is essentially the same as &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-class-ref&quot; title=&quot;g_type_class_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_class_ref()&lt;/code&gt;&lt;/a&gt;, except that
the classes reference count isn't incremented. As a consequence, this function
may return &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#NULL:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; if the class of the type passed in does not currently
exist (hasn't been referenced before).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_type_class_peek (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_class_peek_static</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-class-peek-static</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A more efficient version of &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-class-peek&quot; title=&quot;g_type_class_peek ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_class_peek()&lt;/code&gt;&lt;/a&gt; which works only for
static types.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_type_class_peek_static (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_class_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-class-unref</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Decrements the reference count of the class structure being passed in.
Once the last reference count of a class has been released, classes
may be finalized by the type system, so further dereferencing of a
class pointer after &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-class-unref&quot; title=&quot;g_type_class_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_class_unref()&lt;/code&gt;&lt;/a&gt; are invalid.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_class_unref (
    &lt;a href= &gt;gpointer&lt;/a&gt; g_class);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_class_peek_parent</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-class-peek-parent</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">This is a convenience function often needed in class initializers.
It returns the class structure of the immediate parent type of the
class passed in.  Since derived classes hold a reference count on
their parent classes as long as they are instantiated, the returned
class will always exist. This function is essentially equivalent
to:</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; g_type_class_peek_parent (
    &lt;a href= &gt;gpointer&lt;/a&gt; g_class);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_class_add_private</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-class-add-private</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Registers a private structure for an instantiatable type;
when an object is allocated, the private structures for
the type and all of its parent types are allocated
sequentially in the same memory block as the public
structures. This function should be called in the
type's &lt;a class=&quot;link&quot; href=&quot;gtype-instantiable-classed.html#class-init&quot;&gt;&lt;code class=&quot;function&quot;&gt;class_init()&lt;/code&gt;&lt;/a&gt; function. The private structure can
be retrieved using the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INSTANCE-GET-PRIVATE:CAPS&quot; title=&quot;G_TYPE_INSTANCE_GET_PRIVATE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_TYPE_INSTANCE_GET_PRIVATE()&lt;/code&gt;&lt;/a&gt; macro.
The following example shows attaching a private structure
&lt;span class=&quot;structname&quot;&gt;MyObjectPrivate&lt;/span&gt; to an object
&lt;span class=&quot;structname&quot;&gt;MyObject&lt;/span&gt; defined in the standard GObject
fashion.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_class_add_private (
    &lt;a href= &gt;gpointer&lt;/a&gt; g_class,
    gsize private_size);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_interface_peek</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-interface-peek</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInterface&quot; title=&quot;GTypeInterface&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInterface&lt;/span&gt;&lt;/a&gt; structure of an interface to which the
passed in class conforms.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; g_type_interface_peek (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; instance_class,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; iface_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_interface_peek_parent</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-interface-peek-parent</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the corresponding &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInterface&quot; title=&quot;GTypeInterface&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInterface&lt;/span&gt;&lt;/a&gt; structure of the parent type
of the instance type to which &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_iface&lt;/code&gt;&lt;/em&gt; belongs. This is useful when
deriving the implementation of an interface from the parent type and
then possibly overriding some methods.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; g_type_interface_peek_parent (
    &lt;a href= &gt;gpointer&lt;/a&gt; g_iface);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_default_interface_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-default-interface-ref</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Increments the reference count for the interface type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_type&lt;/code&gt;&lt;/em&gt;,
and returns the default interface vtable for the type.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_type_default_interface_ref (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; g_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_default_interface_peek</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-default-interface-peek</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">If the interface type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_type&lt;/code&gt;&lt;/em&gt; is currently in use, returns its
default interface vtable.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_type_default_interface_peek (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; g_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_default_interface_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-default-interface-unref</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Decrements the reference count for the type corresponding to the
interface default vtable &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_iface&lt;/code&gt;&lt;/em&gt;. If the type is dynamic, then
when no one is using the interface and all references have
been released, the finalize function for the interface's default
vtable (the &lt;em class=&quot;structfield&quot;&gt;&lt;code&gt;class_finalize&lt;/code&gt;&lt;/em&gt; member of
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInfo&quot; title=&quot;GTypeInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInfo&lt;/span&gt;&lt;/a&gt;) will be called.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_default_interface_unref (
    &lt;a href= &gt;gpointer&lt;/a&gt; g_iface);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_children</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-children</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Return a newly allocated and 0-terminated array of type IDs, listing the
child types of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;. The return value has to be &lt;a
href=&quot;./../glib/glib/glib-Memory-Allocation.html#g-free&quot;
&gt;&lt;code class=&quot;function&quot;&gt;g_free()&lt;/code&gt;&lt;/a&gt;ed after use.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt;* g_type_children (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; type,
    &lt;a href= &gt;guint&lt;/a&gt; *n_children);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_interfaces</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-interfaces</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Return a newly allocated and 0-terminated array of type IDs, listing the
interface types that &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; conforms to. The return value has to be
&lt;a
href=&quot;./../glib/glib/glib-Memory-Allocation.html#g-free&quot;
&gt;&lt;code class=&quot;function&quot;&gt;g_free()&lt;/code&gt;&lt;/a&gt;ed after use.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt;* g_type_interfaces (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; type,
    &lt;a href= &gt;guint&lt;/a&gt; *n_interfaces);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_interface_prerequisites</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-interface-prerequisites</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the prerequisites of an interfaces type.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt;* g_type_interface_prerequisites (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; interface_type,
    &lt;a href= &gt;guint&lt;/a&gt; *n_prerequisites);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.2</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_set_qdata</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-set-qdata</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Attaches arbitrary data to a type.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_set_qdata (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;&gt;GType&lt;/a&gt; type,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;GQuark&lt;/a&gt; quark,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_get_qdata</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-get-qdata</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Obtains data which has previously been attached to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;
with &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-set-qdata&quot; title=&quot;g_type_set_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_set_qdata()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_type_get_qdata (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;&gt;GType&lt;/a&gt; type,
    &lt;a href= &gt;GQuark&lt;/a&gt; quark);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_query</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-query</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Queries the type system for information about a specific type.
This function will fill in a user-provided structure to hold
type-specific information. If an invalid &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; is passed in, the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; member of the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeQuery&quot; title=&quot;GTypeQuery&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeQuery&lt;/span&gt;&lt;/a&gt; is 0. All members filled into the
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeQuery&quot; title=&quot;GTypeQuery&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeQuery&lt;/span&gt;&lt;/a&gt; structure should be considered constant and have to be
left untouched.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_query (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; type,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeQuery&quot; href=&quot;GTypeQuery&quot; title=&gt;GTypeQuery&lt;/a&gt; *query);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeQuery</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeQuery</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A structure holding information for a specific type. It is
filled in by the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-query&quot; title=&quot;g_type_query ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_query()&lt;/code&gt;&lt;/a&gt; function.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GType type;
    const gchar *type_name;
    guint class_size;
    guint instance_size;
} GTypeQuery;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GBaseInitFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GBaseInitFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A callback function used by the type system to do base initialization
of the class structures of derived types. It is called as part of the
initialization process of all derived classes and should reallocate
or reset all dynamic class members copied over from the parent class.
For example, class members (such as strings) that are not sufficiently
handled by a plain memory copy of the parent class into the derived class
have to be altered. See &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GClassInitFunc&quot; title=&quot;GClassInitFunc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;GClassInitFunc()&lt;/code&gt;&lt;/a&gt; for a discussion of the class
intialization process.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GBaseInitFunc) (
    &lt;a href= &gt;gpointer&lt;/a&gt; g_class);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GBaseFinalizeFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GBaseFinalizeFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A callback function used by the type system to finalize those portions
of a derived types class structure that were setup from the corresponding
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GBaseInitFunc&quot; title=&quot;GBaseInitFunc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;GBaseInitFunc()&lt;/code&gt;&lt;/a&gt; function. Class finalization basically works the inverse
way in which class intialization is performed.
See &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GClassInitFunc&quot; title=&quot;GClassInitFunc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;GClassInitFunc()&lt;/code&gt;&lt;/a&gt; for a discussion of the class intialization process.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GBaseFinalizeFunc) (
    &lt;a href= &gt;gpointer&lt;/a&gt; g_class);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GClassInitFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GClassInitFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A callback function used by the type system to initialize the class
of a specific type. This function should initialize all static class
members.
The initialization process of a class involves:</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GClassInitFunc) (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; g_class,
    &lt;a href= &gt;gpointer&lt;/a&gt; class_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GClassFinalizeFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GClassFinalizeFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A callback function used by the type system to finalize a class.
This function is rarely needed, as dynamically allocated class resources
should be handled by &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GBaseInitFunc&quot; title=&quot;GBaseInitFunc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;GBaseInitFunc()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GBaseFinalizeFunc&quot; title=&quot;GBaseFinalizeFunc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;GBaseFinalizeFunc()&lt;/code&gt;&lt;/a&gt;.
Also, specification of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GClassFinalizeFunc&quot; title=&quot;GClassFinalizeFunc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;GClassFinalizeFunc()&lt;/code&gt;&lt;/a&gt; in the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInfo&quot; title=&quot;GTypeInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInfo&lt;/span&gt;&lt;/a&gt;
structure of a static type is invalid, because classes of static types
will never be finalized (they are artificially kept alive when their
reference count drops to zero).</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GClassFinalizeFunc) (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; g_class,
    &lt;a href= &gt;gpointer&lt;/a&gt; class_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GInstanceInitFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GInstanceInitFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A callback function used by the type system to initialize a new
instance of a type. This function initializes all instance members and
allocates any resources required by it.
Initialization of a derived instance involves calling all its parent
types instance initializers, so the class member of the instance
is altered during its initialization to always point to the class that
belongs to the type the current initializer was introduced for.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GInstanceInitFunc) (
    &lt;a class=&quot;gobject-Type-Information.html#GTypeInstance&quot; href=&quot;GTypeInstance&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GTypeInstance&lt;/a&gt; *instance,
    &lt;a href= &gt;gpointer&lt;/a&gt; g_class);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GInterfaceInitFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GInterfaceInitFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A callback function used by the type system to initialize a new
interface.  This function should initialize all internal data and
allocate any resources required by the interface.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GInterfaceInitFunc) (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; g_iface,
    &lt;a href= &gt;gpointer&lt;/a&gt; iface_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GInterfaceFinalizeFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GInterfaceFinalizeFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A callback function used by the type system to finalize an interface.
This function should destroy any internal data and release any resources
allocated by the corresponding &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GInterfaceInitFunc&quot; title=&quot;GInterfaceInitFunc ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;GInterfaceInitFunc()&lt;/code&gt;&lt;/a&gt; function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GInterfaceFinalizeFunc) (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; g_iface,
    &lt;a href= &gt;gpointer&lt;/a&gt; iface_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeClassCacheFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeClassCacheFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A callback function which is called when the reference count of a class 
drops to zero. It may use &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-class-ref&quot; title=&quot;g_type_class_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_class_ref()&lt;/code&gt;&lt;/a&gt; to prevent the class from
being freed. You should not call &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-class-unref&quot; title=&quot;g_type_class_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_class_unref()&lt;/code&gt;&lt;/a&gt; from a 
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeClassCacheFunc&quot; title=&quot;GTypeClassCacheFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeClassCacheFunc&lt;/span&gt;&lt;/a&gt; function to prevent infinite recursion, use 
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-class-unref-uncached&quot; title=&quot;g_type_class_unref_uncached ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_class_unref_uncached()&lt;/code&gt;&lt;/a&gt; instead.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gboolean&lt;/a&gt; (
    *GTypeClassCacheFunc) (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; cache_data,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeClass&quot; href=&quot;GTypeClass&quot; title=&gt;GTypeClass&lt;/a&gt; *g_class);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FLAG_ABSTRACT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeFlags</Anchor>
  <NodeRef refid="139"/>
  <Declaration type="html">&lt;pre&gt;G_TYPE_FLAG_ABSTRACT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTypeFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FLAG_VALUE_ABSTRACT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeFlags</Anchor>
  <NodeRef refid="139"/>
  <Declaration type="html">&lt;pre&gt;G_TYPE_FLAG_VALUE_ABSTRACT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTypeFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeFlags</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Bit masks used to check or determine characteristics of a type.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum  {
    G_TYPE_FLAG_ABSTRACT = (1 &amp;lt;&amp;lt; 4),
    G_TYPE_FLAG_VALUE_ABSTRACT = (1 &amp;lt;&amp;lt; 5) 
} GTypeFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FLAG_CLASSED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeFundamentalFlags</Anchor>
  <NodeRef refid="140"/>
  <Declaration type="html">&lt;pre&gt;G_TYPE_FLAG_CLASSED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTypeFundamentalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FLAG_INSTANTIATABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeFundamentalFlags</Anchor>
  <NodeRef refid="140"/>
  <Declaration type="html">&lt;pre&gt;G_TYPE_FLAG_INSTANTIATABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTypeFundamentalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FLAG_DERIVABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeFundamentalFlags</Anchor>
  <NodeRef refid="140"/>
  <Declaration type="html">&lt;pre&gt;G_TYPE_FLAG_DERIVABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTypeFundamentalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FLAG_DEEP_DERIVABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeFundamentalFlags</Anchor>
  <NodeRef refid="140"/>
  <Declaration type="html">&lt;pre&gt;G_TYPE_FLAG_DEEP_DERIVABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GTypeFundamentalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeFundamentalFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeFundamentalFlags</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Bit masks used to check or determine specific characteristics of a
fundamental type.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum  {
    G_TYPE_FLAG_CLASSED = (1 &amp;lt;&amp;lt; 0),
    G_TYPE_FLAG_INSTANTIATABLE = (1 &amp;lt;&amp;lt; 1),
    G_TYPE_FLAG_DERIVABLE = (1 &amp;lt;&amp;lt; 2),
    G_TYPE_FLAG_DEEP_DERIVABLE = (1 &amp;lt;&amp;lt; 3) 
} GTypeFundamentalFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_register_static</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-register-static</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Registers &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type_name&lt;/code&gt;&lt;/em&gt; as the name of a new static type derived from
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;parent_type&lt;/code&gt;&lt;/em&gt;.  The type system uses the information contained in the
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInfo&quot; title=&quot;GTypeInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInfo&lt;/span&gt;&lt;/a&gt; structure pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;info&lt;/code&gt;&lt;/em&gt; to manage the type and its
instances (if not abstract).  The value of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/em&gt; determines the nature
(e.g. abstract or not) of the type.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type_register_static (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; parent_type,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *type_name,
    const &lt;a class=&quot;gobject-Type-Information.html#GTypeInfo&quot; href=&quot;GTypeInfo&quot; title=&quot;link&quot;&gt;GTypeInfo&lt;/a&gt; *info,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeFlags&quot; href=&quot;enum GTypeFlags&quot; title=&gt;GTypeFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_register_static_simple</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-register-static-simple</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Registers &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type_name&lt;/code&gt;&lt;/em&gt; as the name of a new static type derived from
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;parent_type&lt;/code&gt;&lt;/em&gt;.  The value of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/em&gt; determines the nature (e.g.
abstract or not) of the type. It works by filling a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInfo&quot; title=&quot;GTypeInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInfo&lt;/span&gt;&lt;/a&gt;
struct and calling &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-register-static&quot; title=&quot;g_type_register_static ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_register_static()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type_register_static_simple (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; parent_type,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;gchar&lt;/a&gt; *type_name,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; class_size,
    &lt;a class=&quot;gobject-Type-Information.html#GClassInitFunc&quot; href=&quot;GClassInitFunc ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GClassInitFunc&lt;/a&gt; class_init,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; instance_size,
    &lt;a class=&quot;gobject-Type-Information.html#GInstanceInitFunc&quot; href=&quot;GInstanceInitFunc ()&quot; title=&quot;link&quot;&gt;GInstanceInitFunc&lt;/a&gt; instance_init,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeFlags&quot; href=&quot;enum GTypeFlags&quot; title=&gt;GTypeFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_register_dynamic</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-register-dynamic</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Registers &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type_name&lt;/code&gt;&lt;/em&gt; as the name of a new dynamic type derived from
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;parent_type&lt;/code&gt;&lt;/em&gt;.  The type system uses the information contained in the
&lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html&quot; title=&quot;GTypePlugin&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePlugin&lt;/span&gt;&lt;/a&gt; structure pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/em&gt; to manage the type and its
instances (if not abstract).  The value of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/em&gt; determines the nature
(e.g. abstract or not) of the type.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type_register_dynamic (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; parent_type,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *type_name,
    &lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&quot;link&quot;&gt;GTypePlugin&lt;/a&gt; *plugin,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeFlags&quot; href=&quot;enum GTypeFlags&quot; title=&gt;GTypeFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_register_fundamental</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-register-fundamental</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Registers &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type_id&lt;/code&gt;&lt;/em&gt; as the predefined identifier and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type_name&lt;/code&gt;&lt;/em&gt; as the
name of a fundamental type.  The type system uses the information
contained in the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInfo&quot; title=&quot;GTypeInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInfo&lt;/span&gt;&lt;/a&gt; structure pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;info&lt;/code&gt;&lt;/em&gt; and the
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeFundamentalInfo&quot; title=&quot;GTypeFundamentalInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeFundamentalInfo&lt;/span&gt;&lt;/a&gt; structure pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;finfo&lt;/code&gt;&lt;/em&gt; to manage the
type and its instances.  The value of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/em&gt; determines additional
characteristics of the fundamental type.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type_register_fundamental (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; type_id,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *type_name,
    const &lt;a class=&quot;gobject-Type-Information.html#GTypeInfo&quot; href=&quot;GTypeInfo&quot; title=&quot;link&quot;&gt;GTypeInfo&lt;/a&gt; *info,
    const &lt;a class=&quot;gobject-Type-Information.html#GTypeFundamentalInfo&quot; href=&quot;GTypeFundamentalInfo&quot; title=&quot;link&quot;&gt;GTypeFundamentalInfo&lt;/a&gt; *finfo,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeFlags&quot; href=&quot;enum GTypeFlags&quot; title=&gt;GTypeFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_add_interface_static</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-add-interface-static</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Adds the static &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interface_type&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instantiable_type&lt;/code&gt;&lt;/em&gt;.  The information
contained in the &lt;span class=&quot;type&quot;&gt;GTypeInterfaceInfo&lt;/span&gt; structure pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;info&lt;/code&gt;&lt;/em&gt;
is used to manage the relationship.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_add_interface_static (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; instance_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; interface_type,
    const &lt;a class=&quot;gobject-Type-Information.html#GInterfaceInfo&quot; href=&quot;GInterfaceInfo&quot; title=&gt;GInterfaceInfo&lt;/a&gt; *info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_add_interface_dynamic</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-add-interface-dynamic</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Adds the dynamic &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interface_type&lt;/code&gt;&lt;/em&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instantiable_type&lt;/code&gt;&lt;/em&gt;. The information
contained in the &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html&quot; title=&quot;GTypePlugin&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePlugin&lt;/span&gt;&lt;/a&gt; structure pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/em&gt;
is used to manage the relationship.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_add_interface_dynamic (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; instance_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; interface_type,
    &lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&gt;GTypePlugin&lt;/a&gt; *plugin);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_interface_add_prerequisite</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-interface-add-prerequisite</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Adds &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;prerequisite_type&lt;/code&gt;&lt;/em&gt; to the list of prerequisites of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interface_type&lt;/code&gt;&lt;/em&gt;.
This means that any type implementing &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interface_type&lt;/code&gt;&lt;/em&gt; must also implement
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;prerequisite_type&lt;/code&gt;&lt;/em&gt;. Prerequisites can be thought of as an alternative to
interface derivation (which GType doesn't support). An interface can have
at most one instantiatable prerequisite type.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_interface_add_prerequisite (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; interface_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; prerequisite_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_get_plugin</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-get-plugin</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html&quot; title=&quot;GTypePlugin&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePlugin&lt;/span&gt;&lt;/a&gt; structure for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; or
&lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#NULL:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; does not have a &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html&quot; title=&quot;GTypePlugin&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePlugin&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&quot;link&quot;&gt;GTypePlugin&lt;/a&gt;* g_type_get_plugin (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_interface_get_plugin</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-interface-get-plugin</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html&quot; title=&quot;GTypePlugin&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePlugin&lt;/span&gt;&lt;/a&gt; structure for the dynamic interface
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interface_type&lt;/code&gt;&lt;/em&gt; which has been added to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance_type&lt;/code&gt;&lt;/em&gt;, or &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#NULL:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; if
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interface_type&lt;/code&gt;&lt;/em&gt; has not been added to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance_type&lt;/code&gt;&lt;/em&gt; or does not
have a &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html&quot; title=&quot;GTypePlugin&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePlugin&lt;/span&gt;&lt;/a&gt; structure. See &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-add-interface-dynamic&quot; title=&quot;g_type_add_interface_dynamic ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_add_interface_dynamic()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&quot;link&quot;&gt;GTypePlugin&lt;/a&gt;* g_type_interface_get_plugin (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; instance_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; interface_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_fundamental_next</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-fundamental-next</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the next free fundamental type id which can be used to
register a new fundamental type with &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-register-fundamental&quot; title=&quot;g_type_register_fundamental ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_register_fundamental()&lt;/code&gt;&lt;/a&gt;.
The returned type ID represents the highest currently registered
fundamental type identifier.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; g_type_fundamental_next (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_fundamental</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-fundamental</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Internal function, used to extract the fundamental type ID portion.
use &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FUNDAMENTAL:CAPS&quot; title=&quot;G_TYPE_FUNDAMENTAL()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_TYPE_FUNDAMENTAL()&lt;/code&gt;&lt;/a&gt; instead.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type_fundamental (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_create_instance</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-create-instance</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Creates and initializes an instance of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is valid and
can be instantiated. The type system only performs basic allocation
and structure setups for instances: actual instance creation should
happen through functions supplied by the type's fundamental type
implementation.  So use of &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-create-instance&quot; title=&quot;g_type_create_instance ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_create_instance()&lt;/code&gt;&lt;/a&gt; is reserved for
implementators of fundamental types only. E.g. instances of the
&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt; hierarchy should be created via &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-new&quot; title=&quot;g_object_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_new()&lt;/code&gt;&lt;/a&gt; and
&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;never&lt;/em&gt;&lt;/span&gt; directly through
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-create-instance&quot; title=&quot;g_type_create_instance ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_create_instance()&lt;/code&gt;&lt;/a&gt; which doesn't handle things like singleton
objects or object construction.  Note: Do &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt;
use this function, unless you're implementing a fundamental
type. Also language bindings should &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; use
this function but &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-new&quot; title=&quot;g_object_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_new()&lt;/code&gt;&lt;/a&gt; instead.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GTypeInstance&quot; href=&quot;GTypeInstance&quot; title=&quot;link&quot;&gt;GTypeInstance&lt;/a&gt;* g_type_create_instance (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_free_instance</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-free-instance</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Frees an instance of a type, returning it to the instance pool for
the type, if there is one.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_free_instance (
    &lt;a class=&quot;gobject-Type-Information.html#GTypeInstance&quot; href=&quot;GTypeInstance&quot; title=&gt;GTypeInstance&lt;/a&gt; *instance);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_add_class_cache_func</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-add-class-cache-func</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Adds a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeClassCacheFunc&quot; title=&quot;GTypeClassCacheFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeClassCacheFunc&lt;/span&gt;&lt;/a&gt; to be called before the reference count of a
class goes from one to zero. This can be used to prevent premature class
destruction. All installed &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeClassCacheFunc&quot; title=&quot;GTypeClassCacheFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeClassCacheFunc&lt;/span&gt;&lt;/a&gt; functions will be chained
until one of them returns &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#TRUE:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt;. The functions have to check the class id
passed in to figure whether they actually want to cache the class of this
type, since all classes are routed through the same &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeClassCacheFunc&quot; title=&quot;GTypeClassCacheFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeClassCacheFunc&lt;/span&gt;&lt;/a&gt;
chain.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_add_class_cache_func (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; cache_data,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeClassCacheFunc&quot; href=&quot;GTypeClassCacheFunc ()&quot; title=&gt;GTypeClassCacheFunc&lt;/a&gt; cache_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_remove_class_cache_func</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-remove-class-cache-func</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Removes a previously installed &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeClassCacheFunc&quot; title=&quot;GTypeClassCacheFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeClassCacheFunc&lt;/span&gt;&lt;/a&gt;. The cache
maintained by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cache_func&lt;/code&gt;&lt;/em&gt; has to be empty when calling
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-remove-class-cache-func&quot; title=&quot;g_type_remove_class_cache_func ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_remove_class_cache_func()&lt;/code&gt;&lt;/a&gt; to avoid leaks.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_remove_class_cache_func (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; cache_data,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeClassCacheFunc&quot; href=&quot;GTypeClassCacheFunc ()&quot; title=&gt;GTypeClassCacheFunc&lt;/a&gt; cache_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_class_unref_uncached</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-class-unref-uncached</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A variant of &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-class-unref&quot; title=&quot;g_type_class_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_class_unref()&lt;/code&gt;&lt;/a&gt; for use in &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeClassCacheFunc&quot; title=&quot;GTypeClassCacheFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeClassCacheFunc&lt;/span&gt;&lt;/a&gt;
implementations. It unreferences a class without consulting the chain
of &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeClassCacheFunc&quot; title=&quot;GTypeClassCacheFunc ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeClassCacheFunc&lt;/span&gt;&lt;/a&gt;s, avoiding the recursion which would occur
otherwise.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_class_unref_uncached (
    &lt;a href= &gt;gpointer&lt;/a&gt; g_class);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_add_interface_check</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-add-interface-check</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Adds a function to be called after an interface vtable is
initialized for any class (i.e. after the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;interface_init&lt;/code&gt;&lt;/em&gt; member of
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GInterfaceInfo&quot; title=&quot;GInterfaceInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GInterfaceInfo&lt;/span&gt;&lt;/a&gt; has been called).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_add_interface_check (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; check_data,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeInterfaceCheckFunc&quot; href=&quot;GTypeInterfaceCheckFunc ()&quot; title=&gt;GTypeInterfaceCheckFunc&lt;/a&gt; check_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_remove_interface_check</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-remove-interface-check</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Removes an interface check function added with
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-add-interface-check&quot; title=&quot;g_type_add_interface_check ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_add_interface_check()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_remove_interface_check (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; check_data,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeInterfaceCheckFunc&quot; href=&quot;GTypeInterfaceCheckFunc ()&quot; title=&gt;GTypeInterfaceCheckFunc&lt;/a&gt; check_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeInterfaceCheckFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>GTypeInterfaceCheckFunc</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A callback called after an interface vtable is initialized.
See &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-add-interface-check&quot; title=&quot;g_type_add_interface_check ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_add_interface_check()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GTypeInterfaceCheckFunc) (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; check_data,
    &lt;a href= &gt;gpointer&lt;/a&gt; g_iface);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_value_table_peek</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>g-type-value-table-peek</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Returns the location of the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeValueTable&quot; title=&quot;GTypeValueTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeValueTable&lt;/span&gt;&lt;/a&gt; associated with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;.
&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Note that this function should only be used from source code
that implements or has internal knowledge of the implementation of
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;.&lt;/em&gt;&lt;/span&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GTypeValueTable&quot; href=&quot;GTypeValueTable&quot; title=&quot;link&quot;&gt;GTypeValueTable&lt;/a&gt;* g_type_value_table_peek (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DEFINE_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-DEFINE-TYPE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A convenience macro for type implementations, which declares a 
class initialization function, an instance initialization function (see &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInfo&quot; title=&quot;GTypeInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInfo&lt;/span&gt;&lt;/a&gt; for information about 
these) and a static variable named &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;t_n&lt;/code&gt;&lt;/em&gt;_parent_class pointing to the parent class. Furthermore, it defines 
a *&lt;code class=&quot;function&quot;&gt;_get_type()&lt;/code&gt; function. See &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS&quot; title=&quot;G_DEFINE_TYPE_EXTENDED()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_TYPE_EXTENDED()&lt;/code&gt;&lt;/a&gt; for an example.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DEFINE_TYPE(TN, t_n, T_P) G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, 0, {
})&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DEFINE_TYPE_WITH_CODE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-DEFINE-TYPE-WITH-CODE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A convenience macro for type implementations.  
Similar to &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-TYPE:CAPS&quot; title=&quot;G_DEFINE_TYPE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_TYPE()&lt;/code&gt;&lt;/a&gt;, but allows to insert custom code into the 
*&lt;code class=&quot;function&quot;&gt;_get_type()&lt;/code&gt; function, e.g. interface implementations via &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS&quot; title=&quot;G_IMPLEMENT_INTERFACE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_IMPLEMENT_INTERFACE()&lt;/code&gt;&lt;/a&gt;.
See &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS&quot; title=&quot;G_DEFINE_TYPE_EXTENDED()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_TYPE_EXTENDED()&lt;/code&gt;&lt;/a&gt; for an example.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DEFINE_TYPE_WITH_CODE(TN, t_n, T_P, _C_) _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, 0) {
    _C_;
} _G_DEFINE_TYPE_EXTENDED_END()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DEFINE_ABSTRACT_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-DEFINE-ABSTRACT-TYPE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A convenience macro for type implementations. 
Similar to &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-TYPE:CAPS&quot; title=&quot;G_DEFINE_TYPE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_TYPE()&lt;/code&gt;&lt;/a&gt;, but defines an abstract type. 
See &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS&quot; title=&quot;G_DEFINE_TYPE_EXTENDED()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_TYPE_EXTENDED()&lt;/code&gt;&lt;/a&gt; for an example.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DEFINE_ABSTRACT_TYPE(TN, t_n, T_P) G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT, {
})&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DEFINE_ABSTRACT_TYPE_WITH_CODE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-DEFINE-ABSTRACT-TYPE-WITH-CODE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A convenience macro for type implementations.
Similar to &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS&quot; title=&quot;G_DEFINE_TYPE_WITH_CODE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_TYPE_WITH_CODE()&lt;/code&gt;&lt;/a&gt;, but defines an abstract type and allows to 
insert custom code into the *&lt;code class=&quot;function&quot;&gt;_get_type()&lt;/code&gt; function, e.g. interface implementations 
via &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS&quot; title=&quot;G_IMPLEMENT_INTERFACE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_IMPLEMENT_INTERFACE()&lt;/code&gt;&lt;/a&gt;. See &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS&quot; title=&quot;G_DEFINE_TYPE_EXTENDED()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_TYPE_EXTENDED()&lt;/code&gt;&lt;/a&gt; for an example.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DEFINE_ABSTRACT_TYPE_WITH_CODE(TN, t_n, T_P, _C_) _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT) {
    _C_;
} _G_DEFINE_TYPE_EXTENDED_END()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IMPLEMENT_INTERFACE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-IMPLEMENT-INTERFACE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A convenience macro to ease interface addition in the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;_C_&lt;/code&gt;&lt;/em&gt; section
of &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS&quot; title=&quot;G_DEFINE_TYPE_WITH_CODE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_TYPE_WITH_CODE()&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE-WITH-CODE:CAPS&quot; title=&quot;G_DEFINE_ABSTRACT_TYPE_WITH_CODE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_ABSTRACT_TYPE_WITH_CODE()&lt;/code&gt;&lt;/a&gt;. 
See &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS&quot; title=&quot;G_DEFINE_TYPE_EXTENDED()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_TYPE_EXTENDED()&lt;/code&gt;&lt;/a&gt; for an example.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IMPLEMENT_INTERFACE(TYPE_IFACE, iface_init)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DEFINE_TYPE_EXTENDED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-DEFINE-TYPE-EXTENDED:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The most general convenience macro for type implementations, on which 
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-DEFINE-TYPE:CAPS&quot; title=&quot;G_DEFINE_TYPE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_TYPE()&lt;/code&gt;&lt;/a&gt;, etc are based. </Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DEFINE_TYPE_EXTENDED(TN, t_n, T_P, _f_, _C_) _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, _f_) {
    _C_;
} _G_DEFINE_TYPE_EXTENDED_END()&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_INVALID</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-INVALID:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">An invalid &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; used as error return value in some functions which return
a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_INVALID G_TYPE_MAKE_FUNDAMENTAL (0)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_NONE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-NONE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">A fundamental type which is used as a replacement for the C
&lt;code class=&quot;literal&quot;&gt;void&lt;/code&gt; return type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_NONE G_TYPE_MAKE_FUNDAMENTAL (1)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_INTERFACE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-INTERFACE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type from which all interfaces are derived.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_INTERFACE G_TYPE_MAKE_FUNDAMENTAL (2)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_CHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-CHAR:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;
&gt;&lt;span class=&quot;type&quot;&gt;gchar&lt;/span&gt;&lt;/a&gt;.
The type designated by G_TYPE_CHAR is unconditionally an 8-bit signed integer.
This may or may not be the same type a the C type &quot;gchar&quot;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_CHAR G_TYPE_MAKE_FUNDAMENTAL (3)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_UCHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-UCHAR:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#guchar&quot;
&gt;&lt;span class=&quot;type&quot;&gt;guchar&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_UCHAR G_TYPE_MAKE_FUNDAMENTAL (4)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_BOOLEAN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-BOOLEAN:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot;
&gt;&lt;span class=&quot;type&quot;&gt;gboolean&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_BOOLEAN G_TYPE_MAKE_FUNDAMENTAL (5)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_INT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-INT:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot;
&gt;&lt;span class=&quot;type&quot;&gt;gint&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_INT G_TYPE_MAKE_FUNDAMENTAL (6)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_UINT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-UINT:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;
&gt;&lt;span class=&quot;type&quot;&gt;guint&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_UINT G_TYPE_MAKE_FUNDAMENTAL (7)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_LONG</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-LONG:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#glong&quot;
&gt;&lt;span class=&quot;type&quot;&gt;glong&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_LONG G_TYPE_MAKE_FUNDAMENTAL (8)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_ULONG</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-ULONG:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#gulong&quot;
&gt;&lt;span class=&quot;type&quot;&gt;gulong&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_ULONG G_TYPE_MAKE_FUNDAMENTAL (9)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_INT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-INT64:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;span class=&quot;type&quot;&gt;gint64&lt;/span&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_INT64 G_TYPE_MAKE_FUNDAMENTAL (10)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_UINT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-UINT64:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#guint64&quot;
&gt;&lt;span class=&quot;type&quot;&gt;guint64&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_UINT64 G_TYPE_MAKE_FUNDAMENTAL (11)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_ENUM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-ENUM:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type from which all enumeration types are derived.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_ENUM G_TYPE_MAKE_FUNDAMENTAL (12)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FLAGS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-FLAGS:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type from which all flags types are derived.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_FLAGS G_TYPE_MAKE_FUNDAMENTAL (13)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_FLOAT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-FLOAT:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#gfloat&quot;
&gt;&lt;span class=&quot;type&quot;&gt;gfloat&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_FLOAT G_TYPE_MAKE_FUNDAMENTAL (14)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_DOUBLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-DOUBLE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#gdouble&quot;
&gt;&lt;span class=&quot;type&quot;&gt;gdouble&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_DOUBLE G_TYPE_MAKE_FUNDAMENTAL (15)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_STRING</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-STRING:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to nul-terminated C strings.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_STRING G_TYPE_MAKE_FUNDAMENTAL (16)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_POINTER</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-POINTER:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type corresponding to &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;
&gt;&lt;span class=&quot;type&quot;&gt;gpointer&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_POINTER G_TYPE_MAKE_FUNDAMENTAL (17)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_BOXED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-BOXED:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type from which all boxed types are derived.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_BOXED G_TYPE_MAKE_FUNDAMENTAL (18)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-PARAM:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type from which all &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; types are derived.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM G_TYPE_MAKE_FUNDAMENTAL (19)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_OBJECT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-OBJECT:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The fundamental type for &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_OBJECT G_TYPE_MAKE_FUNDAMENTAL (20)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_GTYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-GTYPE:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">The type for &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_GTYPE (g_gtype_get_type())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_RESERVED_GLIB_FIRST</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-RESERVED-GLIB-FIRST:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">First fundamental type number to create a new fundamental type id with
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS&quot; title=&quot;G_TYPE_MAKE_FUNDAMENTAL()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_TYPE_MAKE_FUNDAMENTAL()&lt;/code&gt;&lt;/a&gt; reserved for GLib.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_RESERVED_GLIB_FIRST (21)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_RESERVED_GLIB_LAST</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-RESERVED-GLIB-LAST:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Last fundamental type number reserved for GLib.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_RESERVED_GLIB_LAST (31)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_RESERVED_BSE_FIRST</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-RESERVED-BSE-FIRST:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">First fundamental type number to create a new fundamental type id with
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS&quot; title=&quot;G_TYPE_MAKE_FUNDAMENTAL()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_TYPE_MAKE_FUNDAMENTAL()&lt;/code&gt;&lt;/a&gt; reserved for BSE.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_RESERVED_BSE_FIRST (32)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_RESERVED_BSE_LAST</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-RESERVED-BSE-LAST:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">Last fundamental type number reserved for BSE.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_RESERVED_BSE_LAST (48)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_RESERVED_USER_FIRST</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Type-Information.html</Path>
  <Anchor>G-TYPE-RESERVED-USER-FIRST:CAPS</Anchor>
  <NodeRef refid="20"/>
  <Abstract type="html">First available fundamental type number to create new fundamental 
type id with &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS&quot; title=&quot;G_TYPE_MAKE_FUNDAMENTAL()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_TYPE_MAKE_FUNDAMENTAL()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_RESERVED_USER_FIRST (49)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypePlugin</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypePlugin.html</Path>
  <Anchor>GTypePlugin-struct</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GTypePlugin&lt;/span&gt; typedef is used as a placeholder 
for objects that implement the &lt;span class=&quot;structname&quot;&gt;GTypePlugin&lt;/span&gt; 
interface.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GTypePlugin GTypePlugin;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypePluginClass</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypePlugin.html</Path>
  <Anchor>GTypePluginClass</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html&quot; title=&quot;GTypePlugin&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePlugin&lt;/span&gt;&lt;/a&gt; interface is used by the type system in order to handle
the lifecycle of dynamically loaded types.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GTypePluginUse use_plugin;
    GTypePluginUnuse unuse_plugin;
    GTypePluginCompleteTypeInfo complete_type_info;
    GTypePluginCompleteInterfaceInfo complete_interface_info;
} GTypePluginClass;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypePluginUse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypePlugin.html</Path>
  <Anchor>GTypePluginUse</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;use_plugin&lt;/code&gt;&lt;/em&gt; function of &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html#GTypePluginClass&quot; title=&quot;GTypePluginClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePluginClass&lt;/span&gt;&lt;/a&gt;, which gets called
to increase the use count of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GTypePluginUse) (
    &lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&gt;GTypePlugin&lt;/a&gt; *plugin);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypePluginUnuse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypePlugin.html</Path>
  <Anchor>GTypePluginUnuse</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;unuse_plugin&lt;/code&gt;&lt;/em&gt; function of &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html#GTypePluginClass&quot; title=&quot;GTypePluginClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePluginClass&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GTypePluginUnuse) (
    &lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&gt;GTypePlugin&lt;/a&gt; *plugin);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypePluginCompleteTypeInfo</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypePlugin.html</Path>
  <Anchor>GTypePluginCompleteTypeInfo</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;complete_type_info&lt;/code&gt;&lt;/em&gt; function of &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html#GTypePluginClass&quot; title=&quot;GTypePluginClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePluginClass&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GTypePluginCompleteTypeInfo) (
    &lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&quot;link&quot;&gt;GTypePlugin&lt;/a&gt; *plugin,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeInfo&quot; href=&quot;GTypeInfo&quot; title=&quot;link&quot;&gt;GTypeInfo&lt;/a&gt; *info,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeValueTable&quot; href=&quot;GTypeValueTable&quot; title=&gt;GTypeValueTable&lt;/a&gt; *value_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypePluginCompleteInterfaceInfo</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypePlugin.html</Path>
  <Anchor>GTypePluginCompleteInterfaceInfo</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">The type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;complete_interface_info&lt;/code&gt;&lt;/em&gt; function of &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html#GTypePluginClass&quot; title=&quot;GTypePluginClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePluginClass&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GTypePluginCompleteInterfaceInfo) (
    &lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&quot;link&quot;&gt;GTypePlugin&lt;/a&gt; *plugin,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; instance_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; interface_type,
    &lt;a class=&quot;gobject-Type-Information.html#GInterfaceInfo&quot; href=&quot;GInterfaceInfo&quot; title=&gt;GInterfaceInfo&lt;/a&gt; *info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_plugin_use</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypePlugin.html</Path>
  <Anchor>g-type-plugin-use</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Calls the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;use_plugin&lt;/code&gt;&lt;/em&gt; function from the &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html#GTypePluginClass&quot; title=&quot;GTypePluginClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePluginClass&lt;/span&gt;&lt;/a&gt; of
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/em&gt;.  There should be no need to use this function outside of
the GObject type system itself.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_plugin_use (
    &lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&gt;GTypePlugin&lt;/a&gt; *plugin);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_plugin_unuse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypePlugin.html</Path>
  <Anchor>g-type-plugin-unuse</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Calls the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;unuse_plugin&lt;/code&gt;&lt;/em&gt; function from the &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html#GTypePluginClass&quot; title=&quot;GTypePluginClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePluginClass&lt;/span&gt;&lt;/a&gt; of
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/em&gt;.  There should be no need to use this function outside of
the GObject type system itself.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_plugin_unuse (
    &lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&gt;GTypePlugin&lt;/a&gt; *plugin);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_plugin_complete_type_info</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypePlugin.html</Path>
  <Anchor>g-type-plugin-complete-type-info</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Calls the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;complete_type_info&lt;/code&gt;&lt;/em&gt; function from the &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html#GTypePluginClass&quot; title=&quot;GTypePluginClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePluginClass&lt;/span&gt;&lt;/a&gt; of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/em&gt;.
There should be no need to use this function outside of the GObject 
type system itself.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_plugin_complete_type_info (
    &lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&quot;link&quot;&gt;GTypePlugin&lt;/a&gt; *plugin,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeInfo&quot; href=&quot;GTypeInfo&quot; title=&quot;link&quot;&gt;GTypeInfo&lt;/a&gt; *info,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeValueTable&quot; href=&quot;GTypeValueTable&quot; title=&gt;GTypeValueTable&lt;/a&gt; *value_table);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_plugin_complete_interface_info</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypePlugin.html</Path>
  <Anchor>g-type-plugin-complete-interface-info</Anchor>
  <NodeRef refid="21"/>
  <Abstract type="html">Calls the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;complete_interface_info&lt;/code&gt;&lt;/em&gt; function from the
&lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html#GTypePluginClass&quot; title=&quot;GTypePluginClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePluginClass&lt;/span&gt;&lt;/a&gt; of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/em&gt;. There should be no need to use this
function outside of the GObject type system itself.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_plugin_complete_interface_info (
    &lt;a class=&quot;GTypePlugin.html&quot; href=&quot;GTypePlugin&quot; title=&quot;link&quot;&gt;GTypePlugin&lt;/a&gt; *plugin,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; instance_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; interface_type,
    &lt;a class=&quot;gobject-Type-Information.html#GInterfaceInfo&quot; href=&quot;GInterfaceInfo&quot; title=&gt;GInterfaceInfo&lt;/a&gt; *info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeModule</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>GTypeModule-struct</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">The members of the &lt;span class=&quot;structname&quot;&gt;GTypeModule&lt;/span&gt; structure should not 
be accessed directly, except for the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt; field.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gchar *name;
} GTypeModule;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeModuleClass</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>GTypeModuleClass</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">In order to implement dynamic loading of types based on &lt;a class=&quot;link&quot; href=&quot;GTypeModule.html&quot; title=&quot;GTypeModule&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeModule&lt;/span&gt;&lt;/a&gt;, 
the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;unload&lt;/code&gt;&lt;/em&gt; functions in &lt;a class=&quot;link&quot; href=&quot;GTypeModule.html#GTypeModuleClass&quot; title=&quot;GTypeModuleClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeModuleClass&lt;/span&gt;&lt;/a&gt; must be implemented.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GObjectClass parent_class;
    gboolean (* load) (GTypeModule *module);
    void (* unload) (GTypeModule *module);
} GTypeModuleClass;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_module_use</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>g-type-module-use</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Increases the use count of a &lt;a class=&quot;link&quot; href=&quot;GTypeModule.html&quot; title=&quot;GTypeModule&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeModule&lt;/span&gt;&lt;/a&gt; by one. If the
use count was zero before, the plugin will be loaded.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_type_module_use (
    &lt;a class=&quot;GTypeModule.html&quot; href=&quot;GTypeModule&quot; title=&gt;GTypeModule&lt;/a&gt; *module);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_module_unuse</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>g-type-module-unuse</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Decreases the use count of a &lt;a class=&quot;link&quot; href=&quot;GTypeModule.html&quot; title=&quot;GTypeModule&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeModule&lt;/span&gt;&lt;/a&gt; by one. If the
result is zero, the module will be unloaded. (However, the
&lt;a class=&quot;link&quot; href=&quot;GTypeModule.html&quot; title=&quot;GTypeModule&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeModule&lt;/span&gt;&lt;/a&gt; will not be freed, and types associated with the
&lt;a class=&quot;link&quot; href=&quot;GTypeModule.html&quot; title=&quot;GTypeModule&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeModule&lt;/span&gt;&lt;/a&gt; are not unregistered. Once a &lt;a class=&quot;link&quot; href=&quot;GTypeModule.html&quot; title=&quot;GTypeModule&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeModule&lt;/span&gt;&lt;/a&gt; is
initialized, it must exist forever.)</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_module_unuse (
    &lt;a class=&quot;GTypeModule.html&quot; href=&quot;GTypeModule&quot; title=&gt;GTypeModule&lt;/a&gt; *module);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_module_set_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>g-type-module-set-name</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Sets the name for a &lt;a class=&quot;link&quot; href=&quot;GTypeModule.html&quot; title=&quot;GTypeModule&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeModule&lt;/span&gt;&lt;/a&gt;</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_module_set_name (
    &lt;a class=&quot;GTypeModule.html&quot; href=&quot;GTypeModule&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GTypeModule&lt;/a&gt; *module,
    const &lt;a href= &gt;gchar&lt;/a&gt; *name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_module_register_type</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>g-type-module-register-type</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Looks up or registers a type that is implemented with a particular
type plugin. If a type with name &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type_name&lt;/code&gt;&lt;/em&gt; was previously registered,
the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; identifier for the type is returned, otherwise the type
is newly registered, and the resulting &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; identifier returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type_module_register_type (
    &lt;a class=&quot;GTypeModule.html&quot; href=&quot;GTypeModule&quot; title=&quot;link&quot;&gt;GTypeModule&lt;/a&gt; *module,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; parent_type,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *type_name,
    const &lt;a class=&quot;gobject-Type-Information.html#GTypeInfo&quot; href=&quot;GTypeInfo&quot; title=&quot;link&quot;&gt;GTypeInfo&lt;/a&gt; *type_info,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeFlags&quot; href=&quot;enum GTypeFlags&quot; title=&gt;GTypeFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_module_add_interface</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>g-type-module-add-interface</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Registers an additional interface for a type, whose interface lives
in the given type plugin. If the interface was already registered
for the type in this plugin, nothing will be done.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_type_module_add_interface (
    &lt;a class=&quot;GTypeModule.html&quot; href=&quot;GTypeModule&quot; title=&quot;link&quot;&gt;GTypeModule&lt;/a&gt; *module,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; instance_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; interface_type,
    const &lt;a class=&quot;gobject-Type-Information.html#GInterfaceInfo&quot; href=&quot;GInterfaceInfo&quot; title=&gt;GInterfaceInfo&lt;/a&gt; *interface_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_module_register_enum</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>g-type-module-register-enum</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Looks up or registers an enumeration that is implemented with a particular
type plugin. If a type with name &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type_name&lt;/code&gt;&lt;/em&gt; was previously registered,
the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; identifier for the type is returned, otherwise the type
is newly registered, and the resulting &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; identifier returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type_module_register_enum (
    &lt;a class=&quot;GTypeModule.html&quot; href=&quot;GTypeModule&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GTypeModule&lt;/a&gt; *module,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumValue&quot; href=&quot;GEnumValue&quot; title=&gt;GEnumValue&lt;/a&gt; *const_static_values);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_type_module_register_flags</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>g-type-module-register-flags</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">Looks up or registers a flags type that is implemented with a particular
type plugin. If a type with name &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type_name&lt;/code&gt;&lt;/em&gt; was previously registered,
the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; identifier for the type is returned, otherwise the type
is newly registered, and the resulting &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; identifier returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_type_module_register_flags (
    &lt;a class=&quot;GTypeModule.html&quot; href=&quot;GTypeModule&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GTypeModule&lt;/a&gt; *module,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsValue&quot; href=&quot;GFlagsValue&quot; title=&gt;GFlagsValue&lt;/a&gt; *const_static_values);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.6</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DEFINE_DYNAMIC_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>G-DEFINE-DYNAMIC-TYPE:CAPS</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">A convenience macro for dynamic type implementations, which declares a
class initialization function, an instance initialization function (see 
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInfo&quot; title=&quot;GTypeInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInfo&lt;/span&gt;&lt;/a&gt; for information about these) and a static variable named 
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;t_n&lt;/code&gt;&lt;/em&gt;_parent_class pointing to the parent class. Furthermore, 
it defines a &lt;code class=&quot;function&quot;&gt;*&lt;code class=&quot;function&quot;&gt;_get_type()&lt;/code&gt;&lt;/code&gt; and a static 
&lt;code class=&quot;function&quot;&gt;*&lt;code class=&quot;function&quot;&gt;_register_type()&lt;/code&gt;&lt;/code&gt; function for use in your
&lt;code class=&quot;function&quot;&gt;&lt;code class=&quot;function&quot;&gt;module_init()&lt;/code&gt;&lt;/code&gt;.
See &lt;a class=&quot;link&quot; href=&quot;GTypeModule.html#G-DEFINE-DYNAMIC-TYPE-EXTENDED:CAPS&quot; title=&quot;G_DEFINE_DYNAMIC_TYPE_EXTENDED()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_DYNAMIC_TYPE_EXTENDED()&lt;/code&gt;&lt;/a&gt; for an example.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DEFINE_DYNAMIC_TYPE(TN, t_n, T_P) G_DEFINE_DYNAMIC_TYPE_EXTENDED (TN, t_n, T_P, 0, {
})&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_DEFINE_DYNAMIC_TYPE_EXTENDED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>GTypeModule.html</Path>
  <Anchor>G-DEFINE-DYNAMIC-TYPE-EXTENDED:CAPS</Anchor>
  <NodeRef refid="22"/>
  <Abstract type="html">A more general version of &lt;a class=&quot;link&quot; href=&quot;GTypeModule.html#G-DEFINE-DYNAMIC-TYPE:CAPS&quot; title=&quot;G_DEFINE_DYNAMIC_TYPE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_DEFINE_DYNAMIC_TYPE()&lt;/code&gt;&lt;/a&gt; which
allows to specify &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeFlags&quot; title=&quot;enum GTypeFlags&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeFlags&lt;/span&gt;&lt;/a&gt; and custom code.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_DEFINE_DYNAMIC_TYPE_EXTENDED(TypeName, type_name, TYPE_PARENT, flags, CODE)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GObject</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GObject-struct</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">All the fields in the &lt;span class=&quot;structname&quot;&gt;GObject&lt;/span&gt; structure are private 
to the &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt; implementation and should never be accessed directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GObject GObject;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GObjectClass</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GObjectClass</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">The class structure for the &lt;span class=&quot;structname&quot;&gt;GObject&lt;/span&gt; type.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GTypeClass g_type_class;
    GObject* (*constructor) (GType type, guint n_construct_properties, GObjectConstructParam *construct_properties);
    void (*set_property) (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
    void (*get_property) (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);
    void (*dispose) (GObject *object);
    void (*finalize) (GObject *object);
    void (*dispatch_properties_changed) (GObject *object, guint n_pspecs, GParamSpec **pspecs);
    void (*notify) (GObject *object, GParamSpec *pspec);
    void (*constructed) (GObject *object);
} GObjectClass;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GObjectConstructParam</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GObjectConstructParam</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GObjectConstructParam&lt;/span&gt; struct is an auxiliary 
structure used to hand &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;/&lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; pairs to the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;constructor&lt;/code&gt;&lt;/em&gt; of
a &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; title=&quot;GObjectClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObjectClass&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec *pspec;
    GValue *value;
} GObjectConstructParam;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GObjectGetPropertyFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GObjectGetPropertyFunc</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">The type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;get_property&lt;/code&gt;&lt;/em&gt; function of &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; title=&quot;GObjectClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObjectClass&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GObjectGetPropertyFunc) (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; property_id,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GObjectSetPropertyFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GObjectSetPropertyFunc</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">The type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;set_property&lt;/code&gt;&lt;/em&gt; function of &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; title=&quot;GObjectClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObjectClass&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GObjectSetPropertyFunc) (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; property_id,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GObjectFinalizeFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GObjectFinalizeFunc</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">The type of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;finalize&lt;/code&gt;&lt;/em&gt; function of &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; title=&quot;GObjectClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObjectClass&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GObjectFinalizeFunc) (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&gt;GObject&lt;/a&gt; *object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_OBJECT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-TYPE-IS-OBJECT:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Check if the passed in type id is a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-OBJECT:CAPS&quot; title=&quot;G_TYPE_OBJECT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_OBJECT&lt;/code&gt;&lt;/a&gt; or derived from it.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_OBJECT(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_OBJECT)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OBJECT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-OBJECT:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Casts a &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt; or derived pointer into a (GObject*) pointer.
Depending on the current debugging level, this function may invoke
certain runtime checks to identify invalid casts.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OBJECT(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), G_TYPE_OBJECT, GObject))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_OBJECT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-IS-OBJECT:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Checks whether a valid &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeInstance&quot; title=&quot;GTypeInstance&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeInstance&lt;/span&gt;&lt;/a&gt; pointer is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-OBJECT:CAPS&quot; title=&quot;G_TYPE_OBJECT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_OBJECT&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_OBJECT(object) (G_TYPE_CHECK_INSTANCE_TYPE ((object), G_TYPE_OBJECT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OBJECT_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-OBJECT-CLASS:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Casts a derived &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; title=&quot;GObjectClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObjectClass&lt;/span&gt;&lt;/a&gt; structure into a &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; title=&quot;GObjectClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObjectClass&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OBJECT_CLASS(class) (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_OBJECT, GObjectClass))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_OBJECT_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-IS-OBJECT-CLASS:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/em&gt; &quot;is a&quot; valid &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; title=&quot;GObjectClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObjectClass&lt;/span&gt;&lt;/a&gt; structure of type
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-OBJECT:CAPS&quot; title=&quot;G_TYPE_OBJECT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_OBJECT&lt;/code&gt;&lt;/a&gt; or derived.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_OBJECT_CLASS(class) (G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_OBJECT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OBJECT_GET_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-OBJECT-GET-CLASS:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Get the class structure associated to a &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt; instance.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OBJECT_GET_CLASS(object) (G_TYPE_INSTANCE_GET_CLASS ((object), G_TYPE_OBJECT, GObjectClass))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OBJECT_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-OBJECT-TYPE:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Get the type id of an object.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OBJECT_TYPE(object) (G_TYPE_FROM_INSTANCE (object))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OBJECT_TYPE_NAME</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-OBJECT-TYPE-NAME:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Get the name of an object's type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OBJECT_TYPE_NAME(object) (g_type_name (G_OBJECT_TYPE (object)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OBJECT_CLASS_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-OBJECT-CLASS-TYPE:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Get the type id of a class structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OBJECT_CLASS_TYPE(class) (G_TYPE_FROM_CLASS (class))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OBJECT_CLASS_NAME</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-OBJECT-CLASS-NAME:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Return the name of a class structure's type.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OBJECT_CLASS_NAME(class) (g_type_name (G_OBJECT_CLASS_TYPE (class)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_class_install_property</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-class-install-property</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Installs a new property. This is usually done in the class initializer.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_class_install_property (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; href=&quot;GObjectClass&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GObjectClass&lt;/a&gt; *oclass,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; property_id,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_class_find_property</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-class-find-property</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Looks up the &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; for a property of a class.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt;* g_object_class_find_property (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; href=&quot;GObjectClass&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GObjectClass&lt;/a&gt; *oclass,
    const &lt;a href= &gt;gchar&lt;/a&gt; *property_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_class_list_properties</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-class-list-properties</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Get an array of &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;* for all properties of a class.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt;** g_object_class_list_properties (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; href=&quot;GObjectClass&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GObjectClass&lt;/a&gt; *oclass,
    &lt;a href= &gt;guint&lt;/a&gt; *n_properties);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_class_override_property</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-class-override-property</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Registers &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;property_id&lt;/code&gt;&lt;/em&gt; as referring to a property with the
name &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt; in a parent class or in an interface implemented
by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;oclass&lt;/code&gt;&lt;/em&gt;. This allows this class to &lt;em class=&quot;firstterm&quot;&gt;override&lt;/em&gt;
a property implementation in a parent class or to provide
the implementation of a property from an interface.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_class_override_property (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObjectClass&quot; href=&quot;GObjectClass&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GObjectClass&lt;/a&gt; *oclass,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;guint&lt;/a&gt; property_id,
    const &lt;a href= &gt;gchar&lt;/a&gt; *name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_interface_install_property</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-interface-install-property</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Add a property to an interface; this is only useful for interfaces
that are added to GObject-derived types. Adding a property to an
interface forces all objects classes with that interface to have a
compatible property. The compatible property could be a newly
created &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;, but normally
&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-class-override-property&quot; title=&quot;g_object_class_override_property ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_class_override_property()&lt;/code&gt;&lt;/a&gt; will be used so that the object
class only needs to provide an implementation and inherits the
property description, default value, bounds, and so forth from the
interface property.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_interface_install_property (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_iface,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_interface_find_property</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-interface-find-property</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Find the &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; with the given name for an
interface. Generally, the interface vtable passed in as &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_iface&lt;/code&gt;&lt;/em&gt;
will be the default vtable from &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-default-interface-ref&quot; title=&quot;g_type_default_interface_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_default_interface_ref()&lt;/code&gt;&lt;/a&gt;, or,
if you know the interface has already been loaded,
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-default-interface-peek&quot; title=&quot;g_type_default_interface_peek ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_default_interface_peek()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GParamSpec&lt;/a&gt;* g_object_interface_find_property (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gpointer&lt;/a&gt; g_iface,
    const &lt;a href= &gt;gchar&lt;/a&gt; *property_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_interface_list_properties</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-interface-list-properties</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Lists the properties of an interface.Generally, the interface
vtable passed in as &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_iface&lt;/code&gt;&lt;/em&gt; will be the default vtable from
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-default-interface-ref&quot; title=&quot;g_type_default_interface_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_default_interface_ref()&lt;/code&gt;&lt;/a&gt;, or, if you know the interface has
already been loaded, &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#g-type-default-interface-peek&quot; title=&quot;g_type_default_interface_peek ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_type_default_interface_peek()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GParamSpec&lt;/a&gt;** g_object_interface_list_properties (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;gpointer&lt;/a&gt; g_iface,
    &lt;a href= &gt;guint&lt;/a&gt; *n_properties_p);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-new</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Creates a new instance of a &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt; subtype and sets its properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_object_new (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; object_type,
    const &lt;a href= &gt;gchar&lt;/a&gt; *first_property_name,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_newv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-newv</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Creates a new instance of a &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt; subtype and sets its properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_object_newv (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; object_type,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_parameters,
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GParameter&quot; href=&quot;GParameter&quot; title=&gt;GParameter&lt;/a&gt; *parameters);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParameter</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GParameter</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">The &lt;span class=&quot;structname&quot;&gt;GParameter&lt;/span&gt; struct is an auxiliary structure used
to hand parameter name/value pairs to &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-newv&quot; title=&quot;g_object_newv ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_newv()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    const gchar *name;
    GValue value;
} GParameter;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-ref</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Increases the reference count of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; g_object_ref (
    &lt;a href= &gt;gpointer&lt;/a&gt; object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-unref</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Decreases the reference count of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt;. When its reference count
drops to 0, the object is finalized (i.e. its memory is freed).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_unref (
    &lt;a href= &gt;gpointer&lt;/a&gt; object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_ref_sink</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-ref-sink</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Increase the reference count of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt;, and possibly remove the
&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#floating-ref&quot;&gt;floating&lt;/a&gt; reference, if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt;
has a floating reference.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; g_object_ref_sink (
    &lt;a href= &gt;gpointer&lt;/a&gt; object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GInitiallyUnowned</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GInitiallyUnowned</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">All the fields in the &lt;span class=&quot;structname&quot;&gt;GInitiallyUnowned&lt;/span&gt; structure 
are private to the &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GInitiallyUnowned&quot; title=&quot;GInitiallyUnowned&quot;&gt;&lt;span class=&quot;type&quot;&gt;GInitiallyUnowned&lt;/span&gt;&lt;/a&gt; implementation and should never be 
accessed directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GObject GInitiallyUnowned;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GInitiallyUnownedClass</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GInitiallyUnownedClass</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">The class structure for the &lt;span class=&quot;structname&quot;&gt;GInitiallyUnowned&lt;/span&gt; type.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GObjectClass GInitiallyUnownedClass;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_INITIALLY_UNOWNED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-TYPE-INITIALLY-UNOWNED:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">The type for &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GInitiallyUnowned&quot; title=&quot;GInitiallyUnowned&quot;&gt;&lt;span class=&quot;type&quot;&gt;GInitiallyUnowned&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_INITIALLY_UNOWNED (g_initially_unowned_get_type())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_is_floating</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-is-floating</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Checks wether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; has a &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#floating-ref&quot;&gt;floating&lt;/a&gt;
reference.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gboolean&lt;/a&gt; g_object_is_floating (
    &lt;a href= &gt;gpointer&lt;/a&gt; object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_force_floating</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-force-floating</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">This function is intended for &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt; implementations to re-enforce a
&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#floating-ref&quot;&gt;floating&lt;/a&gt; object reference.
Doing this is seldomly required, all
&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GInitiallyUnowned&quot; title=&quot;GInitiallyUnowned&quot;&gt;&lt;span class=&quot;type&quot;&gt;GInitiallyUnowned&lt;/span&gt;&lt;/a&gt;s are created with a floating reference which
usually just needs to be sunken by calling &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-ref-sink&quot; title=&quot;g_object_ref_sink ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_ref_sink()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_force_floating (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&gt;GObject&lt;/a&gt; *object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GWeakNotify</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GWeakNotify</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GWeakNotify&quot; title=&quot;GWeakNotify ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GWeakNotify&lt;/span&gt;&lt;/a&gt; function can be added to an object as a callback that gets
triggered when the object is finalized. Since the object is already being
finalized when the &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GWeakNotify&quot; title=&quot;GWeakNotify ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GWeakNotify&lt;/span&gt;&lt;/a&gt; is called, there's not much you could do 
with the object, apart from e.g. using its adress as hash-index or the like.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GWeakNotify) (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&gt;GObject&lt;/a&gt; *where_the_object_was);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_weak_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-weak-ref</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Adds a weak reference callback to an object. Weak references are
used for notification when an object is finalized. They are called
&quot;weak references&quot; because they allow you to safely hold a pointer
to an object without calling &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-ref&quot; title=&quot;g_object_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_ref()&lt;/code&gt;&lt;/a&gt; (&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-ref&quot; title=&quot;g_object_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_ref()&lt;/code&gt;&lt;/a&gt; adds a
strong reference, that is, forces the object to stay alive).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_weak_ref (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;link&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GWeakNotify&quot; href=&quot;GWeakNotify ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GWeakNotify&lt;/a&gt; notify,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_weak_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-weak-unref</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Removes a weak reference callback to an object.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_weak_unref (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;link&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GWeakNotify&quot; href=&quot;GWeakNotify ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GWeakNotify&lt;/a&gt; notify,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_add_weak_pointer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-add-weak-pointer</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Adds a weak reference from weak_pointer to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; to indicate that
the pointer located at &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;weak_pointer_location&lt;/code&gt;&lt;/em&gt; is only valid during
the lifetime of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt;. When the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; is finalized,
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;weak_pointer&lt;/code&gt;&lt;/em&gt; will be set to &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#NULL:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_add_weak_pointer (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a href= &gt;gpointer&lt;/a&gt; *weak_pointer_location);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_remove_weak_pointer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-remove-weak-pointer</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Removes a weak reference from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; that was previously added
using &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-add-weak-pointer&quot; title=&quot;g_object_add_weak_pointer ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_add_weak_pointer()&lt;/code&gt;&lt;/a&gt;. The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;weak_pointer_location&lt;/code&gt;&lt;/em&gt; has
to match the one used with &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-add-weak-pointer&quot; title=&quot;g_object_add_weak_pointer ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_add_weak_pointer()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_remove_weak_pointer (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a href= &gt;gpointer&lt;/a&gt; *weak_pointer_location);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GToggleNotify</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>GToggleNotify</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">A callback function used for notification when the state
of a toggle reference changes. See &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-add-toggle-ref&quot; title=&quot;g_object_add_toggle_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_add_toggle_ref()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GToggleNotify) (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a href= &gt;gboolean&lt;/a&gt; is_last_ref);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_add_toggle_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-add-toggle-ref</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Increases the reference count of the object by one and sets a
callback to be called when all other references to the object are
dropped, or when this is already the last reference to the object
and another reference is established.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_add_toggle_ref (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;link&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GToggleNotify&quot; href=&quot;GToggleNotify ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GToggleNotify&lt;/a&gt; notify,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_remove_toggle_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-remove-toggle-ref</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Removes a reference added with &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-add-toggle-ref&quot; title=&quot;g_object_add_toggle_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_add_toggle_ref()&lt;/code&gt;&lt;/a&gt;. The
reference count of the object is decreased by one.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_remove_toggle_ref (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;link&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GToggleNotify&quot; href=&quot;GToggleNotify ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GToggleNotify&lt;/a&gt; notify,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.8</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_connect</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-connect</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">A convenience function to connect multiple signals at once.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; g_object_connect (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gpointer&lt;/a&gt; object,
    const &lt;a href= &gt;gchar&lt;/a&gt; *signal_spec,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_disconnect</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-disconnect</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">A convenience function to disconnect multiple signals at once.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_disconnect (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gpointer&lt;/a&gt; object,
    const &lt;a href= &gt;gchar&lt;/a&gt; *signal_spec,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_set</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-set</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Sets properties on an object.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_set (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gpointer&lt;/a&gt; object,
    const &lt;a href= &gt;gchar&lt;/a&gt; *first_property_name,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_get</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-get</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Gets properties of an object.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_get (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gpointer&lt;/a&gt; object,
    const &lt;a href= &gt;gchar&lt;/a&gt; *first_property_name,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_notify</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-notify</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Emits a &quot;notify&quot; signal for the property &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;property_name&lt;/code&gt;&lt;/em&gt; on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_notify (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GObject&lt;/a&gt; *object,
    const &lt;a href= &gt;gchar&lt;/a&gt; *property_name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_freeze_notify</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-freeze-notify</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Increases the freeze count on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt;. If the freeze count is
non-zero, the emission of &quot;notify&quot; signals on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; is
stopped. The signals are queued until the freeze count is decreased
to zero.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_freeze_notify (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&gt;GObject&lt;/a&gt; *object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_thaw_notify</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-thaw-notify</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Reverts the effect of a previous call to
&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-freeze-notify&quot; title=&quot;g_object_freeze_notify ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_freeze_notify()&lt;/code&gt;&lt;/a&gt;. The freeze count is decreased on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt;
and when it reaches zero, all queued &quot;notify&quot; signals are emitted.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_thaw_notify (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&gt;GObject&lt;/a&gt; *object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_get_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-get-data</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Gets a named field from the objects table of associations (see &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-set-data&quot; title=&quot;g_object_set_data ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_set_data()&lt;/code&gt;&lt;/a&gt;).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_object_get_data (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GObject&lt;/a&gt; *object,
    const &lt;a href= &gt;gchar&lt;/a&gt; *key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_set_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-set-data</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Each object carries around a table of associations from
strings to pointers.  This function lets you set an association.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_set_data (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GObject&lt;/a&gt; *object,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gchar&lt;/a&gt; *key,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_set_data_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-set-data-full</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Like &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-set-data&quot; title=&quot;g_object_set_data ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_set_data()&lt;/code&gt;&lt;/a&gt; except it adds notification
for when the association is destroyed, either by setting it
to a different value or when the object is destroyed.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_set_data_full (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GObject&lt;/a&gt; *object,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gchar&lt;/a&gt; *key,
    &lt;a href=&quot;./../glib/glib/glib-Datasets.html#GDestroyNotify&quot; &gt;gpointer&lt;/a&gt; data,
    &lt;a href= &gt;GDestroyNotify&lt;/a&gt; destroy);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_steal_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-steal-data</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Remove a specified datum from the object's data associations,
without invoking the association's destroy handler.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_object_steal_data (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GObject&lt;/a&gt; *object,
    const &lt;a href= &gt;gchar&lt;/a&gt; *key);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_get_qdata</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-get-qdata</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">This function gets back user data pointers stored via
&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-set-qdata&quot; title=&quot;g_object_set_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_set_qdata()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_object_get_qdata (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a href= &gt;GQuark&lt;/a&gt; quark);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_set_qdata</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-set-qdata</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">This sets an opaque, named pointer on an object.
The name is specified through a &lt;a
href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; (retrived e.g. via
&lt;a
href=&quot;./../glib/glib/glib-Quarks.html#g-quark-from-static-string&quot;
&gt;&lt;code class=&quot;function&quot;&gt;g_quark_from_static_string()&lt;/code&gt;&lt;/a&gt;), and the pointer
can be gotten back from the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; with &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-get-qdata&quot; title=&quot;g_object_get_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_get_qdata()&lt;/code&gt;&lt;/a&gt;
until the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; is finalized.
Setting a previously set user data pointer, overrides (frees)
the old pointer set, using &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#NULL:CAPS&quot;
&gt;&lt;span class=&quot;type&quot;&gt;NULL&lt;/span&gt;&lt;/a&gt; as pointer essentially
removes the data stored.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_set_qdata (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;GQuark&lt;/a&gt; quark,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_set_qdata_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-set-qdata-full</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">This function works like &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-set-qdata&quot; title=&quot;g_object_set_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_set_qdata()&lt;/code&gt;&lt;/a&gt;, but in addition,
a void (*destroy) (gpointer) function may be specified which is
called with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; as argument when the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; is finalized, or
the data is being overwritten by a call to &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-set-qdata&quot; title=&quot;g_object_set_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_set_qdata()&lt;/code&gt;&lt;/a&gt;
with the same &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;quark&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_set_qdata_full (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;GQuark&lt;/a&gt; quark,
    &lt;a href=&quot;./../glib/glib/glib-Datasets.html#GDestroyNotify&quot; &gt;gpointer&lt;/a&gt; data,
    &lt;a href= &gt;GDestroyNotify&lt;/a&gt; destroy);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_steal_qdata</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-steal-qdata</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">This function gets back user data pointers stored via
&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-set-qdata&quot; title=&quot;g_object_set_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_set_qdata()&lt;/code&gt;&lt;/a&gt; and removes the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; from object
without invoking it's &lt;code class=&quot;function&quot;&gt;destroy()&lt;/code&gt; function (if any was
set).
Usually, calling this function is only required to update
user data pointers with a destroy notifier, for example:</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_object_steal_qdata (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a href= &gt;GQuark&lt;/a&gt; quark);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_set_property</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-set-property</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Sets a property on an object.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_set_property (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GObject&lt;/a&gt; *object,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *property_name,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_get_property</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-get-property</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Gets a property of an object.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_get_property (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GObject&lt;/a&gt; *object,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *property_name,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_new_valist</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-new-valist</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Creates a new instance of a &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt; subtype and sets its properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;link&quot;&gt;GObject&lt;/a&gt;* g_object_new_valist (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; object_type,
    const &lt;a href= &gt;gchar&lt;/a&gt; *first_property_name,
    va_list var_args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_set_valist</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-set-valist</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Sets properties on an object.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_set_valist (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GObject&lt;/a&gt; *object,
    const &lt;a href= &gt;gchar&lt;/a&gt; *first_property_name,
    va_list var_args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_get_valist</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-get-valist</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Gets properties of an object.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_get_valist (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GObject&lt;/a&gt; *object,
    const &lt;a href= &gt;gchar&lt;/a&gt; *first_property_name,
    va_list var_args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_watch_closure</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-watch-closure</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">This function essentially limits the life time of the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure&lt;/code&gt;&lt;/em&gt; to
the life time of the object. That is, when the object is finalized,
the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure&lt;/code&gt;&lt;/em&gt; is invalidated by calling &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-invalidate&quot; title=&quot;g_closure_invalidate ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_invalidate()&lt;/code&gt;&lt;/a&gt; on
it, in order to prevent invocations of the closure with a finalized
(nonexisting) object. Also, &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-ref&quot; title=&quot;g_object_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_ref()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-unref&quot; title=&quot;g_object_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_unref()&lt;/code&gt;&lt;/a&gt; are
added as marshal guards to the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure&lt;/code&gt;&lt;/em&gt;, to ensure that an extra
reference count is held on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; during invocation of the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure&lt;/code&gt;&lt;/em&gt;.  Usually, this function will be called on closures that
use this &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; as closure data.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_watch_closure (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&quot;link&quot;&gt;GObject&lt;/a&gt; *object,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&gt;GClosure&lt;/a&gt; *closure);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_object_run_dispose</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>g-object-run-dispose</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">Releases all references to other objects. This can be used to break
reference cycles.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_object_run_dispose (
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&gt;GObject&lt;/a&gt; *object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_OBJECT_WARN_INVALID_PROPERTY_ID</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-The-Base-Object-Type.html</Path>
  <Anchor>G-OBJECT-WARN-INVALID-PROPERTY-ID:CAPS</Anchor>
  <NodeRef refid="23"/>
  <Abstract type="html">This macro should be used to emit a standard warning about unexpected 
properties in &lt;code class=&quot;function&quot;&gt;set_property()&lt;/code&gt; and &lt;code class=&quot;function&quot;&gt;get_property()&lt;/code&gt; implementations.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_OBJECT_WARN_INVALID_PROPERTY_ID(object, property_id, pspec)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GEnumClass</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>GEnumClass</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">The class of an enumeration type holds information about its 
possible values.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GTypeClass g_type_class;
    gint minimum;
    gint maximum;
    guint n_values;
    GEnumValue *values;
} GEnumClass;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GFlagsClass</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>GFlagsClass</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">The class of a flags type holds information about its 
possible values.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GTypeClass g_type_class;
    guint mask;
    guint n_values;
    GFlagsValue *values;
} GFlagsClass;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ENUM_CLASS_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>G-ENUM-CLASS-TYPE:CAPS</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Get the type identifier from a given &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumClass&quot; title=&quot;GEnumClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GEnumClass&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_ENUM_CLASS_TYPE(class) (G_TYPE_FROM_CLASS (class))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ENUM_CLASS_TYPE_NAME</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>G-ENUM-CLASS-TYPE-NAME:CAPS</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Get the static type name from a given &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumClass&quot; title=&quot;GEnumClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GEnumClass&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_ENUM_CLASS_TYPE_NAME(class) (g_type_name (G_ENUM_CLASS_TYPE (class)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_ENUM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>G-TYPE-IS-ENUM:CAPS</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; &quot;is a&quot; &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-ENUM:CAPS&quot; title=&quot;G_TYPE_ENUM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_ENUM&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_ENUM(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_ENUM)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_ENUM_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>G-ENUM-CLASS:CAPS</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Casts a derived &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumClass&quot; title=&quot;GEnumClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GEnumClass&lt;/span&gt;&lt;/a&gt; structure into a &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumClass&quot; title=&quot;GEnumClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GEnumClass&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_ENUM_CLASS(class) (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_ENUM, GEnumClass))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_ENUM_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>G-IS-ENUM-CLASS:CAPS</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/em&gt; &quot;is a&quot; valid &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumClass&quot; title=&quot;GEnumClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GEnumClass&lt;/span&gt;&lt;/a&gt; structure of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-ENUM:CAPS&quot; title=&quot;G_TYPE_ENUM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_ENUM&lt;/code&gt;&lt;/a&gt;
or derived.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_ENUM_CLASS(class) (G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_ENUM))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_FLAGS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>G-TYPE-IS-FLAGS:CAPS</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; &quot;is a&quot; &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLAGS:CAPS&quot; title=&quot;G_TYPE_FLAGS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLAGS&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_FLAGS(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_FLAGS)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FLAGS_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>G-FLAGS-CLASS:CAPS</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Casts a derived &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsClass&quot; title=&quot;GFlagsClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFlagsClass&lt;/span&gt;&lt;/a&gt; structure into a &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsClass&quot; title=&quot;GFlagsClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFlagsClass&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_FLAGS_CLASS(class) (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_FLAGS, GFlagsClass))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_FLAGS_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>G-IS-FLAGS-CLASS:CAPS</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/em&gt; &quot;is a&quot; valid &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsClass&quot; title=&quot;GFlagsClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFlagsClass&lt;/span&gt;&lt;/a&gt; structure of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLAGS:CAPS&quot; title=&quot;G_TYPE_FLAGS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLAGS&lt;/code&gt;&lt;/a&gt;
or derived.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_FLAGS_CLASS(class) (G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_FLAGS))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FLAGS_CLASS_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>G-FLAGS-CLASS-TYPE:CAPS</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Get the type identifier from a given &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsClass&quot; title=&quot;GFlagsClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFlagsClass&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_FLAGS_CLASS_TYPE(class) (G_TYPE_FROM_CLASS (class))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_FLAGS_CLASS_TYPE_NAME</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>G-FLAGS-CLASS-TYPE-NAME:CAPS</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Get the static type name from a given &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsClass&quot; title=&quot;GFlagsClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFlagsClass&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_FLAGS_CLASS_TYPE_NAME(class) (g_type_name (G_FLAGS_CLASS_TYPE (class)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GEnumValue</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>GEnumValue</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">A structure which contains a single enum value, it's name, and it's
nickname.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    gint value;
    const gchar *value_name;
    const gchar *value_nick;
} GEnumValue;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GFlagsValue</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>GFlagsValue</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">A structure which contains a single flags value, it's name, and it's
nickname.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    guint value;
    const gchar *value_name;
    const gchar *value_nick;
} GFlagsValue;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_enum_get_value</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>g-enum-get-value</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Returns the &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumValue&quot; title=&quot;GEnumValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GEnumValue&lt;/span&gt;&lt;/a&gt; for a value.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumValue&quot; href=&quot;GEnumValue&quot; title=&quot;link&quot;&gt;GEnumValue&lt;/a&gt;* g_enum_get_value (
    &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumClass&quot; href=&quot;GEnumClass&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot;&gt;GEnumClass&lt;/a&gt; *enum_class,
    &lt;a href= &gt;gint&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_enum_get_value_by_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>g-enum-get-value-by-name</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Looks up a &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumValue&quot; title=&quot;GEnumValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GEnumValue&lt;/span&gt;&lt;/a&gt; by name.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumValue&quot; href=&quot;GEnumValue&quot; title=&quot;link&quot;&gt;GEnumValue&lt;/a&gt;* g_enum_get_value_by_name (
    &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumClass&quot; href=&quot;GEnumClass&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GEnumClass&lt;/a&gt; *enum_class,
    const &lt;a href= &gt;gchar&lt;/a&gt; *name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_enum_get_value_by_nick</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>g-enum-get-value-by-nick</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Looks up a &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumValue&quot; title=&quot;GEnumValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GEnumValue&lt;/span&gt;&lt;/a&gt; by nickname.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumValue&quot; href=&quot;GEnumValue&quot; title=&quot;link&quot;&gt;GEnumValue&lt;/a&gt;* g_enum_get_value_by_nick (
    &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumClass&quot; href=&quot;GEnumClass&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GEnumClass&lt;/a&gt; *enum_class,
    const &lt;a href= &gt;gchar&lt;/a&gt; *nick);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_flags_get_first_value</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>g-flags-get-first-value</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Returns the first &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsValue&quot; title=&quot;GFlagsValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFlagsValue&lt;/span&gt;&lt;/a&gt; which is set in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsValue&quot; href=&quot;GFlagsValue&quot; title=&quot;link&quot;&gt;GFlagsValue&lt;/a&gt;* g_flags_get_first_value (
    &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsClass&quot; href=&quot;GFlagsClass&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GFlagsClass&lt;/a&gt; *flags_class,
    &lt;a href= &gt;guint&lt;/a&gt; value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_flags_get_value_by_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>g-flags-get-value-by-name</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Looks up a &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsValue&quot; title=&quot;GFlagsValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFlagsValue&lt;/span&gt;&lt;/a&gt; by name.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsValue&quot; href=&quot;GFlagsValue&quot; title=&quot;link&quot;&gt;GFlagsValue&lt;/a&gt;* g_flags_get_value_by_name (
    &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsClass&quot; href=&quot;GFlagsClass&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GFlagsClass&lt;/a&gt; *flags_class,
    const &lt;a href= &gt;gchar&lt;/a&gt; *name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_flags_get_value_by_nick</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>g-flags-get-value-by-nick</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Looks up a &lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsValue&quot; title=&quot;GFlagsValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GFlagsValue&lt;/span&gt;&lt;/a&gt; by nickname.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsValue&quot; href=&quot;GFlagsValue&quot; title=&quot;link&quot;&gt;GFlagsValue&lt;/a&gt;* g_flags_get_value_by_nick (
    &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsClass&quot; href=&quot;GFlagsClass&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GFlagsClass&lt;/a&gt; *flags_class,
    const &lt;a href= &gt;gchar&lt;/a&gt; *nick);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_enum_register_static</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>g-enum-register-static</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Registers a new static enumeration type with the name &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; g_enum_register_static (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumValue&quot; href=&quot;GEnumValue&quot; title=&gt;GEnumValue&lt;/a&gt; *const_static_values);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_flags_register_static</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>g-flags-register-static</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">Registers a new static flags type with the name &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; g_flags_register_static (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsValue&quot; href=&quot;GFlagsValue&quot; title=&gt;GFlagsValue&lt;/a&gt; *const_static_values);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_enum_complete_type_info</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>g-enum-complete-type-info</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">This function is meant to be called from the &lt;code class=&quot;function&quot;&gt;complete_type_info()&lt;/code&gt;
function of a &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html&quot; title=&quot;GTypePlugin&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePlugin&lt;/span&gt;&lt;/a&gt; implementation, as in the following
example:</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_enum_complete_type_info (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_enum_type,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeInfo&quot; href=&quot;GTypeInfo&quot; title=&quot;link&quot;&gt;GTypeInfo&lt;/a&gt; *info,
    const &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GEnumValue&quot; href=&quot;GEnumValue&quot; title=&gt;GEnumValue&lt;/a&gt; *const_values);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_flags_complete_type_info</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Enumeration-and-Flag-Types.html</Path>
  <Anchor>g-flags-complete-type-info</Anchor>
  <NodeRef refid="24"/>
  <Abstract type="html">This function is meant to be called from the &lt;code class=&quot;function&quot;&gt;complete_type_info()&lt;/code&gt;
function of a &lt;a class=&quot;link&quot; href=&quot;GTypePlugin.html&quot; title=&quot;GTypePlugin&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypePlugin&lt;/span&gt;&lt;/a&gt; implementation, see the example for
&lt;a class=&quot;link&quot; href=&quot;gobject-Enumeration-and-Flag-Types.html#g-enum-complete-type-info&quot; title=&quot;g_enum_complete_type_info ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_enum_complete_type_info()&lt;/code&gt;&lt;/a&gt; above.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_flags_complete_type_info (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_flags_type,
    &lt;a class=&quot;gobject-Type-Information.html#GTypeInfo&quot; href=&quot;GTypeInfo&quot; title=&quot;link&quot;&gt;GTypeInfo&lt;/a&gt; *info,
    const &lt;a class=&quot;gobject-Enumeration-and-Flag-Types.html#GFlagsValue&quot; href=&quot;GFlagsValue&quot; title=&gt;GFlagsValue&lt;/a&gt; *const_values);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GBoxedCopyFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>GBoxedCopyFunc</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">This function is provided by the user and should produce a copy of the passed
in boxed structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; (
    *GBoxedCopyFunc) (
    &lt;a href= &gt;gpointer&lt;/a&gt; boxed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GBoxedFreeFunc</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>GBoxedFreeFunc</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">This function is provided by the user and should free the boxed
structure passed.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GBoxedFreeFunc) (
    &lt;a href= &gt;gpointer&lt;/a&gt; boxed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_boxed_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>g-boxed-copy</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Provide a copy of a boxed structure &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src_boxed&lt;/code&gt;&lt;/em&gt; which is of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;boxed_type&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_boxed_copy (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gconstpointer&quot;&gt;GType&lt;/a&gt; boxed_type,
    &lt;a href= &gt;gconstpointer&lt;/a&gt; src_boxed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_boxed_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>g-boxed-free</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Free the boxed structure &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;boxed&lt;/code&gt;&lt;/em&gt; which is of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;boxed_type&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_boxed_free (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GType&lt;/a&gt; boxed_type,
    &lt;a href= &gt;gpointer&lt;/a&gt; boxed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_boxed_type_register_static</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>g-boxed-type-register-static</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">This function creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOXED:CAPS&quot; title=&quot;G_TYPE_BOXED&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOXED&lt;/code&gt;&lt;/a&gt; derived type id for a new
boxed type with name &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt;. Boxed type handling functions have to be
provided to copy and free opaque boxed structures of this type.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; g_boxed_type_register_static (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *name,
    &lt;a class=&quot;gobject-Boxed-Types.html#GBoxedCopyFunc&quot; href=&quot;GBoxedCopyFunc ()&quot; title=&quot;link&quot;&gt;GBoxedCopyFunc&lt;/a&gt; boxed_copy,
    &lt;a class=&quot;gobject-Boxed-Types.html#GBoxedFreeFunc&quot; href=&quot;GBoxedFreeFunc ()&quot; title=&gt;GBoxedFreeFunc&lt;/a&gt; boxed_free);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_pointer_type_register_static</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>g-pointer-type-register-static</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-POINTER:CAPS&quot; title=&quot;G_TYPE_POINTER&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_POINTER&lt;/code&gt;&lt;/a&gt; derived type id for a new
pointer type with name &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; g_pointer_type_register_static (
    const &lt;a href= &gt;gchar&lt;/a&gt; *name);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_HASH_TABLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>G-TYPE-HASH-TABLE:CAPS</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; for a boxed type holding a &lt;a
href=&quot;./../glib/glib/glib-Hash-Tables.html#GHashTable&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GHashTable&lt;/span&gt;&lt;/a&gt; reference.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_HASH_TABLE (g_hash_table_get_type ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_DATE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>G-TYPE-DATE:CAPS</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; for &lt;a
href=&quot;./../glib/glib/glib-Date-and-Time-Functions.html#GDate&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GDate&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_DATE (g_date_get_type ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_GSTRING</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>G-TYPE-GSTRING:CAPS</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; for &lt;a
href=&quot;./../glib/glib/glib-Strings.html#GString&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GString&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_GSTRING (g_gstring_get_type ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_STRV</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>G-TYPE-STRV:CAPS</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; for a boxed type holding a &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#NULL:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;-terminated array of strings.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_STRV (g_strv_get_type ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_REGEX</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>G-TYPE-REGEX:CAPS</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; for a boxed type holding a &lt;a
href=&quot;./../glib/glib/glib-Perl-compatible-regular-expressions.html#GRegex&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GRegex&lt;/span&gt;&lt;/a&gt; reference.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_REGEX (g_regex_get_type ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.14</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GStrv</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Boxed-Types.html</Path>
  <Anchor>GStrv</Anchor>
  <NodeRef refid="25"/>
  <Abstract type="html">A C representable type name for &lt;a class=&quot;link&quot; href=&quot;gobject-Boxed-Types.html#G-TYPE-STRV:CAPS&quot; title=&quot;G_TYPE_STRV&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_TYPE_STRV&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef gchar** GStrv;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>G-VALUE-HOLDS:CAPS</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; holds (or contains) a value of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;.
This macro will also check for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; != &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#NULL:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; and issue a
warning if the check fails.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS(value,type) (G_TYPE_CHECK_VALUE_TYPE ((value), (type)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>G-VALUE-TYPE:CAPS</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Get the type identifier of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_TYPE(value) (((GValue*) (value))-&amp;gt;
    g_type)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_TYPE_NAME</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>G-VALUE-TYPE-NAME:CAPS</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Gets the the type name of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_TYPE_NAME(value) (g_type_name (G_VALUE_TYPE (value)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_VALUE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>G-TYPE-IS-VALUE:CAPS</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Checks whether the passed in type ID can be used for &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#g-value-init&quot; title=&quot;g_value_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_init()&lt;/code&gt;&lt;/a&gt;.
That is, this macro checks whether this type provides an implementation
of the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeValueTable&quot; title=&quot;GTypeValueTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeValueTable&lt;/span&gt;&lt;/a&gt; functions required for a type to create a &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; of.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_VALUE(type) (g_type_check_is_value_type (type))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_VALUE_ABSTRACT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>G-TYPE-IS-VALUE-ABSTRACT:CAPS</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is an abstract value type.  An abstract value type introduces
a value table, but can't be used for &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#g-value-init&quot; title=&quot;g_value_init ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_init()&lt;/code&gt;&lt;/a&gt; and is normally used as
an abstract base type for derived value types.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_VALUE_ABSTRACT(type) (g_type_test_flags ((type), G_TYPE_FLAG_VALUE_ABSTRACT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_VALUE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>G-IS-VALUE:CAPS</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Checks if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; is a valid and initialized &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_VALUE(value) (G_TYPE_CHECK_VALUE (value))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GValue</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>GValue</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">An opaque structure used to hold different types of values.
The data within the structure has protected scope: it is accessible only
to functions within a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GTypeValueTable&quot; title=&quot;GTypeValueTable&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeValueTable&lt;/span&gt;&lt;/a&gt; structure, or implementations of
the g_value_*() API. That is, code portions which implement new fundamental
types.
&lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; users can not make any assumptions about how data is stored
within the 2 element &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; union, and the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;g_type&lt;/code&gt;&lt;/em&gt; member should
only be accessed through the &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#G-VALUE-TYPE:CAPS&quot; title=&quot;G_VALUE_TYPE()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_VALUE_TYPE()&lt;/code&gt;&lt;/a&gt; macro.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GValue;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_VALUE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>G-TYPE-VALUE:CAPS</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">The type ID of the &quot;GValue&quot; type which is a boxed type,
used to pass around pointers to GValues.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_VALUE (g_value_get_type ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_VALUE_ARRAY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>G-TYPE-VALUE-ARRAY:CAPS</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">The type ID of the &quot;GValueArray&quot; type which is a boxed type,
used to pass around pointers to GValueArrays.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_VALUE_ARRAY (g_value_array_get_type ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_init</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-init</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Initializes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; with the default value of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt;* g_value_init (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; g_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-copy</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Copies the value of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src_value&lt;/code&gt;&lt;/em&gt; into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest_value&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_copy (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *src_value,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *dest_value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_reset</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-reset</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Clears the current value in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; and resets it to the default value
(as if the value had just been initialized).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt;* g_value_reset (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_unset</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-unset</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Clears the current value in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; and &quot;unsets&quot; the type,
this releases all resources associated with this GValue.
An unset value is the same as an uninitialized (zero-filled)
&lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_unset (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_instance</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-set-instance</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Sets &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; from an instantiatable type via the
value_table's &lt;code class=&quot;function&quot;&gt;collect_value()&lt;/code&gt; function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_instance (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gpointer&lt;/a&gt; instance);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_fits_pointer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-fits-pointer</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Determines if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; will fit inside the size of a pointer value.
This is an internal function introduced mainly for C marshallers.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_value_fits_pointer (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_peek_pointer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-peek-pointer</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Return the value contents as pointer. This function asserts that
&lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#g-value-fits-pointer&quot; title=&quot;g_value_fits_pointer ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_fits_pointer()&lt;/code&gt;&lt;/a&gt; returned &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#TRUE:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; for the passed in value.
This is an internal function introduced mainly for C marshallers.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_value_peek_pointer (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_type_compatible</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-type-compatible</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Returns whether a &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src_type&lt;/code&gt;&lt;/em&gt; can be copied into
a &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest_type&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_value_type_compatible (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; src_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; dest_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_type_transformable</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-type-transformable</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Check whether &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#g-value-transform&quot; title=&quot;g_value_transform ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_transform()&lt;/code&gt;&lt;/a&gt; is able to transform values
of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src_type&lt;/code&gt;&lt;/em&gt; into values of type &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest_type&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_value_type_transformable (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; src_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; dest_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_transform</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-transform</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Tries to cast the contents of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src_value&lt;/code&gt;&lt;/em&gt; into a type appropriate
to store in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest_value&lt;/code&gt;&lt;/em&gt;, e.g. to transform a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INT:CAPS&quot; title=&quot;G_TYPE_INT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_INT&lt;/code&gt;&lt;/a&gt; value
into a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLOAT:CAPS&quot; title=&quot;G_TYPE_FLOAT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLOAT&lt;/code&gt;&lt;/a&gt; value. Performing transformations between
value types might incur precision lossage. Especially
transformations into strings might reveal seemingly arbitrary
results and shouldn't be relied upon for production code (such
as rcfile value or object property serialization).</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_value_transform (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *src_value,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *dest_value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GValueTransform</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>GValueTransform</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">The type of value transformation functions which can be registered with
&lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#g-value-register-transform-func&quot; title=&quot;g_value_register_transform_func ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_register_transform_func()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GValueTransform) (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *src_value,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *dest_value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_register_transform_func</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-value-register-transform-func</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Registers a value transformation function for use in &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#g-value-transform&quot; title=&quot;g_value_transform ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_transform()&lt;/code&gt;&lt;/a&gt;.
A previously registered transformation function for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src_type&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest_type&lt;/code&gt;&lt;/em&gt;
will be replaced.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_register_transform_func (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; src_type,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; dest_type,
    &lt;a class=&quot;gobject-Generic-values.html#GValueTransform&quot; href=&quot;GValueTransform ()&quot; title=&gt;GValueTransform&lt;/a&gt; transform_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_strdup_value_contents</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Generic-values.html</Path>
  <Anchor>g-strdup-value-contents</Anchor>
  <NodeRef refid="26"/>
  <Abstract type="html">Return a newly allocated string, which describes the contents of a
&lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.  The main purpose of this function is to describe &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;
contents for debugging output, the way in which the contents are
described may change between different GLib versions.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt;* g_strdup_value_contents (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_BOOLEAN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-BOOLEAN:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-BOOLEAN:CAPS&quot; title=&quot;G_TYPE_PARAM_BOOLEAN&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_BOOLEAN&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_BOOLEAN(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_BOOLEAN))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_BOOLEAN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-BOOLEAN:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoolean&quot; title=&quot;GParamSpecBoolean&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecBoolean&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_BOOLEAN(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_BOOLEAN, GParamSpecBoolean))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_BOOLEAN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-BOOLEAN:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS&quot; title=&quot;G_TYPE_BOOLEAN&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOOLEAN&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_BOOLEAN(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_BOOLEAN))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_BOOLEAN</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-BOOLEAN:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoolean&quot; title=&quot;GParamSpecBoolean&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecBoolean&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_BOOLEAN (g_param_spec_types[2])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecBoolean</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecBoolean</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for boolean properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    gboolean default_value;
} GParamSpecBoolean;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_boolean</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-boolean</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoolean&quot; title=&quot;GParamSpecBoolean&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecBoolean&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS&quot; title=&quot;G_TYPE_BOOLEAN&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOOLEAN&lt;/code&gt;&lt;/a&gt;
property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_boolean (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_boolean</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-boolean</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS&quot; title=&quot;G_TYPE_BOOLEAN&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOOLEAN&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_boolean&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_boolean (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gboolean&lt;/a&gt; v_boolean);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_boolean</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-boolean</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS&quot; title=&quot;G_TYPE_BOOLEAN&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOOLEAN&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_value_get_boolean (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_CHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-CHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-CHAR:CAPS&quot; title=&quot;G_TYPE_PARAM_CHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_CHAR&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_CHAR(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_CHAR))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_CHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-CHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecChar&quot; title=&quot;GParamSpecChar&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecChar&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_CHAR(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_CHAR, GParamSpecChar))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_CHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-CHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-CHAR:CAPS&quot; title=&quot;G_TYPE_CHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_CHAR&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_CHAR(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_CHAR))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_CHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-CHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecChar&quot; title=&quot;GParamSpecChar&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecChar&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_CHAR (g_param_spec_types[0])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecChar</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecChar</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for character properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    gint8 minimum;
    gint8 maximum;
    gint8 default_value;
} GParamSpecChar;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_char</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-char</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecChar&quot; title=&quot;GParamSpecChar&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecChar&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-CHAR:CAPS&quot; title=&quot;G_TYPE_CHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_CHAR&lt;/code&gt;&lt;/a&gt; property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_char (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    gint8 minimum,
    gint8 maximum,
    gint8 default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_char</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-char</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-CHAR:CAPS&quot; title=&quot;G_TYPE_CHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_CHAR&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_char&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_char (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gchar&lt;/a&gt; v_char);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_char</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-char</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-CHAR:CAPS&quot; title=&quot;G_TYPE_CHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_CHAR&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; g_value_get_char (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_UCHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-UCHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UCHAR:CAPS&quot; title=&quot;G_TYPE_PARAM_UCHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_UCHAR&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_UCHAR(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UCHAR))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_UCHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-UCHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUChar&quot; title=&quot;GParamSpecUChar&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUChar&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_UCHAR(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UCHAR, GParamSpecUChar))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_UCHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-UCHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UCHAR:CAPS&quot; title=&quot;G_TYPE_UCHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UCHAR&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_UCHAR(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UCHAR))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_UCHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-UCHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUChar&quot; title=&quot;GParamSpecUChar&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUChar&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_UCHAR (g_param_spec_types[1])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecUChar</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecUChar</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for unsigned character properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    guint8 minimum;
    guint8 maximum;
    guint8 default_value;
} GParamSpecUChar;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_uchar</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-uchar</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUChar&quot; title=&quot;GParamSpecUChar&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUChar&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UCHAR:CAPS&quot; title=&quot;G_TYPE_UCHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UCHAR&lt;/code&gt;&lt;/a&gt; property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_uchar (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    guint8 minimum,
    guint8 maximum,
    guint8 default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_uchar</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-uchar</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UCHAR:CAPS&quot; title=&quot;G_TYPE_UCHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UCHAR&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_uchar&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_uchar (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guchar&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;guchar&lt;/a&gt; v_uchar);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_uchar</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-uchar</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UCHAR:CAPS&quot; title=&quot;G_TYPE_UCHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UCHAR&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;guchar&lt;/a&gt; g_value_get_uchar (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_INT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-INT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-INT:CAPS&quot; title=&quot;G_TYPE_PARAM_INT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_INT&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_INT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_INT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_INT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-INT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt&quot; title=&quot;GParamSpecInt&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecInt&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_INT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_INT, GParamSpecInt))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_INT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-INT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INT:CAPS&quot; title=&quot;G_TYPE_INT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_INT&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_INT(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_INT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_INT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-INT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt&quot; title=&quot;GParamSpecInt&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecInt&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_INT (g_param_spec_types[3])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecInt</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecInt</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for integer properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    gint minimum;
    gint maximum;
    gint default_value;
} GParamSpecInt;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_int</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-int</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt&quot; title=&quot;GParamSpecInt&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecInt&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INT:CAPS&quot; title=&quot;G_TYPE_INT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_INT&lt;/code&gt;&lt;/a&gt; property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_int (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot; &gt;gint&lt;/a&gt; minimum,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot; &gt;gint&lt;/a&gt; maximum,
    &lt;a href=&quot;link&quot; &gt;gint&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_int</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-int</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INT:CAPS&quot; title=&quot;G_TYPE_INT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_INT&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_int&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_int (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gint&lt;/a&gt; v_int);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_int</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-int</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INT:CAPS&quot; title=&quot;G_TYPE_INT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_INT&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gint&lt;/a&gt; g_value_get_int (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_UINT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-UINT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UINT:CAPS&quot; title=&quot;G_TYPE_PARAM_UINT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_UINT&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_UINT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UINT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_UINT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-UINT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUInt&quot; title=&quot;GParamSpecUInt&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUInt&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_UINT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UINT, GParamSpecUInt))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_UINT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-UINT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UINT:CAPS&quot; title=&quot;G_TYPE_UINT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UINT&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_UINT(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UINT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_UINT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-UINT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUInt&quot; title=&quot;GParamSpecUInt&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUInt&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_UINT (g_param_spec_types[4])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecUInt</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecUInt</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for unsigned integer properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    guint minimum;
    guint maximum;
    guint default_value;
} GParamSpecUInt;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_uint</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-uint</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUInt&quot; title=&quot;GParamSpecUInt&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUInt&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UINT:CAPS&quot; title=&quot;G_TYPE_UINT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UINT&lt;/code&gt;&lt;/a&gt; property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_uint (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;guint&lt;/a&gt; minimum,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;guint&lt;/a&gt; maximum,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_uint</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-uint</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UINT:CAPS&quot; title=&quot;G_TYPE_UINT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UINT&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_uint&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_uint (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;guint&lt;/a&gt; v_uint);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_uint</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-uint</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UINT:CAPS&quot; title=&quot;G_TYPE_UINT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UINT&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; g_value_get_uint (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_LONG</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-LONG:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-LONG:CAPS&quot; title=&quot;G_TYPE_PARAM_LONG&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_LONG&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_LONG(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_LONG))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_LONG</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-LONG:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecLong&quot; title=&quot;GParamSpecLong&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecLong&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_LONG(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_LONG, GParamSpecLong))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_LONG</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-LONG:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-LONG:CAPS&quot; title=&quot;G_TYPE_LONG&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_LONG&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_LONG(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_LONG))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_LONG</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-LONG:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecLong&quot; title=&quot;GParamSpecLong&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecLong&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_LONG (g_param_spec_types[5])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecLong</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecLong</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for long integer properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    glong minimum;
    glong maximum;
    glong default_value;
} GParamSpecLong;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_long</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-long</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecLong&quot; title=&quot;GParamSpecLong&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecLong&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-LONG:CAPS&quot; title=&quot;G_TYPE_LONG&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_LONG&lt;/code&gt;&lt;/a&gt; property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_long (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#glong&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#glong&quot; &gt;glong&lt;/a&gt; minimum,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#glong&quot; &gt;glong&lt;/a&gt; maximum,
    &lt;a href=&quot;link&quot; &gt;glong&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_long</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-long</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-LONG:CAPS&quot; title=&quot;G_TYPE_LONG&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_LONG&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_long&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_long (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#glong&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;glong&lt;/a&gt; v_long);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_long</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-long</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-LONG:CAPS&quot; title=&quot;G_TYPE_LONG&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_LONG&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;glong&lt;/a&gt; g_value_get_long (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_ULONG</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-ULONG:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-ULONG:CAPS&quot; title=&quot;G_TYPE_PARAM_ULONG&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_ULONG&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_ULONG(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_ULONG))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_ULONG</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-ULONG:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecULong&quot; title=&quot;GParamSpecULong&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecULong&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_ULONG(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_ULONG, GParamSpecULong))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_ULONG</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-ULONG:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-ULONG:CAPS&quot; title=&quot;G_TYPE_ULONG&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_ULONG&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_ULONG(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_ULONG))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_ULONG</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-ULONG:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecULong&quot; title=&quot;GParamSpecULong&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecULong&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_ULONG (g_param_spec_types[6])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecULong</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecULong</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for unsigned long integer properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    gulong minimum;
    gulong maximum;
    gulong default_value;
} GParamSpecULong;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_ulong</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-ulong</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecULong&quot; title=&quot;GParamSpecULong&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecULong&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-ULONG:CAPS&quot; title=&quot;G_TYPE_ULONG&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_ULONG&lt;/code&gt;&lt;/a&gt;
property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_ulong (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gulong&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gulong&quot; &gt;gulong&lt;/a&gt; minimum,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gulong&quot; &gt;gulong&lt;/a&gt; maximum,
    &lt;a href=&quot;link&quot; &gt;gulong&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_ulong</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-ulong</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-ULONG:CAPS&quot; title=&quot;G_TYPE_ULONG&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_ULONG&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_ulong&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_ulong (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gulong&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gulong&lt;/a&gt; v_ulong);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_ulong</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-ulong</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-ULONG:CAPS&quot; title=&quot;G_TYPE_ULONG&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_ULONG&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gulong&lt;/a&gt; g_value_get_ulong (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_INT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-INT64:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-INT64:CAPS&quot; title=&quot;G_TYPE_PARAM_INT64&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_INT64&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_INT64(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_INT64))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_INT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-INT64:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt64&quot; title=&quot;GParamSpecInt64&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecInt64&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_INT64(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_INT64, GParamSpecInt64))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_INT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-INT64:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INT64:CAPS&quot; title=&quot;G_TYPE_INT64&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_INT64&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_INT64(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_INT64))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_INT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-INT64:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt64&quot; title=&quot;GParamSpecInt64&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecInt64&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_INT64 (g_param_spec_types[7])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecInt64</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecInt64</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for 64bit integer properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    gint64 minimum;
    gint64 maximum;
    gint64 default_value;
} GParamSpecInt64;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_int64</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-int64</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt64&quot; title=&quot;GParamSpecInt64&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecInt64&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INT64:CAPS&quot; title=&quot;G_TYPE_INT64&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_INT64&lt;/code&gt;&lt;/a&gt; property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_int64 (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    gint64 minimum,
    gint64 maximum,
    gint64 default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_int64</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-int64</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INT64:CAPS&quot; title=&quot;G_TYPE_INT64&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_INT64&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_int64&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_int64 (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value,
    gint64 v_int64);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_int64</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-int64</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-INT64:CAPS&quot; title=&quot;G_TYPE_INT64&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_INT64&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;gint64 g_value_get_int64 (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_UINT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-UINT64:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UINT64:CAPS&quot; title=&quot;G_TYPE_PARAM_UINT64&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_UINT64&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_UINT64(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UINT64))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_UINT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-UINT64:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUInt64&quot; title=&quot;GParamSpecUInt64&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUInt64&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_UINT64(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UINT64, GParamSpecUInt64))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_UINT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-UINT64:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UINT64:CAPS&quot; title=&quot;G_TYPE_UINT64&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UINT64&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_UINT64(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UINT64))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_UINT64</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-UINT64:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUInt64&quot; title=&quot;GParamSpecUInt64&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUInt64&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_UINT64 (g_param_spec_types[8])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecUInt64</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecUInt64</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for unsigned 64bit integer properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    guint64 minimum;
    guint64 maximum;
    guint64 default_value;
} GParamSpecUInt64;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_uint64</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-uint64</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUInt64&quot; title=&quot;GParamSpecUInt64&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUInt64&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UINT64:CAPS&quot; title=&quot;G_TYPE_UINT64&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UINT64&lt;/code&gt;&lt;/a&gt;
property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_uint64 (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint64&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint64&quot; &gt;guint64&lt;/a&gt; minimum,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint64&quot; &gt;guint64&lt;/a&gt; maximum,
    &lt;a href=&quot;link&quot; &gt;guint64&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_uint64</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-uint64</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UINT64:CAPS&quot; title=&quot;G_TYPE_UINT64&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UINT64&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_uint64&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_uint64 (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint64&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;guint64&lt;/a&gt; v_uint64);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_uint64</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-uint64</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UINT64:CAPS&quot; title=&quot;G_TYPE_UINT64&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UINT64&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;guint64&lt;/a&gt; g_value_get_uint64 (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_FLOAT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-FLOAT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-FLOAT:CAPS&quot; title=&quot;G_TYPE_PARAM_FLOAT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_FLOAT&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_FLOAT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_FLOAT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_FLOAT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-FLOAT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecFloat&quot; title=&quot;GParamSpecFloat&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecFloat&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_FLOAT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_FLOAT, GParamSpecFloat))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_FLOAT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-FLOAT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLOAT:CAPS&quot; title=&quot;G_TYPE_FLOAT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLOAT&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_FLOAT(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_FLOAT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_FLOAT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-FLOAT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecFloat&quot; title=&quot;GParamSpecFloat&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecFloat&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_FLOAT (g_param_spec_types[12])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecFloat</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecFloat</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for float properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    gfloat minimum;
    gfloat maximum;
    gfloat default_value;
    gfloat epsilon;
} GParamSpecFloat;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_float</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-float</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecFloat&quot; title=&quot;GParamSpecFloat&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecFloat&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLOAT:CAPS&quot; title=&quot;G_TYPE_FLOAT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLOAT&lt;/code&gt;&lt;/a&gt; property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_float (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gfloat&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gfloat&quot; &gt;gfloat&lt;/a&gt; minimum,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gfloat&quot; &gt;gfloat&lt;/a&gt; maximum,
    &lt;a href=&quot;link&quot; &gt;gfloat&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_float</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-float</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLOAT:CAPS&quot; title=&quot;G_TYPE_FLOAT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLOAT&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_float&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_float (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gfloat&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gfloat&lt;/a&gt; v_float);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_float</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-float</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLOAT:CAPS&quot; title=&quot;G_TYPE_FLOAT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLOAT&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gfloat&lt;/a&gt; g_value_get_float (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_DOUBLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-DOUBLE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-DOUBLE:CAPS&quot; title=&quot;G_TYPE_PARAM_DOUBLE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_DOUBLE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_DOUBLE(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_DOUBLE))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_DOUBLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-DOUBLE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecDouble&quot; title=&quot;GParamSpecDouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecDouble&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_DOUBLE(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_DOUBLE, GParamSpecDouble))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_DOUBLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-DOUBLE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-DOUBLE:CAPS&quot; title=&quot;G_TYPE_DOUBLE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_DOUBLE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_DOUBLE(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_DOUBLE))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_DOUBLE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-DOUBLE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecDouble&quot; title=&quot;GParamSpecDouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecDouble&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_DOUBLE (g_param_spec_types[13])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecDouble</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecDouble</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for double properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    gdouble minimum;
    gdouble maximum;
    gdouble default_value;
    gdouble epsilon;
} GParamSpecDouble;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_double</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-double</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecDouble&quot; title=&quot;GParamSpecDouble&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecDouble&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-DOUBLE:CAPS&quot; title=&quot;G_TYPE_DOUBLE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_DOUBLE&lt;/code&gt;&lt;/a&gt;
property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_double (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gdouble&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gdouble&quot; &gt;gdouble&lt;/a&gt; minimum,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gdouble&quot; &gt;gdouble&lt;/a&gt; maximum,
    &lt;a href=&quot;link&quot; &gt;gdouble&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_double</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-double</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-DOUBLE:CAPS&quot; title=&quot;G_TYPE_DOUBLE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_DOUBLE&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_double&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_double (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gdouble&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gdouble&lt;/a&gt; v_double);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_double</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-double</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-DOUBLE:CAPS&quot; title=&quot;G_TYPE_DOUBLE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_DOUBLE&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gdouble&lt;/a&gt; g_value_get_double (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_ENUM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-ENUM:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-ENUM:CAPS&quot; title=&quot;G_TYPE_PARAM_ENUM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_ENUM&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_ENUM(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_ENUM))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_ENUM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-ENUM:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecEnum&quot; title=&quot;GParamSpecEnum&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecEnum&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_ENUM(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_ENUM, GParamSpecEnum))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_ENUM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-ENUM:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values derived from type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-ENUM:CAPS&quot; title=&quot;G_TYPE_ENUM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_ENUM&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_ENUM(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_ENUM))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_ENUM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-ENUM:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecEnum&quot; title=&quot;GParamSpecEnum&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecEnum&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_ENUM (g_param_spec_types[10])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecEnum</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecEnum</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for enum 
properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    GEnumClass *enum_class;
    gint default_value;
} GParamSpecEnum;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_enum</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-enum</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecEnum&quot; title=&quot;GParamSpecEnum&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecEnum&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-ENUM:CAPS&quot; title=&quot;G_TYPE_ENUM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_ENUM&lt;/code&gt;&lt;/a&gt;
property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_enum (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot;&gt;GType&lt;/a&gt; enum_type,
    &lt;a href=&quot;link&quot; &gt;gint&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_enum</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-enum</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-ENUM:CAPS&quot; title=&quot;G_TYPE_ENUM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_ENUM&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_enum&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_enum (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gint&lt;/a&gt; v_enum);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_enum</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-enum</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-ENUM:CAPS&quot; title=&quot;G_TYPE_ENUM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_ENUM&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gint&lt;/a&gt; g_value_get_enum (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_FLAGS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-FLAGS:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-FLAGS:CAPS&quot; title=&quot;G_TYPE_PARAM_FLAGS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_FLAGS&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_FLAGS(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_FLAGS))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_FLAGS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-FLAGS:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecFlags&quot; title=&quot;GParamSpecFlags&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecFlags&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_FLAGS(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_FLAGS, GParamSpecFlags))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_FLAGS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-FLAGS:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values derived from type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLAGS:CAPS&quot; title=&quot;G_TYPE_FLAGS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLAGS&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_FLAGS(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_FLAGS))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_FLAGS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-FLAGS:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecFlags&quot; title=&quot;GParamSpecFlags&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecFlags&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_FLAGS (g_param_spec_types[11])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecFlags</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for flags
properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    GFlagsClass *flags_class;
    guint default_value;
} GParamSpecFlags;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_flags</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-flags</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecFlags&quot; title=&quot;GParamSpecFlags&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecFlags&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLAGS:CAPS&quot; title=&quot;G_TYPE_FLAGS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLAGS&lt;/code&gt;&lt;/a&gt;
property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_flags (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; flags_type,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_flags</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-flags</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLAGS:CAPS&quot; title=&quot;G_TYPE_FLAGS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLAGS&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_flags&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_flags (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;guint&lt;/a&gt; v_flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_flags</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-flags</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-FLAGS:CAPS&quot; title=&quot;G_TYPE_FLAGS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_FLAGS&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; g_value_get_flags (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_STRING</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-STRING:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-STRING:CAPS&quot; title=&quot;G_TYPE_PARAM_STRING&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_STRING&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_STRING(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_STRING))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_STRING</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-STRING:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Casts a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecString&quot; title=&quot;GParamSpecString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecString&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_STRING(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_STRING, GParamSpecString))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_STRING</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-STRING:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-STRING:CAPS&quot; title=&quot;G_TYPE_STRING&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_STRING&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_STRING(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_STRING))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_STRING</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-STRING:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecString&quot; title=&quot;GParamSpecString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecString&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_STRING (g_param_spec_types[14])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecString</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecString</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for string
properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    gchar *default_value;
    gchar *cset_first;
    gchar *cset_nth;
    gchar substitutor;
    guint null_fold_if_empty : 1;
    guint ensure_non_null : 1;
} GParamSpecString;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>gchararray</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>gchararray</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A C representable type name for &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-STRING:CAPS&quot; title=&quot;G_TYPE_STRING&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_TYPE_STRING&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef gchar* gchararray;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-string</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecString&quot; title=&quot;GParamSpecString&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecString&lt;/span&gt;&lt;/a&gt; instance.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_string (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *blurb,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-string</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-STRING:CAPS&quot; title=&quot;G_TYPE_STRING&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_STRING&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_string&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_string (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GValue&lt;/a&gt; *value,
    const &lt;a href= &gt;gchar&lt;/a&gt; *v_string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_static_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-static-string</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-STRING:CAPS&quot; title=&quot;G_TYPE_STRING&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_STRING&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_string&lt;/code&gt;&lt;/em&gt;.
The string is assumed to be static, and is thus not duplicated
when setting the &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_static_string (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GValue&lt;/a&gt; *value,
    const &lt;a href= &gt;gchar&lt;/a&gt; *v_string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_take_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-take-string</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Sets the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-STRING:CAPS&quot; title=&quot;G_TYPE_STRING&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_STRING&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_string&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_take_string (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gchar&lt;/a&gt; *v_string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_string_take_ownership</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-string-take-ownership</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">This is an internal function introduced mainly for C marshallers.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_string_take_ownership (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gchar&lt;/a&gt; *v_string);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <DeprecatedInVersion>2.4</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_value_set_string_take_ownership&lt;/code&gt; has been deprecated since version 2.4 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#g-value-take-string&quot; title=&quot;g_value_take_string ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_take_string()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-string</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-STRING:CAPS&quot; title=&quot;G_TYPE_STRING&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_STRING&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt;* g_value_get_string (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_dup_string</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-dup-string</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get a copy the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-STRING:CAPS&quot; title=&quot;G_TYPE_STRING&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_STRING&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt;* g_value_dup_string (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_PARAM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-PARAM:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_PARAM&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_PARAM(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_PARAM))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_PARAM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-PARAM:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Casts a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecParam&quot; title=&quot;GParamSpecParam&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecParam&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_PARAM(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_PARAM, GParamSpecParam))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_PARAM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-PARAM:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values derived from type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_PARAM(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_PARAM))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_PARAM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-PARAM:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecParam&quot; title=&quot;GParamSpecParam&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecParam&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_PARAM (g_param_spec_types[15])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecParam</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecParam</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM&lt;/code&gt;&lt;/a&gt;
properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
} GParamSpecParam;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_param</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-param</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecParam&quot; title=&quot;GParamSpecParam&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecParam&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM&lt;/code&gt;&lt;/a&gt;
property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_param (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; param_type,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_param</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-param</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;param&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_param (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *param);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_take_param</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-take-param</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Sets the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;param&lt;/code&gt;&lt;/em&gt; and takes
over the ownership of the callers reference to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;param&lt;/code&gt;&lt;/em&gt;; the caller
doesn't have to unref it any more.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_take_param (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *param);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_param_take_ownership</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-param-take-ownership</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">This is an internal function introduced mainly for C marshallers.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_param_take_ownership (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *param);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <DeprecatedInVersion>2.4</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_value_set_param_take_ownership&lt;/code&gt; has been deprecated since version 2.4 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#g-value-take-param&quot; title=&quot;g_value_take_param ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_take_param()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_param</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-param</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt;* g_value_get_param (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_dup_param</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-dup-param</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;, increasing its
reference count.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt;* g_value_dup_param (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_BOXED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-BOXED:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-BOXED:CAPS&quot; title=&quot;G_TYPE_PARAM_BOXED&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_BOXED&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_BOXED(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_BOXED))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_BOXED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-BOXED:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoxed&quot; title=&quot;GParamSpecBoxed&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecBoxed&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_BOXED(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_BOXED, GParamSpecBoxed))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_BOXED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-BOXED:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values derived from type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOXED:CAPS&quot; title=&quot;G_TYPE_BOXED&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOXED&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_BOXED(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_BOXED))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_BOXED</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-BOXED:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoxed&quot; title=&quot;GParamSpecBoxed&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecBoxed&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_BOXED (g_param_spec_types[16])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecBoxed</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecBoxed</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for boxed properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
} GParamSpecBoxed;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_boxed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-boxed</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoxed&quot; title=&quot;GParamSpecBoxed&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecBoxed&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOXED:CAPS&quot; title=&quot;G_TYPE_BOXED&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOXED&lt;/code&gt;&lt;/a&gt;
derived property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_boxed (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; boxed_type,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_boxed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-boxed</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOXED:CAPS&quot; title=&quot;G_TYPE_BOXED&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOXED&lt;/code&gt;&lt;/a&gt; derived &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_boxed&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_boxed (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gconstpointer&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gconstpointer&lt;/a&gt; v_boxed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_static_boxed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-static-boxed</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOXED:CAPS&quot; title=&quot;G_TYPE_BOXED&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOXED&lt;/code&gt;&lt;/a&gt; derived &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_boxed&lt;/code&gt;&lt;/em&gt;.
The boxed value is assumed to be static, and is thus not duplicated
when setting the &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_static_boxed (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gconstpointer&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gconstpointer&lt;/a&gt; v_boxed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_take_boxed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-take-boxed</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Sets the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOXED:CAPS&quot; title=&quot;G_TYPE_BOXED&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOXED&lt;/code&gt;&lt;/a&gt; derived &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_boxed&lt;/code&gt;&lt;/em&gt;
and takes over the ownership of the callers reference to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_boxed&lt;/code&gt;&lt;/em&gt;;
the caller doesn't have to unref it any more.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_take_boxed (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gconstpointer&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gconstpointer&lt;/a&gt; v_boxed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_boxed_take_ownership</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-boxed-take-ownership</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">This is an internal function introduced mainly for C marshallers.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_boxed_take_ownership (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gconstpointer&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gconstpointer&lt;/a&gt; v_boxed);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <DeprecatedInVersion>2.4</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_value_set_boxed_take_ownership&lt;/code&gt; has been deprecated since version 2.4 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#g-value-take-boxed&quot; title=&quot;g_value_take_boxed ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_take_boxed()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_boxed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-boxed</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOXED:CAPS&quot; title=&quot;G_TYPE_BOXED&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOXED&lt;/code&gt;&lt;/a&gt; derived &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_value_get_boxed (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_dup_boxed</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-dup-boxed</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOXED:CAPS&quot; title=&quot;G_TYPE_BOXED&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOXED&lt;/code&gt;&lt;/a&gt; derived &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.  Upon getting,
the boxed value is duplicated and needs to be later freed with
&lt;a class=&quot;link&quot; href=&quot;gobject-Boxed-Types.html#g-boxed-free&quot; title=&quot;g_boxed_free ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_boxed_free()&lt;/code&gt;&lt;/a&gt;, e.g. like: g_boxed_free (G_VALUE_TYPE (&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt;),
return_value);</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_value_dup_boxed (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_POINTER</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-POINTER:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-POINTER:CAPS&quot; title=&quot;G_TYPE_PARAM_POINTER&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_POINTER&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_POINTER(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_POINTER))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_POINTER</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-POINTER:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Casts a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecPointer&quot; title=&quot;GParamSpecPointer&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecPointer&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_POINTER(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_POINTER, GParamSpecPointer))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_POINTER</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-POINTER:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-POINTER:CAPS&quot; title=&quot;G_TYPE_POINTER&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_POINTER&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_POINTER(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_POINTER))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_POINTER</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-POINTER:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecPointer&quot; title=&quot;GParamSpecPointer&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecPointer&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_POINTER (g_param_spec_types[17])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecPointer</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecPointer</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for pointer properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
} GParamSpecPointer;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_pointer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-pointer</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;span class=&quot;type&quot;&gt;GParamSpecPoiner&lt;/span&gt; instance specifying a pointer property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_pointer (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_pointer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-pointer</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a pointer &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_pointer&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_pointer (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gpointer&lt;/a&gt; v_pointer);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_pointer</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-pointer</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a pointer &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_value_get_pointer (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_OBJECT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-OBJECT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-OBJECT:CAPS&quot; title=&quot;G_TYPE_PARAM_OBJECT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_OBJECT&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_OBJECT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_OBJECT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_OBJECT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-OBJECT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Casts a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecObject&quot; title=&quot;GParamSpecObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecObject&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_OBJECT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_OBJECT, GParamSpecObject))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_OBJECT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-OBJECT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values derived from type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-OBJECT:CAPS&quot; title=&quot;G_TYPE_OBJECT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_OBJECT&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_OBJECT(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_OBJECT))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_OBJECT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-OBJECT:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecObject&quot; title=&quot;GParamSpecObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecObject&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_OBJECT (g_param_spec_types[19])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecObject</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecObject</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for object properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
} GParamSpecObject;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_object</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-object</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecBoxed&quot; title=&quot;GParamSpecBoxed&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecBoxed&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-OBJECT:CAPS&quot; title=&quot;G_TYPE_OBJECT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_OBJECT&lt;/code&gt;&lt;/a&gt;
derived property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_object (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; object_type,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_object</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-object</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-OBJECT:CAPS&quot; title=&quot;G_TYPE_OBJECT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_OBJECT&lt;/code&gt;&lt;/a&gt; derived &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_object&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_object (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gpointer&lt;/a&gt; v_object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_take_object</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-take-object</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Sets the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-OBJECT:CAPS&quot; title=&quot;G_TYPE_OBJECT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_OBJECT&lt;/code&gt;&lt;/a&gt; derived &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_object&lt;/code&gt;&lt;/em&gt;
and takes over the ownership of the callers reference to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_object&lt;/code&gt;&lt;/em&gt;;
the caller doesn't have to unref it any more (i.e. the reference
count of the object is not increased).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_take_object (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gpointer&lt;/a&gt; v_object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_object_take_ownership</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-object-take-ownership</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">This is an internal function introduced mainly for C marshallers.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_object_take_ownership (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a href= &gt;gpointer&lt;/a&gt; v_object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <DeprecatedInVersion>2.4</DeprecatedInVersion>
   <DeprecationSummary>&lt;code class=&quot;literal&quot;&gt;g_value_set_object_take_ownership&lt;/code&gt; has been deprecated since version 2.4 and should not be used in newly-written code. Use &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#g-value-take-object&quot; title=&quot;g_value_take_object ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_take_object()&lt;/code&gt;&lt;/a&gt; instead.</DeprecationSummary>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_object</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-object</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-OBJECT:CAPS&quot; title=&quot;G_TYPE_OBJECT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_OBJECT&lt;/code&gt;&lt;/a&gt; derived &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_value_get_object (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_dup_object</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-dup-object</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-OBJECT:CAPS&quot; title=&quot;G_TYPE_OBJECT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_OBJECT&lt;/code&gt;&lt;/a&gt; derived &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;, increasing
its reference count.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_value_dup_object (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_UNICHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-UNICHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-UNICHAR:CAPS&quot; title=&quot;G_TYPE_PARAM_UNICHAR&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_UNICHAR&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_UNICHAR(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UNICHAR))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_UNICHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-UNICHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUnichar&quot; title=&quot;GParamSpecUnichar&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUnichar&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_UNICHAR(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UNICHAR, GParamSpecUnichar))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_UNICHAR</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-UNICHAR:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUnichar&quot; title=&quot;GParamSpecUnichar&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUnichar&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_UNICHAR (g_param_spec_types[9])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecUnichar</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecUnichar</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for unichar (unsigned integer) properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    gunichar default_value;
} GParamSpecUnichar;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_unichar</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-unichar</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecUnichar&quot; title=&quot;GParamSpecUnichar&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecUnichar&lt;/span&gt;&lt;/a&gt; instance specifying a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-UINT:CAPS&quot; title=&quot;G_TYPE_UINT&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_UINT&lt;/code&gt;&lt;/a&gt;
property. &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; structures for this property can be accessed with
&lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#g-value-set-uint&quot; title=&quot;g_value_set_uint ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_set_uint()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#g-value-get-uint&quot; title=&quot;g_value_get_uint ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_get_uint()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_unichar (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;./../glib/glib/glib-Unicode-Manipulation.html#gunichar&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a href=&quot;link&quot; &gt;gunichar&lt;/a&gt; default_value,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_VALUE_ARRAY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-VALUE-ARRAY:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-VALUE-ARRAY:CAPS&quot; title=&quot;G_TYPE_PARAM_VALUE_ARRAY&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_VALUE_ARRAY&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_VALUE_ARRAY(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_VALUE_ARRAY))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_VALUE_ARRAY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-VALUE-ARRAY:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Cast a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecValueArray&quot; title=&quot;GParamSpecValueArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecValueArray&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_VALUE_ARRAY(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_VALUE_ARRAY, GParamSpecValueArray))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_VALUE_ARRAY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-VALUE-ARRAY:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecValueArray&quot; title=&quot;GParamSpecValueArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecValueArray&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_VALUE_ARRAY (g_param_spec_types[18])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecValueArray</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecValueArray</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for &lt;a class=&quot;link&quot; href=&quot;gobject-Value-arrays.html#GValueArray&quot; title=&quot;GValueArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValueArray&lt;/span&gt;&lt;/a&gt; properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    GParamSpec *element_spec;
    guint fixed_n_elements;
} GParamSpecValueArray;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_value_array</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-value-array</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecValueArray&quot; title=&quot;GParamSpecValueArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecValueArray&lt;/span&gt;&lt;/a&gt; instance specifying a
&lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#G-TYPE-VALUE-ARRAY:CAPS&quot; title=&quot;G_TYPE_VALUE_ARRAY&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_VALUE_ARRAY&lt;/code&gt;&lt;/a&gt; property. &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#G-TYPE-VALUE-ARRAY:CAPS&quot; title=&quot;G_TYPE_VALUE_ARRAY&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_VALUE_ARRAY&lt;/code&gt;&lt;/a&gt; is a
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-BOXED:CAPS&quot; title=&quot;G_TYPE_BOXED&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_BOXED&lt;/code&gt;&lt;/a&gt; type, as such, &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; structures for this property
can be accessed with &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#g-value-set-boxed&quot; title=&quot;g_value_set_boxed ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_set_boxed()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#g-value-get-boxed&quot; title=&quot;g_value_get_boxed ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_value_get_boxed()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_value_array (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt; *element_spec,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_OVERRIDE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-OVERRIDE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-OVERRIDE:CAPS&quot; title=&quot;G_TYPE_PARAM_OVERRIDE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_OVERRIDE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_OVERRIDE(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_OVERRIDE))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_OVERRIDE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-OVERRIDE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Casts a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecOverride&quot; title=&quot;GParamSpecOverride&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecOverride&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_OVERRIDE(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_OVERRIDE, GParamSpecOverride))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_OVERRIDE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-OVERRIDE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecOverride&quot; title=&quot;GParamSpecOverride&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecOverride&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_OVERRIDE (g_param_spec_types[20])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecOverride</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecOverride</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">This is a type of &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; type that simply redirects operations to
another paramspec.  All operations other than getting or
setting the value are redirected, including accessing the nick and
blurb, validating a value, and so forth. See
&lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#g-param-spec-get-redirect-target&quot; title=&quot;g_param_spec_get_redirect_target ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_param_spec_get_redirect_target()&lt;/code&gt;&lt;/a&gt; for retrieving the overidden
property. &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecOverride&quot; title=&quot;GParamSpecOverride&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecOverride&lt;/span&gt;&lt;/a&gt; is used in implementing
&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-class-override-property&quot; title=&quot;g_object_class_override_property ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_class_override_property()&lt;/code&gt;&lt;/a&gt;, and will not be directly useful
unless you are implementing a new base type similar to GObject.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
} GParamSpecOverride;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_override</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-override</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new property of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecOverride&quot; title=&quot;GParamSpecOverride&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecOverride&lt;/span&gt;&lt;/a&gt;. This is used
to direct operations to another paramspec, and will not be directly
useful unless you are implementing a new base type similar to GObject.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_override (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *name,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *overridden);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_GTYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-IS-PARAM-SPEC-GTYPE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#G-TYPE-PARAM-GTYPE:CAPS&quot; title=&quot;G_TYPE_PARAM_GTYPE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM_GTYPE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_GTYPE(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_GTYPE))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_GTYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-PARAM-SPEC-GTYPE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Casts a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; into a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecGType&quot; title=&quot;GParamSpecGType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecGType&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_GTYPE(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_GTYPE, GParamSpecGType))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_HOLDS_GTYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-VALUE-HOLDS-GTYPE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Checks whether the given &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; can hold values of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-GTYPE:CAPS&quot; title=&quot;G_TYPE_GTYPE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_GTYPE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_HOLDS_GTYPE(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_GTYPE))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_PARAM_GTYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>G-TYPE-PARAM-GTYPE:CAPS</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecGType&quot; title=&quot;GParamSpecGType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecGType&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_PARAM_GTYPE (g_param_spec_types[21])&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecGType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>GParamSpecGType</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; derived structure that contains the meta data for &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; properties.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GParamSpec parent_instance;
    GType is_a_type;
} GParamSpecGType;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_gtype</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-param-spec-gtype</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecGType&quot; title=&quot;GParamSpecGType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecGType&lt;/span&gt;&lt;/a&gt; instance specifying a
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-GTYPE:CAPS&quot; title=&quot;G_TYPE_GTYPE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_GTYPE&lt;/code&gt;&lt;/a&gt; property.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_gtype (
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; is_a_type,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_get_gtype</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-get-gtype</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Get the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-GTYPE:CAPS&quot; title=&quot;G_TYPE_GTYPE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_GTYPE&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; g_value_get_gtype (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_set_gtype</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Standard-Parameter-and-Value-Types.html</Path>
  <Anchor>g-value-set-gtype</Anchor>
  <NodeRef refid="27"/>
  <Abstract type="html">Set the contents of a &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-GTYPE:CAPS&quot; title=&quot;G_TYPE_GTYPE&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_GTYPE&lt;/code&gt;&lt;/a&gt; &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;v_gtype&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_set_gtype (
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *value,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; v_gtype);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.12</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GTypeCValue</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Varargs-Value-Collection.html</Path>
  <Anchor>GTypeCValue</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">A union holding one collected value.</Abstract>
  <Declaration type="html">&lt;pre&gt;union GTypeCValue {
    gint v_int;
    glong v_long;
    gint64 v_int64;
    gdouble v_double;
    gpointer v_pointer;
};
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>gobject/gvaluecollector.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_COLLECT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Varargs-Value-Collection.html</Path>
  <Anchor>G-VALUE-COLLECT:CAPS</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Collects a variable argument value from a va_list. We have to
implement the varargs collection as a macro, because on some systems
va_list variables cannot be passed by reference.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_COLLECT(value, var_args, flags, __error)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>gobject/gvaluecollector.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_LCOPY</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Varargs-Value-Collection.html</Path>
  <Anchor>G-VALUE-LCOPY:CAPS</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">Collects a value's variable argument locations from a va_list. Usage is
analogous to &lt;a class=&quot;link&quot; href=&quot;gobject-Varargs-Value-Collection.html#G-VALUE-COLLECT:CAPS&quot; title=&quot;G_VALUE_COLLECT()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_VALUE_COLLECT()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_LCOPY(value, var_args, flags, __error)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>gobject/gvaluecollector.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_VALUE_COLLECT_FORMAT_MAX_LENGTH</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Varargs-Value-Collection.html</Path>
  <Anchor>G-VALUE-COLLECT-FORMAT-MAX-LENGTH:CAPS</Anchor>
  <NodeRef refid="28"/>
  <Abstract type="html">The maximal number of &lt;a class=&quot;link&quot; href=&quot;gobject-Varargs-Value-Collection.html#GTypeCValue&quot; title=&quot;union GTypeCValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GTypeCValue&lt;/span&gt;&lt;/a&gt;s which can be collected for a 
single &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_VALUE_COLLECT_FORMAT_MAX_LENGTH (8)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>gobject/gvaluecollector.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IS_PARAM</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-TYPE-IS-PARAM:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; &quot;is a&quot; &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IS_PARAM(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_PARAM)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-PARAM-SPEC:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Casts a derived &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; object (e.g. of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt&quot; title=&quot;GParamSpecInt&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecInt&lt;/span&gt;&lt;/a&gt;) into
a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; object.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM, GParamSpec))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-IS-PARAM-SPEC:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt; &quot;is a&quot; valid &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; structure of type &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM&lt;/code&gt;&lt;/a&gt;
or derived.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-PARAM-SPEC-CLASS:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Casts a derived &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpecClass&quot; title=&quot;GParamSpecClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecClass&lt;/span&gt;&lt;/a&gt; structure into a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpecClass&quot; title=&quot;GParamSpecClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecClass&lt;/span&gt;&lt;/a&gt; structure.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_CLASS(pclass) (G_TYPE_CHECK_CLASS_CAST ((pclass), G_TYPE_PARAM, GParamSpecClass))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_IS_PARAM_SPEC_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-IS-PARAM-SPEC-CLASS:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pclass&lt;/code&gt;&lt;/em&gt; &quot;is a&quot; valid &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpecClass&quot; title=&quot;GParamSpecClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecClass&lt;/span&gt;&lt;/a&gt; structure of type 
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_TYPE_PARAM&lt;/code&gt;&lt;/a&gt; or derived.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_IS_PARAM_SPEC_CLASS(pclass) (G_TYPE_CHECK_CLASS_TYPE ((pclass), G_TYPE_PARAM))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_GET_CLASS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-PARAM-SPEC-GET-CLASS:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Retrieves the &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpecClass&quot; title=&quot;GParamSpecClass&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecClass&lt;/span&gt;&lt;/a&gt; of a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_GET_CLASS(pspec) (G_TYPE_INSTANCE_GET_CLASS ((pspec), G_TYPE_PARAM, GParamSpecClass))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-PARAM-SPEC-TYPE:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Retrieves the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; of this &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_TYPE(pspec) (G_TYPE_FROM_INSTANCE (pspec))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_TYPE_NAME</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-PARAM-SPEC-TYPE-NAME:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Retrieves the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; name of this &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_TYPE_NAME(pspec) (g_type_name (G_PARAM_SPEC_TYPE (pspec)))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_SPEC_VALUE_TYPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-PARAM-SPEC-VALUE-TYPE:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Retrieves the &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; to initialize a &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; for this parameter.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_SPEC_VALUE_TYPE(pspec) (G_PARAM_SPEC (pspec)-&amp;gt;
    value_type)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpec</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamSpec</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">All other fields of the &lt;span class=&quot;structname&quot;&gt;GParamSpec&lt;/span&gt; struct are private and
should not be used directly.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GTypeInstance g_type_instance;
    gchar *name;
    GParamFlags flags;
    GType value_type;
    GType owner_type;
} GParamSpec;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecClass</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamSpecClass</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">The class structure for the &lt;span class=&quot;structname&quot;&gt;GParamSpec&lt;/span&gt; type.
Normally, &lt;span class=&quot;structname&quot;&gt;GParamSpec&lt;/span&gt; classes are filled by
&lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#g-param-type-register-static&quot; title=&quot;g_param_type_register_static ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_param_type_register_static()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GTypeClass g_type_class;
    GType value_type;
    void (*finalize) (GParamSpec *pspec);
    void (*value_set_default) (GParamSpec *pspec, GValue *value);
    gboolean (*value_validate) (GParamSpec *pspec, GValue *value);
    gint (*values_cmp) (GParamSpec *pspec, const GValue *value1, const GValue *value2);
} GParamSpecClass;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_READABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamFlags</Anchor>
  <NodeRef refid="536"/>
  <Declaration type="html">&lt;pre&gt;G_PARAM_READABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GParamFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_WRITABLE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamFlags</Anchor>
  <NodeRef refid="536"/>
  <Declaration type="html">&lt;pre&gt;G_PARAM_WRITABLE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GParamFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_CONSTRUCT</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamFlags</Anchor>
  <NodeRef refid="536"/>
  <Declaration type="html">&lt;pre&gt;G_PARAM_CONSTRUCT&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GParamFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_CONSTRUCT_ONLY</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamFlags</Anchor>
  <NodeRef refid="536"/>
  <Declaration type="html">&lt;pre&gt;G_PARAM_CONSTRUCT_ONLY&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GParamFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_LAX_VALIDATION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamFlags</Anchor>
  <NodeRef refid="536"/>
  <Declaration type="html">&lt;pre&gt;G_PARAM_LAX_VALIDATION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GParamFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_STATIC_NAME</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamFlags</Anchor>
  <NodeRef refid="536"/>
  <Declaration type="html">&lt;pre&gt;G_PARAM_STATIC_NAME&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GParamFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>ifndef</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamFlags</Anchor>
  <NodeRef refid="536"/>
  <Declaration type="html">&lt;pre&gt;ifndef&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GParamFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>endif</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamFlags</Anchor>
  <NodeRef refid="536"/>
  <Declaration type="html">&lt;pre&gt;endif&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GParamFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_STATIC_BLURB</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamFlags</Anchor>
  <NodeRef refid="536"/>
  <Declaration type="html">&lt;pre&gt;G_PARAM_STATIC_BLURB&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GParamFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamFlags</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Through the &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamFlags&quot; title=&quot;enum GParamFlags&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamFlags&lt;/span&gt;&lt;/a&gt; flag values, certain aspects of parameters
can be configured.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_PARAM_READABLE = 1 &amp;lt;&amp;lt; 0,
    G_PARAM_WRITABLE = 1 &amp;lt;&amp;lt; 1,
    G_PARAM_CONSTRUCT = 1 &amp;lt;&amp;lt; 2,
    G_PARAM_CONSTRUCT_ONLY = 1 &amp;lt;&amp;lt; 3,
    G_PARAM_LAX_VALIDATION = 1 &amp;lt;&amp;lt; 4,
    G_PARAM_STATIC_NAME = 1 &amp;lt;&amp;lt; 5,
    #ifndef G_DISABLE_DEPRECATED G_PARAM_PRIVATE = G_PARAM_STATIC_NAME,
    #endif G_PARAM_STATIC_NICK = 1 &amp;lt;&amp;lt; 6,
    G_PARAM_STATIC_BLURB = 1 &amp;lt;&amp;lt; 7 
} GParamFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_READWRITE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-PARAM-READWRITE:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">&lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamFlags&quot; title=&quot;enum GParamFlags&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamFlags&lt;/span&gt;&lt;/a&gt; value alias for &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#G-PARAM-READABLE:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_PARAM_READABLE&lt;/code&gt;&lt;/a&gt; | &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#G-PARAM-WRITABLE:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_PARAM_WRITABLE&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_READWRITE (G_PARAM_READABLE | G_PARAM_WRITABLE)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_STATIC_STRINGS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-PARAM-STATIC-STRINGS:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">&lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamFlags&quot; title=&quot;enum GParamFlags&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamFlags&lt;/span&gt;&lt;/a&gt; value alias for &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#G-PARAM-STATIC-NAME:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_PARAM_STATIC_NAME&lt;/code&gt;&lt;/a&gt; | &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#G-PARAM-STATIC-NICK:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_PARAM_STATIC_NICK&lt;/code&gt;&lt;/a&gt; | &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#G-PARAM-STATIC-BLURB:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_PARAM_STATIC_BLURB&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_STATIC_STRINGS (G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_MASK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-PARAM-MASK:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Mask containing the bits of &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;.flags which are reserved for GLib.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_MASK (0x000000ff)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_PARAM_USER_SHIFT</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>G-PARAM-USER-SHIFT:CAPS</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Minimum shift count to be used for user defined flags, to be stored in
&lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;.flags.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_PARAM_USER_SHIFT (8)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-ref</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Increments the reference count of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_ref (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-unref</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Decrements the reference count of a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_param_spec_unref (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_sink</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-sink</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">The initial reference count of a newly created &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; is 1,
even though no one has explicitly called &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#g-param-spec-ref&quot; title=&quot;g_param_spec_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_param_spec_ref()&lt;/code&gt;&lt;/a&gt; on it
yet. So the initial reference count is flagged as &quot;floating&quot;, until
someone calls &lt;code class=&quot;literal&quot;&gt;g_param_spec_ref (pspec); g_param_spec_sink
(pspec);&lt;/code&gt; in sequence on it, taking over the initial
reference count (thus ending up with a &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt; that has a reference
count of 1 still, but is not flagged &quot;floating&quot; anymore).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_param_spec_sink (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_ref_sink</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-ref-sink</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Convenience function to ref and sink a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_ref_sink (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.10</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_value_set_default</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-value-set-default</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Sets &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; to its default value as specified in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_param_value_set_default (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt; *pspec,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_value_defaults</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-value-defaults</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Checks whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; contains the default value as specified in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_param_value_defaults (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt; *pspec,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_value_validate</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-value-validate</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Ensures that the contents of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; comply with the specifications
set out by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt;. For example, a &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecInt&quot; title=&quot;GParamSpecInt&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecInt&lt;/span&gt;&lt;/a&gt; might require
that integers stored in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; may not be smaller than -42 and not be
greater than +42. If &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; contains an integer outside of this range,
it is modified accordingly, so the resulting value will fit into the
range -42 .. +42.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_param_value_validate (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt; *pspec,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_value_convert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-value-convert</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Transforms &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;src_value&lt;/code&gt;&lt;/em&gt; into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest_value&lt;/code&gt;&lt;/em&gt; if possible, and then
validates &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest_value&lt;/code&gt;&lt;/em&gt;, in order for it to conform to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt;.  If
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;strict_validation&lt;/code&gt;&lt;/em&gt; is &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#TRUE:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; this function will only succeed if the
transformed &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;dest_value&lt;/code&gt;&lt;/em&gt; complied to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt; without modifications.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_param_value_convert (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt; *pspec,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *src_value,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot;&gt;GValue&lt;/a&gt; *dest_value,
    &lt;a href= &gt;gboolean&lt;/a&gt; strict_validation);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_values_cmp</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-values-cmp</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Compares &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value1&lt;/code&gt;&lt;/em&gt; with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value2&lt;/code&gt;&lt;/em&gt; according to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt;, and return -1, 0 or +1,
if &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value1&lt;/code&gt;&lt;/em&gt; is found to be less than, equal to or greater than &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value2&lt;/code&gt;&lt;/em&gt;,
respectively.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gint&lt;/a&gt; g_param_values_cmp (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt; *pspec,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *value1,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value2);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_get_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-get-name</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Get the name of a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt;* g_param_spec_get_name (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_get_nick</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-get-nick</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Get the nickname of a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt;* g_param_spec_get_nick (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_get_blurb</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-get-blurb</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Get the short description of a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt;* g_param_spec_get_blurb (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_get_qdata</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-get-qdata</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Gets back user data pointers stored via &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#g-param-spec-set-qdata&quot; title=&quot;g_param_spec_set_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_param_spec_set_qdata()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_param_spec_get_qdata (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;&gt;GParamSpec&lt;/a&gt; *pspec,
    &lt;a href= &gt;GQuark&lt;/a&gt; quark);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_set_qdata</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-set-qdata</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Sets an opaque, named pointer on a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;. The name is
specified through a &lt;a
href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GQuark&lt;/span&gt;&lt;/a&gt; (retrieved e.g. via
&lt;a
href=&quot;./../glib/glib/glib-Quarks.html#g-quark-from-static-string&quot;
&gt;&lt;code class=&quot;function&quot;&gt;g_quark_from_static_string()&lt;/code&gt;&lt;/a&gt;), and the pointer can be gotten back
from the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt; with &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#g-param-spec-get-qdata&quot; title=&quot;g_param_spec_get_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_param_spec_get_qdata()&lt;/code&gt;&lt;/a&gt;.  Setting a
previously set user data pointer, overrides (frees) the old pointer
set, using &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#NULL:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt; as pointer essentially removes the data stored.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_param_spec_set_qdata (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;&gt;GParamSpec&lt;/a&gt; *pspec,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;GQuark&lt;/a&gt; quark,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_set_qdata_full</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-set-qdata-full</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">This function works like &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#g-param-spec-set-qdata&quot; title=&quot;g_param_spec_set_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_param_spec_set_qdata()&lt;/code&gt;&lt;/a&gt;, but in addition,
a &lt;code class=&quot;literal&quot;&gt;void (*destroy) (gpointer)&lt;/code&gt; function may be
specified which is called with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; as argument when the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt; is
finalized, or the data is being overwritten by a call to
&lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#g-param-spec-set-qdata&quot; title=&quot;g_param_spec_set_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_param_spec_set_qdata()&lt;/code&gt;&lt;/a&gt; with the same &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;quark&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_param_spec_set_qdata_full (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;&gt;GParamSpec&lt;/a&gt; *pspec,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;GQuark&lt;/a&gt; quark,
    &lt;a href=&quot;./../glib/glib/glib-Datasets.html#GDestroyNotify&quot; &gt;gpointer&lt;/a&gt; data,
    &lt;a href= &gt;GDestroyNotify&lt;/a&gt; destroy);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_steal_qdata</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-steal-qdata</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Gets back user data pointers stored via &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#g-param-spec-set-qdata&quot; title=&quot;g_param_spec_set_qdata ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_param_spec_set_qdata()&lt;/code&gt;&lt;/a&gt;
and removes the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;pspec&lt;/code&gt;&lt;/em&gt; without invoking it's &lt;code class=&quot;function&quot;&gt;destroy()&lt;/code&gt;
function (if any was set).  Usually, calling this function is only
required to update user data pointers with a destroy notifier.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_param_spec_steal_qdata (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot;&gt;GParamSpec&lt;/a&gt; *pspec,
    &lt;a href= &gt;GQuark&lt;/a&gt; quark);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_get_redirect_target</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-get-redirect-target</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">If the paramspec redirects operations to another paramspec,
returns that paramspec. Redirect is used typically for
providing a new implementation of a property in a derived
type while preserving all the properties from the parent
type. Redirection is established by creating a property
of type &lt;a class=&quot;link&quot; href=&quot;gobject-Standard-Parameter-and-Value-Types.html#GParamSpecOverride&quot; title=&quot;GParamSpecOverride&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecOverride&lt;/span&gt;&lt;/a&gt;. See &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-class-override-property&quot; title=&quot;g_object_class_override_property ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_class_override_property()&lt;/code&gt;&lt;/a&gt;
for an example of the use of this capability.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_get_redirect_target (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_internal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-internal</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; instance.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; g_param_spec_internal (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; param_type,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gchar&lt;/a&gt; *nick,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *blurb,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamFlags&quot; href=&quot;enum GParamFlags&quot; title=&gt;GParamFlags&lt;/a&gt; flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecTypeInfo</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamSpecTypeInfo</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">This structure is used to provide the type system with the information
required to initialize and destruct (finalize) a parameter's class and
instances thereof.
The initialized structure is passed to the &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#g-param-type-register-static&quot; title=&quot;g_param_type_register_static ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_param_type_register_static()&lt;/code&gt;&lt;/a&gt; 
The type system will perform a deep copy of this structure, so it's memory 
does not need to be persistent across invocation of 
&lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#g-param-type-register-static&quot; title=&quot;g_param_type_register_static ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_param_type_register_static()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    guint16 instance_size;
    guint16 n_preallocs;
    void (*instance_init) (GParamSpec *pspec);
    GType value_type;
    void (*finalize) (GParamSpec *pspec);
    void (*value_set_default) (GParamSpec *pspec,  GValue *value);
    gboolean (*value_validate) (GParamSpec *pspec,  GValue *value);
    gint (*values_cmp) (GParamSpec *pspec,  const GValue *value1, const GValue *value2);
} GParamSpecTypeInfo;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_type_register_static</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-type-register-static</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Registers &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/em&gt; as the name of a new static type derived from
&lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#G-TYPE-PARAM:CAPS&quot; title=&quot;G_TYPE_PARAM&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_TYPE_PARAM&lt;/span&gt;&lt;/a&gt;. The type system uses the information contained in
the &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpecTypeInfo&quot; title=&quot;GParamSpecTypeInfo&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecTypeInfo&lt;/span&gt;&lt;/a&gt; structure pointed to by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;info&lt;/code&gt;&lt;/em&gt; to manage the
&lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; type and its instances.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GType&lt;/a&gt; g_param_type_register_static (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *name,
    const &lt;a class=&quot;gobject-GParamSpec.html#GParamSpecTypeInfo&quot; href=&quot;GParamSpecTypeInfo&quot; title=&gt;GParamSpecTypeInfo&lt;/a&gt; *pspec_info);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GParamSpecPool</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>GParamSpecPool</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpecPool&quot; title=&quot;GParamSpecPool&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecPool&lt;/span&gt;&lt;/a&gt; maintains a collection of &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;s which can be
quickly accessed by owner and name. The implementation of the &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt; property
system uses such a pool to store the &lt;span class=&quot;type&quot;&gt;GParamSpecs&lt;/span&gt; of the properties all object
types.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct _GParamSpecPool GParamSpecPool;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_pool_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-pool-new</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Creates a new &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpecPool&quot; title=&quot;GParamSpecPool&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpecPool&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpecPool&quot; href=&quot;GParamSpecPool&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot;&gt;GParamSpecPool&lt;/a&gt;* g_param_spec_pool_new (
    &lt;a href= &gt;gboolean&lt;/a&gt; type_prefixing);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_pool_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-pool-insert</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Inserts a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; in the pool.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_param_spec_pool_insert (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpecPool&quot; href=&quot;GParamSpecPool&quot; title=&quot;link&quot;&gt;GParamSpecPool&lt;/a&gt; *pool,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt; *pspec,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; owner_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_pool_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-pool-remove</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Removes a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; from the pool.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_param_spec_pool_remove (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpecPool&quot; href=&quot;GParamSpecPool&quot; title=&quot;link&quot;&gt;GParamSpecPool&lt;/a&gt; *pool,
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&gt;GParamSpec&lt;/a&gt; *pspec);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_pool_lookup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-pool-lookup</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Looks up a &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt; in the pool.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt;* g_param_spec_pool_lookup (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpecPool&quot; href=&quot;GParamSpecPool&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot;&gt;GParamSpecPool&lt;/a&gt; *pool,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *param_name,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot;&gt;GType&lt;/a&gt; owner_type,
    &lt;a href= &gt;gboolean&lt;/a&gt; walk_ancestors);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_pool_list</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-pool-list</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Gets an array of all &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;s owned by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;owner_type&lt;/code&gt;&lt;/em&gt; in
the pool.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-GParamSpec.html#GParamSpec&quot; href=&quot;GParamSpec&quot; title=&quot;link&quot;&gt;GParamSpec&lt;/a&gt;** g_param_spec_pool_list (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpecPool&quot; href=&quot;GParamSpecPool&quot; title=&quot;link&quot;&gt;GParamSpecPool&lt;/a&gt; *pool,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; owner_type,
    &lt;a href= &gt;guint&lt;/a&gt; *n_pspecs_p);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_param_spec_pool_list_owned</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-GParamSpec.html</Path>
  <Anchor>g-param-spec-pool-list-owned</Anchor>
  <NodeRef refid="29"/>
  <Abstract type="html">Gets an &lt;a
href=&quot;./../glib/glib/glib-Doubly-Linked-Lists.html#GList&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GList&lt;/span&gt;&lt;/a&gt; of all &lt;a class=&quot;link&quot; href=&quot;gobject-GParamSpec.html#GParamSpec&quot; title=&quot;GParamSpec&quot;&gt;&lt;span class=&quot;type&quot;&gt;GParamSpec&lt;/span&gt;&lt;/a&gt;s owned by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;owner_type&lt;/code&gt;&lt;/em&gt; in
the pool.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;GList&lt;/a&gt;* g_param_spec_pool_list_owned (
    &lt;a class=&quot;gobject-GParamSpec.html#GParamSpecPool&quot; href=&quot;GParamSpecPool&quot; title=&quot;link&quot;&gt;GParamSpecPool&lt;/a&gt; *pool,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; owner_type);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSignalInvocationHint</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalInvocationHint</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#GSignalInvocationHint&quot; title=&quot;GSignalInvocationHint&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSignalInvocationHint&lt;/span&gt;&lt;/a&gt; structure is used to pass on additional information
to callbacks during a signal emission.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    guint signal_id;
    GQuark detail;
    GSignalFlags run_type;
} GSignalInvocationHint;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSignalAccumulator</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalAccumulator</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">The signal accumulator is a special callback function that can be used
to collect return values of the various callbacks that are called
during a signal emission. The signal accumulator is specified at signal
creation time, if it is left &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#NULL:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;NULL&lt;/code&gt;&lt;/a&gt;, no accumulation of callback return
values is performed. The return value of signal emissions is then the
value returned by the last callback.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; (
    *GSignalAccumulator) (
    &lt;a class=&quot;gobject-Signals.html#GSignalInvocationHint&quot; href=&quot;GSignalInvocationHint&quot; title=&quot;link&quot;&gt;GSignalInvocationHint&lt;/a&gt; *ihint,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *return_accu,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *handler_return,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSignalCMarshaller</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalCMarshaller</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">This is the signature of marshaller functions, required to marshall
arrays of parameter values to signal emissions into C language callback
invocations. It is merely an alias to &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GClosureMarshal&quot; title=&quot;GClosureMarshal ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GClosureMarshal&lt;/span&gt;&lt;/a&gt; since the &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GClosure&quot; title=&quot;GClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GClosure&lt;/span&gt;&lt;/a&gt;
mechanism takes over responsibility of actual function invocation for the
signal system.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef GClosureMarshal GSignalCMarshaller;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSignalEmissionHook</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalEmissionHook</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">A simple function pointer to get invoked when the signal is emitted. This 
allows you to tie a hook to the signal type, so that it will trap all 
emissions of that signal, from any object.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; (
    *GSignalEmissionHook) (
    &lt;a class=&quot;gobject-Signals.html#GSignalInvocationHint&quot; href=&quot;GSignalInvocationHint&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GSignalInvocationHint&lt;/a&gt; *ihint,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_RUN_FIRST</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalFlags</Anchor>
  <NodeRef refid="572"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_RUN_FIRST&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_RUN_LAST</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalFlags</Anchor>
  <NodeRef refid="572"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_RUN_LAST&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_RUN_CLEANUP</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalFlags</Anchor>
  <NodeRef refid="572"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_RUN_CLEANUP&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_NO_RECURSE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalFlags</Anchor>
  <NodeRef refid="572"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_NO_RECURSE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_DETAILED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalFlags</Anchor>
  <NodeRef refid="572"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_DETAILED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_ACTION</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalFlags</Anchor>
  <NodeRef refid="572"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_ACTION&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_NO_HOOKS</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalFlags</Anchor>
  <NodeRef refid="572"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_NO_HOOKS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSignalFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalFlags</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">The signal flags are used to specify a signal's behaviour, the overall
signal description outlines how especially the RUN flags control the
stages of a signal emission.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_SIGNAL_RUN_FIRST = 1 &amp;lt;&amp;lt; 0,
    G_SIGNAL_RUN_LAST = 1 &amp;lt;&amp;lt; 1,
    G_SIGNAL_RUN_CLEANUP = 1 &amp;lt;&amp;lt; 2,
    G_SIGNAL_NO_RECURSE = 1 &amp;lt;&amp;lt; 3,
    G_SIGNAL_DETAILED = 1 &amp;lt;&amp;lt; 4,
    G_SIGNAL_ACTION = 1 &amp;lt;&amp;lt; 5,
    G_SIGNAL_NO_HOOKS = 1 &amp;lt;&amp;lt; 6 
} GSignalFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_MATCH_ID</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalMatchType</Anchor>
  <NodeRef refid="573"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_MATCH_ID&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalMatchType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_MATCH_DETAIL</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalMatchType</Anchor>
  <NodeRef refid="573"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_MATCH_DETAIL&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalMatchType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_MATCH_CLOSURE</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalMatchType</Anchor>
  <NodeRef refid="573"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_MATCH_CLOSURE&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalMatchType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_MATCH_FUNC</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalMatchType</Anchor>
  <NodeRef refid="573"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_MATCH_FUNC&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalMatchType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_MATCH_DATA</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalMatchType</Anchor>
  <NodeRef refid="573"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_MATCH_DATA&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalMatchType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_MATCH_UNBLOCKED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalMatchType</Anchor>
  <NodeRef refid="573"/>
  <Declaration type="html">&lt;pre&gt;G_SIGNAL_MATCH_UNBLOCKED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GSignalMatchType</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSignalMatchType</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalMatchType</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">The match types specify what &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-handlers-block-matched&quot; title=&quot;g_signal_handlers_block_matched ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_handlers_block_matched()&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-handlers-unblock-matched&quot; title=&quot;g_signal_handlers_unblock_matched ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_handlers_unblock_matched()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-handlers-disconnect-matched&quot; title=&quot;g_signal_handlers_disconnect_matched ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_handlers_disconnect_matched()&lt;/code&gt;&lt;/a&gt;
match signals by.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_SIGNAL_MATCH_ID = 1 &amp;lt;&amp;lt; 0,
    G_SIGNAL_MATCH_DETAIL = 1 &amp;lt;&amp;lt; 1,
    G_SIGNAL_MATCH_CLOSURE = 1 &amp;lt;&amp;lt; 2,
    G_SIGNAL_MATCH_FUNC = 1 &amp;lt;&amp;lt; 3,
    G_SIGNAL_MATCH_DATA = 1 &amp;lt;&amp;lt; 4,
    G_SIGNAL_MATCH_UNBLOCKED = 1 &amp;lt;&amp;lt; 5 
} GSignalMatchType;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GSignalQuery</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GSignalQuery</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">A structure holding in-depth information for a specific signal. It is
filled in by the &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-query&quot; title=&quot;g_signal_query ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_query()&lt;/code&gt;&lt;/a&gt; function.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    guint signal_id;
    const gchar *signal_name;
    GType itype;
    GSignalFlags signal_flags;
    GType return_type;
    guint n_params;
    const GType *param_types;
} GSignalQuery;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_TYPE_STATIC_SCOPE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>G-SIGNAL-TYPE-STATIC-SCOPE:CAPS</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">This macro flags signal argument types for which the signal system may 
assume that instances thereof remain persistent across all signal emissions
they are used in. This is only useful for non ref-counted, value-copy types.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_SIGNAL_TYPE_STATIC_SCOPE (G_TYPE_FLAG_RESERVED_ID_BIT)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_MATCH_MASK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>G-SIGNAL-MATCH-MASK:CAPS</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">A mask for all &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#GSignalMatchType&quot; title=&quot;enum GSignalMatchType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSignalMatchType&lt;/span&gt;&lt;/a&gt; bits.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_SIGNAL_MATCH_MASK 0x3f&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_SIGNAL_FLAGS_MASK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>G-SIGNAL-FLAGS-MASK:CAPS</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">A mask for all &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#GSignalFlags&quot; title=&quot;enum GSignalFlags&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSignalFlags&lt;/span&gt;&lt;/a&gt; bits.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_SIGNAL_FLAGS_MASK 0x7f&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-new</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Creates a new signal. (This is usually done in the class initializer.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;guint&lt;/a&gt; g_signal_new (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *signal_name,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; itype,
    &lt;a class=&quot;gobject-Signals.html#GSignalFlags&quot; href=&quot;enum GSignalFlags&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GSignalFlags&lt;/a&gt; signal_flags,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; class_offset,
    &lt;a class=&quot;gobject-Signals.html#GSignalAccumulator&quot; href=&quot;GSignalAccumulator ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GSignalAccumulator&lt;/a&gt; accumulator,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; accu_data,
    &lt;a class=&quot;gobject-Signals.html#GSignalCMarshaller&quot; href=&quot;GSignalCMarshaller&quot; title=&quot;link&quot;&gt;GSignalCMarshaller&lt;/a&gt; c_marshaller,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; return_type,
    &lt;a href= &gt;guint&lt;/a&gt; n_params,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_newv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-newv</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Creates a new signal. (This is usually done in the class initializer.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;guint&lt;/a&gt; g_signal_newv (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *signal_name,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; itype,
    &lt;a class=&quot;gobject-Signals.html#GSignalFlags&quot; href=&quot;enum GSignalFlags&quot; title=&quot;link&quot;&gt;GSignalFlags&lt;/a&gt; signal_flags,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *class_closure,
    &lt;a class=&quot;gobject-Signals.html#GSignalAccumulator&quot; href=&quot;GSignalAccumulator ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GSignalAccumulator&lt;/a&gt; accumulator,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; accu_data,
    &lt;a class=&quot;gobject-Signals.html#GSignalCMarshaller&quot; href=&quot;GSignalCMarshaller&quot; title=&quot;link&quot;&gt;GSignalCMarshaller&lt;/a&gt; c_marshaller,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; return_type,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_params,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; *param_types);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_new_valist</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-new-valist</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Creates a new signal. (This is usually done in the class initializer.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;guint&lt;/a&gt; g_signal_new_valist (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *signal_name,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; itype,
    &lt;a class=&quot;gobject-Signals.html#GSignalFlags&quot; href=&quot;enum GSignalFlags&quot; title=&quot;link&quot;&gt;GSignalFlags&lt;/a&gt; signal_flags,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *class_closure,
    &lt;a class=&quot;gobject-Signals.html#GSignalAccumulator&quot; href=&quot;GSignalAccumulator ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GSignalAccumulator&lt;/a&gt; accumulator,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; accu_data,
    &lt;a class=&quot;gobject-Signals.html#GSignalCMarshaller&quot; href=&quot;GSignalCMarshaller&quot; title=&quot;link&quot;&gt;GSignalCMarshaller&lt;/a&gt; c_marshaller,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; return_type,
    &lt;a href= &gt;guint&lt;/a&gt; n_params,
    va_list args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_query</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-query</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Queries the signal system for in-depth information about a
specific signal. This function will fill in a user-provided
structure to hold signal-specific information. If an invalid
signal id is passed in, the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;signal_id&lt;/code&gt;&lt;/em&gt; member of the &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#GSignalQuery&quot; title=&quot;GSignalQuery&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSignalQuery&lt;/span&gt;&lt;/a&gt;
is 0. All members filled into the &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#GSignalQuery&quot; title=&quot;GSignalQuery&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSignalQuery&lt;/span&gt;&lt;/a&gt; structure should
be considered constant and have to be left untouched.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_query (
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a class=&quot;gobject-Signals.html#GSignalQuery&quot; href=&quot;GSignalQuery&quot; title=&gt;GSignalQuery&lt;/a&gt; *query);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_lookup</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-lookup</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Given the name of the signal and the type of object it connects to, gets
the signal's identifying integer. Emitting the signal by number is
somewhat faster than using the name each time.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;guint&lt;/a&gt; g_signal_lookup (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *name,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&gt;GType&lt;/a&gt; itype);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-name</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Given the signal's identifier, finds its name.</Abstract>
  <Declaration type="html">&lt;pre&gt;const &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;gchar&lt;/a&gt;* g_signal_name (
    &lt;a href= &gt;guint&lt;/a&gt; signal_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_list_ids</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-list-ids</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Lists the signals by id that a certain instance or interface type
created. Further information about the signals can be acquired through
&lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-query&quot; title=&quot;g_signal_query ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_query()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt;* g_signal_list_ids (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; itype,
    &lt;a href= &gt;guint&lt;/a&gt; *n_ids);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_emit</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-emit</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Emits a signal.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_emit (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href= &gt;GQuark&lt;/a&gt; detail,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_emit_by_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-emit-by-name</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Emits a signal.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_emit_by_name (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gpointer&lt;/a&gt; instance,
    const &lt;a href= &gt;gchar&lt;/a&gt; *detailed_signal,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_emitv</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-emitv</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Emits a signal.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_emitv (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *instance_and_params,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href=&quot;link&quot; &gt;GQuark&lt;/a&gt; detail,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *return_value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_emit_valist</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-emit-valist</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Emits a signal.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_emit_valist (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href= &gt;GQuark&lt;/a&gt; detail,
    va_list var_args);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_connect</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-connect</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Connects a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCallback&quot; title=&quot;GCallback ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCallback&lt;/span&gt;&lt;/a&gt; function to a signal for a particular object.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_signal_connect(instance, detailed_signal, c_handler, data)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_connect_after</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-connect-after</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Connects a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCallback&quot; title=&quot;GCallback ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCallback&lt;/span&gt;&lt;/a&gt; function to a signal for a particular object.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_signal_connect_after(instance, detailed_signal, c_handler, data)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_connect_swapped</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-connect-swapped</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Connects a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCallback&quot; title=&quot;GCallback ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCallback&lt;/span&gt;&lt;/a&gt; function to a signal for a particular object.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_signal_connect_swapped(instance, detailed_signal, c_handler, data)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_connect_object</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-connect-object</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">This is similar to &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-connect-data&quot; title=&quot;g_signal_connect_data ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_connect_data()&lt;/code&gt;&lt;/a&gt;, but uses a closure which
ensures that the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;gobject&lt;/code&gt;&lt;/em&gt; stays alive during the call to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;c_handler&lt;/code&gt;&lt;/em&gt;
by temporarily adding a reference count to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;gobject&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gulong&lt;/a&gt; g_signal_connect_object (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gpointer&lt;/a&gt; instance,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *detailed_signal,
    &lt;a class=&quot;gobject-Closures.html#GCallback&quot; href=&quot;GCallback ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GCallback&lt;/a&gt; c_handler,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; gobject,
    &lt;a class=&quot;gobject-Signals.html#GConnectFlags&quot; href=&quot;enum GConnectFlags&quot; title=&gt;GConnectFlags&lt;/a&gt; connect_flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CONNECT_AFTER</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GConnectFlags</Anchor>
  <NodeRef refid="593"/>
  <Declaration type="html">&lt;pre&gt;G_CONNECT_AFTER&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GConnectFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CONNECT_SWAPPED</Name>
   <Type>econst</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GConnectFlags</Anchor>
  <NodeRef refid="593"/>
  <Declaration type="html">&lt;pre&gt;G_CONNECT_SWAPPED&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <RelatedTokens>
   <TokenIdentifier>
    <Name>GConnectFlags</Name>
    <Type>tdef</Type>
    <APILanguage>c</APILanguage>
   </TokenIdentifier>
  </RelatedTokens>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GConnectFlags</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>GConnectFlags</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">The connection flags are used to specify the behaviour of a signal's 
connection.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef enum {
    G_CONNECT_AFTER = 1 &amp;lt;&amp;lt; 0,
    G_CONNECT_SWAPPED = 1 &amp;lt;&amp;lt; 1 
} GConnectFlags;&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_connect_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-connect-data</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Connects a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCallback&quot; title=&quot;GCallback ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCallback&lt;/span&gt;&lt;/a&gt; function to a signal for a particular object. Similar
to &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-connect&quot; title=&quot;g_signal_connect()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_connect()&lt;/code&gt;&lt;/a&gt;, but allows to provide a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GClosureNotify&quot; title=&quot;GClosureNotify ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GClosureNotify&lt;/span&gt;&lt;/a&gt; for the data
which will be called when the signal handler is disconnected and no longer
used. Specify &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;connect_flags&lt;/code&gt;&lt;/em&gt; if you need &lt;code class=&quot;literal&quot;&gt;...&lt;code class=&quot;function&quot;&gt;_after()&lt;/code&gt;&lt;/code&gt; or
&lt;code class=&quot;literal&quot;&gt;...&lt;code class=&quot;function&quot;&gt;_swapped()&lt;/code&gt;&lt;/code&gt; variants of this function.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gulong&lt;/a&gt; g_signal_connect_data (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gpointer&lt;/a&gt; instance,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *detailed_signal,
    &lt;a class=&quot;gobject-Closures.html#GCallback&quot; href=&quot;GCallback ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GCallback&lt;/a&gt; c_handler,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;gobject-Closures.html#GClosureNotify&quot; href=&quot;GClosureNotify ()&quot; title=&quot;link&quot;&gt;GClosureNotify&lt;/a&gt; destroy_data,
    &lt;a class=&quot;gobject-Signals.html#GConnectFlags&quot; href=&quot;enum GConnectFlags&quot; title=&gt;GConnectFlags&lt;/a&gt; connect_flags);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_connect_closure</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-connect-closure</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Connects a closure to a signal for a particular object.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gulong&lt;/a&gt; g_signal_connect_closure (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gpointer&lt;/a&gt; instance,
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *detailed_signal,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href= &gt;gboolean&lt;/a&gt; after);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_connect_closure_by_id</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-connect-closure-by-id</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Connects a closure to a signal for a particular object.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gulong&lt;/a&gt; g_signal_connect_closure_by_id (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href=&quot;link&quot; &gt;GQuark&lt;/a&gt; detail,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href= &gt;gboolean&lt;/a&gt; after);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handler_block</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handler-block</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Blocks a handler of an instance so it will not be called during any
signal emissions unless it is unblocked again. Thus &quot;blocking&quot; a
signal handler means to temporarily deactive it, a signal handler
has to be unblocked exactly the same amount of times it has been
blocked before to become active again.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_handler_block (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gulong&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a href= &gt;gulong&lt;/a&gt; handler_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handler_unblock</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handler-unblock</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Undoes the effect of a previous &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-handler-block&quot; title=&quot;g_signal_handler_block ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_handler_block()&lt;/code&gt;&lt;/a&gt; call.  A
blocked handler is skipped during signal emissions and will not be
invoked, unblocking it (for exactly the amount of times it has been
blocked before) reverts its &quot;blocked&quot; state, so the handler will be
recognized by the signal system and is called upon future or
currently ongoing signal emissions (since the order in which
handlers are called during signal emissions is deterministic,
whether the unblocked handler in question is called as part of a
currently ongoing emission depends on how far that emission has
proceeded yet).</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_handler_unblock (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gulong&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a href= &gt;gulong&lt;/a&gt; handler_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handler_disconnect</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handler-disconnect</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Disconnects a handler from an instance so it will not be called during
any future or currently ongoing emissions of the signal it has been
connected to. The &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;handler_id&lt;/code&gt;&lt;/em&gt; becomes invalid and may be reused.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_handler_disconnect (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gulong&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a href= &gt;gulong&lt;/a&gt; handler_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handler_find</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handler-find</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Finds the first signal handler that matches certain selection criteria.
The criteria mask is passed as an OR-ed combination of &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#GSignalMatchType&quot; title=&quot;enum GSignalMatchType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSignalMatchType&lt;/span&gt;&lt;/a&gt;
flags, and the criteria values are passed as arguments.
The match &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;mask&lt;/code&gt;&lt;/em&gt; has to be non-0 for successful matches.
If no handler was found, 0 is returned.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gulong&lt;/a&gt; g_signal_handler_find (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a class=&quot;gobject-Signals.html#GSignalMatchType&quot; href=&quot;enum GSignalMatchType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GSignalMatchType&lt;/a&gt; mask,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href=&quot;link&quot; &gt;GQuark&lt;/a&gt; detail,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; func,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handlers_block_matched</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handlers-block-matched</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Blocks all handlers on an instance that match a certain selection criteria.
The criteria mask is passed as an OR-ed combination of &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#GSignalMatchType&quot; title=&quot;enum GSignalMatchType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSignalMatchType&lt;/span&gt;&lt;/a&gt;
flags, and the criteria values are passed as arguments.
Passing at least one of the &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#G-SIGNAL-MATCH-CLOSURE:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SIGNAL_MATCH_CLOSURE&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#G-SIGNAL-MATCH-FUNC:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SIGNAL_MATCH_FUNC&lt;/code&gt;&lt;/a&gt;
or &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#G-SIGNAL-MATCH-DATA:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SIGNAL_MATCH_DATA&lt;/code&gt;&lt;/a&gt; match flags is required for successful matches.
If no handlers were found, 0 is returned, the number of blocked handlers
otherwise.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;guint&lt;/a&gt; g_signal_handlers_block_matched (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a class=&quot;gobject-Signals.html#GSignalMatchType&quot; href=&quot;enum GSignalMatchType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GSignalMatchType&lt;/a&gt; mask,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href=&quot;link&quot; &gt;GQuark&lt;/a&gt; detail,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; func,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handlers_unblock_matched</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handlers-unblock-matched</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Unblocks all handlers on an instance that match a certain selection
criteria. The criteria mask is passed as an OR-ed combination of
&lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#GSignalMatchType&quot; title=&quot;enum GSignalMatchType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSignalMatchType&lt;/span&gt;&lt;/a&gt; flags, and the criteria values are passed as arguments.
Passing at least one of the &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#G-SIGNAL-MATCH-CLOSURE:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SIGNAL_MATCH_CLOSURE&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#G-SIGNAL-MATCH-FUNC:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SIGNAL_MATCH_FUNC&lt;/code&gt;&lt;/a&gt;
or &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#G-SIGNAL-MATCH-DATA:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SIGNAL_MATCH_DATA&lt;/code&gt;&lt;/a&gt; match flags is required for successful matches.
If no handlers were found, 0 is returned, the number of unblocked handlers
otherwise. The match criteria should not apply to any handlers that are
not currently blocked.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;guint&lt;/a&gt; g_signal_handlers_unblock_matched (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a class=&quot;gobject-Signals.html#GSignalMatchType&quot; href=&quot;enum GSignalMatchType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GSignalMatchType&lt;/a&gt; mask,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href=&quot;link&quot; &gt;GQuark&lt;/a&gt; detail,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; func,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handlers_disconnect_matched</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handlers-disconnect-matched</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Disconnects all handlers on an instance that match a certain
selection criteria. The criteria mask is passed as an OR-ed
combination of &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#GSignalMatchType&quot; title=&quot;enum GSignalMatchType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSignalMatchType&lt;/span&gt;&lt;/a&gt; flags, and the criteria values are
passed as arguments.  Passing at least one of the
&lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#G-SIGNAL-MATCH-CLOSURE:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SIGNAL_MATCH_CLOSURE&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#G-SIGNAL-MATCH-FUNC:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SIGNAL_MATCH_FUNC&lt;/code&gt;&lt;/a&gt; or
&lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#G-SIGNAL-MATCH-DATA:CAPS&quot;&gt;&lt;code class=&quot;literal&quot;&gt;G_SIGNAL_MATCH_DATA&lt;/code&gt;&lt;/a&gt; match flags is required for successful
matches.  If no handlers were found, 0 is returned, the number of
disconnected handlers otherwise.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;guint&lt;/a&gt; g_signal_handlers_disconnect_matched (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a class=&quot;gobject-Signals.html#GSignalMatchType&quot; href=&quot;enum GSignalMatchType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GSignalMatchType&lt;/a&gt; mask,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href=&quot;link&quot; &gt;GQuark&lt;/a&gt; detail,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; func,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handler_is_connected</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handler-is-connected</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Returns whether &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;handler_id&lt;/code&gt;&lt;/em&gt; is the id of a handler connected to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gboolean&lt;/a&gt; g_signal_handler_is_connected (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gulong&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a href= &gt;gulong&lt;/a&gt; handler_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handlers_block_by_func</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handlers-block-by-func</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Blocks all handlers on an instance that match &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_signal_handlers_block_by_func(instance, func, data)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handlers_unblock_by_func</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handlers-unblock-by-func</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Unblocks all handlers on an instance that match &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_signal_handlers_unblock_by_func(instance, func, data)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_handlers_disconnect_by_func</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-handlers-disconnect-by-func</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Disconnects all handlers on an instance that match &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/em&gt; and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_signal_handlers_disconnect_by_func(instance, func, data)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_has_handler_pending</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-has-handler-pending</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Returns whether there are any handlers connected to &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/em&gt; for the
given signal id and detail.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gboolean&lt;/a&gt; g_signal_has_handler_pending (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot; &gt;GQuark&lt;/a&gt; detail,
    &lt;a href= &gt;gboolean&lt;/a&gt; may_be_blocked);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_stop_emission</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-stop-emission</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Stops a signal's current emission.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_stop_emission (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;gpointer&lt;/a&gt; instance,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href= &gt;GQuark&lt;/a&gt; detail);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_stop_emission_by_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-stop-emission-by-name</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Stops a signal's current emission.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_stop_emission_by_name (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gpointer&lt;/a&gt; instance,
    const &lt;a href= &gt;gchar&lt;/a&gt; *detailed_signal);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_override_class_closure</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-override-class-closure</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Overrides the class closure (i.e. the default handler) for the given signal
for emissions on instances of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance_type&lt;/code&gt;&lt;/em&gt;. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance_type&lt;/code&gt;&lt;/em&gt; must be derived
from the type to which the signal belongs.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_override_class_closure (
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; instance_type,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&gt;GClosure&lt;/a&gt; *class_closure);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_chain_from_overridden</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-chain-from-overridden</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Calls the original class closure of a signal. This function should only
be called from an overridden class closure; see
&lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-override-class-closure&quot; title=&quot;g_signal_override_class_closure ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_override_class_closure()&lt;/code&gt;&lt;/a&gt; and
&lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-override-class-handler&quot; title=&quot;g_signal_override_class_handler ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_override_class_handler()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_chain_from_overridden (
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *instance_and_params,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *return_value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_new_class_handler</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-new-class-handler</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Creates a new signal. (This is usually done in the class initializer.)</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;guint&lt;/a&gt; g_signal_new_class_handler (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *signal_name,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; itype,
    &lt;a class=&quot;gobject-Signals.html#GSignalFlags&quot; href=&quot;enum GSignalFlags&quot; title=&quot;link&quot;&gt;GSignalFlags&lt;/a&gt; signal_flags,
    &lt;a class=&quot;gobject-Closures.html#GCallback&quot; href=&quot;GCallback ()&quot; title=&quot;link&quot;&gt;GCallback&lt;/a&gt; class_handler,
    &lt;a class=&quot;gobject-Signals.html#GSignalAccumulator&quot; href=&quot;GSignalAccumulator ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GSignalAccumulator&lt;/a&gt; accumulator,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; accu_data,
    &lt;a class=&quot;gobject-Signals.html#GSignalCMarshaller&quot; href=&quot;GSignalCMarshaller&quot; title=&quot;link&quot;&gt;GSignalCMarshaller&lt;/a&gt; c_marshaller,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; return_type,
    &lt;a href= &gt;guint&lt;/a&gt; n_params,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_override_class_handler</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-override-class-handler</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Overrides the class closure (i.e. the default handler) for the
given signal for emissions on instances of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance_type&lt;/code&gt;&lt;/em&gt; with
callabck &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;class_handler&lt;/code&gt;&lt;/em&gt;. &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;instance_type&lt;/code&gt;&lt;/em&gt; must be derived from the
type to which the signal belongs.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_override_class_handler (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *signal_name,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;link&quot;&gt;GType&lt;/a&gt; instance_type,
    &lt;a class=&quot;gobject-Closures.html#GCallback&quot; href=&quot;GCallback ()&quot; title=&gt;GCallback&lt;/a&gt; class_handler);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_chain_from_overridden_handler</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-chain-from-overridden-handler</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Calls the original class closure of a signal. This function should
only be called from an overridden class closure; see
&lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-override-class-closure&quot; title=&quot;g_signal_override_class_closure ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_override_class_closure()&lt;/code&gt;&lt;/a&gt; and
&lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#g-signal-override-class-handler&quot; title=&quot;g_signal_override_class_handler ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_signal_override_class_handler()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_chain_from_overridden_handler (
    &lt;a href= &gt;gpointer&lt;/a&gt; instance,
    ...);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.18</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_add_emission_hook</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-add-emission-hook</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Adds an emission hook for a signal, which will get called for any emission
of that signal, independent of the instance. This is possible only
for signals which don't have &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#G-SIGNAL-NO-HOOKS:CAPS&quot;&gt;&lt;span class=&quot;type&quot;&gt;G_SIGNAL_NO_HOOKS&lt;/span&gt;&lt;/a&gt; flag set.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot; &gt;gulong&lt;/a&gt; g_signal_add_emission_hook (
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href=&quot;link&quot; &gt;GQuark&lt;/a&gt; detail,
    &lt;a class=&quot;gobject-Signals.html#GSignalEmissionHook&quot; href=&quot;GSignalEmissionHook ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GSignalEmissionHook&lt;/a&gt; hook_func,
    &lt;a href=&quot;./../glib/glib/glib-Datasets.html#GDestroyNotify&quot; &gt;gpointer&lt;/a&gt; hook_data,
    &lt;a href= &gt;GDestroyNotify&lt;/a&gt; data_destroy);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_remove_emission_hook</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-remove-emission-hook</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Deletes an emission hook.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_signal_remove_emission_hook (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gulong&quot; &gt;guint&lt;/a&gt; signal_id,
    &lt;a href= &gt;gulong&lt;/a&gt; hook_id);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_parse_name</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-parse-name</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Internal function to parse a signal name into its &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;signal_id&lt;/code&gt;&lt;/em&gt;
and &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;detail&lt;/code&gt;&lt;/em&gt; quark.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gchar&quot; &gt;gboolean&lt;/a&gt; g_signal_parse_name (
    const &lt;a href=&quot;link&quot; &gt;gchar&lt;/a&gt; *detailed_signal,
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; itype,
    &lt;a href=&quot;./../glib/glib/glib-Quarks.html#GQuark&quot; &gt;guint&lt;/a&gt; *signal_id_p,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gboolean&quot; &gt;GQuark&lt;/a&gt; *detail_p,
    &lt;a href= &gt;gboolean&lt;/a&gt; force_detail_quark);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_get_invocation_hint</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-get-invocation-hint</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Returns the invocation hint of the innermost signal emission of instance.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Signals.html#GSignalInvocationHint&quot; href=&quot;GSignalInvocationHint&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GSignalInvocationHint&lt;/a&gt;* g_signal_get_invocation_hint (
    &lt;a href= &gt;gpointer&lt;/a&gt; instance);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_type_cclosure_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-type-cclosure-new</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">Creates a new closure which invokes the function found at the offset
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;struct_offset&lt;/code&gt;&lt;/em&gt; in the class structure of the interface or classed type
identified by &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;itype&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt;* g_signal_type_cclosure_new (
    &lt;a class=&quot;gobject-Type-Information.html#GType&quot; href=&quot;GType&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GType&lt;/a&gt; itype,
    &lt;a href= &gt;guint&lt;/a&gt; struct_offset);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_signal_accumulator_true_handled</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Signals.html</Path>
  <Anchor>g-signal-accumulator-true-handled</Anchor>
  <NodeRef refid="30"/>
  <Abstract type="html">A predefined &lt;a class=&quot;link&quot; href=&quot;gobject-Signals.html#GSignalAccumulator&quot; title=&quot;GSignalAccumulator ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GSignalAccumulator&lt;/span&gt;&lt;/a&gt; for signals that return a
boolean values. The behavior that this accumulator gives is
that a return of &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#TRUE:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; stops the signal emission: no further
callbacks will be invoked, while a return of &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#FALSE:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;FALSE&lt;/code&gt;&lt;/a&gt; allows
the emission to coninue. The idea here is that a &lt;a
href=&quot;./../glib/glib/glib-Standard-Macros.html#TRUE:CAPS&quot;
&gt;&lt;code class=&quot;literal&quot;&gt;TRUE&lt;/code&gt;&lt;/a&gt; return
indicates that the callback &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;handled&lt;/em&gt;&lt;/span&gt; the signal,
and no further handling is needed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a href=&quot;link&quot; &gt;gboolean&lt;/a&gt; g_signal_accumulator_true_handled (
    &lt;a class=&quot;gobject-Signals.html#GSignalInvocationHint&quot; href=&quot;GSignalInvocationHint&quot; title=&quot;link&quot;&gt;GSignalInvocationHint&lt;/a&gt; *ihint,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt; *return_accu,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *handler_return,
    &lt;a href= &gt;gpointer&lt;/a&gt; dummy);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
  <Availability distribution="gobject">
   <IntroducedInVersion>2.4</IntroducedInVersion>
  </Availability>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CLOSURE_NEEDS_MARSHAL</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>G-CLOSURE-NEEDS-MARSHAL:CAPS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Check if the closure still needs a marshaller. See &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-set-marshal&quot; title=&quot;g_closure_set_marshal ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_set_marshal()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CLOSURE_NEEDS_MARSHAL(closure) (((GClosure*) (closure))-&amp;gt;
    marshal == NULL)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CLOSURE_N_NOTIFIERS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>G-CLOSURE-N-NOTIFIERS:CAPS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Get the total number of notifiers connected with the closure &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;cl&lt;/code&gt;&lt;/em&gt;. 
The count includes the meta marshaller, the finalize and invalidate notifiers 
and the marshal guards. Note that each guard counts as two notifiers. 
See &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-set-meta-marshal&quot; title=&quot;g_closure_set_meta_marshal ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_set_meta_marshal()&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-add-finalize-notifier&quot; title=&quot;g_closure_add_finalize_notifier ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_add_finalize_notifier()&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-add-invalidate-notifier&quot; title=&quot;g_closure_add_invalidate_notifier ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_add_invalidate_notifier()&lt;/code&gt;&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-add-marshal-guards&quot; title=&quot;g_closure_add_marshal_guards ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_add_marshal_guards()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CLOSURE_N_NOTIFIERS(cl)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CCLOSURE_SWAP_DATA</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>G-CCLOSURE-SWAP-DATA:CAPS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Checks whether the user data of the &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; should be passed as the
first parameter to the callback. See &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-cclosure-new-swap&quot; title=&quot;g_cclosure_new_swap ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cclosure_new_swap()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CCLOSURE_SWAP_DATA(cclosure) (((GClosure*) (cclosure))-&amp;gt;
    derivative_flag)&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_CALLBACK</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>G-CALLBACK:CAPS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Cast a function pointer to a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCallback&quot; title=&quot;GCallback ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCallback&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_CALLBACK(f) ((GCallback) (f))&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCallback</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>GCallback</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">The type used for callback functions in structure definitions and function 
signatures. This doesn't mean that all callback functions must take no 
parameters and return void. The required signature of a callback function 
is determined by the context in which is used (e.g. the signal to which it 
is connected). Use &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#G-CALLBACK:CAPS&quot; title=&quot;G_CALLBACK()&quot;&gt;&lt;code class=&quot;function&quot;&gt;G_CALLBACK()&lt;/code&gt;&lt;/a&gt; to cast the callback function to a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCallback&quot; title=&quot;GCallback ()&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCallback&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GCallback) (
    void);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GClosure</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>GClosure</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GClosure&quot; title=&quot;GClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GClosure&lt;/span&gt;&lt;/a&gt; represents a callback supplied by the programmer.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    volatile guint in_marshal : 1;
    volatile guint is_invalid : 1;
} GClosure;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_CLOSURE</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>G-TYPE-CLOSURE:CAPS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; for &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GClosure&quot; title=&quot;GClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GClosure&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_CLOSURE (g_closure_get_type ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GCClosure</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>GCClosure</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; is a specialization of &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GClosure&quot; title=&quot;GClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GClosure&lt;/span&gt;&lt;/a&gt; for C function callbacks.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    GClosure closure;
    gpointer callback;
} GCClosure;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GClosureMarshal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>GClosureMarshal</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">The type used for marshaller functions.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GClosureMarshal) (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GClosureNotify</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>GClosureNotify</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">The type used for the various notification callbacks which can be registered
on closures.</Abstract>
  <Declaration type="html">&lt;pre&gt;void (
    *GClosureNotify) (
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; data,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&gt;GClosure&lt;/a&gt; *closure);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-new</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Creates a new closure which invokes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;callback_func&lt;/code&gt;&lt;/em&gt; with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; as
the last parameter.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt;* g_cclosure_new (
    &lt;a class=&quot;gobject-Closures.html#GCallback&quot; href=&quot;GCallback ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GCallback&lt;/a&gt; callback_func,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; user_data,
    &lt;a class=&quot;gobject-Closures.html#GClosureNotify&quot; href=&quot;GClosureNotify ()&quot; title=&gt;GClosureNotify&lt;/a&gt; destroy_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_new_swap</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-new-swap</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Creates a new closure which invokes &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;callback_func&lt;/code&gt;&lt;/em&gt; with &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; as
the first parameter.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt;* g_cclosure_new_swap (
    &lt;a class=&quot;gobject-Closures.html#GCallback&quot; href=&quot;GCallback ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GCallback&lt;/a&gt; callback_func,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; user_data,
    &lt;a class=&quot;gobject-Closures.html#GClosureNotify&quot; href=&quot;GClosureNotify ()&quot; title=&gt;GClosureNotify&lt;/a&gt; destroy_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_new_object</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-new-object</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A variant of &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-cclosure-new&quot; title=&quot;g_cclosure_new ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cclosure_new()&lt;/code&gt;&lt;/a&gt; which uses &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; as &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt; and
calls &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-watch-closure&quot; title=&quot;g_object_watch_closure ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_watch_closure()&lt;/code&gt;&lt;/a&gt; on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; and the created
closure. This function is useful when you have a callback closely
associated with a &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt;, and want the callback to no longer run
after the object is is freed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt;* g_cclosure_new_object (
    &lt;a class=&quot;gobject-Closures.html#GCallback&quot; href=&quot;GCallback ()&quot; title=&quot;link&quot;&gt;GCallback&lt;/a&gt; callback_func,
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&gt;GObject&lt;/a&gt; *object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_new_object_swap</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-new-object-swap</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A variant of &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-cclosure-new-swap&quot; title=&quot;g_cclosure_new_swap ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cclosure_new_swap()&lt;/code&gt;&lt;/a&gt; which uses &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; as &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;user_data&lt;/code&gt;&lt;/em&gt;
and calls &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-watch-closure&quot; title=&quot;g_object_watch_closure ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_watch_closure()&lt;/code&gt;&lt;/a&gt; on &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; and the created
closure. This function is useful when you have a callback closely
associated with a &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#GObject&quot;&gt;&lt;span class=&quot;type&quot;&gt;GObject&lt;/span&gt;&lt;/a&gt;, and want the callback to no longer run
after the object is is freed.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt;* g_cclosure_new_object_swap (
    &lt;a class=&quot;gobject-Closures.html#GCallback&quot; href=&quot;GCallback ()&quot; title=&quot;link&quot;&gt;GCallback&lt;/a&gt; callback_func,
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&gt;GObject&lt;/a&gt; *object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_new_object</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-new-object</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A variant of &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-new-simple&quot; title=&quot;g_closure_new_simple ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_new_simple()&lt;/code&gt;&lt;/a&gt; which stores &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; in the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/em&gt; field of the closure and calls &lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-watch-closure&quot; title=&quot;g_object_watch_closure ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_watch_closure()&lt;/code&gt;&lt;/a&gt; on
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/em&gt; and the created closure. This function is mainly useful
when implementing new types of closures.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GClosure&lt;/a&gt;* g_closure_new_object (
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; sizeof_closure,
    &lt;a class=&quot;gobject-The-Base-Object-Type.html#GObject&quot; href=&gt;GObject&lt;/a&gt; *object);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_ref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-ref</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Increments the reference count on a closure to force it staying
alive while the caller holds a pointer to it.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt;* g_closure_ref (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&gt;GClosure&lt;/a&gt; *closure);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_sink</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-sink</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Takes over the initial ownership of a closure.  Each closure is
initially created in a &lt;em class=&quot;firstterm&quot;&gt;floating&lt;/em&gt; state, which
means that the initial reference count is not owned by any caller.
&lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-sink&quot; title=&quot;g_closure_sink ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_sink()&lt;/code&gt;&lt;/a&gt; checks to see if the object is still floating, and
if so, unsets the floating state and decreases the reference
count. If the closure is not floating, &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-sink&quot; title=&quot;g_closure_sink ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_sink()&lt;/code&gt;&lt;/a&gt; does
nothing. The reason for the existance of the floating state is to
prevent cumbersome code sequences like:</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_sink (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&gt;GClosure&lt;/a&gt; *closure);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_unref</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-unref</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Decrements the reference count of a closure after it was previously
incremented by the same caller. If no other callers are using the
closure, then the closure will be destroyed and freed.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_unref (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&gt;GClosure&lt;/a&gt; *closure);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_invoke</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-invoke</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Invokes the closure, i.e. executes the callback represented by the &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_invoke (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href= &gt;gpointer&lt;/a&gt; invocation_hint);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_invalidate</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-invalidate</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Sets a flag on the closure to indicate that it's calling
environment has become invalid, and thus causes any future
invocations of &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-invoke&quot; title=&quot;g_closure_invoke ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_invoke()&lt;/code&gt;&lt;/a&gt; on this &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure&lt;/code&gt;&lt;/em&gt; to be
ignored. Also, invalidation notifiers installed on the closure will
be called at this point. Note that unless you are holding a
reference to the closure yourself, the invalidation notifiers may
unref the closure and cause it to be destroyed, so if you need to
access the closure after calling &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-invalidate&quot; title=&quot;g_closure_invalidate ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_invalidate()&lt;/code&gt;&lt;/a&gt;, make sure
that you've previously called &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-ref&quot; title=&quot;g_closure_ref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_ref()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_invalidate (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&gt;GClosure&lt;/a&gt; *closure);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_add_finalize_notifier</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-add-finalize-notifier</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Registers a finalization notifier which will be called when the
reference count of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure&lt;/code&gt;&lt;/em&gt; goes down to 0. Multiple finalization
notifiers on a single closure are invoked in unspecified order. If
a single call to &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-unref&quot; title=&quot;g_closure_unref ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_unref()&lt;/code&gt;&lt;/a&gt; results in the closure being
both invalidated and finalized, then the invalidate notifiers will
be run before the finalize notifiers.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_add_finalize_notifier (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; notify_data,
    &lt;a class=&quot;gobject-Closures.html#GClosureNotify&quot; href=&quot;GClosureNotify ()&quot; title=&gt;GClosureNotify&lt;/a&gt; notify_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_add_invalidate_notifier</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-add-invalidate-notifier</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Registers an invalidation notifier which will be called when the
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure&lt;/code&gt;&lt;/em&gt; is invalidated with &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-invalidate&quot; title=&quot;g_closure_invalidate ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_invalidate()&lt;/code&gt;&lt;/a&gt;. Invalidation
notifiers are invoked before finalization notifiers, in an
unspecified order.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_add_invalidate_notifier (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; notify_data,
    &lt;a class=&quot;gobject-Closures.html#GClosureNotify&quot; href=&quot;GClosureNotify ()&quot; title=&gt;GClosureNotify&lt;/a&gt; notify_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_remove_finalize_notifier</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-remove-finalize-notifier</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Removes a finalization notifier.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_remove_finalize_notifier (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; notify_data,
    &lt;a class=&quot;gobject-Closures.html#GClosureNotify&quot; href=&quot;GClosureNotify ()&quot; title=&gt;GClosureNotify&lt;/a&gt; notify_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_remove_invalidate_notifier</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-remove-invalidate-notifier</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Removes an invalidation notifier.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_remove_invalidate_notifier (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; notify_data,
    &lt;a class=&quot;gobject-Closures.html#GClosureNotify&quot; href=&quot;GClosureNotify ()&quot; title=&gt;GClosureNotify&lt;/a&gt; notify_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_new_simple</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-new-simple</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Allocates a struct of the given size and initializes the initial
part as a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GClosure&quot; title=&quot;GClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GClosure&lt;/span&gt;&lt;/a&gt;. This function is mainly useful when
implementing new types of closures.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GClosure&lt;/a&gt;* g_closure_new_simple (
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;guint&lt;/a&gt; sizeof_closure,
    &lt;a href= &gt;gpointer&lt;/a&gt; data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_set_marshal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-set-marshal</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Sets the marshaller of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure&lt;/code&gt;&lt;/em&gt;. The &lt;code class=&quot;literal&quot;&gt;marshal_data&lt;/code&gt;
of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;marshal&lt;/code&gt;&lt;/em&gt; provides a way for a meta marshaller to provide additional
information to the marshaller. (See &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-closure-set-meta-marshal&quot; title=&quot;g_closure_set_meta_marshal ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_closure_set_meta_marshal()&lt;/code&gt;&lt;/a&gt;.) For
GObject's C predefined marshallers (the g_cclosure_marshal_*()
functions), what it provides is a callback function to use instead of
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure-&amp;gt;callback&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_set_marshal (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Closures.html#GClosureMarshal&quot; href=&quot;GClosureMarshal ()&quot; title=&gt;GClosureMarshal&lt;/a&gt; marshal);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_add_marshal_guards</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-add-marshal-guards</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Adds a pair of notifiers which get invoked before and after the
closure callback, respectively. This is typically used to protect
the extra arguments for the duration of the callback. See
&lt;a class=&quot;link&quot; href=&quot;gobject-The-Base-Object-Type.html#g-object-watch-closure&quot; title=&quot;g_object_watch_closure ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_object_watch_closure()&lt;/code&gt;&lt;/a&gt; for an example of marshal guards.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_add_marshal_guards (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; pre_marshal_data,
    &lt;a class=&quot;gobject-Closures.html#GClosureNotify&quot; href=&quot;GClosureNotify ()&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosureNotify&lt;/a&gt; pre_marshal_notify,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; post_marshal_data,
    &lt;a class=&quot;gobject-Closures.html#GClosureNotify&quot; href=&quot;GClosureNotify ()&quot; title=&gt;GClosureNotify&lt;/a&gt; post_marshal_notify);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_closure_set_meta_marshal</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-closure-set-meta-marshal</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Sets the meta marshaller of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure&lt;/code&gt;&lt;/em&gt;.  A meta marshaller wraps
&lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure-&amp;gt;marshal&lt;/code&gt;&lt;/em&gt; and modifies the way it is called in some
fashion. The most common use of this facility is for C callbacks.
The same marshallers (generated by &lt;a class=&quot;link&quot; href=&quot;glib-genmarshal.html&quot; title=&quot;glib-genmarshal&quot;&gt;glib-genmarshal&lt;/a&gt;) are used
everywhere, but the way that we get the callback function
differs. In most cases we want to use &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;closure-&amp;gt;callback&lt;/code&gt;&lt;/em&gt;, but in
other cases we want to use some different technique to retrieve the
callback function.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_closure_set_meta_marshal (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a href=&quot;link&quot; &gt;gpointer&lt;/a&gt; marshal_data,
    &lt;a class=&quot;gobject-Closures.html#GClosureMarshal&quot; href=&quot;GClosureMarshal ()&quot; title=&gt;GClosureMarshal&lt;/a&gt; meta_marshal);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_source_set_closure</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-source-set-closure</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Set the callback for a source as a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GClosure&quot; title=&quot;GClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GClosure&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_source_set_closure (
    &lt;a href=&quot;link&quot; &gt;GSource&lt;/a&gt; *source,
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&gt;GClosure&lt;/a&gt; *closure);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IO_CHANNEL</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>G-TYPE-IO-CHANNEL:CAPS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; for &lt;a
href=&quot;./../glib/glib/glib-IO-Channels.html#GIOChannel&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GIOChannel&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IO_CHANNEL (g_io_channel_get_type ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>G_TYPE_IO_CONDITION</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>G-TYPE-IO-CONDITION:CAPS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">The &lt;a class=&quot;link&quot; href=&quot;gobject-Type-Information.html#GType&quot; title=&quot;GType&quot;&gt;&lt;span class=&quot;type&quot;&gt;GType&lt;/span&gt;&lt;/a&gt; for &lt;a
href=&quot;./../glib/glib/glib-IO-Channels.html#GIOCondition&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GIOCondition&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define G_TYPE_IO_CONDITION (g_io_condition_get_type ())&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__VOID</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--VOID</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__VOID (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__BOOLEAN</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--BOOLEAN</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, gboolean arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__BOOLEAN (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__CHAR</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--CHAR</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, gchar arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__CHAR (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__UCHAR</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--UCHAR</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, guchar arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__UCHAR (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__INT</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--INT</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, gint arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__INT (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__UINT</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--UINT</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, guint arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__UINT (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__LONG</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--LONG</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, glong arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__LONG (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__ULONG</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--ULONG</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, gulong arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__ULONG (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__ENUM</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--ENUM</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, gint arg1, gpointer user_data)&lt;/code&gt; where the &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot;
&gt;&lt;span class=&quot;type&quot;&gt;gint&lt;/span&gt;&lt;/a&gt; parameter denotes an enumeration type..</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__ENUM (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__FLAGS</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--FLAGS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, gint arg1, gpointer user_data)&lt;/code&gt; where the &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot;
&gt;&lt;span class=&quot;type&quot;&gt;gint&lt;/span&gt;&lt;/a&gt; parameter denotes a flags type.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__FLAGS (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__FLOAT</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--FLOAT</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, gfloat arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__FLOAT (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__DOUBLE</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--DOUBLE</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, gdouble arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__DOUBLE (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__STRING</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--STRING</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, const gchar *arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__STRING (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__PARAM</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--PARAM</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, GParamSpec *arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__PARAM (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__BOXED</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--BOXED</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, GBoxed *arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__BOXED (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__POINTER</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--POINTER</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, gpointer arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__POINTER (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__OBJECT</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--OBJECT</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, GOBject *arg1, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__OBJECT (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_STRING__OBJECT_POINTER</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-STRING--OBJECT-POINTER</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;gchar* (*callback) (gpointer instance, GObject *arg1, gpointer arg2, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_STRING__OBJECT_POINTER (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_VOID__UINT_POINTER</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-VOID--UINT-POINTER</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;void (*callback) (gpointer instance, guint arg1, gpointer arg2, gpointer user_data)&lt;/code&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_VOID__UINT_POINTER (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_BOOLEAN__FLAGS</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-BOOLEAN--FLAGS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">A marshaller for a &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#GCClosure&quot; title=&quot;GCClosure&quot;&gt;&lt;span class=&quot;type&quot;&gt;GCClosure&lt;/span&gt;&lt;/a&gt; with a callback of type
&lt;code class=&quot;literal&quot;&gt;gboolean (*callback) (gpointer instance, gint arg1, gpointer user_data)&lt;/code&gt; where the &lt;a
href=&quot;./../glib/glib/glib-Basic-Types.html#gint&quot;
&gt;&lt;span class=&quot;type&quot;&gt;gint&lt;/span&gt;&lt;/a&gt; parameter
denotes a flags type.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_cclosure_marshal_BOOLEAN__FLAGS (
    &lt;a class=&quot;gobject-Closures.html#GClosure&quot; href=&quot;GClosure&quot; title=&quot;link&quot;&gt;GClosure&lt;/a&gt; *closure,
    &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValue&lt;/a&gt; *return_value,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; n_param_values,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot;&gt;GValue&lt;/a&gt; *param_values,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;gpointer&lt;/a&gt; invocation_hint,
    &lt;a href= &gt;gpointer&lt;/a&gt; marshal_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_cclosure_marshal_BOOL__FLAGS</Name>
   <Type>macro</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Closures.html</Path>
  <Anchor>g-cclosure-marshal-BOOL--FLAGS</Anchor>
  <NodeRef refid="31"/>
  <Abstract type="html">Another name for &lt;a class=&quot;link&quot; href=&quot;gobject-Closures.html#g-cclosure-marshal-BOOLEAN--FLAGS&quot; title=&quot;g_cclosure_marshal_BOOLEAN__FLAGS ()&quot;&gt;&lt;code class=&quot;function&quot;&gt;g_cclosure_marshal_BOOLEAN__FLAGS()&lt;/code&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;#define g_cclosure_marshal_BOOL__FLAGS&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>GValueArray</Name>
   <Type>tdef</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>GValueArray</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">A &lt;a class=&quot;link&quot; href=&quot;gobject-Value-arrays.html#GValueArray&quot; title=&quot;GValueArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValueArray&lt;/span&gt;&lt;/a&gt; contains an array of &lt;a class=&quot;link&quot; href=&quot;gobject-Generic-values.html#GValue&quot; title=&quot;GValue&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValue&lt;/span&gt;&lt;/a&gt; elements.</Abstract>
  <Declaration type="html">&lt;pre&gt;typedef struct {
    guint n_values;
    GValue *values;
} GValueArray;
    &lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_array_get_nth</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>g-value-array-get-nth</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Return a pointer to the value at &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;index_&lt;/code&gt;&lt;/em&gt; containd in &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_array&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&quot;link&quot;&gt;GValue&lt;/a&gt;* g_value_array_get_nth (
    &lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValueArray&lt;/a&gt; *value_array,
    &lt;a href= &gt;guint&lt;/a&gt; index_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_array_new</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>g-value-array-new</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Allocate and initialize a new &lt;a class=&quot;link&quot; href=&quot;gobject-Value-arrays.html#GValueArray&quot; title=&quot;GValueArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValueArray&lt;/span&gt;&lt;/a&gt;, optionally preserve space
for &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_prealloced&lt;/code&gt;&lt;/em&gt; elements. New arrays always contain 0 elements,
regardless of the value of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;n_prealloced&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValueArray&lt;/a&gt;* g_value_array_new (
    &lt;a href= &gt;guint&lt;/a&gt; n_prealloced);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_array_copy</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>g-value-array-copy</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Construct an exact copy of a &lt;a class=&quot;link&quot; href=&quot;gobject-Value-arrays.html#GValueArray&quot; title=&quot;GValueArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValueArray&lt;/span&gt;&lt;/a&gt; by duplicating all its
contents.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;link&quot;&gt;GValueArray&lt;/a&gt;* g_value_array_copy (
    const &lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&gt;GValueArray&lt;/a&gt; *value_array);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_array_free</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>g-value-array-free</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Free a &lt;a class=&quot;link&quot; href=&quot;gobject-Value-arrays.html#GValueArray&quot; title=&quot;GValueArray&quot;&gt;&lt;span class=&quot;type&quot;&gt;GValueArray&lt;/span&gt;&lt;/a&gt; including its contents.</Abstract>
  <Declaration type="html">&lt;pre&gt;void g_value_array_free (
    &lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&gt;GValueArray&lt;/a&gt; *value_array);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_array_append</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>g-value-array-append</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Insert a copy of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; as last element of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_array&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;link&quot;&gt;GValueArray&lt;/a&gt;* g_value_array_append (
    &lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;link&quot;&gt;GValueArray&lt;/a&gt; *value_array,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_array_prepend</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>g-value-array-prepend</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Insert a copy of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; as first element of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_array&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;link&quot;&gt;GValueArray&lt;/a&gt;* g_value_array_prepend (
    &lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;link&quot;&gt;GValueArray&lt;/a&gt; *value_array,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_array_insert</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>g-value-array-insert</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Insert a copy of &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; at specified position into &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_array&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;link&quot;&gt;GValueArray&lt;/a&gt;* g_value_array_insert (
    &lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValueArray&lt;/a&gt; *value_array,
    &lt;a href=&quot;link&quot; &gt;guint&lt;/a&gt; index_,
    const &lt;a class=&quot;gobject-Generic-values.html#GValue&quot; href=&quot;GValue&quot; title=&gt;GValue&lt;/a&gt; *value);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_array_remove</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>g-value-array-remove</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Remove the value at position &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;index_&lt;/code&gt;&lt;/em&gt; from &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_array&lt;/code&gt;&lt;/em&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;link&quot;&gt;GValueArray&lt;/a&gt;* g_value_array_remove (
    &lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;./../glib/glib/glib-Basic-Types.html#guint&quot;&gt;GValueArray&lt;/a&gt; *value_array,
    &lt;a href= &gt;guint&lt;/a&gt; index_);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_array_sort</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>g-value-array-sort</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Sort &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_array&lt;/code&gt;&lt;/em&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;compare_func&lt;/code&gt;&lt;/em&gt; to compare the elements accoring to
the semantics of &lt;a
href=&quot;./../glib/glib/glib-Doubly-Linked-Lists.html#GCompareFunc&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GCompareFunc&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;link&quot;&gt;GValueArray&lt;/a&gt;* g_value_array_sort (
    &lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;./../glib/glib/glib-Doubly-Linked-Lists.html#GCompareFunc&quot;&gt;GValueArray&lt;/a&gt; *value_array,
    &lt;a href= &gt;GCompareFunc&lt;/a&gt; compare_func);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
 <Token>
  <TokenIdentifier>
   <Name>g_value_array_sort_with_data</Name>
   <Type>func</Type>
   <APILanguage>c</APILanguage>
  </TokenIdentifier>
  <Path>gobject-Value-arrays.html</Path>
  <Anchor>g-value-array-sort-with-data</Anchor>
  <NodeRef refid="32"/>
  <Abstract type="html">Sort &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;value_array&lt;/code&gt;&lt;/em&gt; using &lt;em class=&quot;parameter&quot;&gt;&lt;code&gt;compare_func&lt;/code&gt;&lt;/em&gt; to compare the elements accoring
to the semantics of &lt;a
href=&quot;./../glib/glib/glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot;
&gt;&lt;span class=&quot;type&quot;&gt;GCompareDataFunc&lt;/span&gt;&lt;/a&gt;.</Abstract>
  <Declaration type="html">&lt;pre&gt;&lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;link&quot;&gt;GValueArray&lt;/a&gt;* g_value_array_sort_with_data (
    &lt;a class=&quot;gobject-Value-arrays.html#GValueArray&quot; href=&quot;GValueArray&quot; title=&quot;./../glib/glib/glib-Doubly-Linked-Lists.html#GCompareDataFunc&quot;&gt;GValueArray&lt;/a&gt; *value_array,
    &lt;a href=&quot;./../glib/glib/glib-Basic-Types.html#gpointer&quot; &gt;GCompareDataFunc&lt;/a&gt; compare_func,
    &lt;a href= &gt;gpointer&lt;/a&gt; user_data);&lt;/pre&gt;</Declaration>
  <DeclaredIn>
   <HeaderPath>glib-object.h</HeaderPath>
  </DeclaredIn>
 </Token>
</Tokens>
