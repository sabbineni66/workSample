<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Mark Daggett's Blog]]></title>
  <link href="http://heavysixer.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://heavysixer.github.com/"/>
  <updated>2013-12-02T07:29:38-06:00</updated>
  <id>http://heavysixer.github.com/</id>
  <author>
    <name><![CDATA[Mark Daggett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript ParseTrees]]></title>
    <link href="http://heavysixer.github.com/blog/2013/02/27/javascript-parsetrees/"/>
    <updated>2013-02-27T20:22:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2013/02/27/javascript-parsetrees</id>
    <content type="html"><![CDATA[<p>I've been experimenting with the rkelly Ruby gem to help me explore the JavaScript parse tree. It is really fascinating, and I can see
myself spending a lot of time spelunking through the language. Here is a simple example using the gem to iterate over each node in the
parse tree and print out its type. Stay tuned, more to come!</p>

<p>.. code-block:: ruby</p>

<p>  require 'rubygems'
  require 'rkelly'
  parser = RKelly::Parser.new
  src = &lt;&lt;EOF
  // Create scrollLeft and scrollTop methods
  jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {</p>

<pre><code>var top = "pageYOffset" === prop;

jQuery.fn[ method ] = function( val ) {
  return jQuery.access( this, function( elem, method, val ) {
    var win = getWindow( elem );

    if ( val === undefined ) {
      return win ? win[ prop ] : elem[ method ];
    }

    if ( win ) {
      win.scrollTo(
        !top ? val : window.pageXOffset,
        top ? val : window.pageYOffset
      );

    } else {
      elem[ method ] = val;
    }
  }, method, val, arguments.length, null );
};
</code></pre>

<p>  });</p>

<p>  function getWindow( elem ) {</p>

<pre><code>return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 &amp;&amp; elem.defaultView;
</code></pre>

<p>  }
  EOF
  ast = parser.parse(src)</p>

<p>  =begin
  Outputs something like this as it traverses the parseTree
  RKelly::Nodes::SourceElementsNode
  RKelly::Nodes::ExpressionStatementNode
  RKelly::Nodes::FunctionCallNode
  RKelly::Nodes::DotAccessorNode
  RKelly::Nodes::ResolveNode
  RKelly::Nodes::ArgumentsNode
  RKelly::Nodes::ObjectLiteralNode
  RKelly::Nodes::PropertyNode
  ...
  =end</p>

<p>  ast.each do |node|</p>

<pre><code>puts node.class
</code></pre>

<p>  end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading RFID Cards With Ruby and the Mac]]></title>
    <link href="http://heavysixer.github.com/blog/2012/04/23/reading-rfid-cards-with-ruby/"/>
    <updated>2012-04-23T09:18:00-05:00</updated>
    <id>http://heavysixer.github.com/blog/2012/04/23/reading-rfid-cards-with-ruby</id>
    <content type="html"><![CDATA[<p>This weekend I fooled around with the Sparkfun "RFID Starter Kit". I purchased it from my local technology barn for around $50.00. I am teaching myself physical computing, and projects like that can be completed in an afternoon, are a great way to learn "just enough" to keep a junior hardware hacker like myself from getting frustrated.</p>

<p>I was thrilled to find out that getting this board to talk to Ruby took virtually no effort. In fact, it was so simple it almost felt like I was cheating some how. Here are the steps that I followed to get the ID-12 RFID Scanner and Reader talking to Ruby.</p>

<ol>
<li><p>Download the most recent drivers from Future Technology Devices International:
 <a href="http://www.ftdichip.com/Drivers/VCP/MacOSX/FTDIUSBSerialDriver_v2_2_14.dmg">http://www.ftdichip.com/Drivers/VCP/MacOSX/FTDIUSBSerialDriver_v2_2_14.dmg</a>
 The package contains two sets of drivers. Make sure that you install the version that is right for your operating system.</p></li>
<li><p>Install the serialport gem for Ruby
 gem install serialport (I used version 1.0.4)</p></li>
<li><p>Mount the scanner on top of the reader by lining up the prongs in the appropriate slot. Then plug the reader into the Mini-USB port of the mac.</p></li>
<li><p>From the console, locate the virtual com port the drivers created when you plugged in your Mini-USB cable.
 :~ ls -la /dev</p>

<p> Scanning the output from this command you should see the device listed similar to this:  cu.usbserial-XXXXXX (where X's represent a driver id). Mine showed up as "cu.usbserial-A900ftPb" but yours may be different.</p></li>
<li><p>Use this sample code to print the unique RFID id stored inside the card, when someone swipes the card over the scanner.</p></li>
</ol>


<p>``` ruby</p>

<h1>Simple example of reading from serial port to interface with the RFID reader.</h1>

<p>require "serialport"
class RfidReader
 attr_accessor :key</p>

<p> def initialize(port)
   port_str = port
   baud_rate = 9600
   data_bits = 8
   stop_bits = 1
   parity = SerialPort::NONE
   @sp = SerialPort.new(port_str, baud_rate, data_bits, stop_bits, parity)
   @key_parts = []
   @key_limit = 16 # number of slots in the RFID card.
   while true do</p>

<pre><code> main
</code></pre>

<p>   end
   @sp.close
 end</p>

<p> def key_detected?
   @key_parts &lt;&lt; @sp.getc
   if @key_parts.size >= @key_limit</p>

<pre><code> self.key = @key_parts.join()
 @key_parts = []
 true
</code></pre>

<p>   else</p>

<pre><code> false
</code></pre>

<p>   end
 end</p>

<p> def main
   if key_detected?</p>

<pre><code> puts self.key
</code></pre>

<p>   end
 end
end</p>

<p>RfidReader.new("/dev/cu.usbserial-A900ftPb")  #may be different for you
```</p>

<p>Once you have the unique ID the possibilities become nearly limitless, you can use the card to update twitter, or turn on your lights, turn on the coffee pot, fire the nerf guns, release the hounds etc. Have fun, I know I will!</p>
]]></content>
  </entry>
  
</feed>
