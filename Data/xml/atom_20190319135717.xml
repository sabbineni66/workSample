<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dave Rapin]]></title>
  <link href="http://rapind.github.com/atom.xml" rel="self"/>
  <link href="http://rapind.github.com/"/>
  <updated>2015-10-17T13:08:35-04:00</updated>
  <id>http://rapind.github.com/</id>
  <author>
    <name><![CDATA[Dave Rapin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meteor and React - Part 1]]></title>
    <link href="http://rapind.github.com/blog/2015/10/15/meteor-with-reactjs/"/>
    <updated>2015-10-15T00:00:00-04:00</updated>
    <id>http://rapind.github.com/blog/2015/10/15/meteor-with-reactjs</id>
    <content type="html"><![CDATA[<p>This is part one of a series of posts that go through creating a new web app with Meteor and React.</p>

<h2>Prerequisites</h2>

<ol>
<li><a href="https://www.meteor.com/install">Meteor</a></li>
<li><a href="https://nodejs.org/en/">Nodejs</a></li>
<li>OSX, Linux, or Cygwin.</li>
</ol>


<h2>Why Metor?</h2>

<p>We&#8217;re always on the lookout for new methodologies in the web stack, and Meteor is one we&#8217;ve been keeping an eye on for a while.
Here&#8217;s what we like about it:</p>

<ul>
<li>Nodejs on the server performs significantly better than some other dynamic stacks like Ruby on Rails.</li>
<li>Websockets consume significantly less bandwidth than REST since there is no need to send HTTP headers every time.</li>
<li>No need to constantly customize APIs (also something GraphQL would solve).</li>
<li>Responding to data changes is straightforward via pub / sub. With React this is even easier.</li>
<li>Updating data is straightforward via Meteor methods.</li>
</ul>


<h2>Why React</h2>

<p>We love React for it&#8217;s simplicity and always use it for our web UIs.
Declaritive UI programming is where it&#8217;s at.</p>

<p>Code next to Markup was a bad idea right?
Not really.
As it turns out, having your UI code in your views when they are small (components) makes a ton of sense.</p>

<p>Don&#8217;t take our word for it though.
<a href="https://facebook.github.io/react/docs/getting-started.html">Give it a whirl for yourself</a>
There&#8217;s a decent chance you&#8217;ll agree.</p>

<h2>The Project Requirements</h2>

<p>We&#8217;re going to step through building a Hot or Not style of application tailored to sports plays.</p>

<p>The three main components are:</p>

<h4>Submit a Play</h4>

<p>User should be able to submit a new play. The play will have a title, description, and Youtube URL.</p>

<h4>Vote on Plays</h4>

<p>User should be able to see two plays and vote for one of them.</p>

<p>Once user has voted for a play, they will be replaced with two new plays that they can then vote on.</p>

<p>There is no limit to the number of plays the user can vote on, however the user may not vote on the same play more than once.</p>

<h4>Leaderboard</h4>

<p>User should see a list of top ten plays with the most votes, ordered by number of votes descending.
This list will update in real time as votes are added.</p>

<h2>Getting Started</h2>

<p>Create our project:</p>

<pre><code>meteor create tehgosu
</code></pre>

<p>This creates a basic Meteor application that we can run right away:</p>

<pre><code>cd tehgosu
meteor
</code></pre>

<p>Then visit <a href="http://localhost:3000">http://localhost:3000</a></p>

<h3>React and CoffeeScript</h3>

<p>Before we can start working on any views, we need to install React since that&#8217;s what we&#8217;ll be using instead of Blaze.</p>

<p>Adding libraries to Meteor is super simple:</p>

<pre><code>meteor add react
</code></pre>

<p>We personally prefer CoffeeScript over JavaScript due to the readability of significant whitespace.
There&#8217;s a popular opinion at the moment that CoffeeScript is obsolete now that we have ES6 and Babel.
I disagree because I think browsers will eventually support <a href="https://brendaneich.com/2015/06/from-asm-js-to-webassembly/">WebAssembly</a>.
Once they do we&#8217;ll see even more JavaScript alternatives.</p>

<pre><code>meteor add coffeescript
</code></pre>

<p>Now we&#8217;ll need to do some standard tweaks in order to have React and CoffeeScript play nice without excessive amounts of syntax.
First we&#8217;ll create a lib folder and add a component.coffee library to it.</p>

<pre><code>mkdir lib
touch lib/component.coffee
</code></pre>

<p>In component.coffee we&#8217;re going to add a function that we&#8217;ll be calling instead of React.createClass</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="vi">@Component =</span>
</span><span class='line'>  <span class="nv">create: </span><span class="nf">(spec) -&gt;</span>
</span><span class='line'>    <span class="nx">React</span><span class="p">.</span><span class="nx">createFactory</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the <strong>@</strong> symbol used to declare our Component object?
CoffeeScript places our code in a closure so as not to pollute the global namespace.
In Meteor we need to attach our object to the global namespace using <strong>this</strong> (@ = this.).
This is a little counter intuitive compared to CommonJS style requires, and maybe some day we&#8217;ll have a better alternative.</p>

<p>For now <strong>@Component</strong> makes our object accessible throughout the application.</p>

<p>Now we can create a React component in CoffeeScript like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">TestComponent = </span><span class="nx">Component</span><span class="p">.</span><span class="nx">create</span>
</span><span class='line'>  <span class="nv">render: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">div</span> <span class="nv">className: </span><span class="s">&#39;test-component&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&#39;Test Component&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The equivalent in JSX without our library would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">TestComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;test-component&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="nx">Test</span> <span class="nx">Component</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Project Structure</h3>

<p>Now is as good a time as any to setup our basic structure for the application.
Meteor has a convention where any code that&#8217;s placed within a directory named <strong>client</strong> will only run on the client.
And naturally code in a directory named <strong>server</strong> will only run on the server.</p>

<p>We want the following directories under the root of the project:</p>

<ul>
<li>lib: Common library functions. These are loaded before the other directories.</li>
<li>client: Code that should only be run on the client (browser).</li>
<li>server: Code that should only be run on the server.</li>
<li><p>public: Only served to the public. We&#8217;ll put our robots.txt and images in here.</p>

<p>  mkdir lib client server public</p></li>
</ul>


<p>Let&#8217;s remove the initial files that meteor created. We don&#8217;t need them.</p>

<pre><code>rm tehgosu.*
</code></pre>

<h3>Time to Write Some Code</h3>

<p>Create a new HTML file in the client directory.
Since we&#8217;re using React for our views, this will be the only HTML file we need.</p>

<pre><code>vi client/index.html
</code></pre>

<p>In this HTML file we just need a div element which react will replace once it&#8217;s loaded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Teh Gosu<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;</span>Loading...<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to attach our React views.
Create a new CoffeeScript file in the client directory.</p>

<pre><code>vi client/index.coffee
</code></pre>

<p>In this CoffeeScript file we load up our React views and attache them to the DOM.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Meteor</span><span class="p">.</span><span class="nx">startup</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">({}),</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span> <span class="s">&#39;app&#39;</span>
</span><span class='line'>  <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re referencing an object called <strong>App</strong> within the Render method, so we need to build that.
Create a new CoffeeScript file in the client directory for it.</p>

<pre><code>vi client/app.coffee
</code></pre>

<p>Our new app.coffee is going to hold our top level React component code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">{</span> <span class="nx">h1</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@App = </span><span class="nx">Component</span><span class="p">.</span><span class="nx">create</span>
</span><span class='line'>  <span class="nv">render: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">h1</span> <span class="p">{},</span>
</span><span class='line'>      <span class="s">&#39;Teh Gosu!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re keeping it simple. All we&#8217;re doing is rendering an h1 tag with the text <strong>Teh Gosu!</strong>.
Notice the <strong>@</strong> symbol prefix to the App declaration.
Again this is because of CoffeeScript&#8217;s automatic closure and the fact that Meteor needs the object to be on <strong>this</strong> to be accessible outside the file.</p>

<p>At this point we should have a working React + Meteor application. Run the server with:</p>

<pre><code>meteor
</code></pre>

<p>Then visit <a href="http://localhost:3000">http://localhost:3000</a></p>

<p>You should see <strong>Teh Gosu!</strong>.</p>

<p>Your directory structure should be:</p>

<pre><code>client
  app.coffee
  index.coffee
  index.html
lib
  component.coffee
server
public
</code></pre>

<p>This concludes part one of our Meteor + React series.
In part two we&#8217;ll add some data and the match view.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CoffeeScript with ReactJS]]></title>
    <link href="http://rapind.github.com/blog/2015/02/03/reactjs-with-coffeescript/"/>
    <updated>2015-02-03T09:23:00-05:00</updated>
    <id>http://rapind.github.com/blog/2015/02/03/reactjs-with-coffeescript</id>
    <content type="html"><![CDATA[<p>Lately I&#8217;ve been using ReactJS a lot to build rich user experiences on the web, and it&#8217;s been absolutely great. A huge improvement over AngularJS in my humble opinion.</p></p>

<p>The only ugly spot with ReactJS is JSX. I can see the appeal of using declarative HTML in templates for readability, but having switched to HAML (and Slim and Jade) long ago, writing HTML feels like a step backwards.</p>

<p>Luckily, using CoffeScript for my ReactJS components and eschewing JSX entirely, we can accomplish a syntax that&#8217;s very similar to HAML / Slim / Jade. If you&#8217;re not a fan of CofeeScript, HAML variants, or significant whitespace, there&#8217;s little chance I&#8217;ll be able to convince you otherwise. However if you are a fan of any of those, then it&#8217;s worth checking out.</p>

<p>This is the HTML we&#8217;ll be converting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;jumbotron&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Hello, world!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary btn-lg&quot;</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">role=</span><span class="s">&quot;button&quot;</span><span class="nt">&gt;</span>Learn more ?<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Converting it to Javascript using ReactJS looks like this. It&#8217;s pretty verbose.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Jumbotron</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="s2">&quot;jumbotron&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="s2">&quot;container&quot;</span><span class="p">},</span>
</span><span class='line'>          <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">,</span> <span class="p">{},</span>
</span><span class='line'>            <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">,</span> <span class="p">{},</span>
</span><span class='line'>              <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">className</span><span class="o">:</span> <span class="s2">&quot;btn btn-primary btn-lg&quot;</span><span class="p">,</span> <span class="nx">href</span><span class="o">:</span> <span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="nx">role</span><span class="o">:</span> <span class="s2">&quot;button&quot;</span> <span class="p">},</span> <span class="s2">&quot;Learn more ?&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s the JSX version. Quite an improvement I think, but it mixes HTML and Javascript together and that seems a bit messy and most likely throws off your editor&#8217;s syntax highlighting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Jumbotron</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;jumbotron&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;container&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">world</span><span class="o">!&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;btn btn-primary btn-lg&quot;</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nx">role</span><span class="o">=</span><span class="s2">&quot;button&quot;</span><span class="o">&gt;</span><span class="nx">Learn</span> <span class="nx">more</span> <span class="err">?</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, here&#8217;s the CoffeeScript version of the component. At least as succinct as the JSX version, and no mixed syntax or editor issues.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">{</span> <span class="nx">div</span><span class="p">,</span> <span class="nx">h1</span><span class="p">,</span> <span class="nx">p</span><span class="p">,</span> <span class="nx">a</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Jumbotron = </span><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span>
</span><span class='line'>  <span class="nv">render: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">div</span> <span class="nv">className: </span><span class="s">&quot;jumbotron&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">div</span> <span class="nv">className: </span><span class="s">&quot;container&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">h1</span> <span class="p">{},</span> <span class="s">&quot;Hello World&quot;</span>
</span><span class='line'>          <span class="nx">p</span> <span class="p">{},</span>
</span><span class='line'>            <span class="nx">a</span>
</span><span class='line'>              <span class="nv">className: </span><span class="s">&quot;btn btn-primary btn-lg&quot;</span>
</span><span class='line'>              <span class="nv">href: </span><span class="s">&quot;</span><span class="err">#</span><span class="s">&quot;</span>
</span><span class='line'>              <span class="nv">role: </span><span class="s">&quot;button&quot;</span>
</span><span class='line'>              <span class="s">&quot;Learn more ?&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the sake of completeness, here&#8217;s a CJSX version (CoffeeScript + JSX). Even more succinct, however again we&#8217;re mixing HTML with our CoffeeScript, making it a bit messy and giving you editor issues.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">Jumbotron = </span><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span>
</span><span class='line'>  <span class="nv">render: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s">&quot;jumbotron&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s">&quot;container&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">world</span><span class="o">!&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">className</span><span class="o">=</span><span class="s">&quot;btn btn-primary btn-lg&quot;</span> <span class="nx">href</span><span class="o">=</span><span class="s">&quot;</span><span class="err">#</span><span class="s">&quot;</span> <span class="nx">role</span><span class="o">=</span><span class="s">&quot;button&quot;</span><span class="o">&gt;</span><span class="nx">Learn</span> <span class="nx">more</span> <span class="err">?</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you do opt for the straight CoffeeScript route, then there are a few gotchas to keep in mind. If you&#8217;ve been using CoffeeScript for a while, then they&#8217;re pretty obvious, but can cause grief for newcomers.</p>

<h4>Gotcha 1: Optional Curly Braces</h4>

<p>CoffeeScript allows you to omit Curly braces on hashes. This can cause readability issues for the next person who comes along to read your code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">{</span> <span class="nx">div</span><span class="p">,</span> <span class="nx">h1</span><span class="p">,</span> <span class="nx">p</span><span class="p">,</span> <span class="nx">a</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Jumbotron = </span><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span>
</span><span class='line'>  <span class="nv">render: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">div</span> <span class="p">{</span> <span class="nv">className: </span><span class="s">&quot;jumbotron&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nx">div</span> <span class="p">{</span> <span class="nv">className: </span><span class="s">&quot;container&quot;</span> <span class="p">},</span>
</span><span class='line'>        <span class="nx">h1</span> <span class="p">{},</span> <span class="s">&quot;Hello World&quot;</span>
</span><span class='line'>          <span class="nx">p</span> <span class="p">{},</span>
</span><span class='line'>            <span class="nx">a</span> <span class="p">{</span>
</span><span class='line'>              <span class="nv">className: </span><span class="s">&quot;btn btn-primary btn-lg&quot;</span>
</span><span class='line'>              <span class="nv">href: </span><span class="s">&quot;</span><span class="err">#</span><span class="s">&quot;</span>
</span><span class='line'>              <span class="nv">role: </span><span class="s">&quot;button&quot;</span>
</span><span class='line'>              <span class="s">&quot;Learn more ?&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Gotcha 2: Commas and New lines</h4>

<p>CoffeeScript allows you to omit commas between hash assignments and opt instead for indented new lines. Again this can cause readability issues, especially when combined with Gotcha #1 above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">{</span> <span class="nx">div</span><span class="p">,</span> <span class="nx">h1</span><span class="p">,</span> <span class="nx">p</span><span class="p">,</span> <span class="nx">a</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Jumbotron = </span><span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span>
</span><span class='line'>  <span class="nv">render: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">div</span>
</span><span class='line'>      <span class="nv">className: </span><span class="s">&quot;jumbotron&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">div</span>
</span><span class='line'>        <span class="nv">className: </span><span class="s">&quot;container&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">h1</span>
</span><span class='line'>          <span class="p">{}</span>
</span><span class='line'>          <span class="s">&quot;Hello World&quot;</span>
</span><span class='line'>          <span class="nx">p</span>
</span><span class='line'>            <span class="p">{}</span>
</span><span class='line'>            <span class="nx">a</span>
</span><span class='line'>              <span class="nv">className: </span><span class="s">&quot;btn btn-primary btn-lg&quot;</span>
</span><span class='line'>              <span class="nv">href: </span><span class="s">&quot;</span><span class="err">#</span><span class="s">&quot;</span>
</span><span class='line'>              <span class="nv">role: </span><span class="s">&quot;button&quot;</span>
</span><span class='line'>              <span class="s">&quot;Learn more ?&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ultimately if you are going to use CoffeeScript for your ReactJS components instead of JSX then it&#8217;s probably a good idea to agree upon some conventions with your team on when braces and commas are used. My preference has been to use braces for single line hash assignments, and I&#8217;m considering enforcing braces for multiple line attribute assignments w/ React to better separate them from the next element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Programming Remotely on a VPS]]></title>
    <link href="http://rapind.github.com/blog/2013/07/04/pair-programming-remotely-vps/"/>
    <updated>2013-07-04T07:44:00-04:00</updated>
    <id>http://rapind.github.com/blog/2013/07/04/pair-programming-remotely-vps</id>
    <content type="html"><![CDATA[<p class="hang">At Pair Shaped we firmly believe that pair working is the future (and the present). However a good part of our team works remotely and this can be a real challenge.</p>


<p>While remote pairing solutions are becoming increasingly popular, as a coder it&#8217;s hard to beat the Vim + Tmux combination. It&#8217;s simple, fast, and there&#8217;s no client OS or application dependencies.</p>

<p>In this post we take you through all of the steps to setup an amazing remote pairing environment using an affordable cloud server (VPS). What this will allow you and your team to do:</p>

<ol>
<li>Securely share persistent tmux (shell) sessions on a linux box on the cloud.</li>
<li>Watch each other code.</li>
<li>Take turns coding.</li>
<li>Rotate between different persistent pairing sessions with multiple team members all within the same server.</li>
</ol>


<p>I highly recommend adding voice to the mix whether it&#8217;s Skype, Google Voice, or a SIP provider.</p>

<p>For starters, we&#8217;ll need a linux box in the cloud. For the server we&#8217;re going to go <a href="https://www.digitalocean.com">Digital Ocean</a> since it is one of the most affordable options at the time of this post. However, the steps are essentially the same with other hosts like <a href="https://www.linode.com/">Linode</a> and <a href="http://aws.amazon.com/ec2/">EC2</a>, so definitely check them out too.</p>

<div class="videoWrapper">
  <iframe width="420" height="315" src="http://rapind.github.com//www.youtube.com/embed/aU7W4O9a61o" frameborder="0" allowfullscreen></iframe>
</div>


<p>Sign up for an account at Digital Ocean and then create a 512MB droplet running <em>Ubuntu 12.04 x32</em>. If you&#8217;re not sure about the hostname option, a good choice would be something like <em>pair.yourcompanydomain.com</em>. Make sure you chose a region that&#8217;s close to you and your team to minimize latency.</p>

<p>At this end of this tutorial you can shut you droplet down if you aren&#8217;t going to use it, and it&#8217;ll only end up costing you a few cents.</p>

<p>Once you&#8217;ve created the droplet, you should receive an email from Digital Ocean with your new boxe&#8217;s IP address and credentials. For the rest of this post I&#8217;ll use a fictional IP. Just substitute the IP you were given as needed.</p>

<p>Open up a terminal if you don&#8217;t already have one up and follow along with these commands to setup and install the basics.</p>

<h2>Basic Server Setup</h2>

<pre><code># Log into your droplet and enter the provided password when prompted.
ssh root@198.199.xx.x

# Update the system. This will take a little while to complete.
aptitude update
aptitude safe-upgrade

# Install essential build tools, git, tmux, vim, and fail2ban.
aptitude install build-essential git tmux vim fail2ban

# For more details on configuration options for fail2ban start here:
# https://www.digitalocean.com/community/articles/how-to-protect-ssh-with-fail2ban-on-ubuntu-12-04
</code></pre>

<p>Next we&#8217;ll need to setup user accounts for our pair. You can of course setup as many users as you want and run multiple tmux sessions, but that&#8217;s the topic of a future post.</p>

<p>Follow along with these commands, substituting your preferred usernames for &#8220;dave&#8221; and &#8220;dayton&#8221;.</p>

<h2>Create Your Pairs</h2>

<pre><code># Create the wheel group
groupadd wheel
visudo
# Add the following line to the bottom of the file
%wheel ALL=(ALL) ALL
# Save and quit. (:wq)

# Create our pair users
# You'll want to substitude your own usernames for dave and dayton
adduser dave
adduser dayton

# Add them to the wheel group
usermod -a -G wheel dave
usermod -a -G wheel dayton
</code></pre>

<p>Now that we have your users setup with full rights (this is something you may want to change down the road), we can disable the root account and instead use a pair account.</p>

<h2>Secure the Server</h2>

<pre><code># Copy your shh key to the server
scp ~/.ssh/id_rsa.pub dave@198.199.xx.x:

# Login to your account
ssh dave@198.199.xx.x

# Enable ssh access using your rsa key
mkdir .ssh
mv id_rsa.pub .ssh/authorized_keys

# Now you should be able to ssh to the server using your key. Go ahead and try it. 
exit
ssh dave@198.199.xx.x
# If you have to enter a password, something went wrong. Try these steps again.

# Edit the sshd config
sudo vi /etc/ssh/sshd_config
# Disable root login
PermitRootLogin no
# Save and quit. (:wq)

# Reload ssh
sudo reload ssh
</code></pre>

<p>Now we have a fairly secure server with our pair accounts using password-less access and it&#8217;s time to setup the pairing environment. We&#8217;re going to use <a href="https://github.com/zolrath/wemux">wemux</a> which is backed by tmux to manage the sessions.</p>

<h2>Wemux Installation</h2>

<pre><code># Install wemux
sudo git clone git://github.com/zolrath/wemux.git /usr/local/share/wemux
sudo ln -s /usr/local/share/wemux/wemux /usr/local/bin/wemux
sudo cp /usr/local/share/wemux/wemux.conf.example /usr/local/etc/wemux.conf

# Change the host_list value to your pair usernames
sudo vim /usr/local/etc/wemux.conf
host_list=(dave dayton)
# Save and quit (:wq)
</code></pre>

<p>You are now the proud owner of a remote pairing environment.</p>

<h2>Start pairing</h2>

<p>It&#8217;s time to take it for a spin and make sure everything&#8217;s copasetic.</p>

<pre><code># Launch a shared tmux session.
wemux
</code></pre>

<p>You should now be running in a shared tmux session. One of your other accounts (pair2, etc.) can login and use the same command to join your session.</p>

<p>You will definitely want to checkout the <a href="https://github.com/zolrath/wemux">wemux documentation</a> for all of the configuration options.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Provisioning Profiles]]></title>
    <link href="http://rapind.github.com/blog/2013/02/05/rubymotion-provisioning-profiles/"/>
    <updated>2013-02-05T14:16:00-05:00</updated>
    <id>http://rapind.github.com/blog/2013/02/05/rubymotion-provisioning-profiles</id>
    <content type="html"><![CDATA[<p>I recently ran into an issue with RubyMotion where I couldn&#8217;t build to a development device without explicitly setting the provisioning profile in the Rakefile. Not only is this annoying, but it&#8217;s a big problem for team development because you&#8217;ll always want to check your Rakefile into source control and each team member would have a different Rakefile.</p>

<p>So I started hunting for a solution.</p>

<h2>Official Documentation is Misleading</h2>

<p>The <a href="http://www.rubymotion.com/developer-center/guides/project-management/#_configuration">RubyMotion official project configuration documentation</a> states that it look for and use the first provisioning profile it finds on your computer. This is false though, at least when you have multiple profiles, because even if each of your profiles contains the device UID you&#8217;re building to, this still won&#8217;t work.</p>

<h2>Existing Solutions Insufficient</h2>

<p>The existing solutions are simply to explicitly refer to your provisioning profile in your Rakefile. That&#8217;s OK for solo development (but still annoying), however it&#8217;s not a good solution for team development.</p>

<p>See this <a href="http://stackoverflow.com/questions/13539743/rubymotion-build-error-cant-find-a-provisioning-profile-named-mixios-tea">stackoverflow Discussion</a></p>

<h2>My Solution</h2>

<p>After a <a href="https://github.com/HipByte/RubyMotion/blob/master/lib/motion/project/config.rb">little light reading</a> I discovered that the RubyMotion build will check for a default profile named &#8220;iOS Team Provisioning Profile&#8221;.</p>

<p>So we simply need to create a new provisioning profile via the <a href="https://developer.apple.com/ios/manage/overview/index.action">iOS provisioning portal</a> named &#8220;iOS Team Provisioning Profile&#8221; and containing the device(s) we want to be able to run development builds on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Development with Ruby Motion]]></title>
    <link href="http://rapind.github.com/blog/2012/10/24/ios-development-with-ruby-motion/"/>
    <updated>2012-10-24T01:32:00-04:00</updated>
    <id>http://rapind.github.com/blog/2012/10/24/ios-development-with-ruby-motion</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been building an iOS app with RubyMotion for a while now, and the verdict is&#8230;</p>

<p>I&#8217;m in love with <a href="http://www.rubymotion.com/">RubyMotion</a>.</p>

<p>Here&#8217;s why:</p>

<ul>
<li>Ruby syntax runs circles around Objective-C syntax. If you&#8217;ve used Ruby and Objective-C for anything significant, and you&#8217;re not a masochist, then you know what I&#8217;m talking about.</li>
<li>It already has some amazing libraries like Teacup, BubbleWrap, and Formotion.</li>
<li>Building and deploying is a cinch with Rake. There&#8217;s even a testflight gem.</li>
<li>Bundler and CocoaPods for dependency management.</li>
<li>The REPL. I actually haven&#8217;t found this that big of a deal, but it can come in handy now and then.</li>
<li>I can continue using a text editor (vim or Sublime Text) instead of that hog called Xcode.</li>
<li>Really small archives.</li>
<li>The only (minor) downside so far has been occasionally translating example Objective-C code to RubyMotion code from Apple&#8217;s docs and Stack Overflow.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning VIM... Finally!]]></title>
    <link href="http://rapind.github.com/blog/2011/10/10/learning-vim-dot-dot-dot-finally/"/>
    <updated>2011-10-10T19:21:00-04:00</updated>
    <id>http://rapind.github.com/blog/2011/10/10/learning-vim-dot-dot-dot-finally</id>
    <content type="html"><![CDATA[<p>I had the opportunity to work with a bunch of TDD vim hackers during the last 4-5 months over at Nulogy, and after some initial resistance I decided to jump in and learn vim. My motivation is to really see if it lives up to the hype, and more importantly because it&#8217;ll make me look like a genius to the layman watching my screen (I.e. <a href="https://www.destroyallsoftware.com">Gary Bernhardt</a>).</p>

<p>I&#8217;ve tackled vim a few times over the years, but never fully committed to it. Since I believe you need to fully commit to something to do it well (including learning anything), I decided to pick up my touch typing first to really see the benefits of VIM.</p>

<p>Last week I achieved my typing goal of 75 words per minute, inspiration courtesy of <a href="http://steve-yegge.blogspot.ca/2008/09/programmings-dirtiest-little-secret.html">Steve Yegge</a>. I&#8217;ve since upped my goal to 90 wpm, but I think I&#8217;m at least quick enough now to really immerse myself into learning vim.</p>

<p>I&#8217;m starting with <a href="https://peepcode.com/products/smash-into-vim-i">Peepcode&#8217;s Smash Into Vim</a>, this <a href="http://yehudakatz.com/2010/07/29/everyone-who-tried-to-convince-me-to-use-vim-was-wrong/">Yehuda post</a>, and of course the built in vim tutor.</p>

<p>Rock on!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code School - Rails Best Practices Reviewed]]></title>
    <link href="http://rapind.github.com/blog/2011/03/24/code-school-rails-best-practices-reviewed/"/>
    <updated>2011-03-24T07:31:00-04:00</updated>
    <id>http://rapind.github.com/blog/2011/03/24/code-school-rails-best-practices-reviewed</id>
    <content type="html"><![CDATA[<p>Yesterday I ran through the &#8220;Rails Best Practices&#8221; course over at <a href="http://www.codeschool.com/">Code School</a>.</p>

<p>I really like this interactive format. You watch a video / screencast covering a topic or set of topics, then you&#8217;re required to code up some excersizes to review the content of the video&#8217;s material before you can move on to the next topic.</p>

<p>Overall the format worked really well. The gamification (points etc.) didn&#8217;t make a difference for me, but it might be a motivator for some people. I do think they&#8217;re on to something here, and from the looks of it (also from the workd marketplace in their tagline) they&#8217;ll be refining this as a platform for use with other third party content.</p>

<p>The online editor was actually really well done. It&#8217;s not vim or emacs obviously, but it&#8217;s not super cludgy like you&#8217;d expect, so it works well enough for the small amount of material you&#8217;re covering.</p>

<p>I think there&#8217;s an opportunity to add in some social features so students can help each other if they get some harder topics going.</p>

<p>As for the content of the &#8220;Rails Best Practices&#8221; course itself, you can get the same content from here; <a href="http://rails-bestpractices.com/">http://rails-bestpractices.com/</a>, however the code school environment was enjoyable enough.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Customer Addresses for Relational Purchasing]]></title>
    <link href="http://rapind.github.com/blog/2011/03/20/handling-customer-addresses-for-relational-purchasing/"/>
    <updated>2011-03-20T15:16:00-04:00</updated>
    <id>http://rapind.github.com/blog/2011/03/20/handling-customer-addresses-for-relational-purchasing</id>
    <content type="html"><![CDATA[<p>A problem I often run into whenver I build an ordering system is how best to store addresses for customers and orders in an ordering system (like an ecommerce store).</p>

<p>Given the following conditions for an order placement application:</p>

<ul>
<li>Customer&#8217;s can register and supply seperate billing and shipping addresses.</li>
<li>Orders need to store customer data as a snapshot of when the order was placed in case the customer data is changed or removed in the future (orders should maintain historical integrity).</li>
</ul>


<p>We have several different ways of accomplishing this with a relational database (document and KV stores are a different story).</p>

<ol>
<li><p>Store all address information within the customer and order tables themselves. This is perhaps the easiest solution even though it&#8217;s not the most normalized. So you&#8217;d have fields like billing_city and shipping_city inside both the customers and the orders tables. The downside is that you&#8217;ve created duplicates of the same fields, which uses up a little more storage space (usually not an issue) and requires more work to maintain if you ever needed to change their schema (again, pretty rare occurence for address fields that are well known entities). The upside is it&#8217;s very simple to work with from a code perspective.</p></li>
<li><p>Store addresses in their own table and associate them to orders and customers using via polymorphic composite keys. In order for this to work you&#8217;ll need a composite key of 3 fields; address_type, addressable_type, addressable_id. So the shipping address for a customer would be something like: &#8220;Shipping&#8221;, &#8220;Customer&#8221;, 1232. and the billing address for an order could be: &#8220;Billing&#8221;, &#8220;Order&#8221;, 2873. etc. The downside is it&#8217;s a rather fancy assoication and will add complexity to your ORM code as you override some methods (since no ORM I know of is built to handle this oddball relationship out of the box). The upside is it&#8217;s very normalized and you can add new address types on the fly and new classes that can have addresses on the fly.</p></li>
<li><p>Store addresses in their own table, but simplify the association by using many-to-one foreign keys. For this to work we just have keys in the address table for each assoication. So in this case we have &#8220;billing_customer_id&#8221;, &#8220;shipping_customer_id&#8221;, &#8220;billing_order_id&#8221;, &#8220;shipping_order_id&#8221;. The downside is it&#8217;s not very normalized / DRY and you won&#8217;t be able to add new address types or addressable classes on the fly like you could using the plymorphic associations. The upside is very simple (almost all convention based) ORM code since you&#8217;re dealing with belongs_to type relationships.</p></li>
<li><p>Use an Address class to define your address fields, but serialize it to text fields wherever it&#8217;s used. So you&#8217;re ditching the relational style just for the addresses. For this to work you&#8217;d have two text fields in your orders table and your customers table; &#8220;billing_address&#8221; and &#8220;shipping_address&#8221;. Then you just serialize your address objects to these fields (yaml, xml, json, or whatever). The upside is the same simplicity as solution #1, but without all of the redundancy in your schema. The downside is the potential complexity of code needed to edit and manage the address information and get proper validations to work.</p></li>
</ol>


<p>My preferred solution is #4. I think it&#8217;s worth the added complexity at the view level when using Rails 3 since it&#8217;s not too much extra work (although it could be a little cleaner).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD, BDD, and False Assumptions]]></title>
    <link href="http://rapind.github.com/blog/2011/01/18/tdd-bdd-and-false-assumptions/"/>
    <updated>2011-01-18T14:31:00-05:00</updated>
    <id>http://rapind.github.com/blog/2011/01/18/tdd-bdd-and-false-assumptions</id>
    <content type="html"><![CDATA[<p>After watching another <em>Test First</em> presentation related to the Ruby world I figured out what it is that bothers me the most about the <em>TDD Religion</em>.</p>

<p>It seems that everytime a TDD evangelist speaks about non-test driven / traditional development they paint a completely exaggerated and unrealistic picture of what it means to not use TDD. It usually goes something like this: &#8220;You spend a year creating a specification, and then another year coding until you&#8217;ve built this monolithic application then you manually go through all of the functionality you built for another year fixing bugs etc.&#8221;. Seriously? I know we&#8217;ve all got horror tales, but come on&#8230; who in their right mind has ever worked like this even before all of the Test-first buzz back in 2000? This is a fallacy, and even coding in Fortran sounds better than being involved in this fantasy process.</p>

<p>I don&#8217;t actually have a problem with TDD the practice, or BDD as a practice, or even EDD (experiment) the practice. What I do have an issue with are the religious zealots that think it solves all of their problems and will criticize anyone who doesn&#8217;t share the same beliefs. Really, it doesn&#8217;t.</p>

<p>Here&#8217;s how Joe the Programmer who&#8217;s never bothered with TDD <em>actually</em> performs his work on a daily basis. He thinks about the big picture. Breaks it up into small accessible problems (basic problem solving). Dives right in and starts building out a solution to tackle one of these small problems. Then he <em>manually tests</em> his small solution to make sure it works and <em>provokes more thought</em> on how it fits into the big picture. Once he&#8217;s happy with it, he tackles the next small problem. All the time he&#8217;s constantly reevaluating the big picture, identifying new problems, speaking with the client, etc.</p>

<p>Sounds a lot more reasonable than &#8220;code for a year&#8221; doesn&#8217;t it? It almost sounds like it would work really well in most scenarios. It doesn&#8217;t help sell the latest tickets to your speech on TDD though, because honestly, how much would TDD actually improve his process?</p>

<p>Please, before you tell everyone how amazing the latest test / behaviour / experiment driven development methodology or tool is, watch this presentation from Rich Hickey on <em>Hammock-Driven Development</em> first and let it sink in. <a href="http://clojure.blip.tv/file/4457042/">http://clojure.blip.tv/file/4457042/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better Authentication]]></title>
    <link href="http://rapind.github.com/blog/2010/12/11/better-authentication/"/>
    <updated>2010-12-11T02:13:00-05:00</updated>
    <id>http://rapind.github.com/blog/2010/12/11/better-authentication</id>
    <content type="html"><![CDATA[<p>Since my last post on authentication and single sign-on I came across an incredibly clever little tool called PasswordMaker.</p>

<p>What makes it so clever is that it changes practically nothing from the normal flow of entering a password and stores nothing locally (so it doesn&#8217;t matter if you change browser or computer). You type the same password for everything and it instead submits a unique and incredibly strong password for every site. This is done by creating a one-way hash. One-way hashes is also how we encrypt passwords on the backend of websites before storing them in the database. So basically you&#8217;re original password is getting hashed twice for most websites.</p>

<p>How it works:</p>

<p>You install the PasswordMaker extension for your browser of choice.
You go to sign up for a new website service (or change your password for an existing one).
You type your typical password, let&#8217;s say it&#8217;s &#8220;b@ng3r5&#8221;. You should still pick something fairly strong (mix of characters, numbers, symbols, etc.), but even if you didn&#8217;t you&#8217;re much better off than most.
When you submit the sign up form, the PasswordMaker extension creates a hash using the data you&#8217;re entering combined with the domain of the website. In other words it&#8217;s creating an encrypted version of your real password. This encrypted password is what&#8217;s submitted to the website. It may end up being something like &#8220;4#ae2!9ljh2vk*8c$21h7wh%s$lz&#8221; for example.</p>

<p>You come back to the site another day and are asked to login
You type in the same typical password, &#8220;b@ng3r5&#8221; in this case.
When you submit the login form, the PasswordMaker performs the hashing operation again, using the same password and the same domain. This means it will come up with exactly the same hash as it did when you signed up.
The site&#8217;s server see your encrypted password, I.e. &#8220;4#ae2!9ljh2vk*8c$21h7wh%s$lz&#8221; which it then submits to it&#8217;s own authentication process (usually it also performs a one-way hash again using your password and a random string it generated when you initially signed up and compares that against the encrypted value it has stored against your account).</p>

<p>Benefits:</p>

<p>Some sites still store passwords in clear-text. You&#8217;re way safer if one of these sites is compromised since you&#8217;re password was already encrypted before it was sent to the site.
Using the same password for everything in way safer now than it was without this encryption&#8230; it&#8217;s probably still a good idea to rotate passwords, but not as big of a deal as it was without the pre-encryption.
We&#8217;re practically faking single sign-on.</p>

<p>I still think there may be some potential problems that you need to keep in mind.</p>

<p>If a clever hacker compromises a site that&#8217;s storing passwords in clear-text they could still potentially crack your password since it will stick out like a sore thumb within the rest of the cleartext passwords. Said hacker will know that yours is the only one that&#8217;s been encrypted and he may guess that it was encrypted using PasswordMaker. He would then know that your salt (part of the string being used to generate the hash) is the domain of the site and he can use that information to run dictionary attacks with the domain until he gets the same encrypted result.</p>

<p>Obviously this is pretty unlikely and not worth the effort since there&#8217;s so many other passwords requiring no effort, but still using a strong password to begin with will make this practically impossible. The only way I see this happening is if someone is specifically targeting you and the added effort is really worth it&#8230; So maybe 1 chance in a google?</p>

<p>I highly recommend you checkout this tool. It has multiple extensions / plugins for every major browser.</p>

<p><a href="http://passwordmaker.org/">http://passwordmaker.org/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication / Single Sign On]]></title>
    <link href="http://rapind.github.com/blog/2010/11/24/authentication-slash-single-sign-on/"/>
    <updated>2010-11-24T15:52:00-05:00</updated>
    <id>http://rapind.github.com/blog/2010/11/24/authentication-slash-single-sign-on</id>
    <content type="html"><![CDATA[<p>I think the current solutions for single-signon are completely impractical. This includes FB Connect, Google, MS, Yahoo, OpenID, etc. What makes them impractical is they require all sites to participate in a fairly complicated integration and have single points of failure which can bring down your authentication (RPX goes down etc.).</p>

<p>I also happen to think the thick-client solutions (password managers) are far more practical. A password manager can maintain multiple profiles with unique auto-generated passwords so if any of the sites that stores your credentials is compromised (say they aren&#8217;t encrypting your passwords properly) the problem is contained within the compromised site since every other site uses a different generated password. This is far easier to manage as both consumer and service provider. By using a password manager you only need to remember 1 password, the one used to unlock your password manager.</p>

<p>Now what would be great is if you could combine the thick client password manager concept with a cloud based redundant solution (no single point of failure) and have full integration for auto-filling fields with all major browsers.</p>

<p>So let&#8217;s say you have a master account with a cloud provider like Google or Amazon etc. They provide you with a semi-thick client solution like a browser addon which maintains a connection witch can create profiles on demand for a given site and auto-fill username / password / email at your approval. The password is a very strong auto-generated key associated with the a resource identifier of the site. So that a site could do the standard email / password and include a simple meta-tag identifying it&#8217;s unique resource. This would make integration on your application optional at worst, and extremely simple at best.</p>

<p>Xmarks is pretty close. It&#8217;s missing a password generator though: <a href="http://www.xmarks.com/">http://www.xmarks.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backing up your MySQL Databases Offsite]]></title>
    <link href="http://rapind.github.com/blog/2010/05/06/backing-up-your-mysql-databases-offsite/"/>
    <updated>2010-05-06T08:40:00-04:00</updated>
    <id>http://rapind.github.com/blog/2010/05/06/backing-up-your-mysql-databases-offsite</id>
    <content type="html"><![CDATA[<p>I recently came across a nifty little tool called Tarsnap.</p>

<p>From the Tarsnap home page:</p>

<p>Tarsnap is a secure online backup service for BSD, Linux, OS X, Solaris, Cygwin, and can probably be compiled on many other UNIX-like operating systems. The Tarsnap client code provides a flexible and powerful command-line interface which can be used directly or via shell scripts.</p>

<p>Here&#8217;s a quick and easy guide to get you up and running backup up all of your MySQL databases.</p>

<h3>Automate the MySQL Backup</h3>

<ol>
<li><p>In your home directory:
<code>
mkdir backups &amp;&amp; cd backups
</code></p></li>
<li><p>Download: <a href="http://sourceforge.net/projects/automysqlbackup/">http://sourceforge.net/projects/automysqlbackup/</a> to the backups directory you just created.</p></li>
<li><p>Rename it:
<code>
mv automysqlbackup.sh.2.5 automysqlbackup.sh
</code></p></li>
<li><p>Make it executable:
<code>
chmod u+rwx automysqlbackup.sh
</code></p></li>
<li><p>Edit it:
<code>
nano automysqlbackup.sh
</code></p></li>
<li><p>Fill out your database name, password, and the names of the databases you want to backup.</p></li>
<li><p>Look for the commented POSTBACKUP line. Add these two lines right below it (replace username with your username).</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BACKUP_TIMESTAMP=$(date +"%m-%d-%Y_%T")
</span><span class='line'>POSTBACKUP="tarsnap -c -f databases.$BACKUP_TIMESTAMP /home/username/backups"</span></code></pre></td></tr></table></div></figure>


<h3>Install and Setup Tarsnap.</h3>

<ol>
<li><p>Follow the instructions on the Tarsnap getting started page: <a href="http://www.tarsnap.com/gettingstarted.html">http://www.tarsnap.com/gettingstarted.html</a></p></li>
<li><p>You should have donwloaded, paid for, and installed Tarsnap before continuing.</p></li>
<li><p>We&#8217;re going to use the tarsnap sample config (cache dir and key location).
<code>
cd /usr/local/etc
cp tarsnap.conf.sample tarsnap.conf
</code></p></li>
<li><p>Now run your backup script:
<code>
sudo ./automysqlbackup.sh
</code></p></li>
<li><p>Check to see if you&#8217;re backup was created and stored remotely:
<code>
sudo tarsnap --list-archives
</code></p></li>
<li><p>Now we&#8217;re going to create a cronjob to run the script on a daily basis (or you could move it to your /etc/cron.daily).</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo crontab -e
</span><span class='line'># backup the databases every day at 2:30 AM
</span><span class='line'>30 2 * * * /home/deploy/backups/automysqlbackup.sh &gt; /home/deploy/cron.log</span></code></pre></td></tr></table></div></figure>


<p>Now you&#8217;re databases are being backed up daily on a rotation keeping weekly and monthly dumps and storing them both on and off-site (encrypted).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quality Versus Speed]]></title>
    <link href="http://rapind.github.com/blog/2010/04/29/quality-versus-speed/"/>
    <updated>2010-04-29T22:02:00-04:00</updated>
    <id>http://rapind.github.com/blog/2010/04/29/quality-versus-speed</id>
    <content type="html"><![CDATA[<p>The quality versus speed question is one that constantly comes up whether you&#8217;re a freelancer or a salaryman, and the answer is usually situational. However, by situational I don&#8217;t mean given a specific project. Instead I think it&#8217;s more about your personality and commitment as a developer.</p>

<p>As a freelancer you have a lot more control over the quality of your work and it&#8217;s essential to enjoying your profession. We inevitably have to deal with some unreasonable clients now and then, who want everything done yesterday and aren&#8217;t willing to compensate you appropriately for your time. So how do we deal with it?</p>

<p>For me, with fixed quote work, once I agree to take a project on I simply put compensation out of my mind. If I was unable to correctly scope and quote building a quality application, it&#8217;s not going to stop me from doing my best anyways. One of the luxuries of freelancing is the authority to decide that you will do what it takes to deliver something you&#8217;re proud of. In my mind it&#8217;s just not acceptable to deliver less than my best effort, and it would stress me out not to do so. Using an agile process can also help to limit losses you may incur by misquoting projects.</p>

<p>This means all of my client&#8217;s will get a great deal, even those I may have misquoted. I&#8217;ll sometimes take a loss, but for me it&#8217;s not worth the stress of building something you aren&#8217;t proud of. At the core, it&#8217;s really that simple. I get to feel good about my work and I&#8217;m still able to put food on the table even when I take a loss. I&#8217;ll learn new technologies and techniques which may eventually balance out the occasional losses.</p>

<p>So to take this a little further, whenever I&#8217;m building software, there&#8217;s usually quite a few moving parts behind the scenes that the client is blissfully unaware of. That doesn&#8217;t mean they&#8217;re unimportant. In fact when I take on the work I&#8217;m essentially saying, yes I have the expertise to do this, and yes I will take care of all of the details including the more complex hidden challenges.</p>

<p>For example, let&#8217;s say I&#8217;m building a storefront web application. I&#8217;m extremely focused on conversion and put together a great payment flow to reduce the friction associated with purchasing online. I&#8217;ve implemented SSL properly wherever customer information is being submitted. I&#8217;m storing their details using opt-out rather than opt-in. The customer is always being sent to the most relevant next step, and in general I&#8217;m presenting them with as little data entry fields as possible. The customer feels safe and they are able to make their payment quickly. Returning customers are delighted that it&#8217;s even faster the next time they make a purchase.</p>

<p>So far this sounds like a pretty great job. The client is in total agreement. Their sales are up, CSR calls are down, and I feel like my work is appreciated.</p>

<p>What the client is unaware of is how I&#8217;m storing credit card information and passwords. I could be storing them in clear text or using weak encryption (salt-less). Let&#8217;s say that I also enforced very few if any restrictions when customers choose a password, since that would increase payment friction. So we have weak or unencrypted passwords, they&#8217;re easy to crack via dictionary attacks; like &#8220;joe&#8221;, &#8220;password&#8221;, &#8220;12345&#8221;, plus they&#8217;re all associated with unencrypted credit card information.</p>

<p>Now the client may never care so long as nothing <em>bad</em> happens. They&#8217;re certainly not going to pay me to implement a far more secure solution if I didn&#8217;t make room for it in my initial quote. Good enough? Well sort of&#8230; most of the time this probably goes unnoticed. Meaning the customer is happy and they didn&#8217;t have to pay me for the extra time to nail down the security (however, for this example at least, PCI enforcement is going to change that). So what&#8217;s the problem? The problem is I&#8217;m not happy. I know that some very critical mistakes have been made. Therefore I would never deliver this application until I corrected these mistakes. This isn&#8217;t actually a real world scenario, but it serves as a decent enough example of hidden complexity.</p>

<p>There are many programmers like myself, who&#8217;s personality and commitment to a quality solution will simply not let them stop at good enough. Even if the client is happy and completely unaware of the insecurity of their system and the liability associated with it. These programmers will be compelled to finish the job, even if they are over budget.</p>

<p>There are times though where a passionate and committed programmer can blow out a project&#8217;s budget without the customer&#8217;s best interest at heart. I&#8217;ve heard a lot of criticism in programming circles about this type of programmer. However, I&#8217;ve noticed that almost always these criticisms come from either programmers with very limited experience, or MBA types who&#8217;ve never written a line of code in their life. There is absolutely no job satisfaction in delivering inferior products. Period. The passionate and committed programmer may seem to make some things a little more complicated than they need to be, but they will learn from it, and in the end you will end up with a better and more efficient product.</p>

<p>As a self-professed programming perfectionist of many years, my opinion is that there are many applications out there that I&#8217;m simply not suited to work on. I accept that this attention to details can be a strength in some scenarios and a weakness in others. There&#8217;s probably thousands of programmers that can do the same work cheaper, with less questions, and produce an equally satisfactory product in some scenarios. In fact most of them probably don&#8217;t even need to be programmers, in that they have no real interest in programming. Many projects are simply glueing together existing libraries and frameworks and require very little creative problem solving.</p>

<p>I would argue that there&#8217;s nothing wrong with either of these programmer personalities. I think the market has room for both of us. There are many prototyping and proof of concept projects out there with extremely frugal owners / managers that simply aren&#8217;t willing to invest either the time or money into a great solution and are happy enough with a mess of libraries glued together behind a pretty user interface. In fact, unless the stakeholder is willing to invest their own time and effort in the project, then they&#8217;re unlikely to be happy with any solution they get, and would just frustrate the more passionate and committed developers anyways.</p>

<p>In the end, I&#8217;m happy to be writing quality software that will live for a while and need to be supported and improved. I enjoy refactoring my code. There&#8217;s something extremely satisfying about it.</p>

<p>As a client, if the project is your baby, and you&#8217;re very committed to it, then you will want an equal level of commitment from whoever works on it.</p>
]]></content>
  </entry>
  
</feed>
