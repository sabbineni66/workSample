---
- hosts: controllers
  become_user: root
  become: true
  remote_user: root
  tasks:

  # - name: make directory for Kubernetes
  #   file: path={{ item }} state=directory
  #   with_items:
  #     - /var/lib/kubernetes
  #     - /etc/kubernetes

  - name: upload certificates
    copy:
      src: ../output/{{ item }}
      dest: /var/lib/kubernetes
      owner: root
      group: root
      mode: 0600
    become: true
    with_items:
      - ca.pem
      - kubernetes.pem
      - kubernetes-key.pem

  # - name: upload systemd units
  #   copy:
  #     src: ../templates/{{ item }}
  #     dest: /etc/systemd/system
  #     owner: root
  #     group: root
  #     mode: 0600
  #   become: true
  #   with_items:
  #     - kube-apiserver.service
  #     - kube-controller-manager.service
  #     - kube-scheduler.service

  - name: upload service scripts
    copy:
      src: ../output/{{ item }}
      dest: /usr/local/sbin
      owner: root
      group: root
      mode: 0500
    become: true
    with_items:
      - kube-apiserver.sh
      - kube-controller-manager.sh

  - name: upload kube-scheduler.sh script
    copy:
      src: ../scripts/kube-scheduler.sh
      dest: /usr/local/sbin
      owner: root
      group: root
      mode: 0500

  - name: upload token.csv
    copy:
      src: ../output/token.csv
      dest: /var/lib/kubernetes
      owner: root
      group: root
      mode: 0600

  - name: upload authorization-policy.jsonl
    copy:
      src: ../templates/authorization-policy.jsonl
      dest: /var/lib/kubernetes
      owner: root
      group: root
      mode: 0600

  - name: reload systemd
    command: systemctl daemon-reload

  - name: enable and start kube-apiserver
    systemd:
      name: kube-apiserver
      enabled: yes
      state: started

  - name: enable and start kube-controller-manager
    systemd:
      name: kube-controller-manager
      enabled: yes
      state: started

  - name: enable and start kube-scheduler
    systemd:
      name: kube-scheduler
      enabled: yes
      state: started

  # - name: verify kubernetes status
  #   shell: kubectl get componentstatuses
  #   register: cmd_result
  #   retries: 5
  #   delay: 10

  # - assert:
  #   that:
  #     - "'scheduler            Healthy' in cmd_result.stdout"
  #     - "'controller-manager   Healthy' in cmd_result.stdout"
  #     - "'etcd-0               Healthy' in cmd_result.stdout"
  #     - "'etcd-1               Healthy' in cmd_result.stdout"
  #     - "'etcd-2               Healthy' in cmd_result.stdout"
