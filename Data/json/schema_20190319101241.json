{
  "modules": [
    {
      "name": "app",
      "description": "Control your application's event lifecycle.",
      "process": {
        "main": true,
        "renderer": false
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "app",
      "websiteUrl": "http://electron.atom.io/docs/api/app",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/app.md",
      "methods": [
        {
          "name": "quit",
          "signature": "()",
          "description": "Try to close all windows. The before-quit event will be emitted first. If all windows are successfully closed, the will-quit event will be emitted and by default the application will terminate. This method guarantees that all beforeunload and unload event handlers are correctly executed. It is possible that a window cancels the quitting by returning false in the beforeunload event handler."
        },
        {
          "name": "focus",
          "signature": "()",
          "description": "On Linux, focuses on the first visible window. On macOS, makes the application the active app. On Windows, focuses on the application's first window."
        },
        {
          "name": "hide",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "description": "Hides all application windows without minimizing them."
        },
        {
          "name": "show",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "description": "Shows application windows after they were hidden. Does not automatically focus them."
        },
        {
          "name": "getAppPath",
          "signature": "()",
          "returns": {
            "type": "String",
            "collection": false,
            "description": "The current application directory."
          }
        },
        {
          "name": "getPath",
          "signature": "(name)",
          "description": "You can request the following paths by the name:",
          "parameters": [
            {
              "name": "name",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "String",
            "collection": false,
            "description": "A path to a special directory or file associated with name. On failure an Error is thrown."
          }
        },
        {
          "name": "getFileIcon",
          "signature": "(path[, options], callback)",
          "description": "Fetches a path's associated icon. On Windows, there a 2 kinds of icons: On Linux and macOS, icons depend on the application associated with file mime type.",
          "parameters": [
            {
              "name": "path",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": false,
              "properties": [
                {
                  "name": "size",
                  "type": "String",
                  "collection": false,
                  "description": "",
                  "required": true,
                  "possibleValues": [
                    {
                      "value": "small",
                      "description": "16x16"
                    },
                    {
                      "value": "normal",
                      "description": "32x32"
                    },
                    {
                      "value": "large",
                      "description": "48x48 on <em>Linux</em>, 32x32 on <em>Windows</em>, unsupported on <em>macOS</em>."
                    }
                  ]
                }
              ]
            },
            {
              "name": "callback",
              "type": "Function",
              "collection": false,
              "required": true,
              "parameters": [
                {
                  "name": "error",
                  "type": "Error",
                  "collection": false,
                  "description": "",
                  "required": true
                },
                {
                  "name": "icon",
                  "type": "NativeImage",
                  "collection": false,
                  "description": "",
                  "required": true
                }
              ]
            }
          ]
        },
        {
          "name": "getVersion",
          "signature": "()",
          "returns": {
            "type": "String",
            "collection": false,
            "description": "The version of the loaded application. If no version is found in the application's package.json file, the version of the current bundle or executable is returned."
          }
        },
        {
          "name": "getLocale",
          "signature": "()",
          "description": "To set the locale, you'll want to use a command line switch at app startup, which may be found here. Note: When distributing your packaged app, you have to also ship the locales folder. Note: On Windows you have to call it after the ready events gets emitted.",
          "returns": {
            "type": "String",
            "collection": false,
            "description": "The current application locale. Possible return values are documented here."
          }
        },
        {
          "name": "getAppMetrics",
          "signature": "()",
          "returns": {
            "type": "ProcessMetric",
            "collection": true,
            "description": "Array of ProcessMetric objects that correspond to memory and cpu usage statistics of all the processes associated with the app."
          }
        },
        {
          "name": "setBadgeCount",
          "signature": "(count)",
          "platforms": [
            "Linux",
            "macOS"
          ],
          "description": "Sets the counter badge for current app. Setting the count to 0 will hide the badge. On macOS it shows on the dock icon. On Linux it only works for Unity launcher, Note: Unity launcher requires the existence of a .desktop file to work, for more information please read Desktop Environment Integration.",
          "parameters": [
            {
              "name": "count",
              "type": "Integer",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether the call succeeded."
          }
        },
        {
          "name": "getBadgeCount",
          "signature": "()",
          "platforms": [
            "Linux",
            "macOS"
          ],
          "returns": {
            "type": "Integer",
            "collection": false,
            "description": "The current value displayed in the counter badge."
          }
        }
      ],
      "events": [
        {
          "name": "will-quit",
          "description": "Emitted when all windows have been closed and the application will quit. Calling event.preventDefault() will prevent the default behaviour, which is terminating the application. See the description of the window-all-closed event for the differences between the will-quit and window-all-closed events. Note: On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system or a user logout.",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "quit",
          "description": "Emitted when the application is quitting. Note: On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system or a user logout.",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "exitCode",
              "type": "Integer",
              "collection": false,
              "required": true
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "dock",
          "type": "Object",
          "required": true,
          "properties": [
            {
              "name": "bounce",
              "signature": "([type])",
              "platforms": [
                "macOS"
              ],
              "description": "When critical is passed, the dock icon will bounce until either the application becomes active or the request is canceled. When informational is passed, the dock icon will bounce for one second. However, the request remains active until either the application becomes active or the request is canceled.",
              "parameters": [
                {
                  "name": "type",
                  "type": "String",
                  "collection": false,
                  "description": "Can be `critical` or `informational`. The default is `informational`",
                  "required": false,
                  "possibleValues": [
                    {
                      "value": "critical"
                    },
                    {
                      "value": "informational"
                    }
                  ]
                }
              ],
              "returns": {
                "type": "Integer",
                "collection": false,
                "description": "an ID representing the request."
              },
              "type": "Function"
            },
            {
              "name": "cancelBounce",
              "signature": "(id)",
              "platforms": [
                "macOS"
              ],
              "description": "Cancel the bounce of id.",
              "parameters": [
                {
                  "name": "id",
                  "type": "Integer",
                  "collection": false,
                  "required": true
                }
              ],
              "type": "Function"
            },
            {
              "name": "downloadFinished",
              "signature": "(filePath)",
              "platforms": [
                "macOS"
              ],
              "description": "Bounces the Downloads stack if the filePath is inside the Downloads folder.",
              "parameters": [
                {
                  "name": "filePath",
                  "type": "String",
                  "collection": false,
                  "required": true
                }
              ],
              "type": "Function"
            },
            {
              "name": "setBadge",
              "signature": "(text)",
              "platforms": [
                "macOS"
              ],
              "description": "Sets the string to be displayed in the dock?s badging area.",
              "parameters": [
                {
                  "name": "text",
                  "type": "String",
                  "collection": false,
                  "required": true
                }
              ],
              "type": "Function"
            },
            {
              "name": "getBadge",
              "signature": "()",
              "platforms": [
                "macOS"
              ],
              "returns": {
                "type": "String",
                "collection": false,
                "description": "The badge string of the dock."
              },
              "type": "Function"
            },
            {
              "name": "hide",
              "signature": "()",
              "platforms": [
                "macOS"
              ],
              "description": "Hides the dock icon.",
              "type": "Function"
            },
            {
              "name": "show",
              "signature": "()",
              "platforms": [
                "macOS"
              ],
              "description": "Shows the dock icon.",
              "type": "Function"
            },
            {
              "name": "isVisible",
              "signature": "()",
              "platforms": [
                "macOS"
              ],
              "returns": {
                "type": "Boolean",
                "collection": false,
                "description": "Whether the dock icon is visible. The app.dock.show() call is asynchronous so this method might not return true immediately after that call."
              },
              "type": "Function"
            },
            {
              "name": "setMenu",
              "signature": "(menu)",
              "platforms": [
                "macOS"
              ],
              "description": "Sets the application's dock menu.",
              "parameters": [
                {
                  "name": "menu",
                  "type": "Menu",
                  "collection": false,
                  "required": true
                }
              ],
              "type": "Function"
            },
            {
              "name": "setIcon",
              "signature": "(image)",
              "platforms": [
                "macOS"
              ],
              "description": "Sets the image associated with this dock icon.",
              "parameters": [
                {
                  "name": "image",
                  "type": [
                    {
                      "typeName": "NativeImage",
                      "collection": false
                    },
                    {
                      "typeName": "String",
                      "collection": false
                    }
                  ],
                  "collection": false,
                  "required": true
                }
              ],
              "type": "Function"
            }
          ],
          "path": "app.dock",
          "methods": [
            {
              "name": "bounce",
              "signature": "([type])",
              "platforms": [
                "macOS"
              ],
              "description": "When critical is passed, the dock icon will bounce until either the application becomes active or the request is canceled. When informational is passed, the dock icon will bounce for one second. However, the request remains active until either the application becomes active or the request is canceled.",
              "parameters": [
                {
                  "name": "type",
                  "type": "String",
                  "collection": false,
                  "description": "Can be `critical` or `informational`. The default is `informational`",
                  "required": false,
                  "possibleValues": [
                    {
                      "value": "critical"
                    },
                    {
                      "value": "informational"
                    }
                  ]
                }
              ],
              "returns": {
                "type": "Integer",
                "collection": false,
                "description": "an ID representing the request."
              },
              "type": "Function"
            },
            {
              "name": "cancelBounce",
              "signature": "(id)",
              "platforms": [
                "macOS"
              ],
              "description": "Cancel the bounce of id.",
              "parameters": [
                {
                  "name": "id",
                  "type": "Integer",
                  "collection": false,
                  "required": true
                }
              ],
              "type": "Function"
            },
            {
              "name": "downloadFinished",
              "signature": "(filePath)",
              "platforms": [
                "macOS"
              ],
              "description": "Bounces the Downloads stack if the filePath is inside the Downloads folder.",
              "parameters": [
                {
                  "name": "filePath",
                  "type": "String",
                  "collection": false,
                  "required": true
                }
              ],
              "type": "Function"
            },
            {
              "name": "setBadge",
              "signature": "(text)",
              "platforms": [
                "macOS"
              ],
              "description": "Sets the string to be displayed in the dock?s badging area.",
              "parameters": [
                {
                  "name": "text",
                  "type": "String",
                  "collection": false,
                  "required": true
                }
              ],
              "type": "Function"
            },
            {
              "name": "getBadge",
              "signature": "()",
              "platforms": [
                "macOS"
              ],
              "returns": {
                "type": "String",
                "collection": false,
                "description": "The badge string of the dock."
              },
              "type": "Function"
            },
            {
              "name": "hide",
              "signature": "()",
              "platforms": [
                "macOS"
              ],
              "description": "Hides the dock icon.",
              "type": "Function"
            },
            {
              "name": "show",
              "signature": "()",
              "platforms": [
                "macOS"
              ],
              "description": "Shows the dock icon.",
              "type": "Function"
            },
            {
              "name": "isVisible",
              "signature": "()",
              "platforms": [
                "macOS"
              ],
              "returns": {
                "type": "Boolean",
                "collection": false,
                "description": "Whether the dock icon is visible. The app.dock.show() call is asynchronous so this method might not return true immediately after that call."
              },
              "type": "Function"
            }
          ]
        }
      ],
      "path": "app"
    },
    {
      "name": "dock",
      "type": "Object",
      "required": true,
      "properties": [
        {
          "name": "bounce",
          "signature": "([type])",
          "platforms": [
            "macOS"
          ],
          "description": "When critical is passed, the dock icon will bounce until either the application becomes active or the request is canceled. When informational is passed, the dock icon will bounce for one second. However, the request remains active until either the application becomes active or the request is canceled.",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "description": "Can be `critical` or `informational`. The default is `informational`",
              "required": false,
              "possibleValues": [
                {
                  "value": "critical"
                },
                {
                  "value": "informational"
                }
              ]
            }
          ],
          "returns": {
            "type": "Integer",
            "collection": false,
            "description": "an ID representing the request."
          },
          "type": "Function"
        },
        {
          "name": "cancelBounce",
          "signature": "(id)",
          "platforms": [
            "macOS"
          ],
          "description": "Cancel the bounce of id.",
          "parameters": [
            {
              "name": "id",
              "type": "Integer",
              "collection": false,
              "required": true
            }
          ],
          "type": "Function"
        },
        {
          "name": "downloadFinished",
          "signature": "(filePath)",
          "platforms": [
            "macOS"
          ],
          "description": "Bounces the Downloads stack if the filePath is inside the Downloads folder.",
          "parameters": [
            {
              "name": "filePath",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "type": "Function"
        },
        {
          "name": "setBadge",
          "signature": "(text)",
          "platforms": [
            "macOS"
          ],
          "description": "Sets the string to be displayed in the dock?s badging area.",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "type": "Function"
        },
        {
          "name": "getBadge",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "returns": {
            "type": "String",
            "collection": false,
            "description": "The badge string of the dock."
          },
          "type": "Function"
        },
        {
          "name": "hide",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "description": "Hides the dock icon.",
          "type": "Function"
        },
        {
          "name": "show",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "description": "Shows the dock icon.",
          "type": "Function"
        },
        {
          "name": "isVisible",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether the dock icon is visible. The app.dock.show() call is asynchronous so this method might not return true immediately after that call."
          },
          "type": "Function"
        },
        {
          "name": "setMenu",
          "signature": "(menu)",
          "platforms": [
            "macOS"
          ],
          "description": "Sets the application's dock menu.",
          "parameters": [
            {
              "name": "menu",
              "type": "Menu",
              "collection": false,
              "required": true
            }
          ],
          "type": "Function"
        },
        {
          "name": "setIcon",
          "signature": "(image)",
          "platforms": [
            "macOS"
          ],
          "description": "Sets the image associated with this dock icon.",
          "parameters": [
            {
              "name": "image",
              "type": [
                {
                  "typeName": "NativeImage",
                  "collection": false
                },
                {
                  "typeName": "String",
                  "collection": false
                }
              ],
              "collection": false,
              "required": true
            }
          ],
          "type": "Function"
        }
      ],
      "path": "app.dock",
      "methods": [
        {
          "name": "bounce",
          "signature": "([type])",
          "platforms": [
            "macOS"
          ],
          "description": "When critical is passed, the dock icon will bounce until either the application becomes active or the request is canceled. When informational is passed, the dock icon will bounce for one second. However, the request remains active until either the application becomes active or the request is canceled.",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "description": "Can be `critical` or `informational`. The default is `informational`",
              "required": false,
              "possibleValues": [
                {
                  "value": "critical"
                },
                {
                  "value": "informational"
                }
              ]
            }
          ],
          "returns": {
            "type": "Integer",
            "collection": false,
            "description": "an ID representing the request."
          },
          "type": "Function"
        },
        {
          "name": "cancelBounce",
          "signature": "(id)",
          "platforms": [
            "macOS"
          ],
          "description": "Cancel the bounce of id.",
          "parameters": [
            {
              "name": "id",
              "type": "Integer",
              "collection": false,
              "required": true
            }
          ],
          "type": "Function"
        },
        {
          "name": "downloadFinished",
          "signature": "(filePath)",
          "platforms": [
            "macOS"
          ],
          "description": "Bounces the Downloads stack if the filePath is inside the Downloads folder.",
          "parameters": [
            {
              "name": "filePath",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "type": "Function"
        },
        {
          "name": "setBadge",
          "signature": "(text)",
          "platforms": [
            "macOS"
          ],
          "description": "Sets the string to be displayed in the dock?s badging area.",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "type": "Function"
        },
        {
          "name": "getBadge",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "returns": {
            "type": "String",
            "collection": false,
            "description": "The badge string of the dock."
          },
          "type": "Function"
        },
        {
          "name": "hide",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "description": "Hides the dock icon.",
          "type": "Function"
        },
        {
          "name": "show",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "description": "Shows the dock icon.",
          "type": "Function"
        },
        {
          "name": "isVisible",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether the dock icon is visible. The app.dock.show() call is asynchronous so this method might not return true immediately after that call."
          },
          "type": "Function"
        }
      ]
    },
    {
      "name": "clipboard",
      "description": "Perform copy and paste operations on the system clipboard.",
      "process": {
        "main": true,
        "renderer": true
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "clipboard",
      "websiteUrl": "http://electron.atom.io/docs/api/clipboard",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/clipboard.md",
      "methods": [
        {
          "name": "readText",
          "signature": "([type])",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ],
          "returns": {
            "type": "String",
            "collection": false,
            "description": "The content in the clipboard as plain text."
          }
        },
        {
          "name": "writeText",
          "signature": "(text[, type])",
          "description": "Writes the text into the clipboard as plain text.",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ]
        },
        {
          "name": "readHTML",
          "signature": "([type])",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ],
          "returns": {
            "type": "String",
            "collection": false,
            "description": "The content in the clipboard as markup."
          }
        },
        {
          "name": "writeHTML",
          "signature": "(markup[, type])",
          "description": "Writes markup to the clipboard.",
          "parameters": [
            {
              "name": "markup",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ]
        },
        {
          "name": "readImage",
          "signature": "([type])",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ],
          "returns": {
            "type": "NativeImage",
            "collection": false,
            "description": "The image content in the clipboard."
          }
        },
        {
          "name": "writeImage",
          "signature": "(image[, type])",
          "description": "Writes image to the clipboard.",
          "parameters": [
            {
              "name": "image",
              "type": "NativeImage",
              "collection": false,
              "required": true
            },
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ]
        },
        {
          "name": "readRTF",
          "signature": "([type])",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ],
          "returns": {
            "type": "String",
            "collection": false,
            "description": "The content in the clipboard as RTF."
          }
        },
        {
          "name": "writeRTF",
          "signature": "(text[, type])",
          "description": "Writes the text into the clipboard in RTF.",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ]
        },
        {
          "name": "readBookmark",
          "signature": "()",
          "platforms": [
            "macOS",
            "Windows"
          ],
          "description": "Returns an Object containing title and url keys representing the bookmark in the clipboard. The title and url values will be empty strings when the bookmark is unavailable.",
          "returns": {
            "type": "Object",
            "collection": false,
            "properties": [
              {
                "name": "title",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "url",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              }
            ]
          }
        },
        {
          "name": "writeBookmark",
          "signature": "(title, url[, type])",
          "platforms": [
            "macOS",
            "Windows"
          ],
          "description": "Writes the title and url into the clipboard as a bookmark. Note: Most apps on Windows don't support pasting bookmarks into them so you can use clipboard.write to write both a bookmark and fallback text to the clipboard.",
          "parameters": [
            {
              "name": "title",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "url",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ]
        },
        {
          "name": "clear",
          "signature": "([type])",
          "description": "Clears the clipboard content.",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ]
        },
        {
          "name": "availableFormats",
          "signature": "([type])",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "collection": false,
              "required": false
            }
          ],
          "returns": {
            "type": "String",
            "collection": true,
            "description": "An array of supported formats for the clipboard type."
          }
        }
      ],
      "path": "clipboard"
    },
    {
      "name": "desktopCapturer",
      "description": "Access information about media sources that can be used to capture audio and\nvideo from the desktop using the navigator.mediaDevices.getUserMedia API.",
      "process": {
        "main": false,
        "renderer": true
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "desktop-capturer",
      "websiteUrl": "http://electron.atom.io/docs/api/desktop-capturer",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/desktop-capturer.md",
      "methods": [
        {
          "name": "getSources",
          "signature": "(options, callback)",
          "description": "Starts gathering information about all available desktop media sources, and calls callback(error, sources) when finished. sources is an array of DesktopCapturerSource objects, each DesktopCapturerSource represents a screen or an individual window that can be captured.",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": true,
              "properties": [
                {
                  "name": "types",
                  "type": "String",
                  "collection": true,
                  "description": "An array of Strings that lists the types of desktop sources to be captured, available types are screen and window.",
                  "required": true
                },
                {
                  "name": "thumbnailSize",
                  "type": "Size",
                  "collection": false,
                  "description": "The size that the media source thumbnail should be scaled to. Default is 150 x 150.",
                  "required": false
                }
              ]
            },
            {
              "name": "callback",
              "type": "Function",
              "collection": false,
              "required": true,
              "parameters": [
                {
                  "name": "error",
                  "type": "Error",
                  "collection": false,
                  "description": "",
                  "required": true
                },
                {
                  "name": "sources",
                  "type": "DesktopCapturerSource",
                  "collection": true,
                  "description": "",
                  "required": true
                }
              ]
            }
          ]
        }
      ],
      "path": "desktopCapturer"
    },
    {
      "name": "dialog",
      "description": "Display native system dialogs for opening and saving files, alerting, etc.",
      "process": {
        "main": true,
        "renderer": false
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "dialog",
      "websiteUrl": "http://electron.atom.io/docs/api/dialog",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/dialog.md",
      "methods": [
        {
          "name": "showOpenDialog",
          "signature": "([browserWindow, ]options[, callback])",
          "description": "The browserWindow argument allows the dialog to attach itself to a parent window, making it modal. The filters specifies an array of file types that can be displayed or selected when you want to limit the user to a specific type. For example: The extensions array should contain extensions without wildcards or dots (e.g. 'png' is good but '.png' and '*.png' are bad). To show all files, use the '*' wildcard (no other wildcard is supported). If a callback is passed, the API call will be asynchronous and the result will be passed via callback(filenames). Note: On Windows and Linux an open dialog can not be both a file selector and a directory selector, so if you set properties to ['openFile', 'openDirectory'] on these platforms, a directory selector will be shown.",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": true,
              "properties": [
                {
                  "name": "title",
                  "type": "String",
                  "collection": false,
                  "description": "",
                  "required": false
                },
                {
                  "name": "defaultPath",
                  "type": "String",
                  "collection": false,
                  "description": "",
                  "required": false
                },
                {
                  "name": "buttonLabel",
                  "type": "String",
                  "collection": false,
                  "description": "Custom label for the confirmation button, when left empty the default label will be used.",
                  "required": false
                },
                {
                  "name": "filters",
                  "type": "FileFilter",
                  "collection": true,
                  "description": "",
                  "required": false
                },
                {
                  "name": "properties",
                  "type": "String",
                  "collection": true,
                  "description": "Contains which features the dialog should use. The following values are supported:",
                  "required": false,
                  "possibleValues": [
                    {
                      "value": "openFile",
                      "description": "Allow files to be selected."
                    },
                    {
                      "value": "openDirectory",
                      "description": "Allow directories to be selected."
                    },
                    {
                      "value": "multiSelections",
                      "description": "Allow multiple paths to be selected."
                    },
                    {
                      "value": "showHiddenFiles",
                      "description": "Show hidden files in dialog."
                    },
                    {
                      "value": "createDirectory",
                      "description": ""
                    },
                    {
                      "value": "promptToCreate",
                      "description": ""
                    },
                    {
                      "value": "noResolveAliases",
                      "description": ""
                    },
                    {
                      "value": "treatPackageAsDirectory",
                      "description": ""
                    }
                  ]
                },
                {
                  "name": "message",
                  "type": "String",
                  "collection": false,
                  "description": "Message to display above input boxes.",
                  "required": false
                },
                {
                  "name": "securityScopedBookmarks",
                  "type": "Boolean",
                  "collection": false,
                  "description": "Create when packaged for the Mac App Store.",
                  "required": false
                }
              ]
            }
          ],
          "returns": {
            "type": "Object",
            "name": "callback",
            "callbackParam": 2,
            "collection": false,
            "properties": [
              {
                "name": "filePaths",
                "type": "String",
                "collection": true,
                "description": "An array of file paths chosen by the user",
                "required": true
              },
              {
                "name": "bookmarks",
                "type": "String",
                "collection": true,
                "description": "An array matching the filePaths array of base64 encoded strings which contains security scoped bookmark data. securityScopedBookmarks must be enabled for this to be populated.",
                "required": true
              }
            ]
          }
        },
        {
          "name": "showSaveDialog",
          "signature": "([browserWindow, ]options[, callback])",
          "description": "The browserWindow argument allows the dialog to attach itself to a parent window, making it modal. The filters specifies an array of file types that can be displayed, see dialog.showOpenDialog for an example. If a callback is passed, the API call will be asynchronous and the result will be passed via callback(filename).",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": true,
              "properties": [
                {
                  "name": "title",
                  "type": "String",
                  "collection": false,
                  "description": "",
                  "required": false
                },
                {
                  "name": "defaultPath",
                  "type": "String",
                  "collection": false,
                  "description": "Absolute directory path, absolute file path, or file name to use by default.",
                  "required": false
                },
                {
                  "name": "buttonLabel",
                  "type": "String",
                  "collection": false,
                  "description": "Custom label for the confirmation button, when left empty the default label will be used.",
                  "required": false
                },
                {
                  "name": "filters",
                  "type": "FileFilter",
                  "collection": true,
                  "description": "",
                  "required": false
                },
                {
                  "name": "message",
                  "type": "String",
                  "collection": false,
                  "description": "Message to display above text fields.",
                  "required": false
                },
                {
                  "name": "nameFieldLabel",
                  "type": "String",
                  "collection": false,
                  "description": "Custom label for the text displayed in front of the filename text field.",
                  "required": false
                },
                {
                  "name": "showsTagField",
                  "type": "Boolean",
                  "collection": false,
                  "description": "Show the tags input box, defaults to true.",
                  "required": false
                },
                {
                  "name": "securityScopedBookmarks",
                  "type": "Boolean",
                  "collection": false,
                  "description": "Create a when packaged for the Mac App Store. If this option is enabled and the file doesn't already exist a blank file will be created at the chosen path.",
                  "required": false
                }
              ]
            }
          ],
          "returns": {
            "type": "Object",
            "name": "callback",
            "callbackParam": 2,
            "collection": false,
            "properties": [
              {
                "name": "filename",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "bookmark",
                "type": "String",
                "collection": false,
                "description": "Base64 encoded string which contains the security scoped bookmark data for the saved file. securityScopedBookmarks must be enabled for this to be present.",
                "required": true
              }
            ]
          }
        },
        {
          "name": "showMessageBox",
          "signature": "([browserWindow, ]options[, callback])",
          "description": "Shows a message box, it will block the process until the message box is closed. It returns the index of the clicked button. The browserWindow argument allows the dialog to attach itself to a parent window, making it modal. If a callback is passed, the dialog will not block the process. The API call will be asynchronous and the result will be passed via callback(response).",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": true,
              "properties": [
                {
                  "name": "type",
                  "type": "String",
                  "collection": false,
                  "description": "Can be \"none\", \"info\", \"error\", \"question\" or \"warning\". On Windows, \"question\" displays the same icon as \"info\", unless you set an icon using the \"icon\" option. On macOS, both \"warning\" and \"error\" display the same warning icon.",
                  "required": false
                },
                {
                  "name": "buttons",
                  "type": "String",
                  "collection": true,
                  "description": "Array of texts for buttons. On Windows, an empty array will result in one button labeled \"OK\".",
                  "required": false
                },
                {
                  "name": "defaultId",
                  "type": "Integer",
                  "collection": false,
                  "description": "Index of the button in the buttons array which will be selected by default when the message box opens.",
                  "required": false
                },
                {
                  "name": "title",
                  "type": "String",
                  "collection": false,
                  "description": "Title of the message box, some platforms will not show it.",
                  "required": false
                },
                {
                  "name": "message",
                  "type": "String",
                  "collection": false,
                  "description": "Content of the message box.",
                  "required": true
                },
                {
                  "name": "detail",
                  "type": "String",
                  "collection": false,
                  "description": "Extra information of the message.",
                  "required": false
                },
                {
                  "name": "checkboxLabel",
                  "type": "String",
                  "collection": false,
                  "description": "If provided, the message box will include a checkbox with the given label. The checkbox state can be inspected only when using callback.",
                  "required": false
                },
                {
                  "name": "checkboxChecked",
                  "type": "Boolean",
                  "collection": false,
                  "description": "Initial checked state of the checkbox. false by default.",
                  "required": false
                },
                {
                  "name": "icon",
                  "type": "NativeImage",
                  "collection": false,
                  "description": "",
                  "required": false
                },
                {
                  "name": "cancelId",
                  "type": "Integer",
                  "collection": false,
                  "description": "The index of the button to be used to cancel the dialog, via the Esc key. By default this is assigned to the first button with \"cancel\" or \"no\" as the label. If no such labeled buttons exist and this option is not set, 0 will be used as the return value or callback response. This option is ignored on Windows.",
                  "required": false
                },
                {
                  "name": "noLink",
                  "type": "Boolean",
                  "collection": false,
                  "description": "On Windows Electron will try to figure out which one of the buttons are common buttons (like \"Cancel\" or \"Yes\"), and show the others as command links in the dialog. This can make the dialog appear in the style of modern Windows apps. If you don't like this behavior, you can set noLink to true.",
                  "required": false
                },
                {
                  "name": "normalizeAccessKeys",
                  "type": "Boolean",
                  "collection": false,
                  "description": "Normalize the keyboard access keys across platforms. Default is false. Enabling this assumes & is used in the button labels for the placement of the keyboard shortcut access key and labels will be converted so they work correctly on each platform, & characters are removed on macOS, converted to _ on Linux, and left untouched on Windows. For example, a button label of Vie&w will be converted to Vie_w on Linux and View on macOS and can be selected via Alt-W on Windows and Linux.",
                  "required": false
                }
              ]
            }
          ],
          "returns": {
            "type": "Object",
            "name": "callback",
            "callbackParam": 2,
            "collection": false,
            "properties": [
              {
                "name": "response",
                "type": "Number",
                "collection": false,
                "description": "The index of the button that was clicked.",
                "required": true
              },
              {
                "name": "checkboxChecked",
                "type": "Boolean",
                "collection": false,
                "description": "The checked state of the checkbox if checkboxLabel was set. Otherwise false.",
                "required": true
              }
            ]
          }
        },
        {
          "name": "showErrorBox",
          "signature": "(title, content)",
          "description": "Displays a modal dialog that shows an error message. This API can be called safely before the ready event the app module emits, it is usually used to report errors in early stage of startup. If called before the app readyevent on Linux, the message will be emitted to stderr, and no GUI dialog will appear.",
          "parameters": [
            {
              "name": "title",
              "type": "String",
              "collection": false,
              "description": "The title to display in the error box.",
              "required": true
            },
            {
              "name": "content",
              "type": "String",
              "collection": false,
              "description": "The text content to display in the error box.",
              "required": true
            }
          ]
        }
      ],
      "path": "dialog"
    },
    {
      "name": "globalShortcut",
      "description": "Detect keyboard events when the application does not have keyboard focus.",
      "process": {
        "main": true,
        "renderer": false
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "global-shortcut",
      "websiteUrl": "http://electron.atom.io/docs/api/global-shortcut",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/global-shortcut.md",
      "methods": [
        {
          "name": "register",
          "signature": "(accelerator, callback)",
          "description": "Registers a global shortcut of accelerator. The callback is called when the registered shortcut is pressed by the user. When the accelerator is already taken by other applications, this call will silently fail. This behavior is intended by operating systems, since they don't want applications to fight for global shortcuts.",
          "parameters": [
            {
              "name": "accelerator",
              "type": "Accelerator",
              "collection": false,
              "required": true
            },
            {
              "name": "callback",
              "type": "Function",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "isRegistered",
          "signature": "(accelerator)",
          "description": "When the accelerator is already taken by other applications, this call will still return false. This behavior is intended by operating systems, since they don't want applications to fight for global shortcuts.",
          "parameters": [
            {
              "name": "accelerator",
              "type": "Accelerator",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether this application has registered accelerator."
          }
        },
        {
          "name": "unregister",
          "signature": "(accelerator)",
          "description": "Unregisters the global shortcut of accelerator.",
          "parameters": [
            {
              "name": "accelerator",
              "type": "Accelerator",
              "collection": false,
              "required": true
            }
          ]
        }
      ],
      "path": "globalShortcut"
    },
    {
      "name": "powerMonitor",
      "description": "Monitor power state changes.",
      "process": {
        "main": true,
        "renderer": false
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "power-monitor",
      "websiteUrl": "http://electron.atom.io/docs/api/power-monitor",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/power-monitor.md",
      "events": [
        {
          "name": "suspend",
          "description": "Emitted when the system is suspending."
        },
        {
          "name": "resume",
          "description": "Emitted when system is resuming."
        },
        {
          "name": "on-ac",
          "description": "Emitted when the system changes to AC power.",
          "platforms": [
            "Windows"
          ]
        },
        {
          "name": "on-battery",
          "description": "Emitted when system changes to battery power.",
          "platforms": [
            "Windows"
          ]
        },
        {
          "name": "shutdown",
          "description": "Emitted when the system is about to reboot or shut down. If the event handler invokes e.preventDefault(), Electron will attempt to delay system shutdown in order for the app to exit cleanly. If e.preventDefault() is called, the app should exit as soon as possible by calling something like app.quit().",
          "platforms": [
            "Linux",
            "macOS"
          ]
        },
        {
          "name": "lock-screen",
          "description": "Emitted when the system is about to lock the screen.",
          "platforms": [
            "macOS",
            "Windows"
          ]
        },
        {
          "name": "unlock-screen",
          "description": "Emitted as soon as the systems screen is unlocked.",
          "platforms": [
            "macOS",
            "Windows"
          ]
        }
      ],
      "path": "powerMonitor"
    },
    {
      "name": "process",
      "description": "Extensions to process object.",
      "process": {
        "main": true,
        "renderer": true
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "process",
      "websiteUrl": "http://electron.atom.io/docs/api/process",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/process.md",
      "methods": [
        {
          "name": "getCPUUsage",
          "signature": "()",
          "returns": {
            "type": "CPUUsage",
            "collection": false
          }
        },
        {
          "name": "getHeapStatistics",
          "signature": "()",
          "description": "Returns an object with V8 heap statistics. Note that all statistics are reported in Kilobytes.",
          "returns": {
            "type": "Object",
            "collection": false,
            "properties": [
              {
                "name": "totalHeapSize",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "totalHeapSizeExecutable",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "totalPhysicalSize",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "totalAvailableSize",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "usedHeapSize",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "heapSizeLimit",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "mallocedMemory",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "peakMallocedMemory",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "doesZapGarbage",
                "type": "Boolean",
                "collection": false,
                "description": "",
                "required": true
              }
            ]
          }
        },
        {
          "name": "getProcessMemoryInfo",
          "signature": "()",
          "description": "Returns an object giving memory usage statistics about the current process. Note that all statistics are reported in Kilobytes.",
          "returns": {
            "type": "Object",
            "collection": false,
            "properties": [
              {
                "name": "workingSetSize",
                "type": "Integer",
                "collection": false,
                "description": "The amount of memory currently pinned to actual physical RAM.",
                "required": true
              },
              {
                "name": "peakWorkingSetSize",
                "type": "Integer",
                "collection": false,
                "description": "The maximum amount of memory that has ever been pinned to actual physical RAM.",
                "required": true
              },
              {
                "name": "privateBytes",
                "type": "Integer",
                "collection": false,
                "description": "The amount of memory not shared by other processes, such as JS heap or HTML content.",
                "required": true
              },
              {
                "name": "sharedBytes",
                "type": "Integer",
                "collection": false,
                "description": "The amount of memory shared between processes, typically memory consumed by the Electron code itself.",
                "required": true
              }
            ]
          }
        },
        {
          "name": "getSystemMemoryInfo",
          "signature": "()",
          "description": "Returns an object giving memory usage statistics about the entire system. Note that all statistics are reported in Kilobytes.",
          "returns": {
            "type": "Object",
            "collection": false,
            "properties": [
              {
                "name": "total",
                "type": "Integer",
                "collection": false,
                "description": "The total amount of physical memory in Kilobytes available to the system.",
                "required": true
              },
              {
                "name": "free",
                "type": "Integer",
                "collection": false,
                "description": "The total amount of memory not being used by applications or disk cache.",
                "required": true
              },
              {
                "name": "swapTotal",
                "type": "Integer",
                "collection": false,
                "description": "The total amount of swap memory in Kilobytes available to the system.",
                "required": true
              },
              {
                "name": "swapFree",
                "type": "Integer",
                "collection": false,
                "description": "The free amount of swap memory in Kilobytes available to the system.",
                "required": true
              }
            ]
          }
        }
      ],
      "events": [],
      "properties": [
        {
          "name": "mas",
          "description": "A Boolean. For Mac App Store build, this property is true, for other builds it is undefined.",
          "type": "Boolean",
          "collection": false
        },
        {
          "name": "resourcesPath",
          "description": "A String representing the path to the resources directory.",
          "type": "String",
          "collection": false
        },
        {
          "name": "windowsStore",
          "description": "A Boolean. If the app is running as a Windows Store app (appx), this property is true, for otherwise it is undefined.",
          "type": "Boolean",
          "collection": false
        },
        {
          "name": "versions",
          "type": "Object",
          "required": true,
          "properties": [
            {
              "name": "chrome",
              "description": "A String representing Chrome's version string.",
              "type": "String",
              "collection": false,
              "_superObject": "versions"
            },
            {
              "name": "electron",
              "description": "A String representing Electron's version string.",
              "type": "String",
              "collection": false,
              "_superObject": "versions"
            }
          ]
        }
      ],
      "path": "process"
    },
    {
      "name": "protocol",
      "description": "Register a custom protocol and intercept existing protocol requests.",
      "process": {
        "main": true,
        "renderer": false
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "protocol",
      "websiteUrl": "http://electron.atom.io/docs/api/protocol",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/protocol.md",
      "methods": [
        {
          "name": "registerStandardSchemes",
          "signature": "(schemes[, options])",
          "description": "A standard scheme adheres to what RFC 3986 calls generic URI syntax. For example http and https are standard schemes, while file is not. Registering a scheme as standard, will allow relative and absolute resources to be resolved correctly when served. Otherwise the scheme will behave like the file protocol, but without the ability to resolve relative URLs. For example when you load following page with custom protocol without registering it as standard scheme, the image will not be loaded because non-standard schemes can not recognize relative URLs: Registering a scheme as standard will allow access to files through the FileSystem API. Otherwise the renderer will throw a security error for the scheme. By default web storage apis (localStorage, sessionStorage, webSQL, indexedDB, cookies) are disabled for non standard schemes. So in general if you want to register a custom protocol to replace the http protocol, you have to register it as a standard scheme: Note: This method can only be used before the ready event of the app module gets emitted.",
          "parameters": [
            {
              "name": "schemes",
              "type": "String",
              "collection": true,
              "description": "Custom schemes to be registered as standard schemes.",
              "required": true
            },
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": false,
              "properties": [
                {
                  "name": "secure",
                  "type": "Boolean",
                  "collection": false,
                  "description": "true to register the scheme as secure. Default false.",
                  "required": false
                }
              ]
            }
          ]
        },
        {
          "name": "registerFileProtocol",
          "signature": "(scheme, handler[, completion])",
          "description": "Registers a protocol of scheme that will send the file as a response. The handler will be called with handler(request, callback) when a request is going to be created with scheme. completion will be called with completion(null) when scheme is successfully registered or completion(error) when failed. To handle the request, the callback should be called with either the file's path or an object that has a path property, e.g. callback(filePath) or callback({path: filePath}). When callback is called with nothing, a number, or an object that has an error property, the request will fail with the error number you specified. For the available error numbers you can use, please see the net error list. By default the scheme is treated like http:, which is parsed differently than protocols that follow the \"generic URI syntax\" like file:, so you probably want to call protocol.registerStandardSchemes to have your scheme treated as a standard scheme.",
          "parameters": [
            {
              "name": "scheme",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "handler",
              "type": "Function",
              "collection": false,
              "required": true,
              "parameters": [
                {
                  "name": "request",
                  "type": "Object",
                  "collection": false,
                  "description": "",
                  "required": true,
                  "properties": [
                    {
                      "name": "url",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": true
                    },
                    {
                      "name": "referrer",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": true
                    },
                    {
                      "name": "method",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": true
                    },
                    {
                      "name": "uploadData",
                      "type": "UploadData",
                      "collection": true,
                      "description": "",
                      "required": true
                    }
                  ]
                },
                {
                  "name": "callback",
                  "type": "Function",
                  "collection": false,
                  "description": "",
                  "required": true,
                  "parameters": [
                    {
                      "name": "filePath",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": false
                    }
                  ]
                }
              ]
            }
          ],
          "returns": {
            "type": "Object",
            "name": "completion",
            "callbackParam": 2,
            "collection": false,
            "properties": [
              {
                "name": "error",
                "type": "Error",
                "collection": false,
                "description": "",
                "required": true
              }
            ]
          }
        },
        {
          "name": "registerStringProtocol",
          "signature": "(scheme, handler[, completion])",
          "description": "Registers a protocol of scheme that will send a String as a response. The usage is the same with registerFileProtocol, except that the callback should be called with either a String or an object that has the data, mimeType, and charset properties.",
          "parameters": [
            {
              "name": "scheme",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "handler",
              "type": "Function",
              "collection": false,
              "required": true,
              "parameters": [
                {
                  "name": "request",
                  "type": "Object",
                  "collection": false,
                  "description": "",
                  "required": true,
                  "properties": [
                    {
                      "name": "url",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": true
                    },
                    {
                      "name": "referrer",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": true
                    },
                    {
                      "name": "method",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": true
                    },
                    {
                      "name": "uploadData",
                      "type": "UploadData",
                      "collection": true,
                      "description": "",
                      "required": true
                    }
                  ]
                },
                {
                  "name": "callback",
                  "type": "Function",
                  "collection": false,
                  "description": "",
                  "required": true,
                  "parameters": [
                    {
                      "name": "data",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": false
                    }
                  ]
                }
              ]
            }
          ],
          "returns": {
            "type": "Object",
            "name": "completion",
            "callbackParam": 2,
            "collection": false,
            "properties": [
              {
                "name": "error",
                "type": "Error",
                "collection": false,
                "description": "",
                "required": true
              }
            ]
          }
        },
        {
          "name": "registerHttpProtocol",
          "signature": "(scheme, handler[, completion])",
          "description": "Registers a protocol of scheme that will send an HTTP request as a response. The usage is the same with registerFileProtocol, except that the callback should be called with a redirectRequest object that has the url, method, referrer, uploadData and session properties. By default the HTTP request will reuse the current session. If you want the request to have a different session you should set session to null. For POST requests the uploadData object must be provided.",
          "parameters": [
            {
              "name": "scheme",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "handler",
              "type": "Function",
              "collection": false,
              "required": true,
              "parameters": [
                {
                  "name": "request",
                  "type": "Object",
                  "collection": false,
                  "description": "",
                  "required": true,
                  "properties": [
                    {
                      "name": "url",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": true
                    },
                    {
                      "name": "referrer",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": true
                    },
                    {
                      "name": "method",
                      "type": "String",
                      "collection": false,
                      "description": "",
                      "required": true
                    },
                    {
                      "name": "uploadData",
                      "type": "UploadData",
                      "collection": true,
                      "description": "",
                      "required": true
                    }
                  ]
                },
                {
                  "name": "callback",
                  "type": "Function",
                  "collection": false,
                  "description": "",
                  "required": true,
                  "parameters": [
                    {
                      "name": "redirectRequest",
                      "type": "Object",
                      "collection": false,
                      "description": "",
                      "required": true,
                      "properties": [
                        {
                          "name": "url",
                          "type": "String",
                          "collection": false,
                          "description": "",
                          "required": true
                        },
                        {
                          "name": "method",
                          "type": "String",
                          "collection": false,
                          "description": "",
                          "required": true
                        },
                        {
                          "name": "session",
                          "type": "Object",
                          "collection": false,
                          "description": "",
                          "required": false,
                          "properties": []
                        },
                        {
                          "name": "uploadData",
                          "type": "Object",
                          "collection": false,
                          "description": "",
                          "required": false,
                          "properties": [
                            {
                              "name": "contentType",
                              "type": "String",
                              "collection": false,
                              "description": "MIME type of the content.",
                              "required": true
                            },
                            {
                              "name": "data",
                              "type": "String",
                              "collection": false,
                              "description": "Content to be sent.",
                              "required": true
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "returns": {
            "type": "Object",
            "name": "completion",
            "callbackParam": 2,
            "collection": false,
            "properties": [
              {
                "name": "error",
                "type": "Error",
                "collection": false,
                "description": "",
                "required": true
              }
            ]
          }
        },
        {
          "name": "unregisterProtocol",
          "signature": "(scheme[, completion])",
          "description": "Unregisters the custom protocol of scheme.",
          "parameters": [
            {
              "name": "scheme",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Object",
            "name": "completion",
            "callbackParam": 1,
            "collection": false,
            "properties": [
              {
                "name": "error",
                "type": "Error",
                "collection": false,
                "description": "",
                "required": true
              }
            ]
          }
        },
        {
          "name": "isProtocolHandled",
          "signature": "(scheme, callback)",
          "description": "The callback will be called with a boolean that indicates whether there is already a handler for scheme.",
          "parameters": [
            {
              "name": "scheme",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Object",
            "name": "callback",
            "callbackParam": 1,
            "collection": false,
            "properties": [
              {
                "name": "error",
                "type": "Error",
                "collection": false,
                "description": "",
                "required": true
              }
            ]
          }
        }
      ],
      "path": "protocol"
    },
    {
      "name": "screen",
      "description": "Retrieve information about screen size, displays, cursor position, etc.",
      "process": {
        "main": true,
        "renderer": true
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "screen",
      "websiteUrl": "http://electron.atom.io/docs/api/screen",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/screen.md",
      "methods": [
        {
          "name": "getCursorScreenPoint",
          "signature": "()",
          "description": "The current absolute position of the mouse pointer.",
          "returns": {
            "type": "Point",
            "collection": false
          }
        },
        {
          "name": "getPrimaryDisplay",
          "signature": "()",
          "returns": {
            "type": "Display",
            "collection": false,
            "description": "The primary display."
          }
        },
        {
          "name": "getAllDisplays",
          "signature": "()",
          "returns": {
            "type": "Display",
            "collection": true,
            "description": "An array of displays that are currently available."
          }
        },
        {
          "name": "getDisplayNearestPoint",
          "signature": "(point)",
          "parameters": [
            {
              "name": "point",
              "type": "Point",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Display",
            "collection": false,
            "description": "The display nearest the specified point."
          }
        },
        {
          "name": "getDisplayMatching",
          "signature": "(rect)",
          "parameters": [
            {
              "name": "rect",
              "type": "Rectangle",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Display",
            "collection": false,
            "description": "The display that most closely intersects the provided bounds."
          }
        },
        {
          "name": "screenToDipPoint",
          "signature": "(point)",
          "platforms": [
            "Windows"
          ],
          "description": "Converts a screen physical point to a screen DIP point. The DPI scale is performed relative to the display containing the physical point.",
          "parameters": [
            {
              "name": "point",
              "type": "Point",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Point",
            "collection": false
          }
        },
        {
          "name": "dipToScreenPoint",
          "signature": "(point)",
          "platforms": [
            "Windows"
          ],
          "description": "Converts a screen DIP point to a screen physical point. The DPI scale is performed relative to the display containing the DIP point.",
          "parameters": [
            {
              "name": "point",
              "type": "Point",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Point",
            "collection": false
          }
        }
      ],
      "events": [
        {
          "name": "display-added",
          "description": "Emitted when newDisplay has been added.",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "newDisplay",
              "type": "Display",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "display-removed",
          "description": "Emitted when oldDisplay has been removed.",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "oldDisplay",
              "type": "Display",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "display-metrics-changed",
          "description": "Emitted when one or more metrics change in a display. The changedMetrics is an array of strings that describe the changes. Possible changes are bounds, workArea, scaleFactor and rotation.",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "display",
              "type": "Display",
              "collection": false,
              "required": true
            },
            {
              "name": "changedMetrics",
              "type": "String",
              "collection": true,
              "required": true
            }
          ]
        }
      ],
      "path": "screen"
    },
    {
      "name": "shell",
      "description": "Manage files and URLs using their default applications.",
      "process": {
        "main": true,
        "renderer": true
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "shell",
      "websiteUrl": "http://electron.atom.io/docs/api/shell",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/shell.md",
      "methods": [
        {
          "name": "showItemInFolder",
          "signature": "(fullPath)",
          "description": "Show the given file in a file manager. If possible, select the file.",
          "parameters": [
            {
              "name": "fullPath",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether the item was successfully shown."
          }
        },
        {
          "name": "openItem",
          "signature": "(fullPath)",
          "description": "Open the given file in the desktop's default manner.",
          "parameters": [
            {
              "name": "fullPath",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether the item was successfully opened."
          }
        },
        {
          "name": "openExternal",
          "signature": "(url[, options, callback])",
          "description": "Open the given external protocol URL in the desktop's default manner. (For example, mailto: URLs in the user's default mail agent).",
          "parameters": [
            {
              "name": "url",
              "type": "String",
              "collection": false,
              "description": "Max 2081 characters on windows, or the function returns false.",
              "required": true
            },
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": false,
              "properties": [
                {
                  "name": "activate",
                  "type": "Boolean",
                  "collection": false,
                  "description": "true to bring the opened application to the foreground. The default is true.",
                  "required": true
                }
              ]
            },
            {
              "name": "callback",
              "type": "Function",
              "collection": false,
              "description": "If specified will perform the open asynchronously.",
              "required": false,
              "parameters": [
                {
                  "name": "error",
                  "type": "Error",
                  "collection": false,
                  "description": "",
                  "required": true
                }
              ]
            }
          ],
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether an application was available to open the URL. If callback is specified, always returns true."
          }
        },
        {
          "name": "moveItemToTrash",
          "signature": "(fullPath)",
          "description": "Move the given file to trash and returns a boolean status for the operation.",
          "parameters": [
            {
              "name": "fullPath",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether the item was successfully moved to the trash."
          }
        },
        {
          "name": "beep",
          "signature": "()",
          "description": "Play the beep sound."
        },
        {
          "name": "writeShortcutLink",
          "signature": "(shortcutPath[, operation], options)",
          "platforms": [
            "Windows"
          ],
          "description": "Creates or updates a shortcut link at shortcutPath.",
          "parameters": [
            {
              "name": "shortcutPath",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "operation",
              "type": "String",
              "collection": false,
              "description": "Default is `create`, can be one of following:",
              "required": false,
              "possibleValues": [
                {
                  "value": "create",
                  "description": "Creates a new shortcut, overwriting if necessary."
                },
                {
                  "value": "update",
                  "description": "Updates specified properties only on an existing shortcut."
                },
                {
                  "value": "replace",
                  "description": "Overwrites an existing shortcut, fails if the shortcut doesn't exist."
                }
              ]
            },
            {
              "name": "options",
              "type": "ShortcutDetails",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether the shortcut was created successfully."
          }
        },
        {
          "name": "readShortcutLink",
          "signature": "(shortcutPath)",
          "platforms": [
            "Windows"
          ],
          "description": "Resolves the shortcut link at shortcutPath. An exception will be thrown when any error happens.",
          "parameters": [
            {
              "name": "shortcutPath",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "ShortcutDetails",
            "collection": false
          }
        }
      ],
      "path": "shell"
    },
    {
      "name": "nativeImage",
      "description": "Create tray, dock, and application icons using PNG or JPG files.",
      "process": {
        "main": true,
        "renderer": true
      },
      "version": "3.0.0-beta.2",
      "type": "Module",
      "slug": "native-image",
      "websiteUrl": "http://electron.atom.io/docs/api/native-image",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/native-image.md",
      "methods": [
        {
          "name": "createEmpty",
          "signature": "()",
          "description": "Creates an empty NativeImage instance.",
          "returns": {
            "type": "NativeImage",
            "collection": false
          }
        },
        {
          "name": "createFromPath",
          "signature": "(path)",
          "description": "Creates a new NativeImage instance from a file located at path. This method returns an empty image if the path does not exist, cannot be read, or is not a valid image.",
          "parameters": [
            {
              "name": "path",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "NativeImage",
            "collection": false
          }
        },
        {
          "name": "createFromBuffer",
          "signature": "(buffer[, options])",
          "description": "Creates a new NativeImage instance from buffer.",
          "parameters": [
            {
              "name": "buffer",
              "type": "Buffer",
              "collection": false,
              "required": true
            },
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": false,
              "properties": [
                {
                  "name": "width",
                  "type": "Integer",
                  "collection": false,
                  "description": "Required for bitmap buffers.",
                  "required": false
                },
                {
                  "name": "height",
                  "type": "Integer",
                  "collection": false,
                  "description": "Required for bitmap buffers.",
                  "required": false
                },
                {
                  "name": "scaleFactor",
                  "type": "Double",
                  "collection": false,
                  "description": "Defaults to 1.0.",
                  "required": false
                }
              ]
            }
          ],
          "returns": {
            "type": "NativeImage",
            "collection": false
          }
        },
        {
          "name": "createFromDataURL",
          "signature": "(dataURL)",
          "description": "Creates a new NativeImage instance from dataURL.",
          "parameters": [
            {
              "name": "dataURL",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "NativeImage",
            "collection": false
          }
        },
        {
          "name": "createFromNamedImage",
          "signature": "(imageName[, hslShift])",
          "platforms": [
            "macOS"
          ],
          "description": "Creates a new NativeImage instance from the NSImage that maps to the given image name. See NSImageName for a list of possible values. The hslShift is applied to the image with the following rules This means that [-1, 0, 1] will make the image completely white and [-1, 1, 0] will make the image completely black.",
          "parameters": [
            {
              "name": "imageName",
              "type": "String",
              "collection": false,
              "required": true
            },
            {
              "name": "hslShift",
              "type": "Number",
              "collection": true,
              "required": true
            }
          ],
          "returns": {
            "type": "NativeImage",
            "collection": false
          }
        }
      ],
      "path": "nativeImage"
    }
  ],
  "classes": [
    {
      "name": "Menu",
      "description": "Create native application menus and context menus.",
      "process": {
        "main": true,
        "renderer": false
      },
      "version": "3.0.0-beta.2",
      "type": "Class",
      "slug": "menu",
      "websiteUrl": "http://electron.atom.io/docs/api/menu",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/menu.md",
      "staticMethods": [
        {
          "name": "setApplicationMenu",
          "signature": "(menu)",
          "description": "Sets menu as the application menu on macOS. On Windows and Linux, the menu will be set as each window's top menu. Passing null will remove the menu bar on Windows and Linux but has no effect on macOS. Note: This API has to be called after the ready event of app module.",
          "parameters": [
            {
              "name": "menu",
              "type": [
                {
                  "typeName": "Menu",
                  "collection": false
                },
                {
                  "typeName": "null",
                  "collection": false
                }
              ],
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "getApplicationMenu",
          "signature": "()",
          "description": "Note: The returned Menu instance doesn't support dynamic addition or removal of menu items. Instance properties can still be dynamically modified.",
          "returns": {
            "type": [
              {
                "typeName": "Menu",
                "collection": false
              },
              {
                "typeName": "null",
                "collection": false
              }
            ],
            "collection": false,
            "description": "The application menu, if set, or null, if not set."
          }
        },
        {
          "name": "sendActionToFirstResponder",
          "signature": "(action)",
          "platforms": [
            "macOS"
          ],
          "description": "Sends the action to the first responder of application. This is used for emulating default macOS menu behaviors. Usually you would use the role property of a MenuItem. See the macOS Cocoa Event Handling Guide for more information on macOS' native actions.",
          "parameters": [
            {
              "name": "action",
              "type": "String",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "buildFromTemplate",
          "signature": "(template)",
          "description": "Generally, the template is an array of options for constructing a MenuItem. The usage can be referenced above. You can also attach other fields to the element of the template and they will become properties of the constructed menu items.",
          "parameters": [
            {
              "name": "template",
              "type": "MenuItemConstructorOptions",
              "collection": true,
              "required": true
            }
          ],
          "returns": {
            "type": "Menu",
            "collection": false
          }
        }
      ],
      "constructorMethod": {
        "signature": "()"
      },
      "instanceName": "menu",
      "instanceMethods": [
        {
          "name": "popup",
          "signature": "(options)",
          "description": "Pops up this menu as a context menu in the BrowserWindow.",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": true,
              "properties": [
                {
                  "name": "window",
                  "type": "BrowserWindow",
                  "collection": false,
                  "description": "Default is the focused window.",
                  "required": false
                },
                {
                  "name": "x",
                  "type": "Number",
                  "collection": false,
                  "description": "Default is the current mouse cursor position. Must be declared if y is declared.",
                  "required": false
                },
                {
                  "name": "y",
                  "type": "Number",
                  "collection": false,
                  "description": "Default is the current mouse cursor position. Must be declared if x is declared.",
                  "required": false
                },
                {
                  "name": "positioningItem",
                  "type": "Number",
                  "collection": false,
                  "description": "The index of the menu item to be positioned under the mouse cursor at the specified coordinates. Default is -1.",
                  "required": false
                },
                {
                  "name": "callback",
                  "type": "Function",
                  "collection": false,
                  "description": "Called when menu is closed.",
                  "required": false,
                  "parameters": []
                }
              ]
            }
          ]
        },
        {
          "name": "closePopup",
          "signature": "([browserWindow])",
          "description": "Closes the context menu in the browserWindow.",
          "parameters": [
            {
              "name": "browserWindow",
              "type": "BrowserWindow",
              "collection": false,
              "description": "Default is the focused window.",
              "required": false
            }
          ]
        },
        {
          "name": "append",
          "signature": "(menuItem)",
          "description": "Appends the menuItem to the menu.",
          "parameters": [
            {
              "name": "menuItem",
              "type": "MenuItem",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "getMenuItemById",
          "signature": "(id)",
          "parameters": [
            {
              "name": "id",
              "type": "String",
              "collection": false,
              "required": true
            }
          ],
          "returns": {
            "type": "MenuItem",
            "collection": false,
            "description": "the item with the specified id"
          }
        },
        {
          "name": "insert",
          "signature": "(pos, menuItem)",
          "description": "Inserts the menuItem to the pos position of the menu.",
          "parameters": [
            {
              "name": "pos",
              "type": "Integer",
              "collection": false,
              "required": true
            },
            {
              "name": "menuItem",
              "type": "MenuItem",
              "collection": false,
              "required": true
            }
          ]
        }
      ],
      "instanceProperties": [
        {
          "name": "items",
          "description": "A MenuItem[] array containing the menu's items. Each Menu consists of multiple MenuItems and each MenuItem can have a submenu.",
          "type": "MenuItem",
          "collection": true
        }
      ],
      "instanceEvents": [
        {
          "name": "menu-will-show",
          "description": "Emitted when menu.popup() is called.",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "menu-will-close",
          "description": "Emitted when a popup is closed either manually or with menu.closePopup().",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            }
          ]
        }
      ],
      "path": "Menu"
    },
    {
      "name": "MenuItem",
      "description": "Add items to native application menus and context menus.",
      "process": {
        "main": true,
        "renderer": false
      },
      "version": "3.0.0-beta.2",
      "type": "Class",
      "slug": "menu-item",
      "websiteUrl": "http://electron.atom.io/docs/api/menu-item",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/menu-item.md",
      "constructorMethod": {
        "signature": "(options)",
        "parameters": [
          {
            "name": "options",
            "type": "Object",
            "collection": false,
            "required": true,
            "properties": [
              {
                "name": "click",
                "type": "Function",
                "collection": false,
                "description": "Will be called with click(menuItem, browserWindow, event) when the menu item is clicked.",
                "required": false,
                "parameters": [
                  {
                    "name": "menuItem",
                    "type": "MenuItem",
                    "collection": false,
                    "description": "",
                    "required": true
                  },
                  {
                    "name": "browserWindow",
                    "type": "BrowserWindow",
                    "collection": false,
                    "description": "",
                    "required": true
                  },
                  {
                    "name": "event",
                    "type": "Event",
                    "collection": false,
                    "description": "",
                    "required": true
                  }
                ]
              },
              {
                "name": "role",
                "type": "String",
                "collection": false,
                "description": "Define the action of the menu item, when specified the click property will be ignored. See .",
                "required": false
              },
              {
                "name": "type",
                "type": "String",
                "collection": false,
                "description": "Can be normal, separator, submenu, checkbox or radio.",
                "required": false,
                "possibleValues": [
                  {
                    "value": "normal"
                  },
                  {
                    "value": "separator"
                  },
                  {
                    "value": "submenu"
                  },
                  {
                    "value": "checkbox"
                  },
                  {
                    "value": "radio"
                  }
                ]
              },
              {
                "name": "label",
                "type": "String",
                "collection": false,
                "description": "",
                "required": false
              },
              {
                "name": "sublabel",
                "type": "String",
                "collection": false,
                "description": "",
                "required": false
              },
              {
                "name": "accelerator",
                "type": "Accelerator",
                "collection": false,
                "description": "",
                "required": false
              },
              {
                "name": "icon",
                "type": [
                  {
                    "typeName": "NativeImage",
                    "collection": false
                  },
                  {
                    "typeName": "String",
                    "collection": false
                  }
                ],
                "collection": false,
                "description": "",
                "required": false
              },
              {
                "name": "enabled",
                "type": "Boolean",
                "collection": false,
                "description": "If false, the menu item will be greyed out and unclickable.",
                "required": false
              },
              {
                "name": "visible",
                "type": "Boolean",
                "collection": false,
                "description": "If false, the menu item will be entirely hidden.",
                "required": false
              },
              {
                "name": "checked",
                "type": "Boolean",
                "collection": false,
                "description": "Should only be specified for checkbox or radio type menu items.",
                "required": false
              },
              {
                "name": "submenu",
                "type": [
                  {
                    "typeName": "MenuItemConstructorOptions",
                    "collection": true
                  },
                  {
                    "typeName": "Menu",
                    "collection": false
                  }
                ],
                "collection": false,
                "description": "Should be specified for submenu type menu items. If submenu is specified, the type: 'submenu' can be omitted. If the value is not a then it will be automatically converted to one using Menu.buildFromTemplate.",
                "required": false
              },
              {
                "name": "id",
                "type": "String",
                "collection": false,
                "description": "Unique within a single menu. If defined then it can be used as a reference to this item by the position attribute.",
                "required": false
              },
              {
                "name": "position",
                "type": "String",
                "collection": false,
                "description": "This field allows fine-grained definition of the specific location within a given menu.",
                "required": false
              }
            ],
            "path": "MenuItem.options"
          }
        ]
      },
      "instanceName": "menuItem",
      "instanceProperties": [
        {
          "name": "enabled",
          "description": "A Boolean indicating whether the item is enabled, this property can be dynamically changed.",
          "type": "Boolean",
          "collection": false
        },
        {
          "name": "visible",
          "description": "A Boolean indicating whether the item is visible, this property can be dynamically changed.",
          "type": "Boolean",
          "collection": false
        },
        {
          "name": "checked",
          "description": "A Boolean indicating whether the item is checked, this property can be dynamically changed. A checkbox menu item will toggle the checked property on and off when selected. A radio menu item will turn on its checked property when clicked, and will turn off that property for all adjacent items in the same menu. You can add a click function for additional behavior.",
          "type": "Boolean",
          "collection": false
        },
        {
          "name": "label",
          "description": "A String representing the menu items visible label.",
          "type": "String",
          "collection": false
        },
        {
          "name": "click",
          "description": "A Function that is fired when the MenuItem receives a click event.",
          "type": "Function",
          "collection": false
        }
      ],
      "path": "MenuItem"
    },
    {
      "name": "NativeImage",
      "description": "Natively wrap images such as tray, dock, and application icons.",
      "process": {
        "main": true,
        "renderer": true
      },
      "version": "3.0.0-beta.2",
      "type": "Class",
      "slug": "native-image",
      "websiteUrl": "http://electron.atom.io/docs/api/native-image",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/native-image.md",
      "instanceName": "image",
      "instanceMethods": [
        {
          "name": "toPNG",
          "signature": "([options])",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": false,
              "properties": [
                {
                  "name": "scaleFactor",
                  "type": "Double",
                  "collection": false,
                  "description": "Defaults to 1.0.",
                  "required": false
                }
              ]
            }
          ],
          "returns": {
            "type": "Buffer",
            "collection": false,
            "description": "A Buffer that contains the image's PNG encoded data."
          }
        },
        {
          "name": "toJPEG",
          "signature": "(quality)",
          "parameters": [
            {
              "name": "quality",
              "type": "Integer",
              "collection": false,
              "description": "() Between 0 100.",
              "required": true
            }
          ],
          "returns": {
            "type": "Buffer",
            "collection": false,
            "description": "A Buffer that contains the image's JPEG encoded data."
          }
        },
        {
          "name": "toBitmap",
          "signature": "([options])",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": false,
              "properties": [
                {
                  "name": "scaleFactor",
                  "type": "Double",
                  "collection": false,
                  "description": "Defaults to 1.0.",
                  "required": false
                }
              ]
            }
          ],
          "returns": {
            "type": "Buffer",
            "collection": false,
            "description": "A Buffer that contains a copy of the image's raw bitmap pixel data."
          }
        },
        {
          "name": "toDataURL",
          "signature": "([options])",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": false,
              "properties": [
                {
                  "name": "scaleFactor",
                  "type": "Double",
                  "collection": false,
                  "description": "Defaults to 1.0.",
                  "required": false
                }
              ]
            }
          ],
          "returns": {
            "type": "String",
            "collection": false,
            "description": "The data URL of the image."
          }
        },
        {
          "name": "getBitmap",
          "signature": "([options])",
          "description": "The difference between getBitmap() and toBitmap() is, getBitmap() does not copy the bitmap data, so you have to use the returned Buffer immediately in current event loop tick, otherwise the data might be changed or destroyed.",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": false,
              "properties": [
                {
                  "name": "scaleFactor",
                  "type": "Double",
                  "collection": false,
                  "description": "Defaults to 1.0.",
                  "required": false
                }
              ]
            }
          ],
          "returns": {
            "type": "Buffer",
            "collection": false,
            "description": "A Buffer that contains the image's raw bitmap pixel data."
          }
        },
        {
          "name": "getNativeHandle",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "description": "Notice that the returned pointer is a weak pointer to the underlying native image instead of a copy, so you must ensure that the associated nativeImage instance is kept around.",
          "returns": {
            "type": "Buffer",
            "collection": false,
            "description": "A Buffer that stores C pointer to underlying native handle of the image. On macOS, a pointer to NSImage instance would be returned."
          }
        },
        {
          "name": "isEmpty",
          "signature": "()",
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether the image is empty."
          }
        },
        {
          "name": "getSize",
          "signature": "()",
          "returns": {
            "type": "Size",
            "collection": false
          }
        },
        {
          "name": "setTemplateImage",
          "signature": "(option)",
          "description": "Marks the image as a template image.",
          "parameters": [
            {
              "name": "option",
              "type": "Boolean",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "isTemplateImage",
          "signature": "()",
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether the image is a template image."
          }
        },
        {
          "name": "crop",
          "signature": "(rect)",
          "parameters": [
            {
              "name": "rect",
              "type": "Rectangle",
              "collection": false,
              "description": "The area of the image to crop.",
              "required": true
            }
          ],
          "returns": {
            "type": "NativeImage",
            "collection": false,
            "description": "The cropped image."
          }
        },
        {
          "name": "resize",
          "signature": "(options)",
          "description": "If only the height or the width are specified then the current aspect ratio will be preserved in the resized image.",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": true,
              "properties": [
                {
                  "name": "width",
                  "type": "Integer",
                  "collection": false,
                  "description": "Defaults to the image's width.",
                  "required": false
                },
                {
                  "name": "height",
                  "type": "Integer",
                  "collection": false,
                  "description": "Defaults to the image's height.",
                  "required": false
                },
                {
                  "name": "quality",
                  "type": "String",
                  "collection": false,
                  "description": "The desired quality of the resize image. Possible values are good, better or best. The default is best. These values express a desired quality/speed tradeoff. They are translated into an algorithm-specific method that depends on the capabilities (CPU, GPU) of the underlying platform. It is possible for all three methods to be mapped to the same algorithm on a given platform.",
                  "required": false
                }
              ]
            }
          ],
          "returns": {
            "type": "NativeImage",
            "collection": false,
            "description": "The resized image."
          }
        },
        {
          "name": "getAspectRatio",
          "signature": "()",
          "returns": {
            "type": "Float",
            "collection": false,
            "description": "The image's aspect ratio."
          }
        },
        {
          "name": "addRepresentation",
          "signature": "(options)",
          "description": "Add an image representation for a specific scale factor. This can be used to explicitly add different scale factor representations to an image. This can be called on empty images.",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": true,
              "properties": [
                {
                  "name": "scaleFactor",
                  "type": "Double",
                  "collection": false,
                  "description": "The scale factor to add the image representation for.",
                  "required": true
                },
                {
                  "name": "width",
                  "type": "Integer",
                  "collection": false,
                  "description": "Defaults to 0. Required if a bitmap buffer is specified as buffer.",
                  "required": false
                },
                {
                  "name": "height",
                  "type": "Integer",
                  "collection": false,
                  "description": "Defaults to 0. Required if a bitmap buffer is specified as buffer.",
                  "required": false
                },
                {
                  "name": "buffer",
                  "type": "Buffer",
                  "collection": false,
                  "description": "The buffer containing the raw image data.",
                  "required": false
                },
                {
                  "name": "dataURL",
                  "type": "String",
                  "collection": false,
                  "description": "The data URL containing either a base 64 encoded PNG or JPEG image.",
                  "required": false
                }
              ]
            }
          ]
        }
      ],
      "path": "NativeImage"
    },
    {
      "name": "Tray",
      "description": "Add icons and context menus to the system's notification area.",
      "process": {
        "main": true,
        "renderer": false
      },
      "version": "3.0.0-beta.2",
      "type": "Class",
      "slug": "tray",
      "websiteUrl": "http://electron.atom.io/docs/api/tray",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/tray.md",
      "constructorMethod": {
        "signature": "(image)",
        "parameters": [
          {
            "name": "image",
            "type": [
              {
                "typeName": "NativeImage",
                "collection": false
              },
              {
                "typeName": "String",
                "collection": false
              }
            ],
            "collection": false,
            "required": true
          }
        ]
      },
      "instanceName": "tray",
      "instanceMethods": [
        {
          "name": "destroy",
          "signature": "()",
          "description": "Destroys the tray icon immediately."
        },
        {
          "name": "setImage",
          "signature": "(image)",
          "description": "Sets the image associated with this tray icon.",
          "parameters": [
            {
              "name": "image",
              "type": [
                {
                  "typeName": "NativeImage",
                  "collection": false
                },
                {
                  "typeName": "String",
                  "collection": false
                }
              ],
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "setPressedImage",
          "signature": "(image)",
          "platforms": [
            "macOS"
          ],
          "description": "Sets the image associated with this tray icon when pressed on macOS.",
          "parameters": [
            {
              "name": "image",
              "type": "NativeImage",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "setToolTip",
          "signature": "(toolTip)",
          "description": "Sets the hover text for this tray icon.",
          "parameters": [
            {
              "name": "toolTip",
              "type": "String",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "setTitle",
          "signature": "(title)",
          "platforms": [
            "macOS"
          ],
          "description": "Sets the title displayed aside of the tray icon in the status bar (Support ANSI colors).",
          "parameters": [
            {
              "name": "title",
              "type": "String",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "setHighlightMode",
          "signature": "(mode)",
          "platforms": [
            "macOS"
          ],
          "description": "Sets when the tray's icon background becomes highlighted (in blue). Note: You can use highlightMode with a BrowserWindow by toggling between 'never' and 'always' modes when the window visibility changes.",
          "parameters": [
            {
              "name": "mode",
              "type": "String",
              "collection": false,
              "description": "Highlight mode with one of the following values:",
              "required": true,
              "possibleValues": [
                {
                  "value": "selection",
                  "description": "Highlight the tray icon when it is clicked and also when its context menu is open. This is the default."
                },
                {
                  "value": "always",
                  "description": "Always highlight the tray icon."
                },
                {
                  "value": "never",
                  "description": "Never highlight the tray icon."
                }
              ]
            }
          ]
        },
        {
          "name": "setIgnoreDoubleClickEvents",
          "signature": "(ignore)",
          "platforms": [
            "macOS"
          ],
          "description": "Sets the option to ignore double click events. Ignoring these events allows you to detect every individual click of the tray icon. This value is set to false by default.",
          "parameters": [
            {
              "name": "ignore",
              "type": "Boolean",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "getIgnoreDoubleClickEvents",
          "signature": "()",
          "platforms": [
            "macOS"
          ],
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether double click events will be ignored."
          }
        },
        {
          "name": "displayBalloon",
          "signature": "(options)",
          "platforms": [
            "Windows"
          ],
          "description": "Displays a tray balloon.",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "collection": false,
              "required": true,
              "properties": [
                {
                  "name": "icon",
                  "type": [
                    {
                      "typeName": "NativeImage",
                      "collection": false
                    },
                    {
                      "typeName": "String",
                      "collection": false
                    }
                  ],
                  "collection": false,
                  "description": "-",
                  "required": false
                },
                {
                  "name": "title",
                  "type": "String",
                  "collection": false,
                  "description": "",
                  "required": true
                },
                {
                  "name": "content",
                  "type": "String",
                  "collection": false,
                  "description": "",
                  "required": true
                }
              ]
            }
          ]
        },
        {
          "name": "popUpContextMenu",
          "signature": "([menu, position])",
          "platforms": [
            "macOS",
            "Windows"
          ],
          "description": "Pops up the context menu of the tray icon. When menu is passed, the menu will be shown instead of the tray icon's context menu. The position is only available on Windows, and it is (0, 0) by default.",
          "parameters": [
            {
              "name": "menu",
              "type": "Menu",
              "collection": false,
              "required": false
            },
            {
              "name": "position",
              "type": "Point",
              "collection": false,
              "description": "The pop up position.",
              "required": false
            }
          ]
        },
        {
          "name": "setContextMenu",
          "signature": "(menu)",
          "description": "Sets the context menu for this icon.",
          "parameters": [
            {
              "name": "menu",
              "type": "Menu",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "getBounds",
          "signature": "()",
          "platforms": [
            "macOS",
            "Windows"
          ],
          "description": "The bounds of this tray icon as Object.",
          "returns": {
            "type": "Rectangle",
            "collection": false
          }
        },
        {
          "name": "isDestroyed",
          "signature": "()",
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether the tray icon is destroyed."
          }
        }
      ],
      "instanceEvents": [
        {
          "name": "click",
          "description": "Emitted when the tray icon is clicked.",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "bounds",
              "type": "Rectangle",
              "collection": false,
              "description": "The bounds of tray icon.",
              "required": true
            },
            {
              "name": "position",
              "type": "Point",
              "collection": false,
              "description": "The position of the event.",
              "required": true
            }
          ]
        },
        {
          "name": "right-click",
          "description": "Emitted when the tray icon is right clicked.",
          "platforms": [
            "macOS",
            "Windows"
          ],
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "bounds",
              "type": "Rectangle",
              "collection": false,
              "description": "The bounds of tray icon.",
              "required": true
            }
          ]
        },
        {
          "name": "double-click",
          "description": "Emitted when the tray icon is double clicked.",
          "platforms": [
            "macOS",
            "Windows"
          ],
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "bounds",
              "type": "Rectangle",
              "collection": false,
              "description": "The bounds of tray icon.",
              "required": true
            }
          ]
        },
        {
          "name": "balloon-show",
          "description": "Emitted when the tray balloon shows.",
          "platforms": [
            "Windows"
          ]
        },
        {
          "name": "balloon-click",
          "description": "Emitted when the tray balloon is clicked.",
          "platforms": [
            "Windows"
          ]
        },
        {
          "name": "balloon-closed",
          "description": "Emitted when the tray balloon is closed because of timeout or user manually closes it.",
          "platforms": [
            "Windows"
          ]
        },
        {
          "name": "drop",
          "description": "Emitted when any dragged items are dropped on the tray icon.",
          "platforms": [
            "macOS"
          ]
        },
        {
          "name": "drop-files",
          "description": "Emitted when dragged files are dropped in the tray icon.",
          "platforms": [
            "macOS"
          ],
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "files",
              "type": "String",
              "collection": true,
              "description": "The paths of the dropped files.",
              "required": true
            }
          ]
        },
        {
          "name": "drop-text",
          "description": "Emitted when dragged text is dropped in the tray icon.",
          "platforms": [
            "macOS"
          ],
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "text",
              "type": "String",
              "collection": false,
              "description": "the dropped text string.",
              "required": true
            }
          ]
        },
        {
          "name": "drag-enter",
          "description": "Emitted when a drag operation enters the tray icon.",
          "platforms": [
            "macOS"
          ]
        },
        {
          "name": "drag-leave",
          "description": "Emitted when a drag operation exits the tray icon.",
          "platforms": [
            "macOS"
          ]
        },
        {
          "name": "drag-end",
          "description": "Emitted when a drag operation ends on the tray or ends at another location.",
          "platforms": [
            "macOS"
          ]
        },
        {
          "name": "mouse-enter",
          "description": "Emitted when the mouse enters the tray icon.",
          "platforms": [
            "macOS"
          ],
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "position",
              "type": "Point",
              "collection": false,
              "description": "The position of the event.",
              "required": true
            }
          ]
        },
        {
          "name": "mouse-leave",
          "description": "Emitted when the mouse exits the tray icon.",
          "platforms": [
            "macOS"
          ],
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "position",
              "type": "Point",
              "collection": false,
              "description": "The position of the event.",
              "required": true
            }
          ]
        },
        {
          "name": "mouse-move",
          "description": "Emitted when the mouse moves in the tray icon.",
          "platforms": [
            "macOS"
          ],
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "position",
              "type": "Point",
              "collection": false,
              "description": "The position of the event.",
              "required": true
            }
          ]
        }
      ],
      "path": "Tray"
    },
    {
      "name": "Notification",
      "description": "Create OS desktop notifications",
      "process": {
        "main": true,
        "renderer": false
      },
      "version": "3.0.0-beta.2",
      "type": "Class",
      "slug": "notification",
      "websiteUrl": "http://electron.atom.io/docs/api/notification",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/notification.md",
      "staticMethods": [
        {
          "name": "isSupported",
          "signature": "()",
          "returns": {
            "type": "Boolean",
            "collection": false,
            "description": "Whether or not desktop notifications are supported on the current system"
          }
        }
      ],
      "constructorMethod": {
        "signature": "([options])",
        "parameters": [
          {
            "name": "options",
            "type": "Object",
            "collection": false,
            "required": true,
            "properties": [
              {
                "name": "title",
                "type": "String",
                "collection": false,
                "description": "A title for the notification, which will be shown at the top of the notification window when it is shown.",
                "required": true
              },
              {
                "name": "subtitle",
                "type": "String",
                "collection": false,
                "description": "A subtitle for the notification, which will be displayed below the title.",
                "required": false
              },
              {
                "name": "body",
                "type": "String",
                "collection": false,
                "description": "The body text of the notification, which will be displayed below the title or subtitle.",
                "required": true
              },
              {
                "name": "silent",
                "type": "Boolean",
                "collection": false,
                "description": "Whether or not to emit an OS notification noise when showing the notification.",
                "required": false
              },
              {
                "name": "icon",
                "type": [
                  {
                    "typeName": "String",
                    "collection": false
                  },
                  {
                    "typeName": "NativeImage",
                    "collection": false
                  }
                ],
                "collection": false,
                "description": "An icon to use in the notification.",
                "required": false
              },
              {
                "name": "hasReply",
                "type": "Boolean",
                "collection": false,
                "description": "Whether or not to add an inline reply option to the notification.",
                "required": false
              },
              {
                "name": "replyPlaceholder",
                "type": "String",
                "collection": false,
                "description": "The placeholder to write in the inline reply input field.",
                "required": false
              },
              {
                "name": "sound",
                "type": "String",
                "collection": false,
                "description": "The name of the sound file to play when the notification is shown.",
                "required": false
              },
              {
                "name": "actions",
                "type": "NotificationAction",
                "collection": true,
                "description": "Actions to add to the notification. Please read the available actions and limitations in the NotificationAction documentation.",
                "required": false
              },
              {
                "name": "closeButtonText",
                "type": "String",
                "collection": false,
                "description": "A custom title for the close button of an alert. An empty string will cause the default localized text to be used.",
                "required": false
              }
            ]
          }
        ]
      },
      "instanceName": "notification",
      "instanceMethods": [
        {
          "name": "show",
          "signature": "()",
          "description": "Immediately shows the notification to the user, please note this means unlike the HTML5 Notification implementation, instantiating a new Notification does not immediately show it to the user, you need to call this method before the OS will display it. If the notification has been shown before, this method will dismiss the previously shown notification and create a new one with identical properties."
        },
        {
          "name": "close",
          "signature": "()",
          "description": "Dismisses the notification."
        }
      ],
      "instanceEvents": [
        {
          "name": "show",
          "description": "Emitted when the notification is shown to the user, note this could be fired multiple times as a notification can be shown multiple times through the show() method.",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "click",
          "description": "Emitted when the notification is clicked by the user.",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "close",
          "description": "Emitted when the notification is closed by manual intervention from the user. This event is not guaranteed to be emitted in all cases where the notification is closed.",
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            }
          ]
        },
        {
          "name": "reply",
          "description": "Emitted when the user clicks the \"Reply\" button on a notification with hasReply: true.",
          "platforms": [
            "macOS"
          ],
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "reply",
              "type": "String",
              "collection": false,
              "description": "The string the user entered into the inline reply field.",
              "required": true
            }
          ]
        },
        {
          "name": "action",
          "platforms": [
            "macOS"
          ],
          "returns": [
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "required": true
            },
            {
              "name": "index",
              "type": "Number",
              "collection": false,
              "description": "The index of the action that was activated.",
              "required": true
            }
          ]
        }
      ],
      "path": "Notification"
    }
  ],
  "structs": [
    {
      "name": "CPUUsage",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "cpu-usage",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/cpu-usage",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/cpu-usage.md",
      "properties": [
        {
          "name": "percentCPUUsage",
          "type": "Number",
          "collection": false,
          "description": "Percentage of CPU used since the last call to getCPUUsage. First call returns 0.",
          "required": true
        },
        {
          "name": "idleWakeupsPerSecond",
          "type": "Number",
          "collection": false,
          "description": "The number of average idle cpu wakeups per second since the last call to getCPUUsage. First call returns 0. Will always return 0 on Windows.",
          "required": true
        }
      ],
      "path": "CPUUsage"
    },
    {
      "name": "Display",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "display",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/display",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/display.md",
      "properties": [
        {
          "name": "id",
          "type": "Number",
          "collection": false,
          "description": "Unique identifier associated with the display.",
          "required": true
        },
        {
          "name": "rotation",
          "type": "Number",
          "collection": false,
          "description": "Can be 0, 90, 180, 270, represents screen rotation in clock-wise degrees.",
          "required": true
        },
        {
          "name": "scaleFactor",
          "type": "Number",
          "collection": false,
          "description": "Output device's pixel scale factor.",
          "required": true
        },
        {
          "name": "touchSupport",
          "type": "String",
          "collection": false,
          "description": "Can be available, unavailable, unknown.",
          "required": true,
          "possibleValues": [
            {
              "value": "available"
            },
            {
              "value": "unavailable"
            },
            {
              "value": "unknown"
            }
          ]
        },
        {
          "name": "bounds",
          "type": "Rectangle",
          "collection": false,
          "description": "",
          "required": true
        },
        {
          "name": "size",
          "type": "Size",
          "collection": false,
          "description": "",
          "required": true
        },
        {
          "name": "workArea",
          "type": "Rectangle",
          "collection": false,
          "description": "",
          "required": true
        },
        {
          "name": "workAreaSize",
          "type": "Size",
          "collection": false,
          "description": "",
          "required": true
        }
      ],
      "path": "Display"
    },
    {
      "name": "FileFilter",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "file-filter",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/file-filter",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/file-filter.md",
      "properties": [
        {
          "name": "name",
          "type": "String",
          "collection": false,
          "description": "",
          "required": true
        },
        {
          "name": "extensions",
          "type": "String",
          "collection": true,
          "description": "",
          "required": true
        }
      ],
      "path": "FileFilter"
    },
    {
      "name": "Point",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "point",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/point",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/point.md",
      "properties": [
        {
          "name": "x",
          "type": "Number",
          "collection": false,
          "description": "",
          "required": true
        },
        {
          "name": "y",
          "type": "Number",
          "collection": false,
          "description": "",
          "required": true
        }
      ],
      "path": "Point"
    },
    {
      "name": "ProcessMetric",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "process-metric",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/process-metric",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/process-metric.md",
      "properties": [
        {
          "name": "pid",
          "type": "Integer",
          "collection": false,
          "description": "Process id of the process.",
          "required": true
        },
        {
          "name": "type",
          "type": "String",
          "collection": false,
          "description": "Process type (Browser or Tab or GPU etc).",
          "required": true
        },
        {
          "name": "memory",
          "type": "MemoryInfo",
          "collection": false,
          "description": "Memory information for the process.",
          "required": true
        },
        {
          "name": "cpu",
          "type": "CPUUsage",
          "collection": false,
          "description": "CPU usage of the process.",
          "required": true
        }
      ],
      "path": "ProcessMetric"
    },
    {
      "name": "Rectangle",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "rectangle",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/rectangle",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/rectangle.md",
      "properties": [
        {
          "name": "x",
          "type": "Number",
          "collection": false,
          "description": "The x coordinate of the origin of the rectangle (must be an integer)",
          "required": true
        },
        {
          "name": "y",
          "type": "Number",
          "collection": false,
          "description": "The y coordinate of the origin of the rectangle (must be an integer)",
          "required": true
        },
        {
          "name": "width",
          "type": "Number",
          "collection": false,
          "description": "The width of the rectangle (must be an integer)",
          "required": true
        },
        {
          "name": "height",
          "type": "Number",
          "collection": false,
          "description": "The height of the rectangle (must be an integer)",
          "required": true
        }
      ],
      "path": "Rectangle"
    },
    {
      "name": "ShortcutDetails",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "shortcut-details",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/shortcut-details",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/shortcut-details.md",
      "properties": [
        {
          "name": "target",
          "type": "String",
          "collection": false,
          "description": "The target to launch from this shortcut.",
          "required": true
        },
        {
          "name": "cwd",
          "type": "String",
          "collection": false,
          "description": "The working directory. Default is empty.",
          "required": false
        },
        {
          "name": "args",
          "type": "String",
          "collection": false,
          "description": "The arguments to be applied to target when launching from this shortcut. Default is empty.",
          "required": false
        },
        {
          "name": "description",
          "type": "String",
          "collection": false,
          "description": "The description of the shortcut. Default is empty.",
          "required": false
        },
        {
          "name": "icon",
          "type": "String",
          "collection": false,
          "description": "The path to the icon, can be a DLL or EXE. icon and iconIndex have to be set together. Default is empty, which uses the target's icon.",
          "required": false
        },
        {
          "name": "iconIndex",
          "type": "Number",
          "collection": false,
          "description": "The resource ID of icon when icon is a DLL or EXE. Default is 0.",
          "required": false
        },
        {
          "name": "appUserModelId",
          "type": "String",
          "collection": false,
          "description": "The Application User Model ID. Default is empty.",
          "required": false
        }
      ],
      "path": "ShortcutDetails"
    },
    {
      "name": "Size",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "size",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/size",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/size.md",
      "properties": [
        {
          "name": "width",
          "type": "Number",
          "collection": false,
          "description": "",
          "required": true
        },
        {
          "name": "height",
          "type": "Number",
          "collection": false,
          "description": "",
          "required": true
        }
      ],
      "path": "Size"
    },
    {
      "name": "MemoryInfo",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "memory-info",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/memory-info",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/memory-info.md",
      "properties": [
        {
          "name": "pid",
          "type": "Integer",
          "collection": false,
          "description": "Process id of the process.",
          "required": true
        },
        {
          "name": "workingSetSize",
          "type": "Integer",
          "collection": false,
          "description": "The amount of memory currently pinned to actual physical RAM.",
          "required": true
        },
        {
          "name": "peakWorkingSetSize",
          "type": "Integer",
          "collection": false,
          "description": "The maximum amount of memory that has ever been pinned to actual physical RAM. On macOS its value will always be 0.",
          "required": true
        },
        {
          "name": "privateBytes",
          "type": "Integer",
          "collection": false,
          "description": "The amount of memory not shared by other processes, such as JS heap or HTML content.",
          "required": true
        },
        {
          "name": "sharedBytes",
          "type": "Integer",
          "collection": false,
          "description": "The amount of memory shared between processes, typically memory consumed by the Electron code itself",
          "required": true
        }
      ],
      "path": "MemoryInfo"
    },
    {
      "name": "DesktopCapturerSource",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "desktop-capturer-source",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/desktop-capturer-source",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/desktop-capturer-source.md",
      "properties": [
        {
          "name": "id",
          "type": "String",
          "collection": false,
          "description": "The identifier of a window or screen that can be used as a chromeMediaSourceId constraint when calling [navigator.webkitGetUserMedia]. The format of the identifier will be window:XX or screen:XX, where XX is a random generated number.",
          "required": true
        },
        {
          "name": "name",
          "type": "String",
          "collection": false,
          "description": "A screen source will be named either Entire Screen or Screen <index>, while the name of a window source will match the window title.",
          "required": true
        },
        {
          "name": "thumbnail",
          "type": "NativeImage",
          "collection": false,
          "description": "A thumbnail image. There is no guarantee that the size of the thumbnail is the same as the thumbnailSize specified in the options passed to desktopCapturer.getSources. The actual size depends on the scale of the screen or window.",
          "required": true
        },
        {
          "name": "display_id",
          "type": "String",
          "collection": false,
          "description": "A unique identifier that will correspond to the id of the matching returned by the . On some platforms, this is equivalent to the XX portion of the id field above and on others it will differ. It will be an empty string if not available.",
          "required": true
        }
      ],
      "path": "DesktopCapturerSource"
    },
    {
      "name": "UploadData",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "upload-data",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/upload-data",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/upload-data.md",
      "properties": [
        {
          "name": "bytes",
          "type": "Buffer",
          "collection": false,
          "description": "Content being sent.",
          "required": true
        },
        {
          "name": "file",
          "type": "String",
          "collection": false,
          "description": "Path of file being uploaded.",
          "required": true
        },
        {
          "name": "blobUUID",
          "type": "String",
          "collection": false,
          "description": "UUID of blob data. Use method to retrieve the data.",
          "required": true
        }
      ],
      "path": "UploadData"
    },
    {
      "name": "NotificationAction",
      "version": "3.0.0-beta.2",
      "type": "Structure",
      "slug": "notification-action",
      "websiteUrl": "http://electron.atom.io/docs/api/structures/notification-action",
      "repoUrl": "https://github.com/electron/electron/blob/v3.0.0-beta.2/docs/api/structures/notification-action.md",
      "properties": [
        {
          "name": "type",
          "type": "String",
          "collection": false,
          "description": "The type of action, can be button.",
          "required": true,
          "possibleValues": [
            {
              "value": "button"
            }
          ]
        },
        {
          "name": "text",
          "type": "String",
          "collection": false,
          "description": "The label for the given action.",
          "required": false
        }
      ],
      "path": "NotificationAction"
    },
    {
      "name": "MenuItemConstructorOptions",
      "type": "Structure",
      "collection": false,
      "required": true,
      "properties": [
        {
          "name": "click",
          "type": "Function",
          "collection": false,
          "description": "Will be called with click(menuItem, browserWindow, event) when the menu item is clicked.",
          "required": false,
          "parameters": [
            {
              "name": "menuItem",
              "type": "MenuItem",
              "collection": false,
              "description": "",
              "required": true
            },
            {
              "name": "browserWindow",
              "type": "BrowserWindow",
              "collection": false,
              "description": "",
              "required": true
            },
            {
              "name": "event",
              "type": "Event",
              "collection": false,
              "description": "",
              "required": true
            }
          ]
        },
        {
          "name": "role",
          "type": "String",
          "collection": false,
          "description": "Define the action of the menu item, when specified the click property will be ignored. See .",
          "required": false
        },
        {
          "name": "type",
          "type": "String",
          "collection": false,
          "description": "Can be normal, separator, submenu, checkbox or radio.",
          "required": false,
          "possibleValues": [
            {
              "value": "normal"
            },
            {
              "value": "separator"
            },
            {
              "value": "submenu"
            },
            {
              "value": "checkbox"
            },
            {
              "value": "radio"
            }
          ]
        },
        {
          "name": "label",
          "type": "String",
          "collection": false,
          "description": "",
          "required": false
        },
        {
          "name": "sublabel",
          "type": "String",
          "collection": false,
          "description": "",
          "required": false
        },
        {
          "name": "accelerator",
          "type": "Accelerator",
          "collection": false,
          "description": "",
          "required": false
        },
        {
          "name": "icon",
          "type": [
            {
              "typeName": "NativeImage",
              "collection": false
            },
            {
              "typeName": "String",
              "collection": false
            }
          ],
          "collection": false,
          "description": "",
          "required": false
        },
        {
          "name": "enabled",
          "type": "Boolean",
          "collection": false,
          "description": "If false, the menu item will be greyed out and unclickable.",
          "required": false
        },
        {
          "name": "visible",
          "type": "Boolean",
          "collection": false,
          "description": "If false, the menu item will be entirely hidden.",
          "required": false
        },
        {
          "name": "checked",
          "type": "Boolean",
          "collection": false,
          "description": "Should only be specified for checkbox or radio type menu items.",
          "required": false
        },
        {
          "name": "submenu",
          "type": [
            {
              "typeName": "MenuItemConstructorOptions",
              "collection": true
            },
            {
              "typeName": "Menu",
              "collection": false
            }
          ],
          "collection": false,
          "description": "Should be specified for submenu type menu items. If submenu is specified, the type: 'submenu' can be omitted. If the value is not a then it will be automatically converted to one using Menu.buildFromTemplate.",
          "required": false
        },
        {
          "name": "id",
          "type": "String",
          "collection": false,
          "description": "Unique within a single menu. If defined then it can be used as a reference to this item by the position attribute.",
          "required": false
        },
        {
          "name": "position",
          "type": "String",
          "collection": false,
          "description": "This field allows fine-grained definition of the specific location within a given menu.",
          "required": false
        }
      ],
      "path": "MenuItem.options"
    }
  ],
  "types": [
    "Integer",
    "Float",
    "Double",
    "Accelerator",
    "MenuItemConstructorOptions",
    "Protocol",
    "TouchBarItem",
    "WebFrame"
  ]
}
