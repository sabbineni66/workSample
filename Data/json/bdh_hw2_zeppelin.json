?{"paragraphs":[{"text":"%md ##Event Statistics using Scala","dateUpdated":"2018-01-24T19:16:37-0500","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>##Event Statistics using Scala</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1516839397202_-315311191","id":"20170126-084346_411967885","dateCreated":"2018-01-24T19:16:37-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1657"},{"title":"Event Statistics using Scala","text":"// any import statements go here\nimport org.apache.spark.rdd.RDD\nimport org.apache.commons.io.IOUtils\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.net.URL\nimport java.nio.charset.Charset\nimport org.apache.spark.sql._","user":"anonymous","dateUpdated":"2018-01-30T19:24:26-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"title":false,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397697_1056318638","id":"20170125-092928_572765858","dateCreated":"2018-01-24T19:16:37-0500","dateStarted":"2018-01-30T19:24:26-0500","dateFinished":"2018-01-30T19:24:48-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1658","errorMessage":""},{"title":"Then, load data. We uploaded the data on S3 for easier loading","text":"// load raw data\n\ndef loadFromUrl(url:String) = \n    sc.parallelize(\n        IOUtils.toString(\n            new URL(url),\n            Charset.forName(\"utf8\")).split(\"\\n\"))\n            \nval events = loadFromUrl(\"http://sunlab.org/download/course/hw2/events.csv\")\nval mortality = loadFromUrl(\"http://sunlab.org/download/course/hw2/mortality.csv\")\n","user":"anonymous","dateUpdated":"2018-01-30T19:24:51-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397701_1054779642","id":"20170125-102007_1054430570","dateCreated":"2018-01-24T19:16:37-0500","dateStarted":"2018-01-30T19:24:51-0500","dateFinished":"2018-01-30T19:25:21-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1659","errorMessage":""},{"text":"import java.util.Date\n// Define case class\ncase class Event(patientId: String, category: String, event: String, date: java.util.Date, value: Double)\ncase class Mortality(patientId: String, mortality_date:  java.util.Date, label: Double)\n","dateUpdated":"2018-01-30T19:25:42-0500","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397704_1053625396","id":"20170125-093656_1081259042","dateCreated":"2018-01-24T19:16:37-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1660","user":"anonymous","dateFinished":"2018-01-30T19:25:44-0500","dateStarted":"2018-01-30T19:25:42-0500"},{"text":"\n// Define date format\nval dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\")","dateUpdated":"2018-01-30T19:25:57-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397709_1051701651","id":"20170205-182828_2037956217","dateCreated":"2018-01-24T19:16:37-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1661","user":"anonymous","dateFinished":"2018-01-30T19:25:58-0500","dateStarted":"2018-01-30T19:25:57-0500"},{"text":"\n// Load events & mortality into their corresponding RDD\n//val eventsRDD: RDD[Event] = events.map(s=>s.split(\",\")).map(s=>Event(s(0), s(1), s(2),dateFormat.parse(s(3).asInstanceOf[String]), s(4).toDouble))\nval eventsRDD: RDD[Event] = events.map(s=>s.split(\",\")).map(s=>Event(s(0), s(1), s(2),dateFormat.parse(s(3).asInstanceOf[String]), if (s.length > 4 ) s(4).toDouble else 0.0 ))\nval mortalityRDD: RDD[Mortality] = mortality.map(s=>s.split(\",\")).map(s=>Mortality(s(0), dateFormat.parse(s(1).asInstanceOf[String]), s(2).toDouble))","dateUpdated":"2018-01-30T19:26:32-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397714_1063628867","id":"20170125-103206_1230836042","dateCreated":"2018-01-24T19:16:37-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1662","user":"anonymous","dateFinished":"2018-01-30T19:26:34-0500","dateStarted":"2018-01-30T19:26:32-0500"},{"title":"Event count is defined as the number of events recorded for a given patient","text":"def event_count_metrics(eve: RDD[(Event)], mor: RDD[(Mortality)]) : (Double, Double, Double, Double, Double, Double) = {\n    \n    // TODO : Implement this function to return the event count metrics.\n    val avg_dead_event_count = 0.0\n    val max_dead_event_count = 0.0\n    val min_dead_event_count = 0.0\n    val avg_alive_event_count = 0.0\n    val max_alive_event_count = 0.0\n    val min_alive_event_count = 0.0\n    \n    (avg_dead_event_count, max_dead_event_count, min_dead_event_count, avg_alive_event_count, max_alive_event_count, min_alive_event_count)\n}","dateUpdated":"2018-01-30T19:26:37-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397719_1061705123","id":"20170125-163824_794924019","dateCreated":"2018-01-24T19:16:37-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1663","user":"anonymous","dateFinished":"2018-01-30T19:26:37-0500","dateStarted":"2018-01-30T19:26:37-0500"},{"title":"Encounter count is defined as the count of unique dates on which a given patient visited the ICU. ","text":"def encounter_count_metrics(eve: RDD[(Event)], mor: RDD[(Mortality)]) : (Double, Double, Double, Double, Double, Double) = {\n    \n    // TODO : Implement this function to return the encounter count metrics.\n    val avg_dead_encounter_count = 0.0\n    val max_dead_encounter_count = 0.0\n    val min_dead_encounter_count = 0.0\n    val avg_alive_encounter_count = 0.0\n    val max_alive_encounter_count = 0.0\n    val min_alive_encounter_count = 0.0\n    \n    (avg_dead_encounter_count, max_dead_encounter_count, min_dead_encounter_count, avg_alive_encounter_count, max_alive_encounter_count, min_alive_encounter_count)\n}","dateUpdated":"2018-01-24T19:16:37-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397724_1058242382","id":"20170126-094037_1369751422","dateCreated":"2018-01-24T19:16:37-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1664"},{"title":"Testing Event Count - Don't change this cell","text":"\nval (avg_dead_event_count, max_dead_event_count, min_dead_event_count, avg_alive_event_count, max_alive_event_count, min_alive_event_countt) = \nevent_count_metrics(eventsRDD, mortalityRDD)","dateUpdated":"2018-01-24T19:16:37-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397729_1044006673","id":"20170125-164106_1373358169","dateCreated":"2018-01-24T19:16:37-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1665"},{"title":"Populate the correct values in df_events dataframe","text":"case class eventRecord(Average_Event: Double , Max_Event: Double, Min_Event: Double, Mortality: String) \nval df_events = Seq(eventRecord(50.0, 80.0, 20.0, \"Alive\"), eventRecord(100.0, 160.0, 60.0, \"Dead\")).toDF \n\n// TODO - Fill in the correct values of minimum, maximum and average events for Alive and Dead Patients \n//val df_events = Seq(eventRecord(0.0, 0.0, 0.0, \"Alive\"), eventRecord(0.0, 0.0, 0.0, \"Dead\")).toDF\ndf_events.registerTempTable(\"df_events\")\n","dateUpdated":"2018-01-24T19:16:37-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397734_1043621924","id":"20170126-095056_275615884","dateCreated":"2018-01-24T19:16:37-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1666"},{"title":"Plot Event Count Grouped by Dead/Alive","text":"%sql\nselect * from df_events","dateUpdated":"2018-01-24T19:16:37-0500","config":{"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"Max_Event","index":1,"aggr":"sum"},{"name":"Average_Event","index":0,"aggr":"sum"},{"name":"Min_Event","index":2,"aggr":"sum"}],"values":[{"name":"Max_Event","index":1,"aggr":"sum"},{"name":"Average_Event","index":0,"aggr":"sum"},{"name":"Min_Event","index":2,"aggr":"sum"}],"groups":[{"name":"Mortality","index":3,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Average_Event","index":0,"aggr":"sum"},"yAxis":{"name":"Max_Event","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397739_1041698180","id":"20170127-103258_1100387642","dateCreated":"2018-01-24T19:16:37-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1667"},{"title":"Testing Encounter Count - Don't change any cell starting from this one","text":"val  (avg_dead_encounter_count, max_dead_encounter_count, min_dead_encounter_count, avg_alive_encounter_count, max_alive_encounter_count, min_alive_encounter_count) = encounter_count_metrics(eventsRDD, mortalityRDD)","dateUpdated":"2018-01-24T19:16:37-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397744_1050547404","id":"20170126-085842_586212247","dateCreated":"2018-01-24T19:16:37-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1668"},{"title":"Populate the correct values in df_encounters dataframe","text":"case class encounterRecord(Average_Encounter: Double , Max_Encounter: Double, Min_Encounter: Double, Mortality: String)\n\nval df_encounter = Seq(encounterRecord(50.0, 80.0, 20.0, \"Alive\"), encounterRecord(100.0, 160.0, 60.0, \"Dead\")).toDF \n\n// TODO - Fill in the correct values of minimum, maximum and average events for Alive and Dead Patients \n//val df_encounter = Seq(encounterRecord(0.0, 0.0, 0.0, \"Alive\"), encounterRecord(0.0, 0.0, 0.0, \"Dead\")).toDF\ndf_encounter.registerTempTable(\"df_encounter\")\n","dateUpdated":"2018-01-24T19:16:37-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397749_1048623660","id":"20170127-104258_320884595","dateCreated":"2018-01-24T19:16:37-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1669"},{"title":"Plot Encounter Count Grouped by Dead/Alive","text":"%sql\nselect * from df_encounter ","dateUpdated":"2018-01-24T19:16:37-0500","config":{"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"Max_Encounter","index":1,"aggr":"sum"},{"name":"Average_Encounter","index":0,"aggr":"sum"},{"name":"Min_Encounter","index":2,"aggr":"sum"}],"values":[{"name":"Max_Encounter","index":1,"aggr":"sum"},{"name":"Average_Encounter","index":0,"aggr":"sum"},{"name":"Min_Encounter","index":2,"aggr":"sum"}],"groups":[{"name":"Mortality","index":3,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Average_Encounter","index":0,"aggr":"sum"},"yAxis":{"name":"Max_Encounter","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397751_1049393158","id":"20170127-113147_1780103981","dateCreated":"2018-01-24T19:16:37-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1670"},{"text":"","dateUpdated":"2018-01-24T19:16:37-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1516839397753_1047084664","id":"20170127-113337_1396101507","dateCreated":"2018-01-24T19:16:37-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1671"}],"name":"BDH_HW2_Zeppelin","id":"2D7ATPY5S","angularObjects":{"2CBTQF5E2:shared_process":[],"2CBHD1PTQ:shared_process":[],"2CD6KFFX6:shared_process":[],"2CDFHFHYE:shared_process":[],"2CE1VDJQQ:shared_process":[],"2CCVUJZF2:shared_process":[],"2CCFZKMQJ:shared_process":[],"2CD58SCG2:shared_process":[],"2CBFXQ7Z9:shared_process":[],"2CEJG6M7D:shared_process":[],"2CEKZV9MU:shared_process":[],"2CBPQKNPE:shared_process":[],"2CCFBCH3K:shared_process":[],"2CDSG4B8K:shared_process":[],"2CCRYJX2Q:shared_process":[],"2CB2351GU:shared_process":[],"2CDSX6FYV:shared_process":[],"2CAX1E87A:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}