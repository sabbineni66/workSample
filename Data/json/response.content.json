[{"content":"## Bullet Response Types\n\nThere are many possible values you can return from a route handler in\nBullet to produce a valid HTTP response. Most types can be either\nreturned directly, or wrapped in the `$app->response()` helper for\nadditional customization.\n\n### Strings\n\n{% geshi 'php' %}\n$app = new Bullet\\App();\n$app->path('\/', function($request) use($app) {\n    return \"Hello World\";\n});\n$app->path('\/', function($request) use($app) {\n    return $app->response(500, \"Hello Error!\");\n});\n{% endgeshi %}\n\nStrings result in a 200 OK response with a body containing the returned\nstring. If you want to return a quick string response with a different\nHTTP status code, use the `$app->response()` helper.\n\n### Booleans\n\n{% geshi 'php' %}\n$app = new Bullet\\App();\n$app->path('\/', function($request) use($app) {\n    return true;\n});\n$app->path('notfound', function($request) use($app) {\n    return false;\n});\n{% endgeshi %}\n\nBoolean `false` results in a 404 \"Not Found\" HTTP response, and boolean\n`true` results in a 200 \"OK\" HTTP response.\n\n### Integers\n\n{% geshi 'php' %}\n$app = new Bullet\\App();\n$app->path('teapot', function($request) use($app) {\n    return 418;\n});\n{% endgeshi %}\n\nIntegers are mapped to their corresponding HTTP status code. In this\nexample, a 418 \"I'm a Teapot\" HTTP response would be sent. This feature can be\nvery useful for returning `404` errors if database records cannot be found, etc.\n\n### Arrays\n\n{% geshi 'php' %}\n$app = new Bullet\\App();\n$app->path('foo', function($request) use($app) {\n    return array('foo' => 'bar');\n});\n$app->path('bar', function($request) use($app) {\n    return $app->response(201, array('bar' => 'baz'));\n});\n{% endgeshi %}\n\nArrays are automatically passed through `json_encode` and the appropriate\n`Content-Type: application\/json` HTTP response header is sent.\n\n### Templates\n\n{% geshi 'php' %}\n\/\/ Configure template path with constructor\n$app = new Bullet\\App(array(\n    'template.cfg' => array('path' => __DIR__ . '\/templates')\n));\n\n\/\/ Routes\n$app->path('foo', function($request) use($app) {\n    return $app->template('foo');\n});\n$app->path('bar', function($request) use($app) {\n    return $app->template('bar', array('bar' => 'baz'))\n        ->status(201);\n});\n{% endgeshi %}\n\nThe `$app->template()` helper returns an instance of\n`Bullet\\View\\Template` that is lazy-rendered on `__toString` when the\nHTTP response is sent. The first argument is a template name, and the\nsecond (optional) argument is an array of parameters to pass to the\ntemplate for use.\n\n### Redirects\n\n{% geshi 'php' %}\n$app->path('foo', function($request) use($app) {\n    return \"Hello Foo!\"\n});\n\n\/\/ 'bar' redirects to  'foo' with a 302 code\n$app->path('bar', function($request) use($app) {\n    return $app->response()->redirect('foo');\n});\n\/\/ 'baz' redirects to 'foo' with a 301 code\n$app->path('baz', function($request) use($app) {\n    return $app->response()->redirect('foo', 301);\n});\n{% endgeshi %}\n\nRedirects result in a `302 Found` HTTP response with a `Location:`\nheader for the path provided. If you want to send a different status\ncode, pass it as the second (optional) argument.\n\n\n","format":null}]