[
  [
    "Sammy",
    {
      "name": "Sammy",
      "args": [

      ],
      "doc": "<p><code>Sammy</code> (also aliased as $.sammy) is not only the namespace for a\nnumber of prototypes, its also a top level method that allows for easy\ncreation/management of <code>Sammy.Application</code> instances. There are a\nnumber of different forms for <code>Sammy()</code> but each returns an instance\nof <code>Sammy.Application</code>. When a new instance is created using\n<code>Sammy</code> it is added to an Object called <code>Sammy.apps</code>. This\nprovides for an easy way to get at existing Sammy applications. Only one\ninstance is allowed per <code>element_selector</code> so when calling\n<code>Sammy('selector')</code> multiple times, the first time will create\nthe application and the following times will extend the application\nalready added to that selector.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> // returns the app at #main or a new app\n Sammy('#main')\n\n // equivalent to \"new Sammy.Application\", except appends to apps\n Sammy();\n Sammy(function() { ... });\n\n // extends the app at '#main' with function.\n Sammy('#main', function() { ... });\n</code></pre>\n",
      "filename": "/lib/sammy.js",
      "lineno": 67,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": null
    }
  ],
  [
    "Sammy.Application",
    {
      "name": "Sammy.Application",
      "args": [
        "app_function"
      ],
      "doc": "<p>Sammy.Application is the Base prototype for defining 'applications'.\nAn 'application' is a collection of 'routes' and bound events that is\nattached to an element when <code>run()</code> is called.\nThe only argument an 'app_function' is evaluated within the context of the application.</p>\n",
      "filename": "/lib/sammy.js",
      "lineno": 372,
      "methods": [
        {
          "name": "$element",
          "args": [
            "selector"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 443,
          "doc": "<p>returns a jQuery object of the Applications bound element.</p>\n"
        },
        {
          "name": "after",
          "args": [
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 768,
          "doc": "<p>A shortcut for binding a callback to be run after a route is executed.\nAfter callbacks have no guarunteed order.</p>\n"
        },
        {
          "name": "any",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 631,
          "doc": "<p>Alias for route('any', ...)</p>\n"
        },
        {
          "name": "around",
          "args": [
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 815,
          "doc": "<p>Adds an around filter to the application. around filters are functions\nthat take a single argument <code>callback</code> which is the entire route\nexecution path wrapped up in a closure. This means you can decide whether\nor not to proceed with execution by not invoking <code>callback</code> or,\nmore usefully wrapping callback inside the result of an asynchronous execution.</p>\n\n<h3>Example</h3>\n\n<p>The most common use case for around() is calling a <em>possibly</em> async function\nand executing the route within the functions callback:</p>\n\n<pre class='prettyprint'><code> var app = $.sammy(function() {\n\n   var current_user = false;\n\n   function checkLoggedIn(callback) {\n     // /session returns a JSON representation of the logged in user\n     // or an empty object\n     if (!current_user) {\n       $.getJSON('/session', function(json) {\n         if (json.login) {\n           // show the user as logged in\n           current_user = json;\n           // execute the route path\n           callback();\n         } else {\n           // show the user as not logged in\n           current_user = false;\n           // the context of aroundFilters is an EventContext\n           this.redirect('#/login');\n         }\n       });\n     } else {\n       // execute the route path\n       callback();\n     }\n   };\n\n   this.around(checkLoggedIn);\n\n });\n</code></pre>\n"
        },
        {
          "name": "before",
          "args": [
            "options",
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 757,
          "doc": "<p>Takes a single callback that is pushed on to a stack.\nBefore any route is run, the callbacks are evaluated in order within\nthe current <code>Sammy.EventContext</code></p>\n\n<p>If any of the callbacks explicitly return false, execution of any\nfurther callbacks and the route itself is halted.</p>\n\n<p>You can also provide a set of options that will define when to run this\nbefore based on the route it proceeds.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> var app = $.sammy(function() {\n\n   // will run at #/route but not at #/\n   this.before('#/route', function() {\n     //...\n   });\n\n   // will run at #/ but not at #/route\n   this.before({except: {path: '#/route'}}, function() {\n     this.log('not before #/route');\n   });\n\n   this.get('#/', function() {});\n\n   this.get('#/route', function() {});\n\n });\n</code></pre>\n\n<p>See <code>contextMatchesOptions()</code> for a full list of supported options</p>\n"
        },
        {
          "name": "bind",
          "args": [
            "name",
            "data",
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 671,
          "doc": "<p>Works just like <code>jQuery.fn.bind()</code> with a couple notable differences.</p>\n\n<ul>\n<li>It binds all events to the application element</li>\n<li>All events are bound within the <code>eventNamespace()</code></li>\n<li>Events are not actually bound until the application is started with <code>run()</code></li>\n<li>callbacks are evaluated within the context of a Sammy.EventContext</li>\n</ul>\n\n"
        },
        {
          "name": "bindToAllEvents",
          "args": [
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1026,
          "doc": "<p>Will bind a single callback function to every event that is already\nbeing listened to in the app. This includes all the <code>APP_EVENTS</code>\nas well as any custom events defined with <code>bind()</code>.</p>\n\n<p>Used internally for debug logging.</p>\n"
        },
        {
          "name": "clearTemplateCache",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 1327,
          "doc": "<p>clear the templateCache</p>\n"
        },
        {
          "name": "contextMatchesOptions",
          "args": [
            "context",
            "match_options",
            "positive"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1222,
          "doc": "<p>Matches an object of options against an <code>EventContext</code> like object that\ncontains <code>path</code> and <code>verb</code> attributes. Internally Sammy uses this\nfor matching <code>before()</code> filters against specific options. You can set the\nobject to <em>only</em> match certain paths or verbs, or match all paths or verbs <em>except</em>\nthose that match the options.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>var app = $.sammy(),\n    context = {verb: 'get', path: '#/mypath'};\n\n// match against a path string\napp.contextMatchesOptions(context, '#/mypath'); //=&gt; true\napp.contextMatchesOptions(context, '#/otherpath'); //=&gt; false\n// equivalent to\napp.contextMatchesOptions(context, {only: {path:'#/mypath'}}); //=&gt; true\napp.contextMatchesOptions(context, {only: {path:'#/otherpath'}}); //=&gt; false\n// match against a path regexp\napp.contextMatchesOptions(context, /path/); //=&gt; true\napp.contextMatchesOptions(context, /^path/); //=&gt; false\n// match only a verb\napp.contextMatchesOptions(context, {only: {verb:'get'}}); //=&gt; true\napp.contextMatchesOptions(context, {only: {verb:'post'}}); //=&gt; false\n// match all except a verb\napp.contextMatchesOptions(context, {except: {verb:'post'}}); //=&gt; true\napp.contextMatchesOptions(context, {except: {verb:'get'}}); //=&gt; false\n// match all except a path\napp.contextMatchesOptions(context, {except: {path:'#/otherpath'}}); //=&gt; true\napp.contextMatchesOptions(context, {except: {path:'#/mypath'}}); //=&gt; false\n// match multiple paths\napp.contextMatchesOptions(context, {path: ['#/mypath', '#/otherpath']}); //=&gt; true\napp.contextMatchesOptions(context, {path: ['#/otherpath', '#/thirdpath']}); //=&gt; false\n// equivalent to\napp.contextMatchesOptions(context, {only: {path: ['#/mypath', '#/otherpath']}}); //=&gt; true\napp.contextMatchesOptions(context, {only: {path: ['#/otherpath', '#/thirdpath']}}); //=&gt; false\n// match all except multiple paths\napp.contextMatchesOptions(context, {except: {path: ['#/mypath', '#/otherpath']}}); //=&gt; false\napp.contextMatchesOptions(context, {except: {path: ['#/otherpath', '#/thirdpath']}}); //=&gt; true\n</code></pre>\n"
        },
        {
          "name": "del",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 628,
          "doc": "<p>Alias for route('delete', ...)</p>\n"
        },
        {
          "name": "destroy",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 1015,
          "doc": "<p>Not only runs <code>unbind</code> but also destroys the app reference.</p>\n"
        },
        {
          "name": "error",
          "args": [
            "message",
            "original_error"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1345,
          "doc": "<p>The base error handler takes a string <code>message</code> and an <code>Error</code>\nobject. If <code>raise_errors</code> is set to <code>true</code> on the app level,\nthis will re-throw the error to the browser. Otherwise it will send the error\nto <code>log()</code>. Override this method to provide custom error handling\ne.g logging to a server side component or displaying some feedback to the\nuser.</p>\n"
        },
        {
          "name": "eventNamespace",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 660,
          "doc": "<p>A unique event namespace defined per application.\nAll events bound with <code>bind()</code> are automatically bound within this space.</p>\n"
        },
        {
          "name": "get",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 619,
          "doc": "<p>Alias for route('get', ...)</p>\n"
        },
        {
          "name": "getLocation",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 1271,
          "doc": "<p>Delegates to the <code>location_proxy</code> to get the current location.\nSee <code>Sammy.DefaultLocationProxy</code> for more info on location proxies.</p>\n"
        },
        {
          "name": "helper",
          "args": [
            "name",
            "method"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 933,
          "doc": "<p>Helper extends the event context just like <code>helpers()</code> but does it\na single method at a time. This is especially useful for dynamically named\nhelpers</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>// Trivial example that adds 3 helper methods to the context dynamically\nvar app = $.sammy(function(app) {\n\n  $.each([1,2,3], function(i, num) {\n    app.helper('helper' + num, function() {\n      this.log(\"I'm helper number \" + num);\n    });\n  });\n\n  this.get('#/', function() {\n    this.helper2(); //=&gt; I'm helper number 2\n  });\n});\n</code></pre>\n\n<h3>Arguments</h3>\n\n<ul>\n<li><code>name</code> The name of the method</li>\n<li><code>method</code> The function to be added to the prototype at <code>name</code></li>\n</ul>\n\n"
        },
        {
          "name": "helpers",
          "args": [
            "extensions"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 903,
          "doc": "<p>Helpers extends the EventContext prototype specific to this app.\nThis allows you to define app specific helper functions that can be used\nwhenever you're inside of an event context (templates, routes, bind).</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>var app = $.sammy(function() {\n\n  helpers({\n    upcase: function(text) {\n     return text.toString().toUpperCase();\n    }\n  });\n\n  get('#/', function() { with(this) {\n    // inside of this context I can use the helpers\n    $('#main').html(upcase($('#main').text());\n  }});\n\n});\n</code></pre>\n\n<h3>Arguments</h3>\n\n<ul>\n<li><code>extensions</code> An object collection of functions to extend the context.</li>\n</ul>\n\n"
        },
        {
          "name": "isRunning",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 873,
          "doc": "<p>Returns <code>true</code> if the current application is running.</p>\n"
        },
        {
          "name": "log",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 543,
          "doc": "<p>provide log() override for inside an app that includes the relevant application element_selector</p>\n"
        },
        {
          "name": "lookupRoute",
          "args": [
            "verb",
            "path"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1049,
          "doc": "<p>Given a verb and a String path, will return either a route object or false\nif a matching route can be found within the current defined set.</p>\n"
        },
        {
          "name": "mapRoutes",
          "args": [
            "route_array"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 650,
          "doc": "<p><code>mapRoutes</code> takes an array of arrays, each array being passed to route()\nas arguments, this allows for mass definition of routes. Another benefit is\nthis makes it possible/easier to load routes via remote JSON.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> var app = $.sammy(function() {\n\n   this.mapRoutes([\n       ['get', '#/', function() { this.log('index'); }],\n       // strings in callbacks are looked up as methods on the app\n       ['post', '#/create', 'addUser'],\n       // No verb assumes 'any' as the verb\n       [/dowhatever/, function() { this.log(this.verb, this.path)}];\n     ]);\n });\n</code></pre>\n"
        },
        {
          "name": "notFound",
          "args": [
            "verb",
            "path"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1334,
          "doc": "<p>This throws a '404 Not Found' error by invoking <code>error()</code>.\nOverride this method or <code>error()</code> to provide custom\n404 behavior (i.e redirecting to / or showing a warning)</p>\n"
        },
        {
          "name": "onComplete",
          "args": [
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 867,
          "doc": "<p>Adds a onComplete function to the application. onComplete functions are executed\nat the end of a chain of route callbacks, if they call next(). Unlike after,\nwhich is called as soon as the route is complete, onComplete is like a final next()\nfor all routes, and is thus run asynchronously</p>\n\n<h3>Example</h3>\n\n<p>app.get('/chain',function(context,next){</p>\n\n<pre class='prettyprint'><code>console.log('chain1');\n</code></pre>\n\n<p>   next();\n},function(context,next){</p>\n\n<pre class='prettyprint'><code>console.log('chain2');\n</code></pre>\n\n<p>   next();\n});\napp.get('/link',function(context,next){</p>\n\n<pre class='prettyprint'><code>console.log('link1');\n</code></pre>\n\n<p>   next();\n},function(context,next){</p>\n\n<pre class='prettyprint'><code>console.log('link2');\n</code></pre>\n\n<p>   next();\n});\napp.onComplete(function(){</p>\n\n<pre class='prettyprint'><code>console.log(\"Running finally\")\n</code></pre>\n\n<p>});</p>\n\n<p>If you go to '/chain', you will get the following messages:\n  chain1\n  chain2\n  Running onComplete</p>\n\n<p>If you go to /link, you will get the following messages:\n  link1\n  link2\n  Running onComplete</p>\n\n<p>It really comes to play when doing asynchronous:\napp.get('/chain',function(context,next){\n   $.get('/my/url',function(){</p>\n\n<pre class='prettyprint'><code>  console.log('chain1');\n next();\n</code></pre>\n\n<p>   })\n},function(context,next){</p>\n\n<pre class='prettyprint'><code>console.log('chain2');\n</code></pre>\n\n<p>   next();\n});</p>\n"
        },
        {
          "name": "post",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 622,
          "doc": "<p>Alias for route('post', ...)</p>\n"
        },
        {
          "name": "put",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 625,
          "doc": "<p>Alias for route('put', ...)</p>\n"
        },
        {
          "name": "refresh",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 719,
          "doc": "<p>Reruns the current route</p>\n"
        },
        {
          "name": "routablePath",
          "args": [
            "path"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1043,
          "doc": "<p>Returns a copy of the given path with any query string after the hash\nremoved.</p>\n"
        },
        {
          "name": "route",
          "args": [
            "verb",
            "path"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 565,
          "doc": "<p><code>route()</code> is the main method for defining routes within an application.\nFor great detail on routes, check out:\n<a href=\"http://sammyjs.org/docs/routes\">http://sammyjs.org/docs/routes</a></p>\n\n<p>This method also has aliases for each of the different verbs (eg. <code>get()</code>, <code>post()</code>, etc.)</p>\n\n<h3>Arguments</h3>\n\n<ul>\n<li><code>verb</code> A String in the set of ROUTE_VERBS or 'any'. 'any' will add routes for each\n of the ROUTE_VERBS. If only two arguments are passed,\n the first argument is the path, the second is the callback and the verb\n is assumed to be 'any'.</li>\n<li><code>path</code> A Regexp or a String representing the path to match to invoke this verb.</li>\n<li><code>callback</code> A Function that is called/evaluated when the route is run see: <code>runRoute()</code>.\n It is also possible to pass a string as the callback, which is looked up as the name\n of a method on the application.</li>\n</ul>\n\n"
        },
        {
          "name": "run",
          "args": [
            "start_url"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 952,
          "doc": "<p>Actually starts the application's lifecycle. <code>run()</code> should be invoked\nwithin a document.ready block to ensure the DOM exists before binding events, etc.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>var app = $.sammy(function() { ... }); // your application\n$(function() { // document.ready\n   app.run();\n});\n</code></pre>\n\n<h3>Arguments</h3>\n\n<ul>\n<li><code>start_url</code> Optionally, a String can be passed which the App will redirect to\nafter the events/routes have been bound.</li>\n</ul>\n\n"
        },
        {
          "name": "runRoute",
          "args": [
            "verb",
            "path",
            "params",
            "target"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1083,
          "doc": "<p>First, invokes <code>lookupRoute()</code> and if a route is found, parses the\npossible URL params and then invokes the route's callback within a new\n<code>Sammy.EventContext</code>. If the route can not be found, it calls\n<code>notFound()</code>. If <code>raise_errors</code> is set to <code>true</code> and\nthe <code>error()</code> has not been overridden, it will throw an actual JS\nerror.</p>\n\n<p>You probably will never have to call this directly.</p>\n\n<h3>Arguments</h3>\n\n<ul>\n<li><code>verb</code> A String for the verb.</li>\n<li><code>path</code> A String path to lookup.</li>\n<li><code>params</code> An Object of Params pulled from the URI or passed directly.</li>\n</ul>\n\n\n<h3>Returns</h3>\n\n<p>Either returns the value returned by the route callback or raises a 404 Not Found error.</p>\n"
        },
        {
          "name": "setLocation",
          "args": [
            "new_location"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1282,
          "doc": "<p>Delegates to the <code>location_proxy</code> to set the current location.\nSee <code>Sammy.DefaultLocationProxy</code> for more info on location proxies.</p>\n\n<h3>Arguments</h3>\n\n<ul>\n<li><code>new_location</code> A new location string (e.g. '#/')</li>\n</ul>\n\n"
        },
        {
          "name": "setLocationProxy",
          "args": [
            "new_proxy"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 530,
          "doc": "<p>Sets the location proxy for the current app. By default this is set to\na new <code>Sammy.DefaultLocationProxy</code> on initialization. However, you can set\nthe location_proxy inside you're app function to give your app a custom\nlocation mechanism. See <code>Sammy.DefaultLocationProxy</code> and <code>Sammy.DataLocationProxy</code>\nfor examples.</p>\n\n<p><code>setLocationProxy()</code> takes an initialized location proxy.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>   // to bind to data instead of the default hash;\n   var app = $.sammy(function() {\n     this.setLocationProxy(new Sammy.DataLocationProxy(this));\n   });\n</code></pre>\n"
        },
        {
          "name": "swap",
          "args": [
            "content",
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1309,
          "doc": "<p>Swaps the content of <code>$element()</code> with <code>content</code>\nYou can override this method to provide an alternate swap behavior\nfor <code>EventContext.partial()</code>.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> var app = $.sammy(function() {\n\n   // implements a 'fade out'/'fade in'\n   this.swap = function(content, callback) {\n     var context = this;\n     context.$element().fadeOut('slow', function() {\n       context.$element().html(content);\n       context.$element().fadeIn('slow', function() {\n         if (callback) {\n           callback.apply();\n         }\n       });\n     });\n   };\n\n });\n</code></pre>\n"
        },
        {
          "name": "templateCache",
          "args": [
            "key",
            "value"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1318,
          "doc": "<p>a simple global cache for templates. Uses the same semantics as\n<code>Sammy.Cache</code> and <code>Sammy.Storage</code> so can easily be replaced with\na persistent storage that lasts beyond the current request.</p>\n"
        },
        {
          "name": "toString",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 438,
          "doc": "<p>//=> Sammy.Application: body</p>\n"
        },
        {
          "name": "trigger",
          "args": [
            "name",
            "data"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 713,
          "doc": "<p>Triggers custom events defined with <code>bind()</code></p>\n\n<h3>Arguments</h3>\n\n<ul>\n<li><code>name</code> The name of the event. Automatically prefixed with the <code>eventNamespace()</code></li>\n<li><code>data</code> An optional Object that can be passed to the bound callback.</li>\n<li><code>context</code> An optional context/Object in which to execute the bound callback.\nIf no context is supplied a the context is a new <code>Sammy.EventContext</code></li>\n</ul>\n\n"
        },
        {
          "name": "unload",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 996,
          "doc": "<p>The opposite of <code>run()</code>, un-binds all event listeners and intervals\n<code>run()</code> Automatically binds a <code>onunload</code> event to run this when\nthe document is closed.</p>\n"
        },
        {
          "name": "use",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 491,
          "doc": "<p><code>use()</code> is the entry point for including Sammy plugins.\nThe first argument to use should be a function() that is evaluated\nin the context of the current application, just like the <code>app_function</code>\nargument to the <code>Sammy.Application</code> constructor.</p>\n\n<p>Any additional arguments are passed to the app function sequentially.</p>\n\n<p>For much more detail about plugins, check out:\n<a href=\"http://sammyjs.org/docs/plugins\">http://sammyjs.org/docs/plugins</a></p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> var MyPlugin = function(app, prepend) {\n\n   this.helpers({\n     myhelper: function(text) {\n       alert(prepend + \" \" + text);\n     }\n   });\n\n };\n\n var app = $.sammy(function() {\n\n   this.use(MyPlugin, 'This is my plugin');\n\n   this.get('#/', function() {\n     this.myhelper('and dont you forget it!');\n     //=&gt; Alerts: This is my plugin and dont you forget it!\n   });\n\n });\n</code></pre>\n\n<p>If plugin is passed as a string it assumes your are trying to load\nSammy.\"Plugin\". This is the preferred way of loading core Sammy plugins\nas it allows for better error-messaging.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> $.sammy(function() {\n   this.use('Mustache'); //=&gt; Sammy.Mustache\n   this.use('Storage'); //=&gt; Sammy.Storage\n });\n</code></pre>\n"
        }
      ],
      "attributes": [
        {
          "name": "APP_EVENTS",
          "default": "['run', 'unload', 'lookup-route', 'run-route', 'route-found', 'event-context-before', 'event-context-after', 'changed', 'error', 'check-form-submission', 'redirect', 'location-changed']",
          "filename": "/lib/sammy.js",
          "lineno": 404,
          "doc": "<p>An array of the default events triggered by the\napplication during its lifecycle</p>\n"
        },
        {
          "name": "ROUTE_VERBS",
          "default": "['get','post','put','delete']",
          "filename": "/lib/sammy.js",
          "lineno": 400,
          "doc": "<p>the four route verbs</p>\n"
        },
        {
          "name": "debug",
          "default": "false",
          "filename": "/lib/sammy.js",
          "lineno": 415,
          "doc": "<p>When set to true, logs all of the default events using <code>log()</code></p>\n"
        },
        {
          "name": "disable_push_state",
          "default": "false",
          "filename": "/lib/sammy.js",
          "lineno": 426,
          "doc": "<p>if using the <code>DefaultLocationProxy</code> setting this to true will force the app to use\ntraditional hash based routing as opposed to the new HTML5 PushState support</p>\n"
        },
        {
          "name": "element_selector",
          "default": "'body'",
          "filename": "/lib/sammy.js",
          "lineno": 412,
          "doc": "<p>Defines what element the application is bound to. Provide a selector\n(parseable by <code>jQuery()</code>) and this will be used by <code>$element()</code></p>\n"
        },
        {
          "name": "raise_errors",
          "default": "false",
          "filename": "/lib/sammy.js",
          "lineno": 419,
          "doc": "<p>When set to true, and the error() handler is not overridden, will actually\nraise JS errors in routes (500) and when routes can't be found (404)</p>\n"
        },
        {
          "name": "run_interval_every",
          "default": "50",
          "filename": "/lib/sammy.js",
          "lineno": 422,
          "doc": "<p>The time in milliseconds that the URL is queried for changes</p>\n"
        },
        {
          "name": "template_engine",
          "default": "null",
          "filename": "/lib/sammy.js",
          "lineno": 435,
          "doc": "<p>The default template engine to use when using <code>partial()</code> in an\n<code>EventContext</code>. <code>template_engine</code> can either be a string that\ncorresponds to the name of a method/helper on EventContext or it can be a function\nthat takes two arguments, the content of the unrendered partial and an optional\nJS object that contains interpolation data. Template engine is only called/referred\nto if the extension of the partial is null or unknown. See <code>partial()</code>\nfor more information</p>\n"
        }
      ],
      "plugin": null
    }
  ],
  [
    "Sammy.Cache",
    {
      "name": "Sammy.Cache",
      "args": [
        "app",
        "options"
      ],
      "doc": "<p>Sammy.Cache provides helpers for caching data within the lifecycle of a\nSammy app. The plugin provides two main methods on <code>Sammy.Application</code>,\n<code>cache</code> and <code>clearCache</code>. Each app has its own cache store so that\nyou dont have to worry about collisions. As of 0.5 the original Sammy.Cache module\nhas been deprecated in favor of this one based on Sammy.Storage. The exposed\nAPI is almost identical, but Sammy.Storage provides additional backends including\nHTML5 Storage. <code>Sammy.Cache</code> will try to use these backends when available\n(in this order) <code>LocalStorage</code>, <code>SessionStorage</code>, and <code>Memory</code></p>\n",
      "filename": "/lib/plugins/sammy.storage.js",
      "lineno": 573,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.DataCacheProxy",
    {
      "name": "Sammy.DataCacheProxy",
      "args": [
        "initial",
        "$element"
      ],
      "doc": "<p>A simple cache strategy that stores key/values <tt>$element.data()</tt> with a <tt>cache.</tt> prefix</p>\n",
      "filename": "/lib/plugins/sammy.cache.js",
      "lineno": 31,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.DataLocationProxy",
    {
      "name": "Sammy.DataLocationProxy",
      "args": [
        "app",
        "data_name",
        "href_attribute"
      ],
      "doc": "<p>The DataLocationProxy is an optional location proxy prototype. As opposed to\nthe <code>HashLocationProxy</code> it gets its location from a jQuery.data attribute\ntied to the application's element. You can set the name of the attribute by\npassing a string as the second argument to the constructor. The default attribute\nname is 'sammy-location'. To read more about location proxies, check out the\ndocumentation for <code>Sammy.HashLocationProxy</code></p>\n\n<p>An optional <code>href_attribute</code> can be passed, which specifies a DOM element\nattribute that holds \"links\" to different locations in the app. When the\nproxy is bound, clicks to element that have this attribute activate a\n<code>setLocation()</code> using the contents of the <code>href_attribute</code>.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> var app = $.sammy(function() {\n   // set up the location proxy\n   this.setLocationProxy(new Sammy.DataLocationProxy(this, 'location', 'rel'));\n\n   this.get('about', function() {\n     this.partial('about.html');\n   });\n\n });\n</code></pre>\n\n<p>In this scenario, if an element existed within the template:</p>\n\n<pre class='prettyprint'><code> &lt;a href=\"/about\" rel=\"about\"&gt;About Us&lt;/a&gt;\n</code></pre>\n\n<p>Clicking on that link would not go to /about, but would set the apps location\nto 'about' and trigger the route.</p>\n",
      "filename": "/lib/plugins/sammy.data_location_proxy.js",
      "lineno": 39,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.DefaultLocationProxy",
    {
      "name": "Sammy.DefaultLocationProxy",
      "args": [
        "app",
        "run_interval_every"
      ],
      "doc": "<p>The DefaultLocationProxy is the default location proxy for all Sammy applications.\nA location proxy is a prototype that conforms to a simple interface. The purpose\nof a location proxy is to notify the Sammy.Application its bound to when the location\nor 'external state' changes.</p>\n\n<p>The <code>DefaultLocationProxy</code> watches for changes to the path of the current window and\nis also able to set the path based on changes in the application. It does this by\nusing different methods depending on what is available in the current browser. In\nthe latest and greatest browsers it used the HTML5 History API and the <code>pushState</code>\n<code>popState</code> events/methods. This allows you to use Sammy to serve a site behind normal\nURI paths as opposed to the older default of hash (#) based routing. Because the server\ncan interpret the changed path on a refresh or re-entry, though, it requires additional\nsupport on the server side. If you'd like to force disable HTML5 history support, please\nuse the <code>disable_push_state</code> setting on <code>Sammy.Application</code>. If pushState support\nis enabled, <code>DefaultLocationProxy</code> also binds to all links on the page. If a link is clicked\nthat matches the current set of routes, the URL is changed using pushState instead of\nfully setting the location and the app is notified of the change.</p>\n\n<p>If the browser does not have support for HTML5 History, <code>DefaultLocationProxy</code> automatically\nfalls back to the older hash based routing. The newest browsers (IE, Safari > 4, FF >= 3.6)\nsupport a 'onhashchange' DOM event, thats fired whenever the location.hash changes.\nIn this situation the DefaultLocationProxy just binds to this event and delegates it to\nthe application. In the case of older browsers a poller is set up to track changes to the\nhash.</p>\n",
      "filename": "/lib/sammy.js",
      "lineno": 253,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": null
    }
  ],
  [
    "Sammy.EJS",
    {
      "name": "Sammy.EJS",
      "args": [
        "app",
        "method_alias"
      ],
      "doc": "<p><code>Sammy.EJS</code> is a thin wrapper around the EJS templating engine which can be donwloaded\nat http://embeddedjs.com/</p>\n\n<p>Note: As of Sammy 0.7, Sammy.EJS does not include the actual templating engine in the source.\nInclude ejs.js before including sammy.ejs.js</p>\n",
      "filename": "/lib/plugins/sammy.ejs.js",
      "lineno": 14,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.EventContext",
    {
      "name": "Sammy.EventContext",
      "args": [
        "app",
        "verb",
        "path",
        "params",
        "target"
      ],
      "doc": "<p><code>Sammy.EventContext</code> objects are created every time a route is run or a\nbound event is triggered. The callbacks for these events are evaluated within a <code>Sammy.EventContext</code>\nThis within these callbacks the special methods of <code>EventContext</code> are available.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>  $.sammy(function() {\n    // The context here is this Sammy.Application\n    this.get('#/:name', function() {\n      // The context here is a new Sammy.EventContext\n      if (this.params['name'] == 'sammy') {\n        this.partial('name.html.erb', {name: 'Sammy'});\n      } else {\n        this.redirect('#/somewhere-else')\n      }\n    });\n  });\n</code></pre>\n\n<p>Initialize a new EventContext</p>\n\n<h3>Arguments</h3>\n\n<ul>\n<li><code>app</code> The <code>Sammy.Application</code> this event is called within.</li>\n<li><code>verb</code> The verb invoked to run this context/route.</li>\n<li><code>path</code> The string path invoked to run this context/route.</li>\n<li><code>params</code> An Object of optional params to pass to the context. Is converted\nto a <code>Sammy.Object</code>.</li>\n<li><code>target</code> a DOM element that the event that holds this context originates\nfrom. For post, put and del routes, this is the form element that triggered\nthe route.</li>\n</ul>\n\n",
      "filename": "/lib/sammy.js",
      "lineno": 1932,
      "methods": [
        {
          "name": "$element",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 1943,
          "doc": "<p>A shortcut to the app's <code>$element()</code></p>\n"
        },
        {
          "name": "engineFor",
          "args": [
            "engine"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1957,
          "doc": "<p>Look up a templating engine within the current app and context.\n<code>engine</code> can be one of the following:</p>\n\n<ul>\n<li>a function: should conform to <code>function(content, data) { return interpolated; }</code></li>\n<li>a template path: 'template.ejs', looks up the extension to match to\nthe <code>ejs()</code> helper</li>\n<li>a string referring to the helper: \"mustache\" => <code>mustache()</code></li>\n</ul>\n\n\n<p>If no engine is found, use the app's default <code>template_engine</code></p>\n"
        },
        {
          "name": "eventNamespace",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 2091,
          "doc": "<p>A shortcut to app's <code>eventNamespace()</code></p>\n"
        },
        {
          "name": "interpolate",
          "args": [
            "content",
            "data",
            "engine",
            "partials"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1979,
          "doc": "<p>using the template <code>engine</code> found with <code>engineFor()</code>, interpolate the\n<code>data</code> into <code>content</code></p>\n"
        },
        {
          "name": "json",
          "args": [
            "string"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 2107,
          "doc": "<p>Default JSON parsing uses jQuery's <code>parseJSON()</code>. Include <code>Sammy.JSON</code>\nplugin for the more conformant \"crockford special\".</p>\n"
        },
        {
          "name": "load",
          "args": [
            "location",
            "options",
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 2019,
          "doc": "<p>create a new <code>Sammy.RenderContext</code> calling <code>load()</code> with <code>location</code> and\n<code>options</code>. Called without interpolation or placement, this allows for\npreloading/caching the templates.</p>\n"
        },
        {
          "name": "loadPartials",
          "args": [
            "partials"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 2024,
          "doc": "<p>create a new <code>Sammy.RenderContext</code> calling <code>loadPartials()</code> with <code>partials</code>.</p>\n"
        },
        {
          "name": "notFound",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 2101,
          "doc": "<p>Raises a possible <code>notFound()</code> error for the current path.</p>\n"
        },
        {
          "name": "partial",
          "args": [
            "location",
            "data",
            "callback",
            "partials"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 2030,
          "doc": "<p><code>render()</code> the <code>location</code> with <code>data</code> and then <code>swap()</code> the\napp's <code>$element</code> with the rendered content.</p>\n"
        },
        {
          "name": "redirect",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 2051,
          "doc": "<p>Changes the location of the current window. If <code>to</code> begins with\n'#' it only changes the document's hash. If passed more than 1 argument\nredirect will join them together with forward slashes.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> redirect('#/other/route');\n // equivalent to\n redirect('#', 'other', 'route');\n</code></pre>\n"
        },
        {
          "name": "render",
          "args": [
            "location",
            "data",
            "callback",
            "partials"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1996,
          "doc": "<p>Create and return a <code>Sammy.RenderContext</code> calling <code>render()</code> on it.\nLoads the template and interpolate the data, however does not actual\nplace it in the DOM.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> // mytemplate.mustache &lt;div class=\"name\"&gt;{{name}}&lt;/div&gt;\n render('mytemplate.mustache', {name: 'quirkey'});\n // sets the `content` to &lt;div class=\"name\"&gt;quirkey&lt;/div&gt;\n render('mytemplate.mustache', {name: 'quirkey'})\n   .appendTo('ul');\n // appends the rendered content to $('ul')\n</code></pre>\n"
        },
        {
          "name": "renderEach",
          "args": [
            "location",
            "name",
            "data",
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 2012,
          "doc": "<p>Create and return a <code>Sammy.RenderContext</code> calling <code>renderEach()</code> on it.\nLoads the template and interpolates the data for each item,\nhowever does not actual place it in the DOM.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> // mytemplate.mustache &lt;div class=\"name\"&gt;{{name}}&lt;/div&gt;\n renderEach('mytemplate.mustache', [{name: 'quirkey'}, {name: 'endor'}])\n // sets the `content` to &lt;div class=\"name\"&gt;quirkey&lt;/div&gt;&lt;div class=\"name\"&gt;endor&lt;/div&gt;\n renderEach('mytemplate.mustache', [{name: 'quirkey'}, {name: 'endor'}]).appendTo('ul');\n // appends the rendered content to $('ul')\n</code></pre>\n"
        },
        {
          "name": "send",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 2036,
          "doc": "<p>create a new <code>Sammy.RenderContext</code> calling <code>send()</code> with an arbitrary\nfunction</p>\n"
        },
        {
          "name": "swap",
          "args": [
            "contents",
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 2096,
          "doc": "<p>A shortcut to app's <code>swap()</code></p>\n"
        },
        {
          "name": "toString",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 2112,
          "doc": "<p>//=> Sammy.EventContext: get #/ {}</p>\n"
        },
        {
          "name": "trigger",
          "args": [
            "name",
            "data"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 2084,
          "doc": "<p>Triggers events on <code>app</code> within the current context.</p>\n"
        }
      ],
      "attributes": [

      ],
      "plugin": null
    }
  ],
  [
    "Sammy.Exceptional",
    {
      "name": "Sammy.Exceptional",
      "args": [
        "app",
        "errorReporter"
      ],
      "doc": "<p>A plugin that posts errors to Exceptional.</p>\n\n<h3>Arguments</h3>\n\n<p>Sammy.Exceptional accepts an optional argument that is the Exceptional\nimplementation. It will default to the global <code>Exceptional</code> object.</p>\n\n<h3>Requirements</h3>\n\n<p>The sole requirement is a global Exceptional object with a handle\nfunction. Contrast have published an implementation (see below).</p>\n\n<h3>See Also</h3>\n\n<ul>\n<li>http://www.getexceptional.com/</li>\n<li>https://github.com/contrast/exceptional-js</li>\n</ul>\n\n",
      "filename": "/lib/plugins/sammy.exceptional.js",
      "lineno": 24,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Flash",
    {
      "name": "Sammy.Flash",
      "args": [
        "app"
      ],
      "doc": "<p>Sammy.Flash is a plugin for storing and sending status messages to the client. It's API and use\nis similar to Ruby on Rails' <code>flash</code> explained here:\n<a href=\"http://apidock.com/rails/ActionController/Flash\">http://apidock.com/rails/ActionController/Flash</a></p>\n",
      "filename": "/lib/plugins/sammy.flash.js",
      "lineno": 66,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Form",
    {
      "name": "Sammy.Form",
      "args": [
        "app"
      ],
      "doc": "<p>Sammy.Form is a Sammy plugin that adds form building helpers to a\nSammy.Application</p>\n",
      "filename": "/lib/plugins/sammy.form.js",
      "lineno": 229,
      "methods": [
        {
          "name": "formFor",
          "args": [
            "name",
            "object",
            "content_callback"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 268,
          "doc": "<p>formFor creates a Sammy.Form builder object with the passed <code>name</code>\nand <code>object</code> and passes it as an argument to the <code>content_callback</code>.\nThis is a shortcut for creating FormBuilder objects for use within\ntemplates.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> // in item_form.template\n\n &lt;% formFor('item', item, function(f) { %&gt;\n   &lt;%= f.open({action: '#/items'}) %&gt;\n   &lt;p&gt;\n     &lt;%= f.label('name') %&gt;\n     &lt;%= f.text('name') %&gt;\n   &lt;/p&gt;\n   &lt;p&gt;\n     &lt;%= f.submit() %&gt;\n   &lt;/p&gt;\n   &lt;%= f.close() %&gt;\n &lt;% }); %&gt;\n</code></pre>\n\n<p>Note: If you're using the <code>Sammy.Template</code> plugin for templating as above,\nyou need to turn off the automatic html escaping for this to work. See\nthe docs for <code>Sammy.Template</code> for more information.</p>\n"
        }
      ],
      "attributes": [
        {
          "name": "simple_element",
          "default": "simple_element",
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 242,
          "doc": "<p>simple_element is a simple helper for creating HTML tags.</p>\n\n<h3>Arguments</h3>\n\n<ul>\n<li><code>tag</code> the HTML tag to generate e.g. input, p, etc/</li>\n<li><code>attributes</code> an object representing the attributes of the element as\nkey value pairs. e.g. {class: 'element-class'}</li>\n<li><code>content</code> an optional string representing the content for the\nthe element. If ommited, the element becomes self closing</li>\n</ul>\n\n"
        }
      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.FormBuilder",
    {
      "name": "Sammy.FormBuilder",
      "args": [
        "name",
        "object"
      ],
      "doc": "<p>Sammy.FormBuilder is based very closely on the Rails FormBuilder classes.\nIts goal is to make it easy to create HTML forms for creating and editing\nJavaScript objects. It eases the process by auto-populating existing values\ninto form inputs and creating input names suitable for parsing by\nSammy.NestedParams and other backend frameworks.</p>\n\n<p>You initialize a Sammy.FormBuilder by passing the 'name' of the object and\nthe object itself. Once initialized you create form elements with the object's\nprototype methods. Each of these methods returns a string of HTML suitable for\nappending through a template or directly with jQuery.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> var item = {\n   name: 'My Item',\n   price: '$25.50',\n   meta: {\n     id: '123'\n   }\n };\n var form = new Sammy.FormBuilder('item', item);\n form.text('name');\n //=&gt; &lt;input type='text' name='item[form]' value='My Item' /&gt;\n</code></pre>\n\n<p>Nested attributes can be accessed/referred to by a 'keypath' which is\nbasically a string representation of the dot notation.</p>\n\n<pre class='prettyprint'><code> form.hidden('meta.id');\n //=&gt; &lt;input type='hidden' name='item[meta][id]' value='123' /&gt;\n</code></pre>\n",
      "filename": "/lib/plugins/sammy.form.js",
      "lineno": 72,
      "methods": [
        {
          "name": "checkbox",
          "args": [
            "keypath",
            "value",
            "attributes"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 187,
          "doc": "<p>creates a checkbox input for keypath with the value <code>value</code>. Multiple\ncheckboxes can be created with different value, if <code>value</code> equals the\ncurrent value of the key of the form builder's object the attribute\nchecked='checked' will be added.</p>\n\n<p>By default <code>checkbox()</code> also generates a hidden element whose value is\nthe inverse of the value given. This is known hack to get around a common\ngotcha where browsers and jQuery itself does not include 'unchecked'\nelements in the list of submittable inputs. This ensures that a value\nshould always be passed to Sammy and hence the server. You can disable\nthe creation of the hidden element by setting the <code>hidden_element</code> attribute\nto <code>false</code></p>\n"
        },
        {
          "name": "close",
          "args": [

          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 85,
          "doc": "<p>closes the form</p>\n"
        },
        {
          "name": "hidden",
          "args": [
            "keypath",
            "attributes"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 97,
          "doc": "<p>creates a hidden input for <code>keypath</code> with an optional <code>attributes</code> object</p>\n"
        },
        {
          "name": "label",
          "args": [
            "keypath",
            "content",
            "attributes"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 91,
          "doc": "<p>creates a label for <code>keypath</code> with the text <code>content\nwith an optional</code>attributes` object</p>\n"
        },
        {
          "name": "open",
          "args": [
            "attributes"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 80,
          "doc": "<p>creates the open form tag with the object attributes</p>\n"
        },
        {
          "name": "password",
          "args": [
            "keypath",
            "attributes"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 118,
          "doc": "<p>creates a password input for <code>keypath</code> with an optional <code>attributes</code> object</p>\n"
        },
        {
          "name": "radio",
          "args": [
            "keypath",
            "value",
            "attributes"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 164,
          "doc": "<p>creates a radio input for keypath with the value <code>value</code>. Multiple\nradios can be created with different value, if <code>value</code> equals the\ncurrent value of the key of the form builder's object the attribute\nchecked='checked' will be added.</p>\n"
        },
        {
          "name": "select",
          "args": [
            "keypath",
            "options",
            "attributes"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 138,
          "doc": "<p>creates a select element for <code>keypath</code> with the option elements\nspecified by an array in <code>options</code>. If <code>options</code> is an array of arrays,\nthe first element in each subarray becomes the text of the option and the\nsecond becomes the value.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>var options = [\n  ['Small', 's'],\n  ['Medium', 'm'],\n  ['Large', 'l']\n];\nform.select('size', options);\n//=&gt; &lt;select name='item[size]'&gt;&lt;option value='s'&gt;Small&lt;/option&gt; ...\n</code></pre>\n"
        },
        {
          "name": "submit",
          "args": [
            "attributes"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 199,
          "doc": "<p>creates a submit input for <code>keypath</code> with an optional <code>attributes</code> object</p>\n"
        },
        {
          "name": "text",
          "args": [
            "keypath",
            "attributes"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 103,
          "doc": "<p>creates a text input for <code>keypath</code> with an optional <code>attributes</code> object</p>\n"
        },
        {
          "name": "textarea",
          "args": [
            "keypath",
            "attributes"
          ],
          "filename": "/lib/plugins/sammy.form.js",
          "lineno": 109,
          "doc": "<p>creates a textarea for <code>keypath</code> with an optional <code>attributes</code> object</p>\n"
        }
      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.GoogleAnalytics",
    {
      "name": "Sammy.GoogleAnalytics",
      "args": [
        "app",
        "tracker"
      ],
      "doc": "<p>A simple plugin that pings Google Analytics tracker\nevery time a route is triggered. Originally by Brit Gardner (britg),\nwith updates from Aaron Quint (quirkey).</p>\n\n<h3>Arguments</h3>\n\n<p>+tracker+:: the Google Analytics pageTracker object.  Defaults to\nthe default object defined by the GA snippet, or pass your own if you\nhave a custom install</p>\n\n<h3>Example</h3>\n\n<p>Install Google Analytics to your site as you normally would. Be sure that\nthe 'pageTracker' global variable exists.</p>\n\n<p>Then, simply add the plugin to your Sammy App and it will automatically\ntrack all of your routes in Google Analytics.\nThey will appear as page views to the route's path.</p>\n\n<pre class='prettyprint'><code> $.sammy(function() {\n   this.use('GoogleAnalytics');\n\n   ...\n });\n</code></pre>\n\n<p>If you have routes that you do not want to track, simply call <code>noTrack</code>\nwithin the route.</p>\n\n<pre class='prettyprint'><code> $.sammy(function() {\n   this.use('GoogleAnalytics')\n\n   this.get('#/dont/track/me', function() {\n     this.noTrack();  // This route will not be tracked\n   });\n });\n</code></pre>\n",
      "filename": "/lib/plugins/sammy.googleanalytics.js",
      "lineno": 45,
      "methods": [
        {
          "name": "noTrack",
          "args": [

          ],
          "filename": "/lib/plugins/sammy.googleanalytics.js",
          "lineno": 68,
          "doc": "<p>Disable tracking for the current route. Put at the begining of the\nroute's callback</p>\n"
        },
        {
          "name": "track",
          "args": [
            "path"
          ],
          "filename": "/lib/plugins/sammy.googleanalytics.js",
          "lineno": 72,
          "doc": "<p>send a page view to the tracker with <code>path</code></p>\n"
        }
      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Haml",
    {
      "name": "Sammy.Haml",
      "args": [
        "app",
        "method_alias"
      ],
      "doc": "<p><code>Sammy.Haml</code> provides a quick way of using haml style templates in your app.\nThe plugin wraps haml-js library created by Tim Caswell at\nat http://github.com/creationix/haml-js</p>\n\n<p>Note: As of Sammy 0.7, Sammy.Haml does not include the actual templating engine in the source.\nInclude haml.js before including sammy.haml.js</p>\n\n<p>Haml is an alternative HTML syntax that is really great for describing\nthe structure of HTML documents.</p>\n\n<p>By default using Sammy.Haml in your app adds the <tt>haml()</tt> method to the EventContext\nprototype. However, just like <code>Sammy.Template</code> you can change the default name of the method\nby passing a second argument (e.g. you could use the hml() as the method alias so that all the template\nfiles could be in the form file.hml instead of file.haml)</p>\n\n<h3>Example</h3>\n\n<p>The template (mytemplate.haml):</p>\n\n<pre class='prettyprint'><code>  %h1&amp;= title\n\n  Hey, #{name}! Welcome to Haml!\n</code></pre>\n\n<p>The app:</p>\n\n<pre class='prettyprint'><code>  var app = $.sammy(function() {\n    // include the plugin\n    this.use(Sammy.Haml);\n\n    this.get('#/hello/:name', function() {\n      // set local vars\n      this.title = 'Hello!'\n      this.name = this.params.name;\n      // render the template and pass it through haml\n      this.partial('mytemplate.haml');\n    });\n  });\n\n  $(function() {\n    app.run()\n  });\n</code></pre>\n\n<p>If I go to <code>#/hello/AQ</code> in the browser, Sammy will render this to the <code>body</code>:</p>\n\n<pre class='prettyprint'><code>  &lt;h1&gt;Hello!&lt;/h1&gt;\n\n  Hey, AQ! Welcome to HAML!\n</code></pre>\n\n<p>Note: You dont have to include the haml.js file on top of the plugin as the plugin\nincludes the full source.</p>\n",
      "filename": "/lib/plugins/sammy.haml.js",
      "lineno": 60,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Handlebars",
    {
      "name": "Sammy.Handlebars",
      "args": [
        "app",
        "method_alias"
      ],
      "doc": "<p><tt>Sammy.Handlebars</tt> provides a quick way of using Handlebars templates in your app.</p>\n\n<p>Note: As of Sammy 0.7 Handlebars itself is not included in the source. Please download and\ninclude handlebars.js before Sammy.Handlebars.</p>\n\n<p>Handlebars.js is an extension to the Mustache templating language created by Chris Wanstrath. Handlebars.js\nand Mustache are both logicless templating languages that keep the view and the code separated like\nwe all know they should be.</p>\n\n<p>By default using Sammy.Handlbars in your app adds the <tt>handlebars()</tt> method to the EventContext\nprototype. However, just like <tt>Sammy.Template</tt> you can change the default name of the method\nby passing a second argument (e.g. you could use the hbr() as the method alias so that all the template\nfiles could be in the form file.hbr instead of file.handlebars)</p>\n\n<h3>Example #1</h3>\n\n<p>The template (mytemplate.hb):</p>\n\n<pre class='prettyprint'><code>  &lt;h1&gt;{{title}}&lt;h1&gt;\n\n  Hey, {{name}}! Welcome to Handlebars!\n</code></pre>\n\n<p>The app:</p>\n\n<pre class='prettyprint'><code>  var app = $.sammy(function() {\n    // include the plugin and alias handlebars() to hb()\n    this.use('Handlebars', 'hb');\n\n    this.get('#/hello/:name', function() {\n      // set local vars\n      this.title = 'Hello!'\n      this.name = this.params.name;\n      // render the template and pass it through handlebars\n      this.partial('mytemplate.hb');\n    });\n  });\n\n  $(function() {\n    app.run()\n  });\n</code></pre>\n\n<p>If I go to #/hello/AQ in the browser, Sammy will render this to the <tt>body</tt>:</p>\n\n<pre class='prettyprint'><code>  &lt;h1&gt;Hello!&lt;/h1&gt;\n\n  Hey, AQ! Welcome to Handlebars!\n</code></pre>\n\n<h3>Example #2 - Handlebars partials</h3>\n\n<p>The template (mytemplate.hb)</p>\n\n<pre class='prettyprint'><code>  Hey, {{name}}! {{&gt;hello_friend}}\n</code></pre>\n\n<p>The partial (mypartial.hb)</p>\n\n<pre class='prettyprint'><code>  Say hello to your friend {{friend}}!\n</code></pre>\n\n<p>The app:</p>\n\n<pre class='prettyprint'><code>  var app = $.sammy(function() {\n    // include the plugin and alias handlebars() to hb()\n    this.use('Handlebars', 'hb');\n\n    this.get('#/hello/:name/to/:friend', function(context) {\n      // fetch handlebars-partial first\n      this.load('mypartial.hb')\n          .then(function(partial) {\n            // set local vars\n            context.partials = {hello_friend: partial};\n            context.name = context.params.name;\n            context.friend = context.params.friend;\n\n            // render the template and pass it through handlebars\n            context.partial('mytemplate.hb');\n          });\n    });\n  });\n\n  $(function() {\n    app.run()\n  });\n</code></pre>\n\n<p>If I go to #/hello/AQ/to/dP in the browser, Sammy will render this to the <tt>body</tt>:</p>\n\n<pre class='prettyprint'><code>  Hey, AQ! Say hello to your friend dP!\n</code></pre>\n\n<p>Note: You dont have to include the handlebars.js file on top of the plugin as the plugin\nincludes the full source.</p>\n",
      "filename": "/lib/plugins/sammy.handlebars.js",
      "lineno": 100,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Hogan",
    {
      "name": "Sammy.Hogan",
      "args": [
        "app",
        "method_alias"
      ],
      "doc": "<p><tt>Sammy.Hogan</tt> provides a quick way of using hogan.js style templates in your app.\nThe plugin wraps the awesome hogan.js lib created and maintained by Twitter\nat http://twitter.github.com/hogan.js/</p>\n\n<p>Note: As of Sammy 0.7 the Hogan.js lib is not included in the templates source. Please download\nhogan.js and include it before Sammy.Hogan.</p>\n\n<p>Hogan.js is a clever templating system that relys on double brackets {{}} for interpolation.\nFor full details on syntax check out the documentation at\nhttp://twitter.github.com/hogan.js/</p>\n\n<p>By default using Sammy.Hogan in your app adds the <tt>hogan()</tt> method to the EventContext\nprototype. However, just like <tt>Sammy.Hogan</tt> you can change the default name of the method\nby passing a second argument (e.g. you could use the hg() as the method alias so that all the template\nfiles could be in the form file.hg instead of file.hogan)</p>\n\n<h3>Example #1</h3>\n\n<p>The template (mytemplate.hg):</p>\n\n<pre class='prettyprint'><code>  &lt;h1&gt;{{title}}&lt;h1&gt;\n\n  Hey, {{name}}! Welcome to Mustache!\n</code></pre>\n\n<p>The app:</p>\n\n<pre class='prettyprint'><code>  var app = $.sammy(function() {\n    // include the plugin and alias hogan() to hg()\n    this.use('Hogan', 'hg');\n\n    this.get('#/hello/:name', function() {\n      // set local vars\n      this.title = 'Hello!'\n      this.name = this.params.name;\n      // render the template and pass it through hogan\n      this.partial('mytemplate.hg');\n    });\n  });\n\n  $(function() {\n    app.run()\n  });\n</code></pre>\n\n<p>If I go to #/hello/AQ in the browser, Sammy will render this to the <tt>body</tt>:</p>\n\n<pre class='prettyprint'><code>  &lt;h1&gt;Hello!&lt;/h1&gt;\n\n  Hey, AQ! Welcome to Mustache!\n</code></pre>\n\n<h3>Example #2 - Hogan partials</h3>\n\n<p>The template (mytemplate.hg)</p>\n\n<pre class='prettyprint'><code>  Hey, {{name}}! {{&gt;hello_friend}}\n</code></pre>\n\n<p>The partial (mypartial.hg)</p>\n\n<pre class='prettyprint'><code>  Say hello to your friend {{friend}}!\n</code></pre>\n\n<p>The app:</p>\n\n<pre class='prettyprint'><code>  var app = $.sammy(function() {\n    // include the plugin and alias hogan() to hg()\n    this.use('Hogan', 'hg');\n\n    this.get('#/hello/:name/to/:friend', function(context) {\n      // fetch hogan-partial first\n      this.load('mypartial.hg')\n          .then(function(partial) {\n            // set local vars\n            context.partials = {hello_friend: partial};\n            context.name = context.params.name;\n            context.friend = context.params.friend;\n\n            // render the template and pass it through hogan\n            context.partial('mytemplate.hg');\n          });\n    });\n  });\n\n  $(function() {\n    app.run()\n  });\n</code></pre>\n\n<p>If I go to #/hello/AQ/to/dP in the browser, Sammy will render this to the <tt>body</tt>:</p>\n\n<pre class='prettyprint'><code>  Hey, AQ! Say hello to your friend dP!\n</code></pre>\n\n<p>Note: You dont have to include the hogan.js file on top of the plugin as the plugin\nincludes the full source.</p>\n",
      "filename": "/lib/plugins/sammy.hogan.js",
      "lineno": 102,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Hoptoad",
    {
      "name": "Sammy.Hoptoad",
      "args": [
        "app",
        "errorReporter"
      ],
      "doc": "<p>A plugin that posts errors to Hoptoad.</p>\n\n<h3>Requirements</h3>\n\n<p>The sole requirement is a Hoptoad object with a notify function.\nThoughtbot have published an implementation (see below).</p>\n\n<h3>Arguments</h3>\n\n<p>Sammy.Hoptoad accepts an optional argument that is the\nHoptoad implementation. It will default to the global <code>Hoptoad</code> object.</p>\n\n<h3>See Also</h3>\n\n<ul>\n<li>http://hoptoadapp.com/</li>\n<li>http://robots.thoughtbot.com/post/899737797</li>\n<li>http://hoptoadapp.com/javascripts/notifier.js</li>\n</ul>\n\n",
      "filename": "/lib/plugins/sammy.hoptoad.js",
      "lineno": 25,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.JSON",
    {
      "name": "Sammy.JSON",
      "args": [
        "app"
      ],
      "doc": "<p>Sammy.JSON is a simple wrapper around Douglas Crockford's ever-useful json2.js\n(http://www.json.org/js.html]) Sammy.JSON includes the top level JSON object if\nit doesn't already exist (a.k.a. does not override the native implementation that\nsome browsers include). It also adds a <tt>json()</tt> helper to a Sammy app when\nincluded.</p>\n",
      "filename": "/lib/plugins/sammy.json.js",
      "lineno": 335,
      "methods": [
        {
          "name": "json",
          "args": [
            "object"
          ],
          "filename": "/lib/plugins/sammy.json.js",
          "lineno": 355,
          "doc": "<p>json is a polymorphic function that translates objects aback and forth\nfrom JSON to JS. If given a string, it will parse into JS, if given a JS\nobject it will stringify into JSON.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> var app = $.sammy(function() {\n   this.use(Sammy.JSON);\n\n   this.get('#/', function() {\n     this.json({user_id: 123}); //=&gt; \"{\\\"user_id\\\":\\\"123\\\"}\"\n     this.json(\"{\\\"user_id\\\":\\\"123\\\"}\"); //=&gt; [object Object]\n     this.json(\"{\\\"user_id\\\":\\\"123\\\"}\").user_id; //=&gt; \"123\"\n   });\n })\n</code></pre>\n"
        }
      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.KISSmetrics",
    {
      "name": "Sammy.KISSmetrics",
      "args": [
        "app"
      ],
      "doc": "<p>A simple plugin that pings KISSmetrics tracker\nevery time a route is triggered. Created by Juan Pablo Garcia Dalolla\n(jpgarcia), based on the Sammy.GoogleAnalytics\nplugin developed by Brit Gardner (britg) with updates from\nAaron Quint (quirkey).</p>\n\n<h3>Example</h3>\n\n<p>Install KISSmetrics to your site as you normally would. Be sure that\nthe '_kmq' global variable exists (it should be created by the\nscript provided by KISSmetrics).</p>\n\n<p>Then, simply add the plugin to your Sammy App and it will automatically\ntrack all of your routes in KISSmetrics.\nThey will appear as page views to the route's path.</p>\n\n<pre class='prettyprint'><code> $.sammy(function() {\n   this.use('KISSmetrics');\n\n   ...\n });\n</code></pre>\n\n<p>If you have routes that you do not want to track, simply call\n`doNotTrackKISSmetrics within the route.</p>\n\n<pre class='prettyprint'><code> $.sammy(function() {\n   this.use('KISSmetrics')\n\n   this.get('#/dont/track/me', function() {\n     this.doNotTrackKISSmetrics();  // This route will not be tracked\n   });\n });\n</code></pre>\n",
      "filename": "/lib/plugins/sammy.kissmetrics.js",
      "lineno": 42,
      "methods": [
        {
          "name": "doNotTrackKISSmetrics",
          "args": [

          ],
          "filename": "/lib/plugins/sammy.kissmetrics.js",
          "lineno": 56,
          "doc": "<p>Disable tracking for the current route. Put at the begining of the\nroute's callback</p>\n"
        },
        {
          "name": "trackKISSmetrics",
          "args": [
            "path"
          ],
          "filename": "/lib/plugins/sammy.kissmetrics.js",
          "lineno": 60,
          "doc": "<p>send a page view to the tracker with <code>path</code></p>\n"
        }
      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Meld",
    {
      "name": "Sammy.Meld",
      "args": [
        "app",
        "method_alias"
      ],
      "doc": "<p><code>Sammy.Meld</code> is a simple templating engine that uses the power of jQuery's\nDOM manipulation to easily meld JSON data and HTML templates very quickly.</p>\n\n<p>The template can either be a string (i.e. loaded from a remote template)\nor a DOM Element/jQuery object. This allows you to have templates be DOM\nelements as the initial document load.</p>\n\n<h3>Example</h3>\n\n<p>The simplest case is a nested <code>&lt;div&gt;</code> whose class name is tied to a\nproperty of a JS object.</p>\n\n<p>Template:</p>\n\n<pre class='prettyprint'><code>   &lt;div class=\"post\"&gt;\n     &lt;div class=\"title\"&gt;&lt;/div&gt;\n     &lt;div class=\"entry\"&gt;&lt;/div&gt;\n     &lt;div class=\"author\"&gt;\n       &lt;span class=\"name\"&gt;&lt;/span&gt;\n     &lt;/div&gt;\n   &lt;/div&gt;\n</code></pre>\n\n<p>Data:</p>\n\n<pre class='prettyprint'><code>   {\n     \"post\": {\n       \"title\": \"My Post\",\n       \"entry\": \"My Entry\",\n       \"author\": {\n         \"name\": \"@aq\"\n       }\n     }\n   }\n</code></pre>\n\n<p>Result:</p>\n\n<pre class='prettyprint'><code>   &lt;div class=\"post\"&gt;\n     &lt;div class=\"title\"&gt;My Post&lt;/div&gt;\n     &lt;div class=\"entry\"&gt;My Entry&lt;/div&gt;\n     &lt;div class=\"author\"&gt;\n       &lt;span class=\"name\"&gt;@aq&lt;/span&gt;\n     &lt;/div&gt;\n   &lt;/div&gt;\n</code></pre>\n\n<p>Templates can be much more complex, and more deeply nested.\nMore examples can be found in <code>test/fixtures/meld/</code></p>\n\n<p>If you don't think the lookup by classes is semantic for you, you can easily\nswitch the method of lookup by defining a selector function in the options</p>\n\n<p>For example:</p>\n\n<pre class='prettyprint'><code> meld($('.post'), post_data, {\n   selector: function(k) {\n     return '[data-key=' + k + ']';\n   }\n });\n</code></pre>\n\n<p>Would look for template nodes like <code>&lt;div data-key='entry'&gt;</code></p>\n",
      "filename": "/lib/plugins/sammy.meld.js",
      "lineno": 69,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.MemoryCacheProxy",
    {
      "name": "Sammy.MemoryCacheProxy",
      "args": [
        "initial"
      ],
      "doc": "<p>A simple cache strategy that stores key/values in memory.</p>\n",
      "filename": "/lib/plugins/sammy.cache.js",
      "lineno": 11,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Mixpanel",
    {
      "name": "Sammy.Mixpanel",
      "args": [
        "app"
      ],
      "doc": "<p>A simple plugin that pings Mixpanel tracker\nevery time a route is triggered. Created by Juan Pablo Garcia Dalolla\n(jpgarcia), based on the Sammy.GoogleAnalytics\nplugin developed by Brit Gardner (britg) with updates from\nAaron Quint (quirkey).</p>\n\n<h3>Example</h3>\n\n<p>Install Mixpanel to your site as you normally would. Be sure that\nthe 'mixpanel' global variable exists (it should be created by the\nscript provided by Mixpanel).</p>\n\n<p>Then, simply add the plugin to your Sammy App and it will automatically\ntrack all of your routes in Mixpanel.\nThey will appear as page views to the route's path.</p>\n\n<pre class='prettyprint'><code> $.sammy(function() {\n   this.use('Mixpanel');\n\n   ...\n });\n</code></pre>\n\n<p>If you have routes that you do not want to track, simply call\n`doNotTrackMixpanel within the route.</p>\n\n<pre class='prettyprint'><code> $.sammy(function() {\n   this.use('Mixpanel')\n\n   this.get('#/dont/track/me', function() {\n     this.doNotTrackMixpanel();  // This route will not be tracked\n   });\n });\n</code></pre>\n",
      "filename": "/lib/plugins/sammy.mixpanel.js",
      "lineno": 42,
      "methods": [
        {
          "name": "doNotTrackMixpanel",
          "args": [

          ],
          "filename": "/lib/plugins/sammy.mixpanel.js",
          "lineno": 56,
          "doc": "<p>Disable tracking for the current route. Put at the begining of the\nroute's callback</p>\n"
        },
        {
          "name": "trackMixpanel",
          "args": [
            "path"
          ],
          "filename": "/lib/plugins/sammy.mixpanel.js",
          "lineno": 60,
          "doc": "<p>send a page view to the tracker with <code>path</code></p>\n"
        }
      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Mustache",
    {
      "name": "Sammy.Mustache",
      "args": [
        "app",
        "method_alias"
      ],
      "doc": "<p><tt>Sammy.Mustache</tt> provides a quick way of using mustache style templates in your app.\nThe plugin wraps the awesome mustache.js lib created and maintained by Jan Lehnardt\nat http://github.com/janl/mustache.js</p>\n\n<p>Note: As of Sammy 0.7 the Mustache lib is not included in the templates source. Please download\nmustache.js and include it before Sammy.Mustache.</p>\n\n<p>Mustache is a clever templating system that relys on double brackets {{}} for interpolation.\nFor full details on syntax check out the original Ruby implementation created by Chris Wanstrath at\nhttp://github.com/defunkt/mustache</p>\n\n<p>By default using Sammy.Mustache in your app adds the <tt>mustache()</tt> method to the EventContext\nprototype. However, just like <tt>Sammy.Template</tt> you can change the default name of the method\nby passing a second argument (e.g. you could use the ms() as the method alias so that all the template\nfiles could be in the form file.ms instead of file.mustache)</p>\n\n<h3>Example #1</h3>\n\n<p>The template (mytemplate.ms):</p>\n\n<pre class='prettyprint'><code>  &lt;h1&gt;{{title}}&lt;h1&gt;\n\n  Hey, {{name}}! Welcome to Mustache!\n</code></pre>\n\n<p>The app:</p>\n\n<pre class='prettyprint'><code>  var app = $.sammy(function() {\n    // include the plugin and alias mustache() to ms()\n    this.use('Mustache', 'ms');\n\n    this.get('#/hello/:name', function() {\n      // set local vars\n      this.title = 'Hello!'\n      this.name = this.params.name;\n      // render the template and pass it through mustache\n      this.partial('mytemplate.ms');\n    });\n  });\n\n  $(function() {\n    app.run()\n  });\n</code></pre>\n\n<p>If I go to #/hello/AQ in the browser, Sammy will render this to the <tt>body</tt>:</p>\n\n<pre class='prettyprint'><code>  &lt;h1&gt;Hello!&lt;/h1&gt;\n\n  Hey, AQ! Welcome to Mustache!\n</code></pre>\n\n<h3>Example #2 - Mustache partials</h3>\n\n<p>The template (mytemplate.ms)</p>\n\n<pre class='prettyprint'><code>  Hey, {{name}}! {{&gt;hello_friend}}\n</code></pre>\n\n<p>The partial (mypartial.ms)</p>\n\n<pre class='prettyprint'><code>  Say hello to your friend {{friend}}!\n</code></pre>\n\n<p>The app:</p>\n\n<pre class='prettyprint'><code>  var app = $.sammy(function() {\n    // include the plugin and alias mustache() to ms()\n    this.use('Mustache', 'ms');\n\n    this.get('#/hello/:name/to/:friend', function(context) {\n      // fetch mustache-partial first\n      this.load('mypartial.ms')\n          .then(function(partial) {\n            // set local vars\n            context.partials = {hello_friend: partial};\n            context.name = context.params.name;\n            context.friend = context.params.friend;\n\n            // render the template and pass it through mustache\n            context.partial('mytemplate.ms');\n          });\n    });\n  });\n\n  $(function() {\n    app.run()\n  });\n</code></pre>\n\n<p>If I go to #/hello/AQ/to/dP in the browser, Sammy will render this to the <tt>body</tt>:</p>\n\n<pre class='prettyprint'><code>  Hey, AQ! Say hello to your friend dP!\n</code></pre>\n\n<p>Note: You need to include the mustache.js file before this plugin.</p>\n",
      "filename": "/lib/plugins/sammy.mustache.js",
      "lineno": 101,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.NestedParams",
    {
      "name": "Sammy.NestedParams",
      "args": [
        "app"
      ],
      "doc": "<p><tt>Sammy.NestedParams</tt> overrides the default form parsing behavior to provide\nextended functionality for parsing Rack/Rails style form name/value pairs into JS\nObjects. In fact it passes the same suite of tests as Rack's nested query parsing.\nThe code and tests were ported to JavaScript/Sammy by http://github.com/endor</p>\n\n<p>This allows you to translate a form with properly named inputs into a JSON object.</p>\n\n<h3>Example</h3>\n\n<p>Given an HTML form like so:</p>\n\n<pre class='prettyprint'><code>&lt;form action=\"#/parse_me\" method=\"post\"&gt;\n  &lt;input type=\"text\" name=\"obj[first]\" /&gt;\n  &lt;input type=\"text\" name=\"obj[second]\" /&gt;\n  &lt;input type=\"text\" name=\"obj[hash][first]\" /&gt;\n  &lt;input type=\"text\" name=\"obj[hash][second]\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>And a Sammy app like:</p>\n\n<pre class='prettyprint'><code>var app = $.sammy(function(app) {\n  this.use(Sammy.NestedParams);\n\n  this.post('#/parse_me', function(context) {\n    $.log(this.params);\n  });\n});\n</code></pre>\n\n<p>If you filled out the form with some values and submitted it, you would see something\nlike this in your log:</p>\n\n<pre class='prettyprint'><code>{\n  'obj': {\n    'first': 'value',\n    'second': 'value',\n    'hash': {\n      'first': 'value',\n      'second': 'value'\n    }\n  }\n}\n</code></pre>\n\n<p>It supports creating arrays with [] and other niceities. Check out the tests for\nfull specs.</p>\n",
      "filename": "/lib/plugins/sammy.nested_params.js",
      "lineno": 116,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.OAuth2",
    {
      "name": "Sammy.OAuth2",
      "args": [
        "app"
      ],
      "doc": "<p>Sammy.OAuth2 is a plugin for using OAuth 2.0 to authenticate users and\naccess your application's API. Requires Sammy.Session.</p>\n\n<p>Triggers the following events:</p>\n\n<ul>\n<li><code>oauth.connected</code> - Access token set and ready to use. Triggered when new\naccess token acquired, of when application starts and already has access\ntoken.</li>\n<li><code>oauth.disconnected</code> - Access token reset. Triggered by\nloseAccessToken().</li>\n<li><code>oauth.denied</code> - Authorization attempt rejected.</li>\n</ul>\n\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>  this.use('Storage');\n  this.use('OAuth2');\n  this.oauthorize = \"/oauth/authorize\";\n\n  // The quick &amp; easy way\n  this.requireOAuth();\n  // Specific path\n  this.requireOAuth(\"/private\");\n  // Filter you can apply to specific URLs\n  this.before(function(context) { return context.requireOAuth(); })\n  // Apply to specific request\n  this.get(\"/private\", function(context) {\n    this.requireOAuth(function() {\n      // Do something\n    });\n  });\n\n // Sign in/sign out.\n this.bind(\"oauth.connected\", function() { $(\"#signin\").hide() });\n this.bind(\"oauth.disconnected\", function() { $(\"#signin\").show() });\n\n // Handle access denied and other errors\n this.bind(\"oauth.denied\", function(evt, error) {\n   this.partial(\"admin/views/no_access.tmpl\", { error: error.message });\n });\n\n // Sign out.\n this.get(\"#/signout\", function(context) {\n   context.loseAccessToken();\n   context.redirect(\"#/\");\n });\n</code></pre>\n",
      "filename": "/lib/plugins/sammy.oauth2.js",
      "lineno": 55,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Object",
    {
      "name": "Sammy.Object",
      "args": [
        "obj"
      ],
      "doc": "<p>Sammy.Object is the base for all other Sammy classes. It provides some useful\nfunctionality, including cloning, iterating, etc.</p>\n",
      "filename": "/lib/sammy.js",
      "lineno": 134,
      "methods": [
        {
          "name": "escapeHTML",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 142,
          "doc": "<p>Escape HTML in string, use in templates to prevent script injection.\nAlso aliased as <code>h()</code></p>\n"
        },
        {
          "name": "has",
          "args": [
            "key"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 187,
          "doc": "<p>Checks if the object has a value at <code>key</code> and that the value is not empty</p>\n"
        },
        {
          "name": "join",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 193,
          "doc": "<p>convenience method to join as many arguments as you want\nby the first argument - useful for making paths</p>\n"
        },
        {
          "name": "keys",
          "args": [
            "attributes_only"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 176,
          "doc": "<p>Returns an array of keys for this object. If <code>attributes_only</code>\nis true will not return keys that map to a <code>function()</code></p>\n"
        },
        {
          "name": "log",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 200,
          "doc": "<p>Shortcut to Sammy.log</p>\n"
        },
        {
          "name": "toHTML",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 164,
          "doc": "<p>Renders a simple HTML version of this Objects attributes.\nDoes not render functions.\nFor example. Given this Sammy.Object:</p>\n\n<pre class='prettyprint'><code>var s = new Sammy.Object({first_name: 'Sammy', last_name: 'Davis Jr.'});\ns.toHTML()\n//=&gt; '&lt;strong&gt;first_name&lt;/strong&gt; Sammy&lt;br /&gt;&lt;strong&gt;last_name&lt;/strong&gt; Davis Jr.&lt;br /&gt;'\n</code></pre>\n"
        },
        {
          "name": "toHash",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 146,
          "doc": "<p>Returns a copy of the object with Functions removed.</p>\n"
        },
        {
          "name": "toString",
          "args": [
            "include_functions"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 207,
          "doc": "<p>Returns a string representation of this object.\nif <code>include_functions</code> is true, it will also toString() the\nmethods of this object. By default only prints the attributes.</p>\n"
        }
      ],
      "attributes": [

      ],
      "plugin": null
    }
  ],
  [
    "Sammy.PathLocationProxy",
    {
      "name": "Sammy.PathLocationProxy",
      "args": [
        "app"
      ],
      "doc": "<p><code>Sammy.PathLocationProxy</code> is a simple Location Proxy that just\ngets and sets window.location. This allows you to use\nSammy to route on the full URL path instead of just the hash. It\nwill take a full refresh to get the app to change state.</p>\n\n<p>To read more about location proxies, check out the\ndocumentation for <code>Sammy.HashLocationProxy</code></p>\n",
      "filename": "/lib/plugins/sammy.path_location_proxy.js",
      "lineno": 16,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Pure",
    {
      "name": "Sammy.Pure",
      "args": [
        "app",
        "method_alias"
      ],
      "doc": "<p><code>Sammy.Pure</code> is a simple wrapper around the pure.js templating engine for\nuse in Sammy apps.</p>\n\n<p>Note: You must include the pure.js source before including sammy.pure.js.</p>\n\n<p>See http://beebole.com/pure/ for detailed documentation.</p>\n",
      "filename": "/lib/plugins/sammy.pure.js",
      "lineno": 15,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.PushLocationProxy",
    {
      "name": "Sammy.PushLocationProxy",
      "args": [
        "app"
      ],
      "doc": "<p>The PushLocationProxy is an optional location proxy prototype.\nPushLocationProxy gets its location from history API. No hash needed here.\nOnly compatible with Firefox >= Chrom 6, Firefox 4.0, Safari 5.0</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>var app = $.sammy(function() {\n    // set up the location proxy\n    this.setLocationProxy(new Sammy.PushLocationProxy(this));\n\n    this.get('/about', function() {\n      // Do something here\n    });\n\n});\n</code></pre>\n\n<p>Clicking on that link would not go to /about, but would set the apps location\nto 'about' and trigger the route.</p>\n",
      "filename": "/lib/plugins/sammy.push_location_proxy.js",
      "lineno": 27,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.RenderContext",
    {
      "name": "Sammy.RenderContext",
      "args": [
        "event_context"
      ],
      "doc": "<p><code>Sammy.RenderContext</code> is an object that makes sequential template loading,\nrendering and interpolation seamless even when dealing with asynchronous\noperations.</p>\n\n<p><code>RenderContext</code> objects are not usually created directly, rather they are\ninstantiated from an <code>Sammy.EventContext</code> by using <code>render()</code>, <code>load()</code> or\n<code>partial()</code> which all return <code>RenderContext</code> objects.</p>\n\n<p><code>RenderContext</code> methods always returns a modified <code>RenderContext</code>\nfor chaining (like jQuery itself).</p>\n\n<p>The core magic is in the <code>then()</code> method which puts the callback passed as\nan argument into a queue to be executed once the previous callback is complete.\nAll the methods of <code>RenderContext</code> are wrapped in <code>then()</code> which allows you\nto queue up methods by chaining, but maintaining a guaranteed execution order\neven with remote calls to fetch templates.</p>\n",
      "filename": "/lib/sammy.js",
      "lineno": 1483,
      "methods": [
        {
          "name": "appendTo",
          "args": [
            "selector"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1867,
          "doc": "<p>Same usage as <code>jQuery.fn.appendTo()</code> but uses <code>then()</code> to ensure order</p>\n"
        },
        {
          "name": "collect",
          "args": [
            "array",
            "callback",
            "now"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1780,
          "doc": "<p>iterates over an array, applying the callback for each item item. the\ncallback takes the same style of arguments as <code>jQuery.each()</code> (index, item).\nThe return value of each callback is collected as a single string and stored\nas <code>content</code> to be used in the next iteration of the <code>RenderContext</code>.</p>\n"
        },
        {
          "name": "interpolate",
          "args": [
            "data",
            "engine",
            "retain"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1845,
          "doc": "<p>uses the previous loaded <code>content</code> and the <code>data</code> object to interpolate\na template. <code>engine</code> defines the templating/interpolation method/engine\nthat should be used. If <code>engine</code> is not passed, the <code>next_engine</code> is\nused. If <code>retain</code> is <code>true</code>, the final interpolated data is appended to\nthe <code>previous_content</code> instead of just replacing it.</p>\n"
        },
        {
          "name": "load",
          "args": [
            "location",
            "options",
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1611,
          "doc": "<p>Load a template into the context.\nThe <code>location</code> can either be a string specifying the remote path to the\nfile, a jQuery object, or a DOM element.</p>\n\n<p>No interpolation happens by default, the content is stored in\n<code>content</code>.</p>\n\n<p>In the case of a path, unless the option <code>{cache: false}</code> is passed the\ndata is stored in the app's <code>templateCache()</code>.</p>\n\n<p>If a jQuery or DOM object is passed the <code>innerHTML</code> of the node is pulled in.\nThis is useful for nesting templates as part of the initial page load wrapped\nin invisible elements or <code>&lt;script&gt;</code> tags. With template paths, the template\nengine is looked up by the extension. For DOM/jQuery embedded templates,\nthis isnt possible, so there are a couple of options:</p>\n\n<ul>\n<li>pass an <code>{engine:}</code> option.</li>\n<li>define the engine in the <code>data-engine</code> attribute of the passed node.</li>\n<li>just store the raw template data and use <code>interpolate()</code> manually</li>\n</ul>\n\n\n<p>If a <code>callback</code> is passed it is executed after the template load.</p>\n"
        },
        {
          "name": "loadPartials",
          "args": [
            "partials"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1674,
          "doc": "<p>Load partials</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> this.loadPartials({mypartial: '/path/to/partial'});\n</code></pre>\n"
        },
        {
          "name": "next",
          "args": [
            "content"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1579,
          "doc": "<p>Resume the queue, setting <code>content</code> to be used in the next operation.\nSee <code>wait()</code> for an example.</p>\n"
        },
        {
          "name": "partial",
          "args": [
            "location",
            "data",
            "callback",
            "partials"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1734,
          "doc": "<p><code>render()</code> the <code>location</code> with <code>data</code> and then <code>swap()</code> the\napp's <code>$element</code> with the rendered content.</p>\n"
        },
        {
          "name": "prependTo",
          "args": [
            "selector"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1874,
          "doc": "<p>Same usage as <code>jQuery.fn.prependTo()</code> but uses <code>then()</code> to ensure order</p>\n"
        },
        {
          "name": "render",
          "args": [
            "location",
            "data",
            "callback",
            "partials"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1709,
          "doc": "<p><code>load()</code> a template and then <code>interpolate()</code> it with data.</p>\n\n<p>can be called with multiple different signatures:</p>\n\n<pre class='prettyprint'><code> this.render(callback);\n this.render('/location');\n this.render('/location', {some: data});\n this.render('/location', callback);\n this.render('/location', {some: data}, callback);\n this.render('/location', {some: data}, {my: partials});\n this.render('/location', callback, {my: partials});\n this.render('/location', {some: data}, callback, {my: partials});\n</code></pre>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> this.get('#/', function() {\n   this.render('mytemplate.template', {name: 'test'});\n });\n</code></pre>\n"
        },
        {
          "name": "renderEach",
          "args": [
            "location",
            "name",
            "data",
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1805,
          "doc": "<p>loads a template, and then interpolates it for each item in the <code>data</code>\narray. If a callback is passed, it will call the callback with each\nitem in the array <em>after</em> interpolation</p>\n"
        },
        {
          "name": "replace",
          "args": [
            "selector"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1882,
          "doc": "<p>Replaces the <code>$(selector)</code> using <code>html()</code> with the previously loaded\n<code>content</code></p>\n"
        },
        {
          "name": "send",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 1761,
          "doc": "<p>defers the call of function to occur in order of the render queue.\nThe function can accept any number of arguments as long as the last\nargument is a callback function. This is useful for putting arbitrary\nasynchronous functions into the queue. The content passed to the\ncallback is passed as <code>content</code> to the next item in the queue.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>this.send($.getJSON, '/app.json')\n    .then(function(json) {\n      $('#message).text(json['message']);\n     });\n</code></pre>\n"
        },
        {
          "name": "swap",
          "args": [
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1859,
          "doc": "<p>Swap the return contents ensuring order. See <code>Application#swap</code></p>\n"
        },
        {
          "name": "then",
          "args": [
            "callback"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1523,
          "doc": "<p>The \"core\" of the <code>RenderContext</code> object, adds the <code>callback</code> to the\nqueue. If the context is <code>waiting</code> (meaning an async operation is happening)\nthen the callback will be executed in order, once the other operations are\ncomplete. If there is no currently executing operation, the <code>callback</code>\nis executed immediately.</p>\n\n<p>The value returned from the callback is stored in <code>content</code> for the\nsubsequent operation. If you return <code>false</code>, the queue will pause, and\nthe next callback in the queue will not be executed until <code>next()</code> is\ncalled. This allows for the guaranteed order of execution while working\nwith async operations.</p>\n\n<p>If then() is passed a string instead of a function, the string is looked\nup as a helper method on the event context.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code> this.get('#/', function() {\n   // initialize the RenderContext\n   // Even though `load()` executes async, the next `then()`\n   // wont execute until the load finishes\n   this.load('myfile.txt')\n       .then(function(content) {\n         // the first argument to then is the content of the\n         // prev operation\n         $('#main').html(content);\n       });\n });\n</code></pre>\n"
        },
        {
          "name": "trigger",
          "args": [
            "name",
            "data"
          ],
          "filename": "/lib/sammy.js",
          "lineno": 1891,
          "doc": "<p>trigger the event in the order of the event context. Same semantics\nas <code>Sammy.EventContext#trigger()</code>. If data is omitted, <code>content</code>\nis sent as <code>{content: content}</code></p>\n"
        },
        {
          "name": "wait",
          "args": [

          ],
          "filename": "/lib/sammy.js",
          "lineno": 1573,
          "doc": "<p>Pause the <code>RenderContext</code> queue. Combined with <code>next()</code> allows for async\noperations.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>   this.get('#/', function() {\n     this.load('mytext.json')\n         .then(function(content) {\n           var context = this,\n               data    = JSON.parse(content);\n           // pause execution\n           context.wait();\n           // post to a url\n           $.post(data.url, {}, function(response) {\n             context.next(JSON.parse(response));\n           });\n         })\n         .then(function(data) {\n           // data is json from the previous post\n           $('#message').text(data.status);\n         });\n   });\n</code></pre>\n"
        }
      ],
      "attributes": [

      ],
      "plugin": null
    }
  ],
  [
    "Sammy.Session",
    {
      "name": "Sammy.Session",
      "args": [
        "app",
        "options"
      ],
      "doc": "<p>Sammy.Session is an additional plugin for creating a common 'session' store\nfor the given app. It is a very simple wrapper around <code>Sammy.Storage</code>\nthat provides a simple fallback mechanism for trying to provide the best\npossible storage type for the session. This means, <code>LocalStorage</code>\nif available, otherwise <code>Cookie</code>, otherwise <code>Memory</code>.\nIt provides the <code>session()</code> helper through <code>Sammy.Storage#store()</code>.</p>\n\n<p>See the <code>Sammy.Storage</code> plugin for full documentation.</p>\n",
      "filename": "/lib/plugins/sammy.storage.js",
      "lineno": 559,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Storage",
    {
      "name": "Sammy.Storage",
      "args": [
        "app"
      ],
      "doc": "<p>Sammy.Storage is a plugin that provides shortcuts for creating and using\nSammy.Store objects. Once included it provides the <code>store()</code> app level\nand helper methods. Depends on Sammy.JSON (or json2.js).</p>\n",
      "filename": "/lib/plugins/sammy.storage.js",
      "lineno": 460,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Store",
    {
      "name": "Sammy.Store",
      "args": [
        "options"
      ],
      "doc": "<p>Sammy.Store is an abstract adapter class that wraps the multitude of in\nbrowser data storage into a single common set of methods for storing and\nretreiving data. The JSON library is used (through the inclusion of the\nSammy.JSON) plugin, to automatically convert objects back and forth from\nstored strings.</p>\n\n<p>Sammy.Store can be used directly, but within a Sammy.Application it is much\neasier to use the <code>Sammy.Storage</code> plugin and its helper methods.</p>\n\n<p>Sammy.Store also supports the KVO pattern, by firing DOM/jQuery Events when\na key is set.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>  // create a new store named 'mystore', tied to the #main element, using HTML5 localStorage\n  // Note: localStorage only works on browsers that support it\n  var store = new Sammy.Store({name: 'mystore', element: '#element', type: 'local'});\n  store.set('foo', 'bar');\n  store.get('foo'); //=&gt; 'bar'\n  store.set('json', {obj: 'this is an obj'});\n  store.get('json'); //=&gt; {obj: 'this is an obj'}\n  store.keys(); //=&gt; ['foo','json']\n  store.clear('foo');\n  store.keys(); //=&gt; ['json']\n  store.clearAll();\n  store.keys(); //=&gt; []\n</code></pre>\n\n<h3>Arguments</h3>\n\n<p>The constructor takes a single argument which is a Object containing these possible options.</p>\n\n<ul>\n<li><code>name</code> The name/namespace of this store. Stores are unique by name/type. (default 'store')</li>\n<li><code>element</code> A selector for the element that the store is bound to. (default 'body')</li>\n<li><code>type</code> The type of storage/proxy to use (default 'memory')</li>\n</ul>\n\n\n<p>Extra options are passed to the storage constructor.\nSammy.Store supports the following methods of storage:</p>\n\n<ul>\n<li><code>memory</code> Basic object storage</li>\n<li><code>data</code> jQuery.data DOM Storage</li>\n<li><code>cookie</code> Access to document.cookie. Limited to 2K</li>\n<li><code>local</code> HTML5 DOM localStorage, browswer support is currently limited.</li>\n<li><code>session</code> HTML5 DOM sessionStorage, browswer support is currently limited.</li>\n</ul>\n\n",
      "filename": "/lib/plugins/sammy.storage.js",
      "lineno": 53,
      "methods": [
        {
          "name": "clear",
          "args": [
            "key"
          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 133,
          "doc": "<p>Removes the value at <code>key</code> from the current store</p>\n"
        },
        {
          "name": "clearAll",
          "args": [

          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 138,
          "doc": "<p>Clears all the values for the current store.</p>\n"
        },
        {
          "name": "each",
          "args": [
            "callback"
          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 157,
          "doc": "<p>Iterates over each key value pair passing them to the <code>callback</code> function</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>store.each(function(key, value) {\n  Sammy.log('key', key, 'value', value);\n});\n</code></pre>\n"
        },
        {
          "name": "exists",
          "args": [
            "key"
          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 91,
          "doc": "<p>Checks for the existance of <code>key</code> in the current store. Returns a boolean.</p>\n"
        },
        {
          "name": "fetch",
          "args": [
            "key",
            "callback"
          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 220,
          "doc": "<p>Returns the value at <code>key</code> if set, otherwise, runs the callback\nand sets the value to the value returned in the callback.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>var store = new Sammy.Store;\nstore.exists('foo'); //=&gt; false\nstore.fetch('foo', function() {\n  return 'bar!';\n}); //=&gt; 'bar!'\nstore.get('foo') //=&gt; 'bar!'\nstore.fetch('foo', function() {\n  return 'baz!';\n}); //=&gt; 'bar!\n</code></pre>\n"
        },
        {
          "name": "filter",
          "args": [
            "callback"
          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 183,
          "doc": "<p>Filters the store by a filter function that takes a key value.\nReturns an array of arrays where the first element of each array\nis the key and the second is the value of that key.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>var store = new Sammy.Store;\nstore.set('one', 'two');\nstore.set('two', 'three');\nstore.set('1', 'two');\nvar returned = store.filter(function(key, value) {\n  // only return\n  return value === 'two';\n});\n// returned =&gt; [['one', 'two'], ['1', 'two']];\n</code></pre>\n"
        },
        {
          "name": "first",
          "args": [
            "callback"
          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 195,
          "doc": "<p>Works exactly like filter except only returns the first matching key\nvalue pair instead of all of them</p>\n"
        },
        {
          "name": "get",
          "args": [
            "key"
          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 121,
          "doc": "<p>Returns the set value at <code>key</code>, parsing with <code>JSON.parse</code> and\nturning into an object if possible</p>\n"
        },
        {
          "name": "isAvailable",
          "args": [

          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 83,
          "doc": "<p>Checks for the availability of the current storage type in the current browser/config.</p>\n"
        },
        {
          "name": "keys",
          "args": [

          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 146,
          "doc": "<p>Returns the all the keys set for the current store as an array.\nInternally Sammy.Store keeps this array in a 'meta_key' for easy access.</p>\n"
        },
        {
          "name": "load",
          "args": [
            "key",
            "path",
            "callback"
          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 242,
          "doc": "<p>loads the response of a request to <code>path</code> into <code>key</code>.</p>\n\n<h3>Example</h3>\n\n<p>In /mytemplate.tpl:</p>\n\n<pre class='prettyprint'><code>My Template\n</code></pre>\n\n<p>In app.js:</p>\n\n<pre class='prettyprint'><code>var store = new Sammy.Store;\nstore.load('mytemplate', '/mytemplate.tpl', function() {\n  s.get('mytemplate') //=&gt; My Template\n});\n</code></pre>\n"
        },
        {
          "name": "set",
          "args": [
            "key",
            "value"
          ],
          "filename": "/lib/plugins/sammy.storage.js",
          "lineno": 107,
          "doc": "<p>Sets the value of <code>key</code> with <code>value</code>. If <code>value</code> is an\nobject, it is turned to and stored as a string with <code>JSON.stringify</code>.\nIt also tries to conform to the KVO pattern triggering jQuery events on the\nelement that the store is bound to.</p>\n\n<h3>Example</h3>\n\n<pre class='prettyprint'><code>var store = new Sammy.Store({name: 'kvo'});\n$('body').bind('set-kvo-foo', function(e, data) {\n  Sammy.log(data.key + ' changed to ' + data.value);\n});\nstore.set('foo', 'bar'); // logged: foo changed to bar\n</code></pre>\n"
        }
      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Store.Cookie",
    {
      "name": "Sammy.Store.Cookie",
      "args": [
        "name",
        "element",
        "options"
      ],
      "doc": "<p>.Cookie ('cookie') storage uses browser cookies to store data. JavaScript\nhas access to a single document.cookie variable, which is limited to 2Kb in\nsize. Cookies are also considered 'unsecure' as the data can be read easily\nby other sites/JS. Cookies do have the advantage, though, of being widely\nsupported and persistent through refresh and close/open. Where available,\nHTML5 DOM Storage like LocalStorage and SessionStorage should be used.</p>\n\n<p>.Cookie can also take additional options:</p>\n\n<ul>\n<li><code>expires_in</code> Number of seconds to keep the cookie alive (default 2 weeks).</li>\n<li><code>path</code> The path to activate the current cookie for (default '/').</li>\n</ul>\n\n\n<p>For more information about document.cookie, check out the pre-eminint article\nby ppk: http://www.quirksmode.org/js/cookies.html</p>\n",
      "filename": "/lib/plugins/sammy.storage.js",
      "lineno": 412,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Store.Data",
    {
      "name": "Sammy.Store.Data",
      "args": [
        "name",
        "element"
      ],
      "doc": "<p>Data ('data') stores objects using the jQuery.data() methods. This has the advantadge\nof scoping the data to the specific element. Like the 'memory' store its data\nwill only last for the length of the current request (data is lost on refresh/etc).</p>\n",
      "filename": "/lib/plugins/sammy.storage.js",
      "lineno": 303,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Store.LocalStorage",
    {
      "name": "Sammy.Store.LocalStorage",
      "args": [
        "name",
        "element"
      ],
      "doc": "<p>LocalStorage ('local') makes use of HTML5 DOM Storage, and the window.localStorage\nobject. The great advantage of this method is that data will persist beyond\nthe current request. It can be considered a pretty awesome replacement for\ncookies accessed via JS. The great disadvantage, though, is its only available\non the latest and greatest browsers.</p>\n\n<p>For more info on DOM Storage:\nhttps://developer.mozilla.org/en/DOM/Storage\nhttp://www.w3.org/TR/2009/WD-webstorage-20091222/</p>\n",
      "filename": "/lib/plugins/sammy.storage.js",
      "lineno": 337,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Store.Memory",
    {
      "name": "Sammy.Store.Memory",
      "args": [
        "name",
        "element"
      ],
      "doc": "<p>Memory ('memory') is the basic/default store. It stores data in a global\nJS object. Data is lost on refresh.</p>\n",
      "filename": "/lib/plugins/sammy.storage.js",
      "lineno": 276,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Store.SessionStorage",
    {
      "name": "Sammy.Store.SessionStorage",
      "args": [
        "name",
        "element"
      ],
      "doc": "<p>.SessionStorage ('session') is similar to LocalStorage (part of the same API)\nand shares similar browser support/availability. The difference is that\nSessionStorage is only persistant through the current 'session' which is defined\nas the length that the current window is open. This means that data will survive\nrefreshes but not close/open or multiple windows/tabs. For more info, check out\nthe <code>LocalStorage</code> documentation and links.</p>\n",
      "filename": "/lib/plugins/sammy.storage.js",
      "lineno": 368,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Store.isAvailable",
    {
      "name": "Sammy.Store.isAvailable",
      "args": [
        "type"
      ],
      "doc": "<p>Tests if the type of storage is available/works in the current browser/config.\nEspecially useful for testing the availability of the awesome, but not widely\nsupported HTML5 DOM storage</p>\n",
      "filename": "/lib/plugins/sammy.storage.js",
      "lineno": 266,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Template",
    {
      "name": "Sammy.Template",
      "args": [
        "app",
        "method_alias"
      ],
      "doc": "<p><code>Sammy.Template</code> is a simple plugin that provides a way to create\nand render client side templates. The rendering code is based on John Resig's\nquick templates and Greg Borenstien's srender plugin.\nThis is also a great template/boilerplate for Sammy plugins.</p>\n\n<p>Templates use <code>&lt;% %&gt;</code> tags to denote embedded javascript.</p>\n\n<h3>Examples</h3>\n\n<p>Here is an example template (user.template):</p>\n\n<pre class='prettyprint'><code>  // user.template\n  &lt;div class=\"user\"&gt;\n    &lt;div class=\"user-name\"&gt;&lt;%= user.name %&gt;&lt;/div&gt;\n    &lt;% if (user.photo_url) { %&gt;\n      &lt;div class=\"photo\"&gt;&lt;img src=\"&lt;%= user.photo_url %&gt;\" /&gt;&lt;/div&gt;\n    &lt;% } %&gt;\n  &lt;/div&gt;\n</code></pre>\n\n<p>Given that is a publicly accesible file, you would render it like:</p>\n\n<pre class='prettyprint'><code>  // app.js\n  $.sammy(function() {\n    // include the plugin\n    this.use('Template');\n\n    this.get('#/', function() {\n      // the template is rendered in the current context.\n      this.user = {name: 'Aaron Quint'};\n      // partial calls template() because of the file extension\n      this.partial('user.template');\n    })\n  });\n</code></pre>\n\n<p>You can also pass a second argument to use() that will alias the template\nmethod and therefore allow you to use a different extension for template files\nin <tt>partial()</tt></p>\n\n<pre class='prettyprint'><code>  // alias to 'tpl'\n  this.use(Sammy.Template, 'tpl');\n\n  // now .tpl files will be run through srender\n  this.get('#/', function() {\n    this.partial('myfile.tpl');\n  });\n</code></pre>\n\n<p>By default, the data passed into the tempalate is passed automatically passed through\nSammy's <code>escapeHTML</code> method in order to prevent possible XSS attacks. This is\na problem though if you're using something like <code>Sammy.Form</code> which renders HTML\nwithin the templates. You can get around this in two ways. One, you can use the\n<code>&lt;%! %&gt;</code> instead of <code>&lt;%= %&gt;</code>. Two, you can pass the <code>escape_html = false</code> option\nwhen interpolating, i.e:</p>\n\n<pre class='prettyprint'><code>  this.get('#/', function() {\n    this.template('myform.tpl', {form: \"&lt;form&gt;&lt;/form&gt;\"}, {escape_html: false});\n  });\n</code></pre>\n",
      "filename": "/lib/plugins/sammy.template.js",
      "lineno": 118,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Title",
    {
      "name": "Sammy.Title",
      "args": [

      ],
      "doc": "<p>Sammy.Title is a very simple plugin to easily set the document's title.\nIt supplies a helper for setting the title (<code>title()</code>) within routes,\nand an app level method for setting the global title (<code>setTitle()</code>)</p>\n",
      "filename": "/lib/plugins/sammy.title.js",
      "lineno": 12,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.Tmpl",
    {
      "name": "Sammy.Tmpl",
      "args": [
        "app",
        "method_alias"
      ],
      "doc": "<p><code>Sammy.Tmpl</code> is a small wrapper around the $.tmpl templating engine. You\ncan find more information and download the engine itself at\nhttps://github.com/jquery/jquery-tmpl</p>\n\n<p>Note: This does not include $.tmpl in the source. Please include $.tmpl.js before\nsammy.tmpl.js</p>\n",
      "filename": "/lib/plugins/sammy.tmpl.js",
      "lineno": 15,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": 43
    }
  ],
  [
    "Sammy.addLogger",
    {
      "name": "Sammy.addLogger",
      "args": [
        "logger"
      ],
      "doc": "<p>Add to the global logger pool. Takes a function that accepts an\nunknown number of arguments and should print them or send them somewhere\nThe first argument is always a timestamp.</p>\n",
      "filename": "/lib/sammy.js",
      "lineno": 95,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": null
    }
  ],
  [
    "Sammy.log",
    {
      "name": "Sammy.log",
      "args": [

      ],
      "doc": "<p>Sends a log message to each logger listed in the global\nloggers pool. Can take any number of arguments.\nAlso prefixes the arguments with a timestamp.</p>\n",
      "filename": "/lib/sammy.js",
      "lineno": 102,
      "methods": [

      ],
      "attributes": [

      ],
      "plugin": null
    }
  ]
]