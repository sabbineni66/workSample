webpackJsonp([0x6c9001f1a8e3],{1140:function(s,a){s.exports={data:{package:{type:"published",id:"bs-faker",name:"bs-faker",version:"1.3.0",category:"binding",flags:[],platforms:["browser","node"],description:"Faker.js bindings for BuckleScript in Reason",keywords:["utilities","testing"],license:"MIT",updated:"2019-01-12T08:30:40.227Z",stars:3,score:.6474158995109816,quality:.936391536980114,popularity:.04715683577889673,maintenance:.9999815596980957,readme:'<h1 id="bs-faker-build-status-bucklescript-binding-coverage"><a href="#bs-faker-build-status-bucklescript-binding-coverage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>bs-faker <a href="https://travis-ci.org/Schniz/bs-faker"><img src="https://travis-ci.org/Schniz/bs-faker.svg?branch=master" alt="Build Status"></a> <img src="https://img.shields.io/badge/binding%20coverage-135%2F148-yellowgreen.svg" alt="BuckleScript binding coverage"></h1>\n<blockquote>\n<p><a href="https://github.com/marak/Faker.js/">Faker.js</a> bindings for <a href="https://github.com/bloomberg/bucklescript">BuckleScript</a> in <a href="https://github.com/facebook/reason">Reason</a></p>\n</blockquote>\n<h1 id="install"><a href="#install" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Install</h1>\n<div class="redex-codeblock"><pre class="hljs lang-none"><code>npm install --save bs-faker</code></pre></div>\n<p>Then add <code>bs-faker</code> as a dependency to <code>bsconfig.json</code>:</p>\n<div class="redex-codeblock"><pre class="hljs lang-diff"><code>  ...\n  <span class="hljs-string">"bs-dependencies"</span>: [\n    <span class="hljs-comment">// add your dependencies here. You\'d usually install them normally through `npm install my-dependency`. If my-dependency has a bsconfig.json too, then everything will work seamlessly.</span>\n+   <span class="hljs-string">"bs-faker"</span>\n  ]\n  ...</code></pre></div>\n<h2 id="api"><a href="#api" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>API</h2>\n<p>When using optional params (<code>~param=?</code>), don\'t forget to add a unit <code>()</code> parameter in the end to invoke the function\nlike so:</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> narrowFood = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.food(~width=<span class="hljs-number">200</span>, ()); <span class="hljs-comment">/* =&gt; "https://someimage/with/width/of/200" */</span>\n\n<span class="hljs-comment">/* Without the optional parameters, you don\'t have to add the unit */</span>\n<span class="hljs-keyword">let</span> defaultFood = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.food(); <span class="hljs-comment">/* =&gt; "https://someimage/with/default/width" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> narrowFood = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.food ~width:<span class="hljs-number">200</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> defaultFood = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.food <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerfake"><a href="#bsfakerfake" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.fake</code></h3>\n<p>Creates a string with fake data using mustache style templates.\nReturns a safe, <code>result</code> type instead of throwing an error on runtime.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> message = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Faker</span>.fake(<span class="hljs-string">"Welcome aboard, {{name.firstName}}"</span>);\n<span class="hljs-keyword">switch</span> (message) {\n| <span class="hljs-type">Ok</span>(msg) =&gt; print_endline(msg)\n| <span class="hljs-type">Error</span>(<span class="hljs-number">_</span>) =&gt; print_endline(<span class="hljs-string">"Parsing error"</span>)\n};</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> message = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Faker</span>.fake <span class="hljs-string">"Welcome aboard, {{name.firstName}}"</span>\n<span class="hljs-keyword">let</span> _ =\n  <span class="hljs-keyword">match</span> message <span class="hljs-keyword">with</span>\n  | ((<span class="hljs-type">Ok</span> (msg))[@explicit_arity ]) -&gt; print_endline msg\n  | <span class="hljs-type">Error</span> _ -&gt; print_endline <span class="hljs-string">"Parsing error"</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerimage"><a href="#bsfakerimage" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Image</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> avatar = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.avatar(); <span class="hljs-comment">/* =&gt; string; "https://" */</span>\n<span class="hljs-keyword">let</span> abstract = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.abstract(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> animals = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.animals(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> business = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.business(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> cats = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.cats(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> city = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.city(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> dataUri = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.dataUri(~width: int=?, ~height: int=?, ()); <span class="hljs-comment">/* =&gt; string; "data:inage/svg+xml;..." */</span>\n<span class="hljs-keyword">let</span> fashion = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.fashion(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> food = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.food(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> image = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.image(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> imageUrl = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.imageUrl(~width: int=?, ~height: int=?, ~category: string=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/640/480" */</span>\n<span class="hljs-keyword">let</span> nature = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.nature(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> nightlife = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.nightlife(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> people = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.people(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> sports = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.sports(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> technics = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.technics(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span>\n<span class="hljs-keyword">let</span> transport = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Image</span>.transport(~width: int=?, ~height: int=?, ~randomize: bool=?, ()); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/..." */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">904</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakername"><a href="#bsfakername" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Name</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> findName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Name</span>.findName(~firstName: string=?, ~lastName: string=?, ~gender: string=?, ()); <span class="hljs-comment">/* =&gt; string; "Mollie Hills" */</span>\n<span class="hljs-keyword">let</span> firstName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Name</span>.firstName(~gender: string=?, ()); <span class="hljs-comment">/* =&gt; string; "Max" */</span>\n<span class="hljs-keyword">let</span> lastName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Name</span>.lastName(~gender: string=?, ()); <span class="hljs-comment">/* =&gt; string; "Bartoletti" */</span>\n<span class="hljs-keyword">let</span> <span class="hljs-keyword">prefix</span> = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Name</span>.<span class="hljs-keyword">prefix</span>(~gender: string=?, ()); <span class="hljs-comment">/* =&gt; string; "Dr." */</span>\n<span class="hljs-keyword">let</span> suffix = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Name</span>.suffix(); <span class="hljs-comment">/* =&gt; string; "MD" */</span>\n<span class="hljs-keyword">let</span> title = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Name</span>.title(); <span class="hljs-comment">/* =&gt; string; "Senior Creative Specialist" */</span>\n<span class="hljs-keyword">let</span> jobArea = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Name</span>.jobArea(); <span class="hljs-comment">/* =&gt; string; "Tactics" */</span>\n<span class="hljs-keyword">let</span> jobType = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Name</span>.jobType(); <span class="hljs-comment">/* =&gt; string; "Assistant" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">904</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerlorem"><a href="#bsfakerlorem" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Lorem</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> word = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Lorem</span>.word(); <span class="hljs-comment">/* =&gt; string; "Lorem" */</span>\n<span class="hljs-keyword">let</span> words = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Lorem</span>.words(~wordCount=<span class="hljs-number">3</span>, ()); <span class="hljs-comment">/* =&gt; string; "Lorem ipsum dolor" */</span>\n<span class="hljs-keyword">let</span> sentence = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Lorem</span>.sentence(~wordCount=<span class="hljs-number">5</span>, ()); <span class="hljs-comment">/* =&gt; string; "Lorem ipsum dolor est totam" */</span>\n<span class="hljs-keyword">let</span> slug = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Lorem</span>.slug(~wordCount=<span class="hljs-number">3</span>, ()); <span class="hljs-comment">/* =&gt; string; "lorem-ratione-est" */</span>\n<span class="hljs-keyword">let</span> sentences = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Lorem</span>.sentences(~sentenceCount=<span class="hljs-number">3</span>, ~separator=<span class="hljs-string">";;;"</span>, ()); <span class="hljs-comment">/* =&gt; string; "Lorem ipsum....;;;Et ratione est..." */</span>\n<span class="hljs-keyword">let</span> paragraph = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Lorem</span>.paragraph(~sentenceCount=<span class="hljs-number">2</span>, ()); <span class="hljs-comment">/* =&gt; string; "Et ratione est totam assumenda ..." */</span>\n<span class="hljs-keyword">let</span> paragraphs = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Lorem</span>.paragraphs(~paragraphCount=<span class="hljs-number">3</span>, ~separator=<span class="hljs-string">"\\n----\\n"</span>, ()); <span class="hljs-comment">/* =&gt; string */</span>\n<span class="hljs-keyword">let</span> text = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Lorem</span>.text(); <span class="hljs-comment">/* =&gt; string; "Et lorem est dolor totam... */</span>\n<span class="hljs-keyword">let</span> lines = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Lorem</span>.lines(~lineCount=<span class="hljs-number">3</span>, ()); <span class="hljs-comment">/* =&gt; string; */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code>unknown refmt error</code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerdate"><a href="#bsfakerdate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Date</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> past = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Date</span>.past(~years: int=?, ~refDate: <span class="hljs-type">Js</span>.<span class="hljs-type">Date</span>.t=?, ()); <span class="hljs-comment">/* =&gt; Js.Date.t; */</span>\n<span class="hljs-keyword">let</span> future = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Date</span>.future(~years: int=?, ~refDate: <span class="hljs-type">Js</span>.<span class="hljs-type">Date</span>.t=?, ()); <span class="hljs-comment">/* =&gt; Js.Date.t; */</span>\n<span class="hljs-keyword">let</span> between = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Date</span>.between(<span class="hljs-type">Js</span>.<span class="hljs-type">Date</span>.t, <span class="hljs-type">Js</span>.<span class="hljs-type">Date</span>.t); <span class="hljs-comment">/* =&gt; Js.Date.t; */</span>\n<span class="hljs-keyword">let</span> recent = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Date</span>.recent(~days: int=?, ()); <span class="hljs-comment">/* =&gt; Js.Date.t; */</span>\n<span class="hljs-keyword">let</span> month: (~abbr: bool=?, ~context: bool=?, ()); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> weekday: (~abbr: bool=?, ~context: bool=?, ()); <span class="hljs-comment">/* =&gt; string; */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">904</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakercompany"><a href="#bsfakercompany" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Company</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> suffixes = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.suffixes(); <span class="hljs-comment">/* =&gt; ["and Sons", "Co.", "Inc."] */</span>\n<span class="hljs-keyword">let</span> companyName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.companyName(~format=<span class="hljs-number">2</span>, ()); <span class="hljs-comment">/* =&gt; "Dewey, Cheatem and Howe" */</span>\n<span class="hljs-keyword">let</span> companySuffix = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.companySuffix(); <span class="hljs-comment">/* =&gt; "Co." */</span>\n<span class="hljs-keyword">let</span> catchPhrase = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.catchPhrase(); <span class="hljs-comment">/* =&gt; string */</span>\n<span class="hljs-keyword">let</span> bs = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.bs(); <span class="hljs-comment">/* =&gt; string */</span>\n<span class="hljs-keyword">let</span> catchPhraseAdjective = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.catchPhraseAdjective(); <span class="hljs-comment">/* =&gt; string */</span>\n<span class="hljs-keyword">let</span> catchPhraseDescriptor = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.catchPhraseDescriptor(); <span class="hljs-comment">/* =&gt; string */</span>\n<span class="hljs-keyword">let</span> catchPhraseNoun = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.catchPhraseNoun(); <span class="hljs-comment">/* =&gt; string */</span>\n<span class="hljs-keyword">let</span> bsAdjective = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.bsAdjective(); <span class="hljs-comment">/* =&gt; string */</span>\n<span class="hljs-keyword">let</span> bsBuzz = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.bsBuzz(); <span class="hljs-comment">/* =&gt; string */</span>\n<span class="hljs-keyword">let</span> bsNoun = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.bsNoun(); <span class="hljs-comment">/* =&gt; string */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> suffixes = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.suffixes <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> companyName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.companyName ~format:<span class="hljs-number">2</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> companySuffix = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.companySuffix <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> catchPhrase = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.catchPhrase <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> bs = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.bs <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> catchPhraseAdjective = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.catchPhraseAdjective <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> catchPhraseDescriptor = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.catchPhraseDescriptor <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> catchPhraseNoun = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.catchPhraseNoun <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> bsAdjective = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.bsAdjective <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> bsBuzz = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.bsBuzz <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> bsNoun = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Company</span>.bsNoun <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerphone"><a href="#bsfakerphone" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Phone</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> phoneNumber = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Phone</span>.phoneNumber(~format=<span class="hljs-string">"###.###.####"</span>, ()); <span class="hljs-comment">/* =&gt; string; "621.876.3963" */</span>\n<span class="hljs-keyword">let</span> phoneNumberFormat = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Phone</span>.phoneNumberFormat(~phoneFormatsIndex=<span class="hljs-number">0</span>); <span class="hljs-comment">/* =&gt; string; "107-646-3702" */</span>\n<span class="hljs-keyword">let</span> phoneFormats = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Phone</span>.phoneFormats(); <span class="hljs-comment">/* =&gt; string; "###-###-#### x###" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> phoneNumber = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Phone</span>.phoneNumber ~format:<span class="hljs-string">"###.###.####"</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> phoneNumberFormat = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Phone</span>.phoneNumberFormat ~phoneFormatsIndex:<span class="hljs-number">0</span>\n<span class="hljs-keyword">let</span> phoneFormats = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Phone</span>.phoneFormats <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerinternet"><a href="#bsfakerinternet" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Internet</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> userName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Internet</span>.userName(~firstName: string=?, ~lastName: string=?, ()); <span class="hljs-comment">/* =&gt; string; "Rage.Max123" */</span>\n<span class="hljs-keyword">let</span> avatar = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Internet</span>.avatar(); <span class="hljs-comment">/* =&gt; string; "https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg" */</span>\n<span class="hljs-keyword">let</span> email = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Internet</span>.email(); <span class="hljs-comment">/* =&gt; string; ": "foo.bar@gmail.com" */</span>\n<span class="hljs-keyword">let</span> exampleEmail = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Internet</span>.exampleEmail(); <span class="hljs-comment">/* =&gt; string; "foo.bar@example.org" */</span>\n<span class="hljs-keyword">let</span> <span class="hljs-class"><span class="hljs-keyword">protocol</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">protocol</span>(); /* =&gt; <span class="hljs-title">string</span>; "<span class="hljs-title">https</span>" */\n<span class="hljs-title">let</span> <span class="hljs-title">url</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">url</span>(); /* =&gt; <span class="hljs-title">string</span>; "<span class="hljs-title">https</span>://<span class="hljs-title">rashawn</span>.<span class="hljs-title">name</span>" */\n<span class="hljs-title">let</span> <span class="hljs-title">domainName</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">domainName</span>(); /* =&gt; <span class="hljs-title">string</span>; "<span class="hljs-title">marvin</span>.<span class="hljs-title">org</span>" */\n<span class="hljs-title">let</span> <span class="hljs-title">domainSuffix</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">domainSuffix</span>(); /* =&gt; <span class="hljs-title">string</span>; "<span class="hljs-title">net</span>" */\n<span class="hljs-title">let</span> <span class="hljs-title">domainWord</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">domainWord</span>(); /* =&gt; <span class="hljs-title">string</span>; "<span class="hljs-title">alyce</span>" */\n<span class="hljs-title">let</span> <span class="hljs-title">ip</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">ip</span>(); /* =&gt; <span class="hljs-title">string</span>; "97.238.241.11" */\n<span class="hljs-title">let</span> <span class="hljs-title">ipv6</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">ipv6</span>(); /* =&gt; <span class="hljs-title">string</span>; "2001:0<span class="hljs-title">db8</span>:6276:<span class="hljs-title">b1a7</span>:5213:22<span class="hljs-title">f1</span>:25<span class="hljs-title">df</span>:<span class="hljs-title">c8a0</span>" */\n<span class="hljs-title">let</span> <span class="hljs-title">userAgent</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">userAgent</span>(); /* =&gt; <span class="hljs-title">string</span>; "<span class="hljs-title">Mozilla</span>/5.0 (<span class="hljs-title">Macintosh</span>; <span class="hljs-title">U</span>; <span class="hljs-title">PPC</span> <span class="hljs-title">Mac</span> <span class="hljs-title">OS</span> <span class="hljs-title">X</span> 10<span class="hljs-title">_7_5</span> <span class="hljs-title">rv</span>:6.0; <span class="hljs-title">SL</span>) <span class="hljs-title">AppleWebKit</span>/532.0.1 (<span class="hljs-title">KHTML</span>, <span class="hljs-title">like</span> <span class="hljs-title">Gecko</span>)" */\n<span class="hljs-title">let</span> <span class="hljs-title">color</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">color</span>(); /* =&gt; <span class="hljs-title">string</span>; "#06267<span class="hljs-title">f</span>" */\n<span class="hljs-title">let</span> <span class="hljs-title">mac</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">mac</span>(); /* =&gt; <span class="hljs-title">string</span>; "78:06:<span class="hljs-title">cc</span>:<span class="hljs-title">ae</span>:<span class="hljs-title">b3</span>:81" */\n<span class="hljs-title">let</span> <span class="hljs-title">password</span> = <span class="hljs-title">BsFaker</span>.<span class="hljs-title">Internet</span>.<span class="hljs-title">password</span>(); /* =&gt; <span class="hljs-title">string</span>; "<span class="hljs-title">AM7zl6Mg</span>" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">904</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerrandom"><a href="#bsfakerrandom" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Random</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> alphaNumeric = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.alphaNumeric(~<span class="hljs-built_in">count</span>=<span class="hljs-number">5</span>, ()); <span class="hljs-comment">/* =&gt; string; "9fedl" */</span>\n<span class="hljs-keyword">let</span> arrayElement = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.arrayElement(~array=[| <span class="hljs-number">126</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">58</span>, <span class="hljs-number">31</span> |], ()); <span class="hljs-comment">/* =&gt; int; 58 */</span>\n<span class="hljs-keyword">let</span> boolean = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.boolean(); <span class="hljs-comment">/* =&gt; boolean; true */</span>\n<span class="hljs-keyword">let</span> image = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.image(); <span class="hljs-comment">/* =&gt; string; "http://lorempixel.com/640/480/city" */</span>\n<span class="hljs-keyword">let</span> locale = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.locale(); <span class="hljs-comment">/* =&gt; string; "sk" */</span>\n<span class="hljs-keyword">let</span> number = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.number(~<span class="hljs-built_in">min</span>=<span class="hljs-number">0</span>, ~<span class="hljs-built_in">max</span>=<span class="hljs-number">150</span>, ~precision=<span class="hljs-number">5</span>, ()); <span class="hljs-comment">/* =&gt; int; 65 */</span>\n<span class="hljs-keyword">let</span> uuid = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.uuid(); <span class="hljs-comment">/* =&gt; string; "053cf30a-e38a-4327-936a-e5e2991f6b7f" */</span>\n<span class="hljs-keyword">let</span> word = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.word(); <span class="hljs-comment">/* =&gt; string; "Gibraltar" */</span>\n<span class="hljs-keyword">let</span> words = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.words(~<span class="hljs-built_in">count</span>=<span class="hljs-number">3</span>, ()); <span class="hljs-comment">/* =&gt; string; "Savings Account function Executive" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> alphaNumeric = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.alphaNumeric ~count:<span class="hljs-number">5</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> arrayElement = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.arrayElement ~<span class="hljs-built_in">array</span>:[|<span class="hljs-number">126</span>;(-<span class="hljs-number">3</span>);<span class="hljs-number">58</span>;<span class="hljs-number">31</span>|] <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> boolean = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.boolean <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> image = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.image <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> locale = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.locale <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> number = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.number ~min:<span class="hljs-number">0</span> ~max:<span class="hljs-number">150</span> ~precision:<span class="hljs-number">5</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> uuid = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.uuid <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> word = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.word <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> words = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Random</span>.words ~count:<span class="hljs-number">3</span> <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerdatabase"><a href="#bsfakerdatabase" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Database</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> column = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Database</span>.column(); <span class="hljs-comment">/* =&gt; string; "id" */</span>\n<span class="hljs-keyword">let</span> type_ = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Database</span>.type_(); <span class="hljs-comment">/* =&gt; string; "byte" */</span>\n<span class="hljs-keyword">let</span> collation = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Database</span>.collation(); <span class="hljs-comment">/* =&gt; string; "utf8_unicode_ci" */</span>\n<span class="hljs-keyword">let</span> engine = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Database</span>.engine(); <span class="hljs-comment">/* =&gt; string; "MyISAM" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> column = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Database</span>.column <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> type_ = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Database</span>.type_ <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> collation = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Database</span>.collation <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> engine = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Database</span>.engine <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerhacker"><a href="#bsfakerhacker" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Hacker</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> abbreviation = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.abbreviation(); <span class="hljs-comment">/* =&gt; string; "XSS" */</span>\n<span class="hljs-keyword">let</span> adjective = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.adjective(); <span class="hljs-comment">/* =&gt; string; "primary" */</span>\n<span class="hljs-keyword">let</span> noun = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.noun(); <span class="hljs-comment">/* =&gt; string; "capacitor" */</span>\n<span class="hljs-keyword">let</span> verb = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.verb(); <span class="hljs-comment">/* =&gt; string; "synthesize" */</span>\n<span class="hljs-keyword">let</span> ingverb = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.ingverb(); <span class="hljs-comment">/* =&gt; string; "hacking" */</span>\n<span class="hljs-keyword">let</span> phrase = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.phrase(); <span class="hljs-comment">/* =&gt; string; "You can\'t transmit the program without overriding the bluetooth RSS port!" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> abbreviation = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.abbreviation <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> adjective = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.adjective <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> noun = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.noun <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> verb = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.verb <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> ingverb = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.ingverb <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> phrase = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Hacker</span>.phrase <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakersystem"><a href="#bsfakersystem" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.System</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> fileName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.fileName(); <span class="hljs-comment">/* =&gt; string; "optical.xsm" */</span>\n<span class="hljs-keyword">let</span> commonFileName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.commonFileName(~ext=<span class="hljs-string">"txt"</span>, ()); <span class="hljs-comment">/* =&gt; string; "redundant.txt" */</span>\n<span class="hljs-keyword">let</span> mimeType = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.mimeType(); <span class="hljs-comment">/* =&gt; string; "audio/webm" */</span>\n<span class="hljs-keyword">let</span> commonFileType = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.commonFileType(); <span class="hljs-comment">/* =&gt; string; "text" */</span>\n<span class="hljs-keyword">let</span> commonFileExt = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.commonFileExt(); <span class="hljs-comment">/* =&gt; string; "png" */</span>\n<span class="hljs-keyword">let</span> fileType = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.fileType(); <span class="hljs-comment">/* =&gt; string; "audio" */</span>\n<span class="hljs-keyword">let</span> fileExt = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.fileExt(~mimeType=<span class="hljs-string">"audio/webm"</span>, ()); <span class="hljs-comment">/* =&gt; string; "model" */</span>\n<span class="hljs-keyword">let</span> semver = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.semver(); <span class="hljs-comment">/* =&gt; string; "0.8.1" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> fileName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.fileName <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> commonFileName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.commonFileName ~ext:<span class="hljs-string">"txt"</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> mimeType = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.mimeType <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> commonFileType = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.commonFileType <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> commonFileExt = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.commonFileExt <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> fileType = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.fileType <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> fileExt = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.fileExt ~mimeType:<span class="hljs-string">"audio/webm"</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> semver = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">System</span>.semver <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakercommerce"><a href="#bsfakercommerce" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Commerce</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> color = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.color(); <span class="hljs-comment">/* =&gt; string; "maroon" */</span>\n<span class="hljs-keyword">let</span> department = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.department(); <span class="hljs-comment">/* =&gt; string; "Music" */</span>\n<span class="hljs-keyword">let</span> productName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.productName(); <span class="hljs-comment">/* =&gt; string; "Licensed Steel Keyboard" */</span>\n<span class="hljs-keyword">let</span> price = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.price(~<span class="hljs-built_in">min</span>=<span class="hljs-number">0</span>, ~<span class="hljs-built_in">max</span>=<span class="hljs-number">1000</span>, ~decimal=<span class="hljs-number">2</span>, ~symbol=<span class="hljs-string">"$"</span>, ()); <span class="hljs-comment">/* =&gt; string; "$580.00" */</span>\n<span class="hljs-keyword">let</span> productAdjective = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.productAdjective(); <span class="hljs-comment">/* =&gt; string; "Handcrafted" */</span>\n<span class="hljs-keyword">let</span> productMaterial = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.productMaterial(); <span class="hljs-comment">/* =&gt; string; "Granite" */</span>\n<span class="hljs-keyword">let</span> product = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.product(); <span class="hljs-comment">/* =&gt; string; "Salad" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> color = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.color <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> department = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.department <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> productName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.productName <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> price = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.price ~min:<span class="hljs-number">0</span> ~max:<span class="hljs-number">1000</span> ~decimal:<span class="hljs-number">2</span> ~symbol:<span class="hljs-string">"$"</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> productAdjective = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.productAdjective <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> productMaterial = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.productMaterial <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> product = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Commerce</span>.product <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerlocale"><a href="#bsfakerlocale" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Locale</code></h3>\n<p><code>setLocale</code> function accepts parameter in form of variant.\nThe variant\'s constructors are capitalized locale ids of available locales, i.e. <code>Az</code> | <code>Cz</code> | <code>De</code> | <code>En_GB</code> etc.</p>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> () = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Locale</span>.setLocale(<span class="hljs-type">Sk</span>); <span class="hljs-comment">/* =&gt; unit */</span>\n<span class="hljs-keyword">let</span> locale = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Locale</span>.getLocale(); <span class="hljs-comment">/* =&gt; string; "sk" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> <span class="hljs-literal">()</span> = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Locale</span>.setLocale <span class="hljs-type">Sk</span>\n<span class="hljs-keyword">let</span> locale = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Locale</span>.getLocale <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakerfinance"><a href="#bsfakerfinance" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Finance</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> account = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.account(~length=<span class="hljs-number">4</span>, ()); <span class="hljs-comment">/* =&gt; string; "6738" */</span>\n<span class="hljs-keyword">let</span> accountName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.accountName(); <span class="hljs-comment">/* =&gt; string; "Personal Loan Account" */</span>\n<span class="hljs-keyword">let</span> amount = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.amount(~<span class="hljs-built_in">min</span>=<span class="hljs-number">50</span>, ~<span class="hljs-built_in">max</span>=<span class="hljs-number">100</span>, ~dec=<span class="hljs-number">2</span>, ~symbol=<span class="hljs-string">"$"</span>, ()); <span class="hljs-comment">/* =&gt; string; "$53.54" */</span>\n<span class="hljs-keyword">let</span> bic = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.bic(); <span class="hljs-comment">/* =&gt; string; "DYTOFXJ1362" */</span>\n<span class="hljs-keyword">let</span> bitcoinAddress = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.bitcoinAddress(); <span class="hljs-comment">/* =&gt; string; "17C4J6I0UE9O4Y5UCOFCWLG2RYPA5HMP" */</span>\n<span class="hljs-keyword">let</span> currencyCode = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.currencyCode(); <span class="hljs-comment">/* =&gt; string; "KMF" */</span>\n<span class="hljs-keyword">let</span> currencyName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.currencyName(); <span class="hljs-comment">/* =&gt; string; "Zloty" */</span>\n<span class="hljs-keyword">let</span> currencySymbol = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.currencySymbol(); <span class="hljs-comment">/* =&gt; string; "CHF" */</span>\n<span class="hljs-keyword">let</span> iban = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.iban(); <span class="hljs-comment">/* =&gt; string; "SE1400277200550070250082" */</span>\n<span class="hljs-keyword">let</span> mask = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.mask(~length=<span class="hljs-number">4</span>, ~parens=<span class="hljs-literal">true</span>, ~ellipsis=<span class="hljs-literal">true</span>, ()); <span class="hljs-comment">/* =&gt; string; "(...8899)" */</span>\n<span class="hljs-keyword">let</span> transactionType = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.transactionType(); <span class="hljs-comment">/* =&gt; string; "invoice" */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> account = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.account ~length:<span class="hljs-number">4</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> accountName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.accountName <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> amount = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.amount ~min:<span class="hljs-number">50</span> ~max:<span class="hljs-number">100</span> ~dec:<span class="hljs-number">2</span> ~symbol:<span class="hljs-string">"$"</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> bic = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.bic <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> bitcoinAddress = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.bitcoinAddress <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> currencyCode = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.currencyCode <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> currencyName = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.currencyName <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> currencySymbol = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.currencySymbol <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> iban = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.iban <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> mask = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.mask ~length:<span class="hljs-number">4</span> ~parens:<span class="hljs-literal">true</span> ~ellipsis:<span class="hljs-literal">true</span> <span class="hljs-literal">()</span>\n<span class="hljs-keyword">let</span> transactionType = <span class="hljs-type">BsFaker</span>.<span class="hljs-type">Finance</span>.transactionType <span class="hljs-literal">()</span></code></pre>\n      </div>\n    </div>\n  \n<h3 id="bsfakeraddress"><a href="#bsfakeraddress" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>BsFaker.Address</code></h3>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> city = (~format: string=?, ()); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> cityPrefix = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> citySuffix = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> country = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> countryCode = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> county = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> latitude = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> longitude = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> secondaryAddress = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> state = (~useAbbr: bool=?, ()); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> stateAbbr = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> streetAddress = (~useFullAddress: bool=?, ()); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> streetName = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> streetPrefix = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> streetSuffix = (); <span class="hljs-comment">/* =&gt; string; */</span>\n<span class="hljs-keyword">let</span> zipCode = (~format: string=?, ()); <span class="hljs-comment">/* =&gt; string; */</span></code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-number">128</span>: &lt;<span class="hljs-type">UNKNOWN</span> <span class="hljs-type">SYNTAX</span> <span class="hljs-type">ERROR</span>&gt;</code></pre>\n      </div>\n    </div>\n  \n<h1 id="testing-the-library"><a href="#testing-the-library" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Testing the library</h1>\n<div class="redex-codeblock"><pre class="hljs lang-none"><code>npm <span class="hljs-built_in">test</span></code></pre></div>\n<p>this will compile and execute tests with <code>bs-jest</code></p>\n<h1 id="contributions"><a href="#contributions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Contributions</h1>\n<p>Don\'t hesitate to open a PR with a new binding - while bumping up the amount of covered bindings in the README.\nThere are tests, use them and write the most simple test you can think of to make sure that the bindings work correctly.\n<a href="CONTRIBUTING.md">You can read more about contributing here</a></p>\n',
homepageUrl:"https://github.com/Schniz/bs-faker#readme",repositoryUrl:"https://github.com/Schniz/bs-faker",npmUrl:"https://www.npmjs.com/package/bs-faker",issuesUrl:"https://github.com/Schniz/bs-faker/issues",slug:"/package/bs-faker"}},pathContext:{id:"bs-faker"}}}});
//# sourceMappingURL=path---package-bs-faker-87801f620169ec24b242.js.map