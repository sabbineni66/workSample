webpackJsonp([71038036364555],{1039:function(s,a){s.exports={data:{package:{id:"bs-knex",stars:1,name:"bs-knex",version:"0.10.2",category:"binding",flags:["neglected"],platforms:["browser","node"],description:"BuckleScript interface to the node 'knex' library",keywords:["sql"],license:"BSD-2-Clause",updated:"2018-01-15T15:56:51.631Z",type:"published",score:.49142879602247735,quality:.440397917756012,popularity:.0436060704865425,maintenance:.9829922743582398,readme:'<h1 id="bs-knex"><a href="#bs-knex" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>bs-knex</h1>\n<p>BuckleScript utilities for working with the Node <a href="http://knexjs.org/">knex</a> library.</p>\n<h2 id="example"><a href="#example" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example</h2>\n\n    <div class="redex-codeblock m-tabbed">\n      <ul>\n        <li class="reason s-selected"> RE\n        <li class="ml"> ML\n      </ul>\n      <div class="codeblock reason s-selected">\n        <pre class="hljs lang-reason"><code><span class="hljs-keyword">let</span> knex = <span class="hljs-type">Knex</span>.make({\n  <span class="hljs-string">"client"</span>: <span class="hljs-string">"pg"</span>,\n  <span class="hljs-string">"connection"</span>: {\n    <span class="hljs-string">"user"</span>: <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.username,\n    <span class="hljs-string">"password"</span>: <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.password,\n    <span class="hljs-string">"host"</span>: <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.hostname,\n    <span class="hljs-string">"port"</span>: <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.port,\n    <span class="hljs-string">"database"</span>: <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.name\n  },\n  <span class="hljs-string">"pool"</span>: {\n    <span class="hljs-string">"min"</span>: <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.poolMin,\n    <span class="hljs-string">"max"</span>: <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.poolMax,\n    <span class="hljs-string">"idleTimeoutMillis"</span>: <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.poolIdle\n  },\n  <span class="hljs-string">"acquireConnectionTimeout"</span>: <span class="hljs-number">2000</span>\n});\n\n<span class="hljs-keyword">let</span> users = [@bs] knex(<span class="hljs-string">"users"</span>, <span class="hljs-type">Js</span>.<span class="hljs-type">Nullable</span>.null);\n\n<span class="hljs-keyword">let</span> promise = (user: <span class="hljs-type">Js</span>.t(\'a)) =&gt;\n  users\n  |&gt; insert({\n        <span class="hljs-string">"user_name"</span>: user##userName,\n        <span class="hljs-string">"display_name"</span>: user##displayName,\n        <span class="hljs-string">"email"</span>: user##email\n      })\n  |&gt; returning(<span class="hljs-string">"*"</span>)\n  |&gt; toPromise\n  |&gt; then_(handleResponse(~error=<span class="hljs-string">"Unable to add User."</span>))\n  |&gt; then_(pickFirst)\n  |&gt; handleUniqueError(\n        ~name=<span class="hljs-string">"users_email_unique"</span>,\n        ~message=<span class="hljs-string">"That email address is already in use."</span>\n      )\n  |&gt; handleUniqueError(\n        ~name=<span class="hljs-string">"users_user_name_unique"</span>,\n        ~message=<span class="hljs-string">"That user name is already in use."</span>\n      )\n  |&gt; handleDbErrors;</code></pre>\n      </div>\n      <div class="codeblock ml">\n        <pre class="hljs lang-ml"><code><span class="hljs-keyword">let</span> knex =\n  <span class="hljs-type">Knex</span>.make\n    ([%bs.obj\n       {\n         client = <span class="hljs-string">"pg"</span>;\n         connection =\n           ([%bs.obj\n              {\n                user = <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.username;\n                password = <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.password;\n                host = <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.hostname;\n                port = <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.port;\n                database = <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.name\n              }]);\n         pool =\n           ([%bs.obj\n              {\n                min = <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.poolMin;\n                max = <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.poolMax;\n                idleTimeoutMillis = <span class="hljs-type">Config</span>.<span class="hljs-type">Database</span>.poolIdle\n              }]);\n         acquireConnectionTimeout = <span class="hljs-number">2000</span>\n       }])\n<span class="hljs-keyword">let</span> users = ((knex <span class="hljs-string">"users"</span> <span class="hljs-type">Js</span>.<span class="hljs-type">Nullable</span>.null)[@bs ])\n<span class="hljs-keyword">let</span> promise (user : <span class="hljs-symbol">\'a</span> <span class="hljs-type">Js</span>.t) =\n  (((((((users |&gt;\n           (insert\n              ([%bs.obj\n                 {\n                   user_name = (## user userName);\n                   display_name = (## user displayName);\n                   email = (## user email)\n                 }])))\n          |&gt; (returning <span class="hljs-string">"*"</span>))\n         |&gt; toPromise)\n        |&gt; (then_ (handleResponse ~error:<span class="hljs-string">"Unable to add User."</span>)))\n       |&gt; (then_ pickFirst))\n      |&gt;\n      (handleUniqueError ~name:<span class="hljs-string">"users_email_unique"</span>\n         ~message:<span class="hljs-string">"That email address is already in use."</span>))\n     |&gt;\n     (handleUniqueError ~name:<span class="hljs-string">"users_user_name_unique"</span>\n        ~message:<span class="hljs-string">"That user name is already in use."</span>))\n    |&gt; handleDbErrors</code></pre>\n      </div>\n    </div>\n  \n',homepageUrl:"https://github.com/ecliptic/bucklescript-tools#readme",repositoryUrl:"https://github.com/ecliptic/bucklescript-tools",npmUrl:"https://www.npmjs.com/package/bs-knex",issuesUrl:"https://github.com/ecliptic/bucklescript-tools/issues",slug:"/package/bs-knex"}},pathContext:{id:"bs-knex"}}}});
//# sourceMappingURL=path---package-bs-knex-ba0a8d57b51abfd0180d.js.map